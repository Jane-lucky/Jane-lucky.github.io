<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>协程泄露</title>
    <link href="/2022/09/08/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%8D%8F%E7%A8%8B%E6%B3%84%E9%9C%B2/"/>
    <url>/2022/09/08/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%8D%8F%E7%A8%8B%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>goroutine创建后，长时间得不到释放，并且不断地创建新的goroutine协程（尽管协程轻量，但也造不住指数级递增），导致内存耗尽，程序崩溃。</p><h1 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>time包方法详解</title>
    <link href="/2022/09/08/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/Time/"/>
    <url>/2022/09/08/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/Time/</url>
    
    <content type="html"><![CDATA[<h1 id="time-Now"><a href="#time-Now" class="headerlink" title="time.Now"></a>time.Now</h1><p>获取当前时间.</p><h1 id="time-Until"><a href="#time-Until" class="headerlink" title="time.Until"></a>time.Until</h1><p>保存时间值t，用于评估直到时间t的持续时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//获取当前时间</span><br>t := time.Now()<br>fmt.Println(<span class="hljs-string">&quot;Duration until t:&quot;</span>, time.Until(t)) <span class="hljs-comment">//Duration until t: -112ns</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="time-AfterFunc"><a href="#time-AfterFunc" class="headerlink" title="time.AfterFunc"></a>time.AfterFunc</h1><p>用于等待经过的时间，也就是在经历时间之后执行方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>waitchan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>time.AfterFunc(time.Second*<span class="hljs-number">5</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;AfterFunc excuted&quot;</span>)<br>waitchan &lt;- <span class="hljs-number">1</span><br>&#125;)<br>&lt;-waitchan<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>互斥锁-sync.Mutex</title>
    <link href="/2022/09/06/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E4%BA%92%E6%96%A5%E9%94%81-sync.Mutex/"/>
    <url>/2022/09/06/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E4%BA%92%E6%96%A5%E9%94%81-sync.Mutex/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>go语言中的一种互斥锁，保证同步的一种工具。</p><p>实现协程对互斥资源的访问，其中，<code>Lock()</code>用于争夺锁资源，<code>Unlock()</code>用于释放锁资源并唤醒等待队列中的协程。在正常的使用情况下（如代码所示），只有进入临界区的协程会执行<code>Unlock()</code>。因此，<strong>同一时刻只有一个协程可以执行<code>Unlock()</code>方法</strong>。</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>避免多个线程在同一个时刻操作同一数据块。</li><li>协调多个线程，避免在同一时刻执行同一个代码块</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br>mu.Lock() <span class="hljs-comment">// 加锁</span><br><span class="hljs-comment">// 执行业务逻辑</span><br>mu.Unlock() <span class="hljs-comment">// 释放锁</span><br></code></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//结构体</span><br><span class="hljs-keyword">type</span> Mutex <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//互斥锁</span><br>state <span class="hljs-type">int32</span><br>sema  <span class="hljs-type">uint32</span><br>&#125;<br><span class="hljs-comment">//常量</span><br><span class="hljs-keyword">const</span> (<br>mutexLocked = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span> <span class="hljs-comment">// mutex is locked</span><br>mutexWoken<br>mutexStarving<br>mutexWaiterShift = <span class="hljs-literal">iota</span><br><br>starvationThresholdNs = <span class="hljs-number">1e6</span><br>)<br></code></pre></td></tr></table></figure><p><strong>状态二进制表示</strong></p><table><thead><tr><th>字段</th><th>十进制</th><th>二进制</th><th>名称</th></tr></thead><tbody><tr><td>mutexLocked</td><td>1</td><td>0001</td><td>加锁</td></tr><tr><td>mutexUnLocked</td><td>0</td><td>0000</td><td>未加锁</td></tr><tr><td>mutexWoken</td><td>2</td><td>0010</td><td>唤醒</td></tr><tr><td>mutexStarving</td><td>4</td><td>0100</td><td>饥饿</td></tr><tr><td>mutexWaiterShift</td><td>3</td><td>0011</td><td>代表位移</td></tr></tbody></table><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Locker</span> interface &#123;<br><span class="hljs-type">Lock</span>()<br><span class="hljs-type">Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Lock() &#123;<br><span class="hljs-comment">// Fast path: grab unlocked mutex.</span><br>    <span class="hljs-comment">//CSA判断锁的状态，如果执行CAS把互斥锁状态从0设置成1，则加锁成功，返回</span><br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class="hljs-number">0</span>, mutexLocked) &#123;<br>        <span class="hljs-comment">//race检测</span><br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 存在多个线程，设置失败之后，表示存在冲突，执行该方式</span><br>m.lockSlow()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lockSlow"><a href="#lockSlow" class="headerlink" title="lockSlow"></a>lockSlow</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> lockSlow() &#123;<br><span class="hljs-keyword">var</span> waitStartTime <span class="hljs-type">int64</span><br>    <span class="hljs-comment">//饥饿状态</span><br>starving := <span class="hljs-literal">false</span><br>    <span class="hljs-comment">//唤醒状态</span><br>awoke := <span class="hljs-literal">false</span><br>    <span class="hljs-comment">//循环次数</span><br>iter := <span class="hljs-number">0</span><br>    <span class="hljs-comment">//当前锁的状态</span><br>old := m.state<br>    <span class="hljs-comment">//循环</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span><br><span class="hljs-comment">// so we won&#x27;t be able to acquire the mutex anyway.</span><br>        <span class="hljs-comment">//不要在饥饿模式下旋转，所有权将移交给服务员，所以我门不再获得锁</span><br>        <span class="hljs-comment">//判断old&amp;(0001|0100)==0001——》old&amp;0101是否等于0001，则old只能为0001（加锁）等，不可能是被唤醒或者饥饿状态</span><br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;<br><span class="hljs-comment">// Active spinning makes sense.</span><br><span class="hljs-comment">// Try to set mutexWoken flag to inform Unlock</span><br><span class="hljs-comment">// to not wake other blocked goroutines.</span><br>            <span class="hljs-comment">//将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了</span><br><span class="hljs-keyword">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class="hljs-number">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class="hljs-number">0</span> &amp;&amp;<br>atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;<br>awoke = <span class="hljs-literal">true</span><br>&#125;<br>            <span class="hljs-comment">//自主旋转</span><br>runtime_doSpin()<br>iter++<br>            <span class="hljs-comment">//更新锁的状态</span><br>old = m.state<br><span class="hljs-keyword">continue</span><br>&#125;<br>        <br>          <span class="hljs-comment">// 到了这一步， state的状态可能是：</span><br>          <span class="hljs-comment">// 1. 锁还没有被释放，锁处于正常状态</span><br>          <span class="hljs-comment">// 2. 锁还没有被释放， 锁处于饥饿状态</span><br>          <span class="hljs-comment">// 3. 锁已经被释放， 锁处于正常状态</span><br>          <span class="hljs-comment">// 4. 锁已经被释放， 锁处于饥饿状态</span><br>          <span class="hljs-comment">//</span><br><span class="hljs-built_in">new</span> := old<br><span class="hljs-comment">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span><br>        <span class="hljs-comment">//获取不是饥饿锁状态，新到达的协程在队列中</span><br>        <span class="hljs-comment">//old&amp;0100==0000</span><br><span class="hljs-keyword">if</span> old&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> |= mutexLocked<br>&#125;<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> += <span class="hljs-number">1</span> &lt;&lt; mutexWaiterShift<br>&#125;<br><span class="hljs-comment">// The current goroutine switches mutex to starvation mode.</span><br><span class="hljs-comment">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span><br><span class="hljs-comment">// Unlock expects that starving mutex has waiters, which will not</span><br><span class="hljs-comment">// be true in this case.</span><br><span class="hljs-keyword">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> |= mutexStarving<br>&#125;<br><span class="hljs-keyword">if</span> awoke &#123;<br><span class="hljs-comment">// The goroutine has been woken from sleep,</span><br><span class="hljs-comment">// so we need to reset the flag in either case.</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexWoken == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: inconsistent mutex state&quot;</span>)<br>&#125;<br><span class="hljs-built_in">new</span> &amp;^= mutexWoken<br>&#125;<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span> <span class="hljs-comment">// locked the mutex with CAS</span><br>&#125;<br><span class="hljs-comment">// If we were already waiting before, queue at the front of the queue.</span><br>queueLifo := waitStartTime != <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> waitStartTime == <span class="hljs-number">0</span> &#123;<br>waitStartTime = runtime_nanotime()<br>&#125;<br>runtime_SemacquireMutex(&amp;m.sema, queueLifo, <span class="hljs-number">1</span>)<br>starving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs<br>old = m.state<br><span class="hljs-keyword">if</span> old&amp;mutexStarving != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// If this goroutine was woken and mutex is in starvation mode,</span><br><span class="hljs-comment">// ownership was handed off to us but mutex is in somewhat</span><br><span class="hljs-comment">// inconsistent state: mutexLocked is not set and we are still</span><br><span class="hljs-comment">// accounted as waiter. Fix that.</span><br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexWoken) != <span class="hljs-number">0</span> || old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: inconsistent mutex state&quot;</span>)<br>&#125;<br>delta := <span class="hljs-type">int32</span>(mutexLocked - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift)<br><span class="hljs-keyword">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// Exit starvation mode.</span><br><span class="hljs-comment">// Critical to do it here and consider wait time.</span><br><span class="hljs-comment">// Starvation mode is so inefficient, that two goroutines</span><br><span class="hljs-comment">// can go lock-step infinitely once they switch mutex</span><br><span class="hljs-comment">// to starvation mode.</span><br>delta -= mutexStarving<br>&#125;<br>atomic.AddInt32(&amp;m.state, delta)<br><span class="hljs-keyword">break</span><br>&#125;<br>awoke = <span class="hljs-literal">true</span><br>iter = <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>old = m.state<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Unlock unlocks m.</span><br><span class="hljs-comment">// It is a run-time error if m is not locked on entry to Unlock.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// A locked Mutex is not associated with a particular goroutine.</span><br><span class="hljs-comment">// It is allowed for one goroutine to lock a Mutex and then</span><br><span class="hljs-comment">// arrange for another goroutine to unlock it.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Unlock() &#123;<br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>_ = m.state<br>race.Release(unsafe.Pointer(m))<br>&#125;<br><br><span class="hljs-comment">// Fast path: drop lock bit.</span><br><span class="hljs-built_in">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span> != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Outlined slow path to allow inlining the fast path.</span><br><span class="hljs-comment">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>m.unlockSlow(<span class="hljs-built_in">new</span>)<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="Unlock"><a href="#Unlock" class="headerlink" title="Unlock"></a>Unlock</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Unlock() &#123;<br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>_ = m.state<br>race.Release(unsafe.Pointer(m))<br>&#125;<br><br><span class="hljs-comment">// Fast path: drop lock bit.</span><br><span class="hljs-built_in">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span> != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Outlined slow path to allow inlining the fast path.</span><br><span class="hljs-comment">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>m.unlockSlow(<span class="hljs-built_in">new</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> unlockSlow(<span class="hljs-built_in">new</span> <span class="hljs-type">int32</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">new</span>+mutexLocked)&amp;mutexLocked == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br>old := <span class="hljs-built_in">new</span><br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">if</span> old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// Grab the right to wake someone.</span><br><span class="hljs-built_in">new</span> = (old - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">false</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>old = m.state<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="unlockSlow"><a href="#unlockSlow" class="headerlink" title="unlockSlow"></a>unlockSlow</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> unlockSlow(<span class="hljs-built_in">new</span> <span class="hljs-type">int32</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">new</span>+mutexLocked)&amp;mutexLocked == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br>old := <span class="hljs-built_in">new</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// If there are no waiters or a goroutine has already</span><br><span class="hljs-comment">// been woken or grabbed the lock, no need to wake anyone.</span><br><span class="hljs-comment">// In starvation mode ownership is directly handed off from unlocking</span><br><span class="hljs-comment">// goroutine to the next waiter. We are not part of this chain,</span><br><span class="hljs-comment">// since we did not observe mutexStarving when we unlocked the mutex above.</span><br><span class="hljs-comment">// So get off the way.</span><br><span class="hljs-keyword">if</span> old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// Grab the right to wake someone.</span><br><span class="hljs-built_in">new</span> = (old - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">false</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>old = m.state<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Starving mode: handoff mutex ownership to the next waiter, and yield</span><br><span class="hljs-comment">// our time slice so that the next waiter can start to run immediately.</span><br><span class="hljs-comment">// Note: mutexLocked is not set, the waiter will set it after wakeup.</span><br><span class="hljs-comment">// But mutex is still considered locked if mutexStarving is set,</span><br><span class="hljs-comment">// so new coming goroutines won&#x27;t acquire it.</span><br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TryLock"><a href="#TryLock" class="headerlink" title="TryLock"></a>TryLock</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> TryLock() <span class="hljs-type">bool</span> &#123;<br>old := m.state<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// There may be a goroutine waiting for the mutex, but we are</span><br><span class="hljs-comment">// running now and can try to grab the mutex before that</span><br><span class="hljs-comment">// goroutine wakes up.</span><br><span class="hljs-keyword">if</span> !atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexLocked) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.cn/post/6958979192574705701">[Go并发] - Mutex源码解析  </a>          </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/09/06/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/09/06/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>只能开启一个线程，只有一个实例，并且能够实现自我实例化</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>直接创建好对象，不需要判断为空，线程安全。</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>非线程安全，也就是多线程下可能创建多次对象。</p><p>线程安全，利用加锁保证线程安全，但由于每次调用都有加锁的操作，性能相较于不高效。</p><h2 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h2><p>在懒汉式的基础上进行优化，判少加锁的操作。</p><h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><p>确保创建对象的方法只执行一次。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>context源码学习</title>
    <link href="/2022/09/05/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/context/"/>
    <url>/2022/09/05/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/context/</url>
    
    <content type="html"><![CDATA[<p>go:1.18.5</p><h1 id="context包架构布局"><a href="#context包架构布局" class="headerlink" title="context包架构布局"></a>context包架构布局</h1><table><thead><tr><th>类型</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>Context</td><td>接口</td><td>定义了 Context 接口的四个方法</td></tr><tr><td>emptyCtx</td><td>结构体</td><td>实现了 Context 接口，它其实是个空的 context</td></tr><tr><td>CancelFunc</td><td>函数</td><td>取消函数</td></tr><tr><td>canceler</td><td>接口</td><td>context 取消接口，定义了两个方法</td></tr><tr><td>cancelCtx</td><td>结构体</td><td>可以被取消</td></tr><tr><td>timerCtx</td><td>结构体</td><td>超时会被取消</td></tr><tr><td>valueCtx</td><td>结构体</td><td>可以存储 k-v 对</td></tr><tr><td>Background</td><td>函数</td><td>返回一个空的 context，常作为根 context</td></tr><tr><td>TODO</td><td>函数</td><td>返回一个空的 context，常用于重构时期，没有合适的 context 可用</td></tr><tr><td>WithCancel</td><td>函数</td><td>基于父 context，生成一个可以取消的 context</td></tr><tr><td>newCancelCtx</td><td>函数</td><td>创建一个可取消的 context</td></tr><tr><td>propagateCancel</td><td>函数</td><td>向下传递 context 节点间的取消关系</td></tr><tr><td>parentCancelCtx</td><td>函数</td><td>找到第一个可取消的父节点</td></tr><tr><td>removeChild</td><td>函数</td><td>去掉父节点的孩子节点</td></tr><tr><td>init</td><td>函数</td><td>包初始化</td></tr><tr><td>WithDeadline</td><td>函数</td><td>创建一个有 deadline 的 context</td></tr><tr><td>WithTimeout</td><td>函数</td><td>创建一个有 timeout 的 context</td></tr><tr><td>WithValue</td><td>函数</td><td>创建一个存储 k-v 对的 context</td></tr></tbody></table><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="context"><a href="#context" class="headerlink" title="context"></a><strong>context</strong></h3><p>定义4个方法，都是幂等，也就是多次执行返回的结果一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Context <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// 返回context是否会被取消以及自动取消的时间</span><br>Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>)<br><br><span class="hljs-comment">//context被取消或deadline的时候，返回一个关闭的chan</span><br>Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-comment">//Done之后，返回context的原因</span><br>Err() <span class="hljs-type">error</span><br><br><span class="hljs-comment">//获取key对应的alue</span><br>Value(key any) any<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="canceler"><a href="#canceler" class="headerlink" title="canceler"></a><strong>canceler</strong></h3><p>说明context是可以取消的。</p><ul><li>“取消”操作应该是建议性，而非强制性</li></ul><p>caller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。</p><ul><li>“取消”操作应该可传递</li></ul><p>“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，<code>Done()</code> 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> canceler <span class="hljs-keyword">interface</span> &#123;<br>cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>)<br>Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="emptyCtx"><a href="#emptyCtx" class="headerlink" title="emptyCtx"></a>emptyCtx</h3><p>它被包装成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    <span class="hljs-comment">//BackGround返回一个非空的context，且绝不会被取消，没有值和取消时间。通常用在main函数、初始化和测试中或者作为输入请求的高context</span><br><span class="hljs-comment">// Background returns a non-nil, empty Context. It is never canceled, has no</span><br><span class="hljs-comment">// values, and has no deadline. It is typically used by the main function,</span><br><span class="hljs-comment">// initialization, and tests, and as the top-level Context for incoming</span><br><span class="hljs-comment">// requests.</span><br>background = <span class="hljs-built_in">new</span>(emptyCtx)<br>    <span class="hljs-comment">//TODO返回一个非空的context，代码可以使用context。当不清楚采用那种context或者不确定是都有用可以采用TODO，</span><br><span class="hljs-comment">// TODO returns a non-nil, empty Context. Code should use context.TODO when</span><br><span class="hljs-comment">// it&#x27;s unclear which Context to use or it is not yet available (because the</span><br><span class="hljs-comment">// surrounding function has not yet been extended to accept a Context</span><br><span class="hljs-comment">// parameter).</span><br>todo       = <span class="hljs-built_in">new</span>(emptyCtx)<br>)<br></code></pre></td></tr></table></figure><p>background通常用在main函数中，作为context的根节点。</p><h3 id="cancelCtx"><a href="#cancelCtx" class="headerlink" title="cancelCtx"></a>cancelCtx</h3><p>可取消的context，他可以确保父被取消的时候，其余的子context也会被取消。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//</span><br><span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br><br>mu       sync.Mutex            <span class="hljs-comment">// protects following fields</span><br>done     atomic.Value          <span class="hljs-comment">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span><br>children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// set to nil by the first cancel call</span><br>err      <span class="hljs-type">error</span>                 <span class="hljs-comment">// set to non-nil by the first cancel call</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，value、Done、String、Err等均实现了canceler方法。</p><p><code>Done</code>方法的实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br>d := c.done.Load()<br><span class="hljs-keyword">if</span> d != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> d.(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br>d = c.done.Load()<br><span class="hljs-keyword">if</span> d == <span class="hljs-literal">nil</span> &#123;<br>d = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>c.done.Store(d)<br>&#125;<br><span class="hljs-keyword">return</span> d.(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。</p><p><code>value</code>方法实现:返回取消的key值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Value(key any) any &#123;<br><span class="hljs-keyword">if</span> key == &amp;cancelCtxKey &#123;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><span class="hljs-keyword">return</span> value(c.Context, key)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>cancel</code>方法实现</p><p>关闭所有的channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">//传入err</span><br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)<br>&#125;<br>c.mu.Lock()<br>    <span class="hljs-comment">//判断是否已经取消，因为Done之后会返回取消原因，因此采用err的的方法判断是否取消</span><br><span class="hljs-keyword">if</span> c.err != <span class="hljs-literal">nil</span> &#123;<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// already canceled</span><br>&#125;<br>c.err = err<br>d, _ := c.done.Load().(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>    <span class="hljs-comment">//关闭channel，通知其他协程</span><br><span class="hljs-keyword">if</span> d == <span class="hljs-literal">nil</span> &#123;<br>c.done.Store(closedchan)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">close</span>(d)<br>&#125;<br>    <span class="hljs-comment">//遍历循环子context关闭</span><br><span class="hljs-keyword">for</span> child := <span class="hljs-keyword">range</span> c.children &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>child.cancel(<span class="hljs-literal">false</span>, err)<br>&#125;<br>    <span class="hljs-comment">//子结点置空</span><br>c.children = <span class="hljs-literal">nil</span><br>c.mu.Unlock()<br><br>    <span class="hljs-comment">//如果为True，将自己从父节点删除</span><br><span class="hljs-keyword">if</span> removeFromParent &#123;<br>removeChild(c.Context, c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建可取消的cancel方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCancel</span><span class="hljs-params">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;<br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>c := newCancelCtx(parent)<br>    <span class="hljs-comment">//向上遍历可删除的父节点以及他的子结点进行删除</span><br>    <span class="hljs-comment">//</span><br>propagateCancel(parent, &amp;c)<br>    <span class="hljs-comment">//返回context和func，其中c.cancel(true, Canceled)已经默认需要将自己从父节点中删除。</span><br><span class="hljs-keyword">return</span> &amp;c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br><br><span class="hljs-comment">// newCancelCtx returns an initialized cancelCtx.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newCancelCtx</span><span class="hljs-params">(parent Context)</span></span> cancelCtx &#123;<br><span class="hljs-keyword">return</span> cancelCtx&#123;Context: parent&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在调用方法的时候，默认调用的cancel方法中传入的true，而在在执行该方法的内部循环取消子结点的时候child调用的cancel传入的是false</strong></p><ol><li><p>可取消的cancel的方法中传入的为true,将child进行删除</p><p><code>removeChild</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeChild</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br><span class="hljs-comment">//判断是否有可取消的父节点</span><br>p, ok := parentCancelCtx(parent)<br><span class="hljs-comment">//不存在，说明父节点已经取消</span><br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>p.mu.Lock()<br><span class="hljs-comment">//判断child节点是否存在，存在delete</span><br><span class="hljs-keyword">if</span> p.children != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">delete</span>(p.children, child)<br>&#125;<br>p.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>parentCancelCtx</code>方法，查看父节点如何递归遍历删除</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parentCancelCtx</span><span class="hljs-params">(parent Context)</span></span> (*cancelCtx, <span class="hljs-type">bool</span>) &#123;<br>    <span class="hljs-comment">//done为一个结构体管道</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == closedchan || done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>    <span class="hljs-comment">//通过value值查找到匹配的parent.Done()</span><br>p, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>    <span class="hljs-comment">//如果没有，*cancelCtx已被包装在一个自定义实现中，提供了一个不同的完成通道，在这种情况下，我们不应该绕过它</span><br>pdone, _ := p.done.Load().(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">if</span> pdone != done &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> p, <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>例子：</p><p>mcCtx，childCtx 和正常的 parentContext不一样，因为它是一个自定义的结构体类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Mycontext <span class="hljs-keyword">struct</span> &#123;<br>context.Context<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>childCancel := <span class="hljs-literal">true</span><br>parentContext, parentFunc := context.WithCancel(context.Background())<br>mcCtx := Mycontext&#123;parentContext&#125;<br><br>childCtx, childFunc := context.WithCancel(mcCtx)<br><br><span class="hljs-keyword">if</span> childCancel &#123;<br>childFunc()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>parentFunc()<br>&#125;<br><br>fmt.Println(parentContext) <span class="hljs-comment">//context.Background.WithCancel</span><br>fmt.Println(mcCtx) <span class="hljs-comment">//&#123;context.Background.WithCancel&#125;</span><br>fmt.Println(childCtx) <span class="hljs-comment">//main.Mycontext.WithCancel</span><br><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="timerCtx"><a href="#timerCtx" class="headerlink" title="timerCtx"></a>timerCtx</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> timerCtx <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//基于cancelCtx</span><br>cancelCtx<br>timer *time.Timer <span class="hljs-comment">// Under cancelCtx.mu.</span><br>    <span class="hljs-comment">//设置Deadline的时间</span><br>deadline time.Time<br>&#125;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">return</span> c.deadline, <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> contextName(c.cancelCtx.Context) + <span class="hljs-string">&quot;.WithDeadline(&quot;</span> +<br>c.deadline.String() + <span class="hljs-string">&quot; [&quot;</span> +<br>time.Until(c.deadline).String() + <span class="hljs-string">&quot;])&quot;</span><br>&#125;<br><span class="hljs-comment">//可取消的timeOut</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">//调用cancelCtx的cancel方法</span><br>c.cancelCtx.cancel(<span class="hljs-literal">false</span>, err)<br><span class="hljs-keyword">if</span> removeFromParent &#123;<br><span class="hljs-comment">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>        <span class="hljs-comment">//移除子节点</span><br>removeChild(c.cancelCtx.Context, c)<br>&#125;<br>c.mu.Lock()<br>    <span class="hljs-comment">//判断c的时间，关掉定时器，不会再次取消</span><br><span class="hljs-keyword">if</span> c.timer != <span class="hljs-literal">nil</span> &#123;<br>c.timer.Stop()<br>c.timer = <span class="hljs-literal">nil</span><br>&#125;<br>c.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p>创建可取消的time context</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">WithTimeout(<span class="hljs-params">parent</span> Context, <span class="hljs-params">timeout</span> <span class="hljs-params">time</span>.Duration)</span> (Context, CancelFunc) &#123;<br>return <span class="hljs-constructor">WithDeadline(<span class="hljs-params">parent</span>, <span class="hljs-params">time</span>.Now()</span>.<span class="hljs-constructor">Add(<span class="hljs-params">timeout</span>)</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>直接调用<code>WithDeadline</code>,添加超时时间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadline</span><span class="hljs-params">(parent Context, d time.Time)</span></span> (Context, CancelFunc) &#123;<br>    <span class="hljs-comment">//判断父节点是否为空</span><br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>    <span class="hljs-comment">//获取当前parent的时间和结果。如果父节点超时，会自动调用cancel函数。</span><br><span class="hljs-keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br><span class="hljs-comment">// The current deadline is already sooner than the new one.</span><br><span class="hljs-keyword">return</span> WithCancel(parent)<br>&#125;<br>c := &amp;timerCtx&#123;<br>cancelCtx: newCancelCtx(parent),<br>deadline:  d,<br>&#125;<br>    <span class="hljs-comment">//挂靠父节点</span><br>propagateCancel(parent, c)<br>    <span class="hljs-comment">//获取距离到达dealine的时间</span><br>dur := time.Until(d)<br>    <span class="hljs-comment">//超时</span><br><span class="hljs-keyword">if</span> dur &lt;= <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-comment">//取消并返回</span><br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded) <span class="hljs-comment">// deadline has already passed</span><br>        <br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">false</span>, Canceled) &#125;<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br><span class="hljs-keyword">if</span> c.err == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">//在到达超时的时间的时候，执行取消命令</span><br>c.timer = time.AfterFunc(dur, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded)<br>&#125;)<br>&#125;<br>    <span class="hljs-comment">//是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型</span><br>    <span class="hljs-comment">//返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。</span><br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="valueCtx"><a href="#valueCtx" class="headerlink" title="valueCtx"></a>valueCtx</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> valueCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br>key, val any<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="propagateCancel"><a href="#propagateCancel" class="headerlink" title="propagateCancel"></a>propagateCancel</h2><p>父节点时取消子节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// propagateCancel arranges for child to be canceled when parent is.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">propagateCancel</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br>    <span class="hljs-comment">//父节点是空节点</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// parent is never canceled</span><br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-comment">// parent is already canceled</span><br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>&#125;<br><br>    <span class="hljs-comment">//判断父节点是否可取消</span><br><span class="hljs-keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;<br>p.mu.Lock()<br>        <span class="hljs-comment">// 父节点已经被取消了，本节点（子节点）也要取消</span><br><span class="hljs-keyword">if</span> p.err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// parent has already been canceled</span><br>child.cancel(<span class="hljs-literal">false</span>, p.err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> p.children == <span class="hljs-literal">nil</span> &#123;<br>p.children = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>            <span class="hljs-comment">//挂到父节点</span><br>p.children[child] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>p.mu.Unlock()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//没有找到可取消的父节点</span><br>atomic.AddInt32(&amp;goroutines, +<span class="hljs-number">1</span>)<br>        <span class="hljs-comment">//重新启动一个新协程，监控父节点和子节点</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-parent.Done():<br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">case</span> &lt;-child.Done():<br>&#125;<br>&#125;()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="传递共享数据"><a href="#传递共享数据" class="headerlink" title="传递共享数据"></a>传递共享数据</h2><p>通常使用WithValue()的方法共享数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx := context.Background()<br>process(ctx) <span class="hljs-comment">//process over. no trace_id</span><br><br>ctx = context.WithValue(ctx, <span class="hljs-string">&quot;traceId&quot;</span>, <span class="hljs-string">&quot;qwe-2011&quot;</span>)<br>process(ctx)<span class="hljs-comment">//process over,trace_id=qwe-2011</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">process</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>traceID, ok := ctx.Value(<span class="hljs-string">&quot;traceId&quot;</span>).(<span class="hljs-type">string</span>)<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Printf(<span class="hljs-string">&quot;process over,trace_id=%s\n&quot;</span>, traceID)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;process over. no trace_id\n&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="取消goroutine-amp-防止goroutine泄露"><a href="#取消goroutine-amp-防止goroutine泄露" class="headerlink" title="取消goroutine&amp;防止goroutine泄露"></a>取消goroutine&amp;防止goroutine泄露</h2><ol><li><p>取消goroutine</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">work1</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...work1...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">work2</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...work2...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> work1(ctx)<br><span class="hljs-keyword">go</span> work2(ctx)<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>cancel()<br>fmt.Println(<span class="hljs-string">&quot;...cancel...&quot;</span>)<br><span class="hljs-keyword">go</span> work2(ctx)<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/go/src/gotest$ go run main.go <br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...cancel...<br>...over...<br></code></pre></td></tr></table></figure></li><li><p>防止goroutine泄露</p></li></ol><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://www.cnblogs.com/qcrao-2018/p/11007503.html">深度解密Go语言之context</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>日志收集实战</title>
    <link href="/2022/09/03/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%AE%9E%E6%88%98/"/>
    <url>/2022/09/03/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="如何结束子goroutine"><a href="#如何结束子goroutine" class="headerlink" title="如何结束子goroutine"></a>如何结束子goroutine</h2><ol><li>全局变量</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>_ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-comment">//设置全局变量</span><br><span class="hljs-keyword">var</span> exit <span class="hljs-type">bool</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;...worker...&quot;</span>)<br>time.Sleep(time.Second)<br><span class="hljs-keyword">if</span> exit &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> worker()<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>exit = <span class="hljs-literal">true</span><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>channel的方式实现</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>_ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-comment">//channel</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch:<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...worker...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> exitChan = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> worker(exitChan)<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>exitChan &lt;- <span class="hljs-literal">true</span><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>context</strong><ul><li>控制多个goroutine退出</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-comment">//channel</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;...worker...&quot;</span>)<br>time.Sleep(time.Second)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithCancel(context.Background())<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> worker(ctx)<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>cancel()<br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...worker1...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker2</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...worker2...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">go</span> worker(ctx)<br><span class="hljs-keyword">go</span> worker2(ctx)<br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-keyword">go</span> worker2(ctx)<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="new和make"><a href="#new和make" class="headerlink" title="new和make"></a><strong>new和make</strong></h3><p>都是初始化内存</p><p>new，多用来为基本数据类型初始化内存，返回指针</p><p>make：用来初始化（slice、map、chan）,返回对于类型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/09/02/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/09/02/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>文字描述：</strong></p><p>通过const定义了一些常量，然后定义了一些自定义类型</p><ul><li>Color作为byte的别名</li><li>定义了一个struct:Box，含有三个长宽高字段和一个颜色属性</li><li>定义了一个slice:BoxList，含有Box</li></ul><p>然后以上面的自定义类型为接收者定义了一些method</p><ul><li>Volume()定义了接收者为Box，返回Box的容量</li><li>SetColor(c Color)，把Box的颜色改为c</li><li>BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色</li><li>PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色</li><li>String()定义在Color上面，返回Color的具体颜色(字符串格式)</li></ul><p>定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也可以调用method.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Human<br>school <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Company <span class="hljs-keyword">struct</span> &#123;<br>Human<br>conpany <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span></span> SayHi() &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tony := Student&#123;Human&#123;name: <span class="hljs-string">&quot;tony&quot;</span>, age: <span class="hljs-number">12</span>&#125;, <span class="hljs-string">&quot;MTA&quot;</span>&#125;<br>Mark := Company&#123;Human&#123;name: <span class="hljs-string">&quot;Mark&quot;</span>, age: <span class="hljs-number">22</span>&#125;, <span class="hljs-string">&quot;TA&quot;</span>&#125;<br><br>tony.SayHi()<br>Mark.SayHi()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>重新定义一个相同的mrthod，重新写匿名字段的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Human<br>school <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Company <span class="hljs-keyword">struct</span> &#123;<br>Human<br>conpany <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span></span> SayHi() &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Company)</span></span> SayHi() &#123;<br>e.conpany = <span class="hljs-string">&quot;TB&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tony := Student&#123;Human&#123;name: <span class="hljs-string">&quot;tony&quot;</span>, age: <span class="hljs-number">12</span>&#125;, <span class="hljs-string">&quot;MTA&quot;</span>&#125;<br>Mark := Company&#123;Human&#123;name: <span class="hljs-string">&quot;Mark&quot;</span>, age: <span class="hljs-number">22</span>&#125;, <span class="hljs-string">&quot;TA&quot;</span>&#125;<br><br>tony.SayHi()<br>Mark.SayHi()<br>fmt.Println(Mark.conpany)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>struct类型</title>
    <link href="/2022/09/02/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/struct%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/09/02/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/struct%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>声明新的类型，作为其他类型的属性或者字段的容器。</p><h2 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age <span class="hljs-type">int</span><br>    weight <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>    Human  <span class="hljs-comment">// 匿名字段，那么默认Student就包含了Human的所有字段</span><br>    speciality <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>匿名字段可以实现字段的继承。</p><p>struct不仅仅能够将struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>http详解</title>
    <link href="/2022/09/01/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/http%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/01/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/http%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="web工作"><a href="#web工作" class="headerlink" title="web工作"></a>web工作</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SayHello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>r.ParseForm()       <span class="hljs-comment">//解析参数</span><br>fmt.Println(r.Form) <span class="hljs-comment">//输出到服务器端的</span><br>fmt.Println(<span class="hljs-string">&quot;path&quot;</span>, r.URL.Path)<br>fmt.Println(<span class="hljs-string">&quot;scheme&quot;</span>, r.URL.Scheme)<br>fmt.Println(r.Form[<span class="hljs-string">&quot;url_long&quot;</span>])<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Form &#123;<br>fmt.Println(<span class="hljs-string">&quot;key:&quot;</span>, k)<br>fmt.Println(<span class="hljs-string">&quot;val:&quot;</span>, strings.Join(v, <span class="hljs-string">&quot; &quot;</span>))<br>&#125;<br><br>fmt.Fprintln(w, <span class="hljs-string">&quot;hello World&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, SayHello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>request:用户请求信息，用来解析用户的请求信息。</li><li>response:服务器需要反馈给客户端的信息。</li><li>conn:请求链接</li><li>handler:处理请求和生成返回信息的处理逻辑</li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>建立监听，等待客户端的请求。</p><p><code>http.ListenAndServe(&quot;:8080&quot;, nil)</code></p><p>监听过程中会创建Server对象，之后调用<code>server.ListenAndServe()</code>方法，底层用tcp搭建了一个服务，最后调用<code>srv.Serve(ln)</code>监听端口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span></span> ListenAndServe() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> srv.shuttingDown() &#123;<br><span class="hljs-keyword">return</span> ErrServerClosed<br>&#125;<br>addr := srv.Addr<br><span class="hljs-keyword">if</span> addr == <span class="hljs-string">&quot;&quot;</span> &#123;<br>addr = <span class="hljs-string">&quot;:http&quot;</span><br>&#125;<br>ln, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> srv.Serve(ln)<br><br></code></pre></td></tr></table></figure></li><li><p>Listen Socket 接受客户端的请求，进行通信。</p><p>首先通过Listener接收请求：<code>l.Accept()</code>，其次创建一个Conn：<code>c := srv.newConn(rw)</code>，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：<code>go c.serve(connCtx)</code>。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。</p></li><li><p>处理客户端请求，handler处理。</p><p>conn首先会解析request:<code>w, err := c.readRequest(ctx)</code>, 然后获取相应的handler去处理请求:<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code>，<code>ServeHTTP</code>的具体实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sh serverHandler)</span></span> ServeHTTP(rw ResponseWriter, req *Request) &#123;<br>handler := sh.srv.Handler<br><span class="hljs-keyword">if</span> handler == <span class="hljs-literal">nil</span> &#123;<br>handler = DefaultServeMux<br>&#125;<br><span class="hljs-keyword">if</span> req.RequestURI == <span class="hljs-string">&quot;*&quot;</span> &amp;&amp; req.Method == <span class="hljs-string">&quot;OPTIONS&quot;</span> &#123;<br>handler = globalOptionsHandler&#123;&#125;<br>&#125;<br>handler.ServeHTTP(rw, req)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sh.srv.Handler</code>就是我们刚才在调用函数<code>ListenAndServe</code>时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取<code>handler = DefaultServeMux</code>,这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，我们调用的代码里面第一句不是调用了<code>http.HandleFunc(&quot;/&quot;, sayhelloName)</code>。这个作用就是注册了请求/的路由规则，当请求uri为”/“，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>middleware——中间件</title>
    <link href="/2022/08/31/gin%E6%A1%86%E6%9E%B6/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2022/08/31/gin%E6%A1%86%E6%9E%B6/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>中间件处理处理程序是简单的http.Handler,它包装另一个http.Handler</p><p>作请求的一些预处理和或后处理，被称为中间件。</p><p>每个中间件只处理一件事情，完成后将其传递给另一个中间件或者最终处理程序，可以做到程序的解耦，减少程序的冗余和降低代码复用率。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>常见的用例：请求如之记录、header操纵、http请求认证和Responseriter劫持等等。</p><ul><li>记录对服务器发送的请求</li><li>处理服务器响应</li><li>请求和处理之间做一个权限认证工作</li><li>远程调用</li><li>安全</li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="单中间件"><a href="#单中间件" class="headerlink" title="单中间件"></a>单中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-comment">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logging</span><span class="hljs-params">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>log.Println(r.URL.Path)<br>f(w, r)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintln(w, <span class="hljs-string">&quot;foo&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintln(w, <span class="hljs-string">&quot;bar&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loggingMiddleWare</span><span class="hljs-params">(next http.Handler)</span></span> http.Handler &#123;<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>log.Println(r.URL.Path)<br>next.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.Handle(<span class="hljs-string">&quot;/foo&quot;</span>, loggingMiddleWare(http.HandlerFunc(foo)))<br>http.Handle(<span class="hljs-string">&quot;/bar&quot;</span>, loggingMiddleWare(http.HandlerFunc(bar)))<br><span class="hljs-comment">//http.HandleFunc(&quot;/foo&quot;, logging(foo))</span><br><span class="hljs-comment">//http.HandleFunc(&quot;/bar&quot;, logging(bar))</span><br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多中间件"><a href="#多中间件" class="headerlink" title="多中间件"></a>多中间件</h3><p>中间件将方法作为参数之一，包装并返回一个新的方法服务器，定义一种新的MiddlWare，容易将多个中间件连接起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-keyword">type</span> MiddleWare <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(http.HandlerFunc)</span></span> http.HandlerFunc<br><br><span class="hljs-keyword">type</span> MiddleWare1 <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(http.Handler)</span></span> http.Handler<br><br><span class="hljs-comment">//日志打印</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logging</span><span class="hljs-params">()</span></span> MiddleWare1 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(h http.Handler)</span></span> http.Handler &#123;<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>start := time.Now()<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Println(r.URL.Path)<br>time.Since(start)<br>&#125;()<br>h.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">method</span><span class="hljs-params">(m <span class="hljs-type">string</span>)</span></span> MiddleWare1 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(h http.Handler)</span></span> http.Handler &#123;<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.Method != m &#123;<br>http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>&#125;<br>h.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chain1</span><span class="hljs-params">(f http.Handler, middlewares ...MiddleWare1)</span></span> http.Handler &#123;<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> middlewares &#123;<br>f = m(f)<br>&#125;<br><span class="hljs-keyword">return</span> f<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Logging</span><span class="hljs-params">()</span></span> MiddleWare &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>start := time.Now()<br><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Println(r.URL.Path)<br>time.Since(start)<br>&#125;()<br>hf(w, r)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Method</span><span class="hljs-params">(m <span class="hljs-type">string</span>)</span></span> MiddleWare &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.Method != m &#123;<br>http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>&#125;<br>hf(w, r)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chain</span><span class="hljs-params">(f http.HandlerFunc, middlewares ...MiddleWare)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> middlewares &#123;<br>f = m(f)<br>&#125;<br><span class="hljs-keyword">return</span> f<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintln(w, <span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.Handle(<span class="hljs-string">&quot;/test&quot;</span>, chain1(http.HandlerFunc(Hello), method(<span class="hljs-string">&quot;GET&quot;</span>), logging()))<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, chain(Hello, Method(<span class="hljs-string">&quot;GET&quot;</span>), Logging()))<br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="gin中间件"><a href="#gin中间件" class="headerlink" title="gin中间件"></a>gin中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r:=gin.Default()<span class="hljs-comment">//创建带有默认的中间件路由（包含logger和recovery）</span><br>r:=gin.<span class="hljs-built_in">new</span>()<span class="hljs-comment">//创建没有中间件的路由</span><br></code></pre></td></tr></table></figure><p>两种中间件方式，后续展示第二种</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">自定义日志中间件第一种方式-----请求之前</span><br><span class="hljs-comment">自定义日志中间件第一种方式-----请求之后</span><br><span class="hljs-comment">2022/08/31 15:40:57 12345</span><br><span class="hljs-comment">2022/08/31 15:40:57 64.542µs</span><br><span class="hljs-comment">2022/08/31 15:40:57 200</span><br><span class="hljs-comment">**/</span><br>func <span class="hljs-built_in">Logger</span>() gin<span class="hljs-selector-class">.HandlerFunc</span> &#123;<br>return <span class="hljs-built_in">func</span>(ctx *gin.Context) &#123;<br>t := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第一种方式-----请求之前&quot;</span>)<br><span class="hljs-comment">//在gin上下文定义一个变量</span><br>ctx<span class="hljs-selector-class">.Set</span>(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>)<br><span class="hljs-comment">//请求之前</span><br>ctx<span class="hljs-selector-class">.Next</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第一种方式-----请求之后&quot;</span>)<br><span class="hljs-comment">//计算整个请求过程</span><br>latency := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Since</span>(t)<br>log<span class="hljs-selector-class">.Print</span>(latency)<br><br><span class="hljs-comment">//请求状态打印</span><br>status := ctx<span class="hljs-selector-class">.Writer</span><span class="hljs-selector-class">.Status</span>()<br>log<span class="hljs-selector-class">.Println</span>(status)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">自定义日志中间件第二种方式-----请求之前</span><br><span class="hljs-comment">自定义日志中间件第二种方式-----请求之后</span><br><span class="hljs-comment">2022/08/31 15:40:17 12345</span><br><span class="hljs-comment">2022/08/31 15:40:17 60.112µs</span><br><span class="hljs-comment">2022/08/31 15:40:17 200</span><br><span class="hljs-comment">**/</span><br>func <span class="hljs-built_in">Logger1</span>(c *gin.Context) &#123;<br>t := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第二种方式-----请求之前&quot;</span>)<br><span class="hljs-comment">//在gin上下文定义一个变量</span><br>c<span class="hljs-selector-class">.Set</span>(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>)<br><span class="hljs-comment">//请求之前</span><br>c<span class="hljs-selector-class">.Next</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第二种方式-----请求之后&quot;</span>)<br><span class="hljs-comment">//计算整个请求过程</span><br>latency := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Since</span>(t)<br>log<span class="hljs-selector-class">.Print</span>(latency)<br><br><span class="hljs-comment">//请求状态打印</span><br>status := c<span class="hljs-selector-class">.Writer</span><span class="hljs-selector-class">.Status</span>()<br>log<span class="hljs-selector-class">.Println</span>(status)<br>&#125;<br>func <span class="hljs-selector-tag">main</span>() &#123;<br>r := gin<span class="hljs-selector-class">.New</span>()<br>r<span class="hljs-selector-class">.Use</span>(<span class="hljs-built_in">Logger</span>())<br><span class="hljs-comment">//r.Use(Logger1)</span><br>r<span class="hljs-selector-class">.GET</span>(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-built_in">func</span>(ctx *gin.Context) &#123;<br>exam := ctx<span class="hljs-selector-class">.MustGet</span>(<span class="hljs-string">&quot;example&quot;</span>).(string)<br>log<span class="hljs-selector-class">.Println</span>(exam)<br>&#125;)<br>r<span class="hljs-selector-class">.Run</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>路由器中间件</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RouterMiddle1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;路由中间1&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RouterMiddle2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;路由中间2&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">onRouterMiddleHandle</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;业务处理&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.New()<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">路由中间1</span><br><span class="hljs-comment">路由中间2</span><br><span class="hljs-comment">业务处理</span><br><span class="hljs-comment">*/</span><br>r.GET(<span class="hljs-string">&quot;/onRouterMiddle&quot;</span>, RouterMiddle1, RouterMiddle2, onRouterMiddleHandle())<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>路由组中间件</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">//路由组中间件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterGoodsMiddle1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;goods路由组中间件1&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterGoodsMiddle2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;goods路由组中间件2&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterOrdersMiddle1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Orders路由组中间件1&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterOrdersMiddle2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Orders路由组中间件2&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.New()<br>r.Use(gin.Logger())<br><br>    <span class="hljs-comment">//curl 127.0.0.1:8080/goods/add</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    goods路由组中间件1</span><br><span class="hljs-comment">goods路由组中间件2</span><br><span class="hljs-comment">/goods/add</span><br><span class="hljs-comment">    */</span><br>goodsGroup := r.Group(<span class="hljs-string">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>&#123;<br>goodsGroup.GET(<span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/goods/add&quot;</span>)<br>&#125;)<br>&#125;<br>    r.Group(<span class="hljs-string">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2).GET(<span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/goods/add&quot;</span>)<br>&#125;)<br>    <br>    <span class="hljs-comment">//curl 127.0.0.1:8080/goods/add</span><br>    <span class="hljs-comment">//控制台结果：/goods/add</span><br>r.Group(<span class="hljs-string">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>r.GET(<span class="hljs-string">&quot;/goods/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/goods/add&quot;</span>)<br>&#125;)<br>    <br>    <br>orderGroup := r.Group(<span class="hljs-string">&quot;/order&quot;</span>)<br>orderGroup.Use(GroupRouterOrdersMiddle1, GroupRouterOrdersMiddle2)<br>&#123;<br>orderGroup.GET(<span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/add&quot;</span>)<br>&#125;)<br><br>orderGroup.GET(<span class="hljs-string">&quot;/del&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/del&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">//嵌套</span><br>testGroup := orderGroup.Group(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/test下的中间件&quot;</span>)<br>&#125;)<br><br>testGroup.GET(<span class="hljs-string">&quot;/test1&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/test/test1下的函数&quot;</span>)<br>&#125;)<br><br>&#125;<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong> 全局中间件 &gt; 路由组中间件 &gt; 路由中间件<br> 全局中间件最先执行</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>上传文件&amp;&amp;Template</title>
    <link href="/2022/08/31/gin%E6%A1%86%E6%9E%B6/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6&amp;Template/"/>
    <url>/2022/08/31/gin%E6%A1%86%E6%9E%B6/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6&amp;Template/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>stu1 := &amp;Student&#123;Name: <span class="hljs-string">&quot;Geektutu&quot;</span>, Age: <span class="hljs-number">20</span>&#125;<br>stu2 := &amp;Student&#123;Name: <span class="hljs-string">&quot;Jack&quot;</span>, Age: <span class="hljs-number">22</span>&#125;<br>r.GET(<span class="hljs-string">&quot;/arr&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;arr.tmpl&quot;</span>, gin.H&#123;<br><span class="hljs-string">&quot;title&quot;</span>:  <span class="hljs-string">&quot;World&quot;</span>,<br><span class="hljs-string">&quot;stuArr&quot;</span>: [<span class="hljs-number">2</span>]*Student&#123;stu1, stu2&#125;,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- templates/arr.tmpl --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello, </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.title</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> $index, $ele <span class="hljs-attr">:</span>= .stuArr &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$index</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$ele.Name</span> &#125;&#125;</span><span class="language-xml"> is </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$ele.Age</span> &#125;&#125;</span><span class="language-xml"> years old<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Pictures$ curl http://localhost:8080/arr<br><br>&lt;html&gt;<br>&lt;body&gt;<br>    &lt;p&gt;hello, World&lt;/p&gt;<br>    <br>    &lt;p&gt;0: Geektutu is 20 years old&lt;/p&gt;<br>    <br>    &lt;p&gt;1: Jack is 22 years old&lt;/p&gt;<br>    <br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>file, err := c.FormFile(<span class="hljs-string">&quot;upload&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;请求失败&quot;</span>)<br>&#125;<br><br>filename := file.Filename<br>fmt.Println(<span class="hljs-string">&quot;文件名:&quot;</span>, filename)<br><br><span class="hljs-comment">//保存到本地服务器</span><br><span class="hljs-keyword">if</span> err := c.SaveUploadedFile(file, filename); err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>&#125;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;上传成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>测试： </p><p>curl -X POST <a href="http://localhost:8080/upload">http://localhost:8080/upload</a> -F “upload=@文件目录地址” -H “Content-Type: multipart/form-data”<br>上传成功</p><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/uploads&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>form, err := c.MultipartForm()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;请求失败&quot;</span>)<br>&#125;<br>files := form.File[<span class="hljs-string">&quot;uploads[]&quot;</span>]<br><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>fmt.Println(<span class="hljs-string">&quot;文件名：&quot;</span>, file)<br><span class="hljs-keyword">if</span> err := c.SaveUploadedFile(file, file.Filename); err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>&#125;<br>&#125;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;上传成功&quot;</span>)<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Pictures$ curl -X POST http://localhost:8080/uploads -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-07.png&quot;  -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-38.png&quot; -H &quot;Content-Type: multipart/form-data&quot;<br>上传成功<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一个gin程序</title>
    <link href="/2022/08/29/gin%E6%A1%86%E6%9E%B6/%E7%AC%AC%E4%B8%80%E4%B8%AAgin%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/08/29/gin%E6%A1%86%E6%9E%B6/%E7%AC%AC%E4%B8%80%E4%B8%AAgin%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;net/http&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/name&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;world&quot;</span>)<br>&#125;)<br><br>r.Run() <span class="hljs-comment">// listen and serve on 0.0.0.0:8080</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>首先，我们使用了<code>gin.Default()</code>生成了一个实例，这个实例即 WSGI 应用程序。</li><li>接下来，我们使用<code>r.Get(&quot;/&quot;, ...)</code>声明了一个路由，告诉 Gin 什么样的URL 能触发传入的函数，这个函数返回我们想要显示在用户浏览器中的信息。</li><li>最后用 <code>r.Run()</code>函数来让应用运行在本地服务器上，默认监听端口是 _8080_，可以传入参数设置端口，例如<code>r.Run(&quot;:9999&quot;)</code>即运行在 _9999_端口。</li></ol><h3 id="解析路经参数"><a href="#解析路经参数" class="headerlink" title="解析路经参数"></a>解析路经参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/user/:name&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>c.String(http.StatusOK, <span class="hljs-string">&quot;Hello %s&quot;</span>, name)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="解析qurey参数"><a href="#解析qurey参数" class="headerlink" title="解析qurey参数"></a>解析qurey参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/form&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)<br><span class="hljs-comment">//可设置默认的初始值</span><br>password := c.DefaultPostForm(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>)<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;username&quot;</span>: username,<br><span class="hljs-string">&quot;password&quot;</span>: password,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="解析qurey-amp-路经参数"><a href="#解析qurey-amp-路经参数" class="headerlink" title="解析qurey&amp;路经参数"></a>解析qurey&amp;路经参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/posts&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>id := c.Query(<span class="hljs-string">&quot;id&quot;</span>)<br>page := c.DefaultQuery(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>)<br>username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)<br><span class="hljs-comment">//可设置默认的初始值</span><br>password := c.DefaultPostForm(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>)<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;id&quot;</span>:       id,<br><span class="hljs-string">&quot;page&quot;</span>:     page,<br><span class="hljs-string">&quot;username&quot;</span>: username,<br><span class="hljs-string">&quot;password&quot;</span>: password,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>curl “<a href="http://localhost:8080/posts?id=1&amp;page=13&quot;">http://localhost:8080/posts?id=1&amp;page=13&quot;</a>  -X POST -d ‘username=geektutu&amp;password=1234’<br>{“id”:”1”,”page”:”13”,”password”:”1234”,”username”:”geektutu”}</p><h3 id="map参数"><a href="#map参数" class="headerlink" title="map参数"></a>map参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/post&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>ids := c.QueryMap(<span class="hljs-string">&quot;ids&quot;</span>)<br>names := c.PostFormMap(<span class="hljs-string">&quot;names&quot;</span>)<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;ids&quot;</span>:   ids,<br><span class="hljs-string">&quot;names&quot;</span>: names,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>curl -g “<a href="http://localhost:9999/post?ids%5BJack%5D=001&amp;ids%5BTom%5D=002&quot;">http://localhost:9999/post?ids[Jack]=001&amp;ids[Tom]=002&quot;</a> -X POST -d ‘names[a]=Sam&amp;names[b]=David’<br>{“ids”:{“Jack”:”001”,”Tom”:”002”},”names”:{“a”:”Sam”,”b”:”David”}}</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/redirect&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;/index&quot;</span>)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Request.URL.Path = <span class="hljs-string">&quot;/&quot;</span><br>r.HandleContext(c)<br>&#125;)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">ubuntu@root:~/go$ curl http://localhost:8080/index</span><br><span class="hljs-comment">Helloubuntu@root:~/go$ -i http://localhost:8080/redirect</span><br><span class="hljs-comment">HTTP/1.1 301 Moved Permanently</span><br><span class="hljs-comment">Content-Type: text/html; charset=utf-8</span><br><span class="hljs-comment">Location: /index</span><br><span class="hljs-comment">Date: Mon, 29 Aug 2022 09:08:43 GMT</span><br><span class="hljs-comment">Content-Length: 41</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;a href=&quot;/index&quot;&gt;Moved Permanently&lt;/a&gt;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="多组路由"><a href="#多组路由" class="headerlink" title="多组路由"></a>多组路由</h3><p>利用分组路由可以更好地实现权限控制（将需要登陆鉴权的路由防盗同一组中去，简化权限控制）</p><p>划分一个模块一个路由，便于管理和查找相关的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">defaultHandler := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;path&quot;</span>: c.FullPath(),<br>&#125;)<br>&#125;<br><span class="hljs-comment">//https://geektutu.com/post/quick-go-gin.html</span><br><span class="hljs-comment">//group v1</span><br>v1 := r.Group(<span class="hljs-string">&quot;/v1&quot;</span>)<br>&#123;<br>v1.GET(<span class="hljs-string">&quot;/posts&quot;</span>, defaultHandler)<br>v1.GET(<span class="hljs-string">&quot;/series&quot;</span>, defaultHandler)<br>&#125;<br><br><span class="hljs-comment">//group v2</span><br>v2 := r.Group(<span class="hljs-string">&quot;/v2&quot;</span>)<br>&#123;<br>v2.GET(<span class="hljs-string">&quot;/posts&quot;</span>, defaultHandler)<br>v2.GET(<span class="hljs-string">&quot;/series&quot;</span>, defaultHandler)<br>&#125;<br><br><span class="hljs-comment">//ubuntu@root:~$ curl http://localhost:8080/v1/posts</span><br><span class="hljs-comment">//&#123;&quot;path&quot;:&quot;/v1/posts&quot;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker安装</title>
    <link href="/2022/08/29/ComponentInstallation/docker%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/29/ComponentInstallation/docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo安装及概念</title>
    <link href="/2022/08/25/hexo/%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/25/hexo/%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装nodejs(需要注意nodejs的版本要求)：<a href="../deploy/ubuntu%E5%AE%89%E8%A3%85nodejs">ubuntu安装nodejs</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Blog$ hexo -v<br>INFO  Validating config<br>hexo: 5.4.2<br>hexo-cli: 4.3.0<br>os: linux 5.15.0-46-generic Ubuntu 20.04.4 LTS (Focal Fossa)<br>node: 14.20.0<br>v8: 8.4.371.23-node.87<br>uv: 1.42.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 83<br>nghttp2: 1.42.0<br>napi: 8<br>llhttp: 2.1.5<br>openssl: 1.1.1q<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br></code></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir Blog<br>cd Blog<br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可不写文件夹，默认是在本目录层级构建</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>基本目录层级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Blog$ tree -L 1<br>.<br>├── _config.landscape.yml<br>├── _config.yml<br>├── node_modules<br>├── package.json<br>├── package-lock.json<br>├── scaffolds<br>├── source<br>└── themes<br><br>4 directories, 4 files<br></code></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openEuler安装及基本概念</title>
    <link href="/2022/08/25/openEuler/%E5%AE%89%E8%A3%85%E5%8F%8A%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/08/25/openEuler/%E5%AE%89%E8%A3%85%E5%8F%8A%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>一款面向全球的开源操作系统</li><li>支持ARM、X86等多种处理器，能够充分释放计算芯片的潜能：<strong>高效、稳定、安全</strong></li><li>适用于<strong>数据库、大数据、云计算、人工智能</strong>等多种应用场景</li><li>构建支持多处理器架构、统一和开放的操作系统</li></ul><h2 id="在VirtualBox中安装"><a href="#在VirtualBox中安装" class="headerlink" title="在VirtualBox中安装"></a>在VirtualBox中安装</h2><p>系统：虚拟机安装</p><p>版本：openEuler 20.03</p><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p><a href="https://repo.openeuler.org/openEuler-20.03-LTS-SP3/ISO/">IOS下载地址</a></p><ol><li>单击“x86_64”。</li><li>若选择本地安装，分别将发布包 “openEuler-20.03-LTS-SP3-x86_64-dvd.iso”和校验文件“openEuler-20.03-LTS-SP3-x86_64-dvd.iso.sha256sum”下载到本地。</li><li>若选择网络安装，分别将发布包 “openEuler-20.03-LTS-SP3-netinst-x86_64-dvd.iso ”和校验文件“openEuler-20.03-LTS-SP3-netinst-x86_64-dvd.iso.sha256sum”下载到本地。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo初始化基础配置文件解析</title>
    <link href="/2022/08/25/hexo/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/08/25/hexo/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>网站的配置信息，可以配置大部分参数。</p><h3 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站关键词</td></tr><tr><td>author</td><td>作者名称</td></tr><tr><td>language</td><td>使用语言</td></tr><tr><td>timezone</td><td>网站时区</td></tr></tbody></table><h3 id="网址设置"><a href="#网址设置" class="headerlink" title="网址设置"></a>网址设置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs json"># Hexo Configuration<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/configuration.html</span><br>## Source<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//github.com/hexojs/hexo/</span><br><br><br><br># URL<br>## Set your site url here. For example<span class="hljs-punctuation">,</span> if you use GitHub Page<span class="hljs-punctuation">,</span> set url as &#x27;https<span class="hljs-punctuation">:</span><span class="hljs-comment">//username.github.io/project&#x27;</span><br>url<span class="hljs-punctuation">:</span> http<span class="hljs-punctuation">:</span><span class="hljs-comment">//example.com</span><br>permalink<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">:</span>year/<span class="hljs-punctuation">:</span>month/<span class="hljs-punctuation">:</span>day/<span class="hljs-punctuation">:</span>title/<br>permalink_defaults<span class="hljs-punctuation">:</span><br>pretty_urls<span class="hljs-punctuation">:</span><br>  trailing_index<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> # Set to <span class="hljs-literal"><span class="hljs-keyword">false</span></span> to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> # Set to <span class="hljs-literal"><span class="hljs-keyword">false</span></span> to remove trailing &#x27;.html&#x27; from permalinks<br><br># Directory<br>source_dir<span class="hljs-punctuation">:</span> source<br>public_dir<span class="hljs-punctuation">:</span> public<br>tag_dir<span class="hljs-punctuation">:</span> tags<br>archive_dir<span class="hljs-punctuation">:</span> archives<br>category_dir<span class="hljs-punctuation">:</span> categories<br>code_dir<span class="hljs-punctuation">:</span> downloads/code<br>i18n_dir<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">:</span>lang<br>skip_render<span class="hljs-punctuation">:</span><br><br># Writing<br>new_post_name<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">:</span>title.md # File name of new posts<br>default_layout<span class="hljs-punctuation">:</span> post<br>titlecase<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> # Transform title into titlecase<br>external_link<span class="hljs-punctuation">:</span><br>  enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> # Open external links in new tab<br>  field<span class="hljs-punctuation">:</span> site # Apply to the whole site<br>  exclude<span class="hljs-punctuation">:</span> &#x27;&#x27;<br>filename_case<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>render_drafts<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>post_asset_folder<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>relative_link<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>future<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>highlight<span class="hljs-punctuation">:</span><br>  enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  line_number<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  auto_detect<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  tab_replace<span class="hljs-punctuation">:</span> &#x27;&#x27;<br>  wrap<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  hljs<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>prismjs<span class="hljs-punctuation">:</span><br>  enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  preprocess<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  line_number<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  tab_replace<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><br># Home page setting<br># path<span class="hljs-punctuation">:</span> Root path for your blogs index page. (default = &#x27;&#x27;)<br># per_page<span class="hljs-punctuation">:</span> Posts displayed per page. (<span class="hljs-number">0</span> = disable pagination)<br># order_by<span class="hljs-punctuation">:</span> Posts order. (Order by date descending by default)<br>index_generator<span class="hljs-punctuation">:</span><br>  path<span class="hljs-punctuation">:</span> &#x27;&#x27;<br>  per_page<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>  order_by<span class="hljs-punctuation">:</span> -date<br><br># Category &amp; Tag<br>default_category<span class="hljs-punctuation">:</span> uncategorized<br>category_map<span class="hljs-punctuation">:</span><br>tag_map<span class="hljs-punctuation">:</span><br><br># Metadata elements<br>## https<span class="hljs-punctuation">:</span><span class="hljs-comment">//developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br>meta_generator<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><br># Date / Time format<br>## Hexo uses Moment.js to parse and display date<br>## You can customize the date format as defined in<br>## http<span class="hljs-punctuation">:</span><span class="hljs-comment">//momentjs.com/docs/#/displaying/format/</span><br>date_format<span class="hljs-punctuation">:</span> YYYY-MM-DD<br>time_format<span class="hljs-punctuation">:</span> HH<span class="hljs-punctuation">:</span>mm<span class="hljs-punctuation">:</span>ss<br>## updated_option supports &#x27;mtime&#x27;<span class="hljs-punctuation">,</span> &#x27;date&#x27;<span class="hljs-punctuation">,</span> &#x27;empty&#x27;<br>updated_option<span class="hljs-punctuation">:</span> &#x27;mtime&#x27;<br><br># Pagination<br>## Set per_page to <span class="hljs-number">0</span> to disable pagination<br>per_page<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>pagination_dir<span class="hljs-punctuation">:</span> page<br><br># Include / Exclude file(s)<br>## include<span class="hljs-punctuation">:</span>/exclude<span class="hljs-punctuation">:</span> options only apply to the &#x27;source/&#x27; folder<br>include<span class="hljs-punctuation">:</span><br>exclude<span class="hljs-punctuation">:</span><br>ignore<span class="hljs-punctuation">:</span><br><br># Extensions<br>## Plugins<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/themes/</span><br>theme<span class="hljs-punctuation">:</span> landscape<br><br># Deployment<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy<span class="hljs-punctuation">:</span><br>  type<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><br></code></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>应用程序信息</p><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p>模板文件夹，当新建文章的时候会根据该模板建立文件。默认是post模板(可以自己添加模板内容)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Blog$ ls scaffolds/<br>draft.md  page.md  post.md<br>ubuntu@root:~/Desktop/Blog$ cat scaffolds/post.md <br>---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags:<br>---<br><br></code></pre></td></tr></table></figure><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>资源文件夹是用来存放用户资源的地方。</p><p>HTML和MarkDown文件会被解析并放到public文件夹，而其他文件会被拷贝过去</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>主题文件夹。根据该主题来生成静态页面。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ccache安装及使用</title>
    <link href="/2022/08/24/ComponentInstallation/ccache%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/24/ComponentInstallation/ccache%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在处理一些较大规模工程时，编译会花费较长的时间。ccache会在第一遍编译时时间较长，之后的编译会成倍的提速。</p><p><strong>基本原理：</strong>通过头文件告诉缓存到源文件中而改进构建性能，因而通过减少每一步编译时添加头文件所需的时间而提高构建速度。</p><p>第一趟编译ccache缓存GCC的”-E”的输出，编译选项以及.o文件到$HOME/.ccache。第二次编译尽量利用缓存，必要时更新缓存。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@68ab9a9c9a49 ccache-3.2.4]# yum install gcc make cmake -y<br><br>[root@68ab9a9c9a49 home]# wget http://samba.org/ftp/ccache/ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# tar -zxf ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# ls<br>ccache-3.2.4  ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# cd ccache-3.2.4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置安装</span><br>[root@68ab9a9c9a49 ccache-3.2.4]# /home/ccache-3.2.4/configure -prefix=/usr/local/ccache-3.2.4<br>configure: Configuring ccache<br>checking build system type... aarch64-unknown-linux-gnu<br>checking host system type... aarch64-unknown-linux-gnu<br>checking for gcc... gcc<br>checking whether the C compiler works... yes<br>checking for C compiler default output file name... a.out<br>checking for suffix of executables...<br>checking whether we are cross compiling... no<br>checking for suffix of object files... o<br>checking whether we are using the GNU C compiler... yes<br>.......<br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译安装</span><br>[root@034ebb878219 ccache-3.2.4]# make -j4<br>[root@68ab9a9c9a49 ccache-3.2.4]# make install<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -m 755 ccache /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/share/man/man1<br>/usr/bin/install -c -m 644 ./ccache.1 /usr/local/ccache-3.2.4/share/man/man1/<br><br>[root@68ab9a9c9a49 home]# cd /usr/bin/<br>[root@68ab9a9c9a49 bin]# ln -s /usr/local/ccache-3.2.4/bin/ccache ccache<br><br>[root@68ab9a9c9a49 usr]# ccache --v<br>ccache version 3.2.4<br><br>Copyright (C) 2002-2007 Andrew Tridgell<br>Copyright (C) 2009-2015 Joel Rosdahl<br><br>This program is free software; you can redistribute it and/or modify it under<br>the terms of the GNU General Public License as published by the Free Software<br>Foundation; either version 3 of the License, or (at your option) any later<br>version.<br><br></code></pre></td></tr></table></figure><h2 id="编译加速使用（mysql编译）"><a href="#编译加速使用（mysql编译）" class="headerlink" title="编译加速使用（mysql编译）"></a>编译加速使用（mysql编译）</h2><h3 id="ccache加入环境变量，取代C编译器："><a href="#ccache加入环境变量，取代C编译器：" class="headerlink" title="ccache加入环境变量，取代C编译器："></a>ccache加入环境变量，取代C编译器：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>cc<br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>++<br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cc<br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>c++<br></code></pre></td></tr></table></figure><p>yum安装以缓存的形式进行安装，目录挂载，本地源</p><p>可以大量的减少安装等待的时间</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum install <span class="hljs-comment">--downloadonly 包名</span><br></code></pre></td></tr></table></figure><p>在 ccache 中使用 -s 命令行选项来获得关于高速缓存性能的统计数据。</p><h3 id="MYSQL-5-7-X编译"><a href="#MYSQL-5-7-X编译" class="headerlink" title="MYSQL 5.7.X编译"></a>MYSQL 5.7.X编译</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>将sh文件后台执行，<code>sh test.sh &amp;&gt; /tmp/test.log</code></p><p>mysql版本：5.7.36</p><p>时间消耗：21 minutes</p><p>第一次使用 ccache 编译那个文件时，您将不会看到有任何的帮助，因为编译信息还没有被高速缓存。</p><p>ccache获取的缓存的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shel">[root@74c8c1b5bfab home]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                    36<br>cache hit (preprocessed)              23<br>cache miss                          2239<br>called for link                      508<br>called for preprocessing              20<br>compile failed                        19<br>preprocessor error                    20<br>no input file                          3<br>files in cache                      4715<br>cache size                           1.6 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><strong>前提：</strong>.cacahe文件中已经获取到编译的缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name ccachtest -v $PWD/yumcache/:/home/lamp -v $PWD/ccache/:/root/.ccache -v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4 centos:7<br></code></pre></td></tr></table></figure><p>时间消耗：Total:4 minutes</p><ol><li><p>yum下载采用缓存的方式进行</p><p><code>-v $PWD/yumcache/:/home/lamp</code></p></li><li><p>ccache不必每次都进行编译</p><p><code>-v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4</code>    </p></li><li><p>缓存/root/.ccache文件目录</p><p><code>-v $PWD/ccache/:/root/.ccache</code></p></li></ol><h4 id="同缓存编译不同版本"><a href="#同缓存编译不同版本" class="headerlink" title="同缓存编译不同版本"></a>同缓存编译不同版本</h4><p>参考方法二，仅修改mysql的版本：5.7.35</p><p>时间消耗:19 minutes</p><p>ccache获取的缓存的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@0a200c0bc3fd .ccache]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                  2544<br>cache hit (preprocessed)              68<br>cache miss                          4386<br>called for link                     1630<br>called for preprocessing              60<br>compile failed                        57<br>preprocessor error                    62<br>no input file                         11<br>files in cache                      9245<br>cache size                           3.1 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>gitlab-14.0.5镜像编译安装</title>
    <link href="/2022/08/24/ComponentInstallation/gitlab-14.0.5%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/24/ComponentInstallation/gitlab-14.0.5%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><em>注:其中CE和EE的安装包括镜像构建方式相同</em></p><h2 id="直接安装gitlab"><a href="#直接安装gitlab" class="headerlink" title="直接安装gitlab"></a>直接安装gitlab</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -s https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/gitlab/gi</span>tlab-ee/script.deb.sh | bash<br>apt-get install gitlab-ee=<span class="hljs-number">14.0</span>.<span class="hljs-number">5</span>-ee.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="下载gitlab"><a href="#下载gitlab" class="headerlink" title="下载gitlab"></a>下载gitlab</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget --content-disposition https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/gitlab/gi</span>tlab-ee<span class="hljs-regexp">/packages/u</span>buntu<span class="hljs-regexp">/focal/gi</span>tlab-ee_14.<span class="hljs-number">0.5</span>-ee.<span class="hljs-number">0</span>_arm64.deb/download.deb<br></code></pre></td></tr></table></figure><p>获取gitlab源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ecs-5e66 gitlab]$ git clone https://gitlab.com/gitlab-org/omnibus-gitlab.git<br>Cloning into &#x27;omnibus-gitlab&#x27;...<br>remote: Enumerating objects: 148163, done.<br>remote: Counting objects: 100% (16/16), done.<br>remote: Compressing objects: 100% (16/16), done.<br>remote: Total 148163 (delta 8), reused 0 (delta 0), pack-reused 148147<br>Receiving objects: 100% (148163/148163), 24.69 MiB | 6.92 MiB/s, done.<br>Resolving deltas: 100% (94777/94777), done.<br>[root@ecs-5e66 gitlab]$ cd omnibus-gitlab/<br>[root@ecs-5e66 omnibus-gitlab]$ git checkout 14.0.5+ee.0<br>Note: checking out &#x27;14.0.5+ee.0&#x27;.<br>....<br><br>HEAD is now at fe10a61... Update VERSION to 14.0.5-ee<br><br></code></pre></td></tr></table></figure><h2 id="构建gitlab"><a href="#构建gitlab" class="headerlink" title="构建gitlab"></a>构建gitlab</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">切换分支</span><br>[root@ecs-5e66 omnibus-gitlab]$ cd docker<br>[root@ecs-5e66 docker]$<br>[root@ecs-5e66 docker]$ cat &lt;&lt; EOF &gt; RELEASE<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">RELEASE_PACKAGE=gitlab-ee</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">RELEASE_VERSION=14.0.5-ee</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">DOWNLOAD_URL=https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要添加依赖libatomic1</span><br>[root@ecs-5e66 docker]$ git diff<br>diff --git a/docker/Dockerfile b/docker/Dockerfile<br>index d07c1f4..602d412 100644<br>--- a/docker/Dockerfile<br>+++ b/docker/Dockerfile<br>@@ -14,6 +14,7 @@ RUN apt-get update -q \<br>       openssh-server \<br>       tzdata \<br>       wget \<br>+      libatomic1 \<br>     &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">Use BusyBox</span><br>[root@ecs-5e66 docker]$ docker build -t gitlab/gitlab-ee:14.0.5 .<br>Sending build context to Docker daemon  28.67kB<br>Step 1/18 : FROM ubuntu:20.04<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">d5ca7a445605</span><br>Step 2/18 : MAINTAINER GitLab Inc. &lt;support@gitlab.com&gt;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">fbceb05a9c47</span><br>Step 3/18 : SHELL [&quot;/bin/sh&quot;, &quot;-c&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">acf3fce3b499</span><br>Step 4/18 : ENV LANG=C.UTF-8<br>......<br>Step 18/18 : HEALTHCHECK --interval=60s --timeout=30s --retries=5 CMD /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 5b6cac9a902a</span><br>Removing intermediate container 5b6cac9a902a<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">9bb5a07d8303</span><br>Successfully built 9bb5a07d8303<br>Successfully tagged gitlab/gitlab-ee:14.0.5<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kkFileView-4.0.0编译安装</title>
    <link href="/2022/08/24/ComponentInstallation/kkFileView-4.0.0%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/24/ComponentInstallation/kkFileView-4.0.0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><strong>获取源码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitee.com/kekingcn/file-online-preview.git<br>cd file-online-preview/<br>git checkout v4.0.0<br></code></pre></td></tr></table></figure><h2 id="centos-7-6-安装"><a href="#centos-7-6-安装" class="headerlink" title="centos 7.6 安装"></a>centos 7.6 安装</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install git wget vim libreoffice java-11-openjdk maven -y<br>java -version<br>mvn -v<br><span class="hljs-meta prompt_">#</span><span class="language-bash">/usr/lib64/libreoffice</span><br></code></pre></td></tr></table></figure><h3 id="修改原文档中的配置文件"><a href="#修改原文档中的配置文件" class="headerlink" title="修改原文档中的配置文件"></a>修改原文档中的配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff<br>diff --git a/server/src/main/bin/startup.sh b/server/src/main/bin/startup.sh<br>index cae3d3b..413c957 100644<br>--- a/server/src/main/bin/startup.sh<br>+++ b/server/src/main/bin/startup.sh<br>@@ -1,5 +1,5 @@<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">!/bin/bash</span><br>-DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib/libreoffice&quot;)<br>+DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib64/libreoffice&quot;)<br> FLAG=<br> OFFICE_HOME=<br> KKFILEVIEW_BIN_FOLDER=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)<br>diff --git a/server/src/main/config/application.properties b/server/src/main/config/application.properties<br>index fd79f6d..b78e4c2 100644<br>--- a/server/src/main/config/application.properties<br>+++ b/server/src/main/config/application.properties<br>@@ -27,7 +27,7 @@ office.plugin.task.timeout = 5m<br> file.dir = $&#123;KK_FILE_DIR:default&#125;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">openoffice home&lt;E8&gt;&lt;B7&gt;&lt;AF&gt;&lt;E5&gt;&lt;BE&gt;&lt;84&gt;</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">office.home = C:\\Program Files (x86)\\OpenOffice 4</span><br>-office.home = $&#123;KK_OFFICE_HOME:default&#125;<br>+office.home = /usr/lib64/libreoffice<br></code></pre></td></tr></table></figure><h3 id="mvn构建"><a href="#mvn构建" class="headerlink" title="mvn构建"></a>mvn构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean package -DskipTests -Prelease<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成对应的</span><br>cd server/target/<br>tar -zxvf kkFileView-4.0.0.tar.gz<br>cd kkFileView-4.0.0/bin<br>./start.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wget知识点详解</title>
    <link href="/2022/08/24/deploy/wget%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/08/24/deploy/wget%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>“world wide web”和”get”的结合，目前支持http、https以及ftp这三个TCP/IP协议下载。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持递归下载</li><li>支持代理服务器</li><li>恰当地转换页面中的连接</li><li>生成可在本地浏览的页面镜像</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p><code>wget</code>下载单文件</p></li><li><p><code>wget -O</code>：下载并以不同的文件名保存</p><p>将下载连接的文件保存为boost_1_80.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O boost_1_80.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li><li><p><code>wget -c</code>:断点续传</p></li><li><p><code>wget -q </code>:quiet (no output)——下载内容但不显示任何内容</p></li><li><p><code>wget -P</code>：下载到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -P/tmp https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>snap和apt</title>
    <link href="/2022/08/24/deploy/snap%E5%92%8Capt/"/>
    <url>/2022/08/24/deploy/snap%E5%92%8Capt/</url>
    
    <content type="html"><![CDATA[<h2 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h2><p><strong>软件包和部署系统</strong>。通过该应用程序与系统无关，也就是说可以在任何支持snap的linux发行版上本地运行。</p><p>一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。</p><p>类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。它们会被安装到单独的目录；各个应用程序之间相互隔离。使用snap有很多好处，首先它解决了软件包的依赖问题；其次，也使应用程序更容易管理。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><code>sudo snap list</code>:查看已下载snap的软件。</li></ol><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><p>软件包管理器，用于在基于 Debian 的系统上安装和删除软件包。APT 使检索、配置、升级、安装和删除包的过程自动化。</p><ul><li>你希望应用程序由你使用的发行版进行审核。</li><li>你担心节省存储空间。APT 安装的应用程序共享它们的依赖项。</li><li>你希望应用程序正确集成到GUI 环境中。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装vscode</title>
    <link href="/2022/08/24/deploy/ubuntu%E5%AE%89%E8%A3%85vscode/"/>
    <url>/2022/08/24/deploy/ubuntu%E5%AE%89%E8%A3%85vscode/</url>
    
    <content type="html"><![CDATA[<h3 id="在ubuntu的软件商城中安装code报错"><a href="#在ubuntu的软件商城中安装code报错" class="headerlink" title="在ubuntu的软件商城中安装code报错"></a>在ubuntu的软件商城中安装code报错</h3><p>Unable to install “Visual Studio Code”: snap “code” has “install-snap” change in progress；</p><h4 id="问题原因-amp-amp-解决"><a href="#问题原因-amp-amp-解决" class="headerlink" title="问题原因&amp;&amp;解决"></a>问题原因&amp;&amp;解决</h4><p>软件正在安装，所以不需要再次点击</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Doc$ snap changes<br>ID   Status  Spawn                   Ready                   Summary<br>1    Done    2022-02-23              yesterday at 11:37 CST  Initialize system state<br>2    Done    yesterday at 11:37 CST  yesterday at 11:37 CST  Initialize device<br>3    Done    yesterday at 11:42 CST  yesterday at 11:43 CST  Install &quot;typora&quot; snap from &quot;latest/stable&quot; channel<br>4    Done    yesterday at 14:03 CST  yesterday at 14:12 CST  Auto-refresh 4 snaps<br>5    Do      today at 11:06 CST      -                       Install &quot;code&quot; snap from &quot;latest/stable&quot; channel<br><br></code></pre></td></tr></table></figure><h3 id="从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode"><a href="#从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode" class="headerlink" title="从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode"></a>从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode</h3><p><strong>ubuntu 添加信任源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/<br>[sudo] password for ubuntu: <br>ubuntu@root:~/Desktop$ sudo sh -c &#x27;echo &quot;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;<br>ubuntu@root:~/Desktop$ rm -f packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo apt install apt-transport-https<br>Reading package lists... Done<br>Building dependency tree       <br>Reading state information... Done<br>The following packages were automatically installed and are no longer required:<br>  gyp javascript-common libc-ares2 libjs-inherits libjs-is-typedarray libjs-psl libjs-typedarray-to-buffer libpython2-stdlib libpython2.7-minimal libpython2.7-stdlib libssl-dev libuv1-dev<br>  python-pkg-resources python2 python2-minimal python2.7 python2.7-minimal<br>Use &#x27;sudo apt autoremove&#x27; to remove them.<br>The following NEW packages will be installed:<br>  apt-transport-https<br>0 upgraded, 1 newly installed, 0 to remove and 257 not upgraded.<br>Need to get 1,704 B of archives.<br>After this operation, 162 kB of additional disk space will be used.<br>Get:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]<br>Fetched 1,704 B in 1s (2,988 B/s)        <br>Selecting previously unselected package apt-transport-https.<br>(Reading database ... 196975 files and directories currently installed.)<br>Preparing to unpack .../apt-transport-https_2.0.9_all.deb ...<br>Unpacking apt-transport-https (2.0.9) ...<br>Setting up apt-transport-https (2.0.9) ...<br>ubuntu@root:~/Desktop$ sudo apt update -y<br>ubuntu@root:~/Desktop$ sudo apt install code -y<br></code></pre></td></tr></table></figure><p>下载之后重新打开，支持中文输入。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 安装nodejs</title>
    <link href="/2022/08/24/deploy/ubuntu%E5%AE%89%E8%A3%85nodejs/"/>
    <url>/2022/08/24/deploy/ubuntu%E5%AE%89%E8%A3%85nodejs/</url>
    
    <content type="html"><![CDATA[<h3 id="安装指定版本的nodejs"><a href="#安装指定版本的nodejs" class="headerlink" title="安装指定版本的nodejs"></a>安装指定版本的nodejs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -<br>sudo apt install nodejs<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
