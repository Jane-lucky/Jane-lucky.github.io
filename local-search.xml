<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go 第三方库之 amqp</title>
    <link href="/2022/09/29/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/channel.queueDeclare()%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/09/29/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/channel.queueDeclare()%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="创建队列——QueueDeclare"><a href="#创建队列——QueueDeclare" class="headerlink" title="创建队列——QueueDeclare"></a>创建队列——QueueDeclare</h1><h2 id="channel-queueDeclare-方法"><a href="#channel-queueDeclare-方法" class="headerlink" title="channel.queueDeclare()方法"></a>channel.queueDeclare()方法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*amqp.Channel)</span></span>.QueueDeclare(name <span class="hljs-type">string</span>, durable <span class="hljs-type">bool</span>, autoDelete <span class="hljs-type">bool</span>, exclusive <span class="hljs-type">bool</span>, noWait <span class="hljs-type">bool</span>, args amqp.Table) (amqp.Queue, <span class="hljs-type">error</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ch *Channel)</span></span> QueueDeclare(name <span class="hljs-type">string</span>, durable, autoDelete, exclusive, noWait <span class="hljs-type">bool</span>, args Table) (Queue, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> err := args.Validate(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> Queue&#123;&#125;, err<br>&#125;<br><br>req := &amp;queueDeclare&#123;<br>Queue:      name,<br>Passive:    <span class="hljs-literal">false</span>,<br>Durable:    durable,<br>AutoDelete: autoDelete,<br>Exclusive:  exclusive,<br>NoWait:     noWait,<br>Arguments:  args,<br>&#125;<br>res := &amp;queueDeclareOk&#123;&#125;<br><br><span class="hljs-keyword">if</span> err := ch.call(req, res); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> Queue&#123;&#125;, err<br>&#125;<br><br><span class="hljs-keyword">if</span> req.wait() &#123;<br><span class="hljs-keyword">return</span> Queue&#123;<br>Name:      res.Queue,<br>Messages:  <span class="hljs-type">int</span>(res.MessageCount),<br>Consumers: <span class="hljs-type">int</span>(res.ConsumerCount),<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">return</span> Queue&#123;Name: name&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><p>**name string:**队列的名称，也可以是空的，如果为空的话，系统内部会自动生成一个名称。</p><p>**durable bool:**是否持久化</p><p>持久化表示数据队列的持久化设置；</p><ul><li><code>true</code>:rabbitMQ重启之后队列信息不会丢失，重启之后会读取数据库。</li><li><code>false</code>：队列存放在内存中。</li></ul><p>**autoDelete bool:**是否自动删除</p><p>当为<code>true</code>的时候。当所有的消费者都与该队列断开连接的时候，该队列会自动进行删除。</p><p>**exclusive bool:**是否排外</p><p>如果一个队列声明为排他队列，那么仅对首次声明的连接可见，其余连接不可见。</p><p>基于连接可见，同个连接的不同管道是可以同时访问同一连接创建的排他队列的</p><p><strong>noWait bool:</strong></p><p><strong>args amqp.Table:</strong></p><h1 id="连接-connection"><a href="#连接-connection" class="headerlink" title="连接-connection"></a>连接-connection</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">amqp.Dial(&quot;amqp://guest:guest@172.17.0.2:5672&quot;<br></code></pre></td></tr></table></figure><h1 id="管道创建-Channel"><a href="#管道创建-Channel" class="headerlink" title="管道创建-Channel"></a>管道创建-Channel</h1><h1 id="消息投递（1）-PublishWithContext"><a href="#消息投递（1）-PublishWithContext" class="headerlink" title="消息投递（1）-PublishWithContext"></a>消息投递（1）-PublishWithContext</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Channel.PublishWithContext(ctx context.Context, exchange, key <span class="hljs-type">string</span>, mandatory, immediate <span class="hljs-type">bool</span>, msg Publishing)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(六) RabbitMQ go教程——远程过程调用（RPC）</title>
    <link href="/2022/09/28/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/RPC/"/>
    <url>/2022/09/28/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/RPC/</url>
    
    <content type="html"><![CDATA[<p>在之前的学习中，有学习如何使用工作队列在多个 工人中使用时间消耗任务。</p><p>但如果我们需要在远程电脑上运行一个函数同时等待结果，这就是另外一种方式，通常成为该方式为远程过程调用。</p><p>使用RabbitMQ构建RPC系统：一个客户端和一个可伸缩（scalable）的RPC服务端,由于我们没有任何值得分发的耗时任务，我们将创建一个返回斐波那契数列的虚拟的RPC服务</p><p><em>尽管RPC在电脑中是一个十分常见的模型，但它十分重要。当程序员不知道函数调用是本地函数调用还是慢速 RPC 时，就会出现问题。像这样的混乱会导致不可预测的系统，并增加调试不必要的复杂性。滥用RPC可能会导致无法维护的意大利面条式代码而不是简化软件</em></p><h1 id="回调队列"><a href="#回调队列" class="headerlink" title="回调队列"></a>回调队列</h1><p>在rabbitMQ上使用RPC是很简单的，客户端传递一个请求消息，服务端回复一个响应消息。为了可以接收到响应我们需要在请求中携带一个回调队列。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go">q, err := ch.QueueDeclare(<br>  <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-comment">// name</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// durable</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// delete when unused</span><br>  <span class="hljs-literal">true</span>,  <span class="hljs-comment">// exclusive</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// noWait</span><br>  <span class="hljs-literal">nil</span>,   <span class="hljs-comment">// arguments</span><br>)<br><br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">5</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>err = ch.PublishWithContext(ctx,<br>  <span class="hljs-string">&quot;&quot;</span>,          <span class="hljs-comment">// exchange</span><br>  <span class="hljs-string">&quot;rpc_queue&quot;</span>, <span class="hljs-comment">// routing key</span><br>  <span class="hljs-literal">false</span>,       <span class="hljs-comment">// mandatory</span><br>  <span class="hljs-literal">false</span>,       <span class="hljs-comment">// immediate</span><br>  amqp.Publishing&#123;<br>    ContentType:   <span class="hljs-string">&quot;text/plain&quot;</span>,<br>    CorrelationId: corrId,<br>    ReplyTo:       q.Name,<br>    Body:          []<span class="hljs-type">byte</span>(strconv.Itoa(n)),<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>CorrelationId</code>关联Id：在该队列中收到响应后，尚不清楚响应属于哪个请求。这个时候就该使用<code>correlation_id</code>这个属性了。针对每个请求我们将为其设置一个唯一值。随后，当我们在回调队列中收到消息时，我们将查看该属性，并基于这个属性将响应与请求进行匹配。如果我们看到未知的<code>correlation_id</code>值，则可以放心地丢弃该消息——它不属于我们的请求。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>send.go</code></p><p>服务器代码非常简单：</p><ul><li>与往常一样，我们首先建立连接，通道并声明队列。</li><li>我们可能要运行多个服务器进程。为了将负载平均分配给多个服务器，我们需要在通道上设置<code>prefetch</code>设置。</li><li>我们使用<code>Channel.Consume</code>获取去队列，我们从队列中接收消息。然后，我们进入goroutine进行工作，并将响应发送回去。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//定义一个helper函数来接受处理错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, msg, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomString</span><span class="hljs-params">(l <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>bytes := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, l)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; l; i++ &#123;<br>bytes[i] = <span class="hljs-type">byte</span>(randInt(<span class="hljs-number">65</span>, <span class="hljs-number">90</span>))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(bytes)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randInt</span><span class="hljs-params">(min <span class="hljs-type">int</span>, max <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> min + rand.Intn(max-min)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacciRPC</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> (res <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br>q, err := ch.QueueDeclare(<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br><br>failOnError(err, <span class="hljs-string">&quot;Faild to declare a queue&quot;</span>)<br><br>msgs, err := ch.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to register a consumer&quot;</span>)<br><br>corrId := randomString(<span class="hljs-number">32</span>)<br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">5</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>err = ch.PublishWithContext(ctx,<br><span class="hljs-string">&quot;&quot;</span>,          <span class="hljs-comment">// exchange</span><br><span class="hljs-string">&quot;rpc_queue&quot;</span>, <span class="hljs-comment">// routing key</span><br><span class="hljs-literal">false</span>,       <span class="hljs-comment">// mandatory</span><br><span class="hljs-literal">false</span>,       <span class="hljs-comment">// immediate</span><br>amqp.Publishing&#123;<br>ContentType:   <span class="hljs-string">&quot;text/plain&quot;</span>,<br>CorrelationId: corrId,<br>ReplyTo:       q.Name,<br>Body:          []<span class="hljs-type">byte</span>(strconv.Itoa(n)),<br>&#125;)<br>failOnError(err, <span class="hljs-string">&quot;Failed to publish a message&quot;</span>)<br><br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br><span class="hljs-keyword">if</span> corrId == d.CorrelationId &#123;<br>res, err = strconv.Atoi(<span class="hljs-type">string</span>(d.Body))<br>failOnError(err, <span class="hljs-string">&quot;Failed to convert body to integer&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>rand.Seed(time.Now().UTC().UnixNano())<br>n := bodyFrom(os.Args)<br>log.Printf(<span class="hljs-string">&quot;[x] Requesting fib(%d)&quot;</span>, n)<br>res, err := fibonacciRPC(n)<br>failOnError(err, <span class="hljs-string">&quot;Failed to handle RPC request&quot;</span>)<br><br>log.Printf(<span class="hljs-string">&quot; [.] Got %d&quot;</span>, res)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bodyFrom</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span> || os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;<br>s = <span class="hljs-string">&quot;30&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = strings.Join(args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br>n, err := strconv.Atoi(s)<br>failOnError(err, <span class="hljs-string">&quot;Failed to convert arg to integer&quot;</span>)<br><span class="hljs-keyword">return</span> n<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>receive.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, err, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-2</span>) + fib(n<span class="hljs-number">-1</span>)<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br>q, err := ch.QueueDeclare(<br><span class="hljs-string">&quot;rpc_queue&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br>err = ch.Qos(<br><span class="hljs-number">1</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">false</span>,<br>)<br><br>failOnError(err, <span class="hljs-string">&quot;Failed to set QoS&quot;</span>)<br><br><span class="hljs-comment">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-comment">//false,</span><br><span class="hljs-literal">false</span>, <span class="hljs-comment">//ack</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to register a consumer&quot;</span>)<br><br><span class="hljs-keyword">var</span> forever <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-comment">//forever := make(chan bool)</span><br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br>n, err := strconv.Atoi(<span class="hljs-type">string</span>(d.Body))<br>failOnError(err, <span class="hljs-string">&quot;Failed to convert body to integer&quot;</span>)<br><br>log.Printf(<span class="hljs-string">&quot;[.] fib*(%d)&quot;</span>, n)<br>response := fib(n)<br><br>err = ch.PublishWithContext(ctx,<br><span class="hljs-string">&quot;&quot;</span>,<br>d.ReplyTo,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br>amqp.Publishing&#123;<br>ContentType:   <span class="hljs-string">&quot;text/plain&quot;</span>,<br>CorrelationId: d.CorrelationId,<br>Body:          []<span class="hljs-type">byte</span>(strconv.Itoa(response)),<br>&#125;)<br>failOnError(err, <span class="hljs-string">&quot;Faild to publish a message&quot;</span>)<br>d.Ack(<span class="hljs-literal">false</span>)<br>&#125;<br>&#125;()<br>log.Printf(<span class="hljs-string">&quot; [*] Awaiting RPC requests&quot;</span>)<br>&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/go/src/gotest/send$ go run send.go <br>2022/09/29 14:47:36 [x] Requesting fib(30)<br>2022/09/29 14:47:36  [.] Got 832040<br>ubuntu@root:~/go/src/gotest/send$ go run send.go 3<br>2022/09/29 14:47:46 [x] Requesting fib(3)<br>2022/09/29 14:47:46  [.] Got 2<br>ubuntu@root:~/go/src/gotest/send$ go run send.go 5<br>2022/09/29 14:47:54 [x] Requesting fib(5)<br>2022/09/29 14:47:54  [.] Got 5<br><br>ubuntu@root:~/go/src/gotest/recevice$ go run receive.go <br>2022/09/29 14:44:22  [*] Awaiting RPC requests<br>2022/09/29 14:47:36 [.] fib*(30)<br>2022/09/29 14:47:46 [.] fib*(3)<br>2022/09/29 14:47:54 [.] fib*(5)<br></code></pre></td></tr></table></figure><p>这里介绍的设计不是RPC服务的唯一可能的实现，但是它具有一些重要的优点：</p><ul><li>如果RPC服务器太慢，则可以通过运行另一台RPC服务器来进行扩展。尝试在新控制台中运行另一个<code>rpc_server.go</code>。</li><li>在客户端，RPC只需要发送和接收一条消息。结果，RPC客户端只需要一个网络往返就可以处理单个RPC请求。</li></ul><p>我们的代码仍然非常简单，并且不会尝试解决更复杂（但很重要）的问题，例如：</p><ul><li>如果没有服务器在运行，客户端应如何反应？</li><li>客户端是否应该为RPC设置某种超时时间？</li><li>如果服务器发生故障并引发异常，是否应该将其转发给客户端？</li><li>在处理之前防止无效的传入消息（例如检查边界，类型）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(五) RabbitMQ go教程——主题（topics）</title>
    <link href="/2022/09/27/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98topic/"/>
    <url>/2022/09/27/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98topic/</url>
    
    <content type="html"><![CDATA[<p>上一个教程中，采用<code>direct</code>替换了<code>fanout</code>，获得了定向的日志传输和展现，但<code>direct</code>也是存在局限的：它不能基于多个条件进行路由。</p><p>在日志系统中，我们不仅仅是想获取定义严格的日志内容，而是任何资源发送的日志内容。为了实现这样的日志系统，将采用<code>topic</code>类型的转换器。</p><h1 id="Topic-exchange"><a href="#Topic-exchange" class="headerlink" title="Topic exchange"></a>Topic exchange</h1><p>消息通过<code>topic</code>不会有随意的routing_key——它必须是一组内容像是来限制<code>dots</code>。内容为任意但要区别其他。例如：“stock.usd.nyse”、”nyse.vmw”、“quick.orange.rabbit”,最大为225bytes。</p><p>绑定的key也应该是同样的形式，<code>topic</code>和<code>direct</code>、<code>fanout</code>是存在相同的特征的，不同的只是匹配模式不同</p><p><img src="/2022/09/27/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98topic/python-five.png" alt="python-five"></p><p><code>topic</code>通过配置字符串的方式来进行消息队列的传输，</p><p>如果接收的字符为<code>#</code>，则表示接收所有的信息，与<code>fanout</code>相同，如果接收中存在<code>*</code>，则与<code>direct</code>相同</p><p>其中运行代码和第四节相同，仅改变交换类型</p><ul><li>* (star) can substitute for exactly one word.</li><li># (hash) can substitute for zero or more words.</li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run receive.go &quot;#&quot;<br>go run receive.go &quot;kern.*&quot;<br>go run receive.go &quot;*.critical&quot;<br>go run receive.go &quot;kern.*&quot; &quot;*.critical&quot;<br>go run send.go &quot;kern.critical&quot; &quot;A critical kernel error&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(五) RabbitMQ go教程——路由（routing）</title>
    <link href="/2022/09/26/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/09/26/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<p>在之前的教程中，我们创建了一个小型的日志系统，可以给多个消费者广播一条消息。</p><p>本节可以消息发送到目标指定的接收者，比如说：对于日志系统来说，一般会存在这几类日志类型：errror、info、warning等，而我们可能仅对于error类型的错误需要存入磁盘中，其余的日志内容只需要打印出来就可以。</p><p>我们之前的有创建队列的绑定，该绑定与转换的格式相关，之前采用<code>fanout</code>类型的exchange，表示无差距的向队列传输消息。</p><p>绑定也可以通过routing ley来进行指定,具有选择的进行消息的传输</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">err = ch.QueueBind(<br>  q.Name,    <span class="hljs-comment">// queue name</span><br>  <span class="hljs-string">&quot;black&quot;</span>,   <span class="hljs-comment">// routing key</span><br>  <span class="hljs-string">&quot;logs&quot;</span>,    <span class="hljs-comment">// exchange</span><br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><p>绑定密钥的含义取决于交换器的类型，之前使用的<code>fanout</code>只是忽略了这个值。</p><h1 id="direct-交换器"><a href="#direct-交换器" class="headerlink" title="direct 交换器"></a>direct 交换器</h1><p>我们扩展之前的类型，希望将不同类型的消息进行不同方式的处理。采用<code>direct</code>的方式：消息进入<code>binding key</code> 和<code>routing key</code>完全匹配的队列中。</p><h2 id="send-go"><a href="#send-go" class="headerlink" title="send.go"></a><code>send.go</code></h2><p>创建一个交换器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//定义一个helper函数来接受处理错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, msg, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br><span class="hljs-comment">//作为发送者，需要声明一个转换体</span><br><br>err = ch.ExchangeDeclare(<br><span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-comment">//name</span><br><span class="hljs-string">&quot;direct&quot;</span>,      <span class="hljs-comment">//type</span><br><span class="hljs-literal">true</span>,          <span class="hljs-comment">//durable</span><br><span class="hljs-literal">false</span>,         <span class="hljs-comment">//auto-delete</span><br><span class="hljs-literal">false</span>,         <span class="hljs-comment">//internal</span><br><span class="hljs-literal">false</span>,         <span class="hljs-comment">//no-wait</span><br><span class="hljs-literal">nil</span>,           <span class="hljs-comment">//arguments</span><br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br><span class="hljs-comment">//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">//定义的队列是幂等的，消息内容是byte数组</span><br>body := bodyFrom(os.Args)<br><span class="hljs-comment">//body := &quot;Hello World&quot;</span><br><br>err = ch.PublishWithContext(ctx,<br><span class="hljs-string">&quot;logs_direct&quot;</span>,         <span class="hljs-comment">//exchange</span><br>severityFrom(os.Args), <span class="hljs-comment">//routing key</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br>amqp.Publishing&#123;<br>ContentType: <span class="hljs-string">&quot;text/plain&quot;</span>,<br>Body:        []<span class="hljs-type">byte</span>(body),<br>&#125;)<br>failOnError(err, <span class="hljs-string">&quot;Failed to publish a message&quot;</span>)<br>log.Printf(<span class="hljs-string">&quot;[x] Sent %s\n&quot;</span>, body)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bodyFrom</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span>) || os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;<br>s = <span class="hljs-string">&quot;Hello&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = strings.Join(args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">severityFrom</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span>) || (os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>s = <span class="hljs-string">&quot;info&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = os.Args[<span class="hljs-number">1</span>]<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="recivce-go"><a href="#recivce-go" class="headerlink" title="recivce.go"></a><code>recivce.go</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, err, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br>err = ch.ExchangeDeclare(<br><span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-comment">//name</span><br><span class="hljs-string">&quot;direct&quot;</span>,      <span class="hljs-comment">//type</span><br><span class="hljs-literal">true</span>,          <span class="hljs-comment">//durable</span><br><span class="hljs-literal">false</span>,         <span class="hljs-comment">//auto-delete</span><br><span class="hljs-literal">false</span>,         <span class="hljs-comment">//internal</span><br><span class="hljs-literal">false</span>,         <span class="hljs-comment">//no-wait</span><br><span class="hljs-literal">nil</span>,           <span class="hljs-comment">//arguments</span><br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br>q, err := ch.QueueDeclare(<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &lt; <span class="hljs-number">2</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;Usage: %s [info] [waring] [error]&quot;</span>, os.Args[<span class="hljs-number">0</span>])<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>log.Printf(<span class="hljs-string">&quot;Binding queue %s to exchange %s with routing key %s&quot;</span>,<br>q.Name, <span class="hljs-string">&quot;logs_direct&quot;</span>, s)<br>err = ch.QueueBind(<br>q.Name,        <span class="hljs-comment">// queue name</span><br>s,             <span class="hljs-comment">// routing key</span><br><span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-comment">// exchange</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to bind a queue&quot;</span>)<br>&#125;<br><br>failOnError(err, <span class="hljs-string">&quot;Failed to bind queue&quot;</span>)<br><br><span class="hljs-comment">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-comment">//false,</span><br><span class="hljs-literal">true</span>, <span class="hljs-comment">//ack</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to register a consumer&quot;</span>)<br><br><span class="hljs-keyword">var</span> forever <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-comment">//forever := make(chan bool)</span><br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br>log.Printf(<span class="hljs-string">&quot;Received a message: %s&quot;</span>, d.Body)<br>&#125;<br>&#125;()<br>log.Printf(<span class="hljs-string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/go/src/gotest/recevice$ go run receive.go info warning error<br><br>ubuntu@root:~/go/src/gotest/recevice$ go run receive.go  warning error &gt; logs_from_rabbit.log<br><br>ubuntu@root:~/go/src/gotest/send$ go run send.go error<br>2022/09/26 16:00:56 [x] Sent error<br>ubuntu@root:~/go/src/gotest/send$ go run send.go info<br>2022/09/26 16:03:08 [x] Sent info<br>ubuntu@root:~/go/src/gotest/send$ go run send.go warning<br>2022/09/26 16:03:17 [x] Sent warning<br>ubuntu@root:~/go/src/gotest/send$ go run send.go error<br><br></code></pre></td></tr></table></figure><p><img src="/2022/09/26/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E8%B7%AF%E7%94%B1/runtime.png" alt="runtime"></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>build-images自动化脚本学习（一）</title>
    <link href="/2022/09/22/docker/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/09/22/docker/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="镜像构建命令"><a href="#镜像构建命令" class="headerlink" title="镜像构建命令"></a>镜像构建命令</h1><p>脚本 版本 操作系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh build-image.sh 4.5.0 alpine<br></code></pre></td></tr></table></figure><h1 id="镜像构建脚本样例（rocketmq）"><a href="#镜像构建脚本样例（rocketmq）" class="headerlink" title="镜像构建脚本样例（rocketmq）"></a>镜像构建脚本样例（rocketmq）</h1><p>文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ecs-5e66 image-build]$ ll<br>total 28<br>-rw-r--r-- 1 root docker 1633 Sep 22 16:10 build-image-dashboard.sh<br>-rwxr-xr-x 1 root docker 1734 Sep 22 16:10 build-image.sh<br>-rw-r--r-- 1 root docker 3027 Sep 22 16:10 Dockerfile-alpine<br>-rw-r--r-- 1 root docker 3102 Sep 22 17:47 Dockerfile-centos<br>-rw-r--r-- 1 root docker 3861 Sep 22 16:10 Dockerfile-centos-dashboard<br>drwxr-xr-x 2 root docker 4096 Sep 22 16:10 scripts<br>-rwxr-xr-x 1 root docker 1726 Sep 22 16:10 update.sh<br>[root@ecs-5e66 image-build]$ cat build-image.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">检查版本</span><br>checkVersion() &#123;<br>    echo &quot;Version = $1&quot;<br>        echo $1 |grep -E &quot;^[0-9]+\.[0-9]+\.[0-9]+&quot; &gt; /dev/null<br>    if [ $? = 0 ]; then<br>        return 1<br>    fi<br><br>        echo &quot;Version $1 illegal, it should be X.X.X format(e.g. 4.5.0), please check released versions in &#x27;https://archive.apache.org/dist/rocketmq/&#x27;&quot;<br>    exit -1<br>&#125;<br><br>if [ $# -lt 2 ]; then<br>    echo -e &quot;Usage: sh $0 Version BaseImage&quot;<br>    exit -1<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">赋值命令行中的参数</span><br>ROCKETMQ_VERSION=$1<br>BASE_IMAGE=$2<br><br>checkVersion $ROCKETMQ_VERSION<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Build rocketmq 构建</span><br>case &quot;$&#123;BASE_IMAGE&#125;&quot; in<br>    alpine)<br>        docker build --no-cache -f Dockerfile-alpine -t apache/rocketmq:$&#123;ROCKETMQ_VERSION&#125;-alpine --build-arg version=$&#123;ROCKETMQ_VERSION&#125; .<br>    ;;<br>    centos)<br>        docker build --no-cache -f Dockerfile-centos -t apache/rocketmq:$&#123;ROCKETMQ_VERSION&#125; --build-arg version=$&#123;ROCKETMQ_VERSION&#125; .<br>    ;;<br>    *)<br>        echo &quot;$&#123;BASE_IMAGE&#125; is not supported, supported base images: centos, alpine&quot;<br>        exit -1<br>    ;;<br>esac<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(三) RabbitMQ go教程——发布/订阅（publish/subscribe）</title>
    <link href="/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/"/>
    <url>/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/</url>
    
    <content type="html"><![CDATA[<p>在之前的文章中，我们创建一个工作队列，假设在一个工作队列中每一个task都均由一个工人传输。</p><p>在本节中，将一条消息传输给多个消费者，该模式称为<strong>发布/订阅（publish/subscribe）</strong></p><p>为了说明该模式，会创建一个日志系统：由两个程序组成（一个负责发出日志信息，另一个接收并打印）。</p><p>在日志系统中，每一个程序运行的接收副本都会得到消息。通过该方法我们可以运行一个接收者并将日志保存到磁盘，与此同时我门也可以运行另一个接收者同时看见该日志。</p><p>发布的日志信息将会对所有的接收者查看。</p><p>在之前的文章中，是直接通过队列传递的消息，接下来介绍在rabbit中的<strong>消息模型</strong></p><p>消息模型的核心是生产者从来不直接向队列中发送任何消息，事实上，几乎所有的生产者都不知道消息会被传递到队列中。生产者会将消息发送至转换体中，它是一个十分简单的内容——一边接从所有的生产者中接收到消息，以便将消息推送到队列中。转换者必须明确的知道如何处理接收的消息。</p><p><img src="/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/exchanges.png" alt="exchanges"></p><p>转换的变量主要有<code>direct</code>、<code>topic</code>、<code>headers</code>、<code>fanout</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">err = ch.ExchangeDeclare(<br>  <span class="hljs-string">&quot;logs&quot;</span>,   <span class="hljs-comment">// name</span><br>  <span class="hljs-string">&quot;fanout&quot;</span>, <span class="hljs-comment">// type</span><br>  <span class="hljs-literal">true</span>,     <span class="hljs-comment">// durable</span><br>  <span class="hljs-literal">false</span>,    <span class="hljs-comment">// auto-deleted</span><br>  <span class="hljs-literal">false</span>,    <span class="hljs-comment">// internal</span><br>  <span class="hljs-literal">false</span>,    <span class="hljs-comment">// no-wait</span><br>  <span class="hljs-literal">nil</span>,      <span class="hljs-comment">// arguments</span><br>)<br></code></pre></td></tr></table></figure><p><code>fanout</code>是比较简单，从名字可以看出来，它仅是向它知道的队列去广播所有接收的消息。</p><h1 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h1><p>之前使用特殊名字的队列（hello），能够命名队列是很重要的——我门需要给工人指向相同的队列，在生产者和消费者之间分享队列名称是极其重要的。</p><p>但是对本次的日志来说并不，我们需要监听到所有的日志信息，而不仅是其中一个，我们也只对当前流动的消息感兴趣，而不是对旧消息感兴趣。</p><ul><li>无论什么时候当我们连接rabbit的时候，都需要一个干净的、空的队列，为此我们随机创建一个队列名称或者让服务器随机为我们选择一个队列名称。</li><li>当不再连接的时候需要立即删除该队列。</li></ul><p>在amqp中，当声明一个空字符串的队列时，会随机生成一个队列名称，定义执行状态为true，当关闭连接的时候，该队列会被删除。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">q, err := ch.QueueDeclare(<br>  <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-comment">// name</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// durable</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// delete when unused</span><br>  <span class="hljs-literal">true</span>,  <span class="hljs-comment">// exclusive</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// no-wait</span><br>  <span class="hljs-literal">nil</span>,   <span class="hljs-comment">// arguments</span><br>)<br></code></pre></td></tr></table></figure><h1 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h1><p><img src="/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/bindings.png" alt="bindings"></p><p>定义了一个<code>fanout</code>的转换体和队列，现在需要告诉转换体发送消息到队列中，该操作成为<strong>绑定</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">err = ch.QueueBind(<br>  q.Name, <span class="hljs-comment">// queue name</span><br>  <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-comment">// routing key</span><br>  <span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-comment">// exchange</span><br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">nil</span>,<br>)<br></code></pre></td></tr></table></figure><p>现在日志就被追加到队列中</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><code>receive.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, err, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br>err = ch.ExchangeDeclare(<br><span class="hljs-string">&quot;logs&quot;</span>,   <span class="hljs-comment">//name</span><br><span class="hljs-string">&quot;fanout&quot;</span>, <span class="hljs-comment">//type</span><br><span class="hljs-literal">true</span>,     <span class="hljs-comment">//durable</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">//auto-delete</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">//internal</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">//no-wait</span><br><span class="hljs-literal">nil</span>,      <span class="hljs-comment">//arguments</span><br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br>q, err := ch.QueueDeclare(<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br><span class="hljs-comment">//绑定</span><br>err = ch.QueueBind(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;logs&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br><br>failOnError(err, <span class="hljs-string">&quot;Failed to bind queue&quot;</span>)<br><br><span class="hljs-comment">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-comment">//false,</span><br><span class="hljs-literal">true</span>, <span class="hljs-comment">//ack</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to register a consumer&quot;</span>)<br><br><span class="hljs-keyword">var</span> forever <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-comment">//forever := make(chan bool)</span><br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br>log.Printf(<span class="hljs-string">&quot;Received a message: %s&quot;</span>, d.Body)<br>&#125;<br>&#125;()<br>log.Printf(<span class="hljs-string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>send.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-comment">//定义一个helper函数来接受处理错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, msg, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br><span class="hljs-comment">//作为发送者，需要声明一个转换体</span><br><br>err = ch.ExchangeDeclare(<br><span class="hljs-string">&quot;logs&quot;</span>,   <span class="hljs-comment">//name</span><br><span class="hljs-string">&quot;fanout&quot;</span>, <span class="hljs-comment">//type</span><br><span class="hljs-literal">true</span>,     <span class="hljs-comment">//durable</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">//auto-delete</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">//internal</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">//no-wait</span><br><span class="hljs-literal">nil</span>,      <span class="hljs-comment">//arguments</span><br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br><span class="hljs-comment">//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">//定义的队列是幂等的，消息内容是byte数组</span><br>body := bodyFrom(os.Args)<br><span class="hljs-comment">//body := &quot;Hello World&quot;</span><br><br>err = ch.PublishWithContext(ctx,<br><span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-comment">//exchange</span><br><span class="hljs-string">&quot; &quot;</span>,    <span class="hljs-comment">//routing key</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br>amqp.Publishing&#123;<br>ContentType: <span class="hljs-string">&quot;text/plain&quot;</span>,<br>Body:        []<span class="hljs-type">byte</span>(body),<br>&#125;)<br>failOnError(err, <span class="hljs-string">&quot;Failed to publish a message&quot;</span>)<br>log.Printf(<span class="hljs-string">&quot;[x] Sent %s\n&quot;</span>, body)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bodyFrom</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span>) || os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;<br>s = <span class="hljs-string">&quot;Hello&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = strings.Join(args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/runResult.png" alt="runResult"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@2f82bf702d30:/# rabbitmqctl list_exchanges<br>Listing exchanges for vhost / ...<br>nametype<br>amq.topictopic<br>logsfanout<br>amq.matchheaders<br>amq.directdirect<br>amq.headersheaders<br>direct<br>amq.fanoutfanout<br>amq.rabbitmq.tracetopic<br>root@2f82bf702d30:/# rabbitmqctl list_bindings<br>Listing bindings for vhost /...<br>source_namesource_kinddestination_namedestination_kindrouting_keyarguments<br>exchangehelloqueuehello[]<br>exchangeamq.gen-qoEkayPewVkEKGRdmcKKtwqueueamq.gen-qoEkayPewVkEKGRdmcKKtw[]<br>logsexchangeamq.gen-qoEkayPewVkEKGRdmcKKtwqueue[]<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(二) RabbitMQ go教程——工作队列（work queues）</title>
    <link href="/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/"/>
    <url>/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>本节会创建一个<code>work queue</code>,它将在多个工作中分发耗时消费任务。</p><p><code>work queue</code>的核心避免快速处理资源密集的任务，必须等待来完成，相反是在完成之后进行调度。封装一个任务作为消息发送给一个队列，一个在后台运行的任务程序将会弹出并处理执行该任务。当有很多works的时候将会在它们之间进行共享。</p><p>本节内容在web服务中是极其有用的，可以在一个短的http请求中处理一个完整的任务（例如注册时发送邮件或短信验证码等场景）。</p><p>本节代码基于前一节进行改动，只展示改动部分：借助<code>time.Sleep</code>函数模拟一些比较耗时的任务——将一些包含<code>.</code>的字符串封装成消息发送，有一个<code>.</code>就表示需要耗费1秒钟的工作。</p><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>默认情况下，rabbitMQ会给每一个消费者发送每一条消息，平均每一个消费者均会得到相同数量的信息。以下方法称为循环：生产者发送消息的时候，存在多个消费者的时候，消费者依次获取信息。</p><p><strong>Round-robin</strong>的优点是可较容易的并行化，如果工作积压，可以增加多个工人，轻松完成</p><h2 id="send-go"><a href="#send-go" class="headerlink" title="send.go"></a>send.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//定义的队列是幂等的，消息内容是byte数组</span><br>body := bodyFrom(os.Args)<br><span class="hljs-comment">//body := &quot;Hello World&quot;</span><br><br></code></pre></td></tr></table></figure><p>添加bodyFrom方法，读取命令行参数信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bodyFrom</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span>) || os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;<br>s = <span class="hljs-string">&quot;Hello&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = strings.Join(args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="receive-go"><a href="#receive-go" class="headerlink" title="receive.go"></a>receive.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br>log.Printf(<span class="hljs-string">&quot;Received a message: %s&quot;</span>, d.Body)<br>dotCount := bytes.Count(d.Body, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>t := time.Duration(dotCount)<br>time.Sleep(time.Second * t) <span class="hljs-comment">//模拟耗时任务</span><br>log.Printf(<span class="hljs-string">&quot;Done&quot;</span>)<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run send.go First message.<br>go run send.go Second message..<br>go run send.go Third message...<br>go run send.go Fourth message....<br>go run send.go Fifth message.....<br></code></pre></td></tr></table></figure><p><img src="/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/1663727458340.png" alt="1663727458340"></p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>在上述模拟程序中，如果一个消费者执行了一个较长的任务的时候宕机，我们可能会觉得在接收消息的时候可能会出现消息丢失的情况，但实际上情况并没有想象的那么糟糕。并没有丢失任何一个任务消息，其他运行的接受者会接替已经死亡的这个节点，确保接收信息的准确性。</p><p>原因是RabbitMQ提供<code>ack</code>确认机制，接受者会提供一个确认信号返回给rabbitmq告知信息已经被取出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>q.Name, <span class="hljs-comment">//queue</span><br><span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//consumer</span><br><span class="hljs-literal">true</span>, <span class="hljs-comment">//ack</span><br><span class="hljs-literal">false</span>,<span class="hljs-comment">//exclusive</span><br><span class="hljs-literal">false</span>,<span class="hljs-comment">//no-local</span><br><span class="hljs-literal">false</span>,<span class="hljs-comment">//no-wait</span><br><span class="hljs-literal">nil</span>,<span class="hljs-comment">//args</span><br>)<br></code></pre></td></tr></table></figure><p>如果消费者消失（chan关闭，连接关闭或者TCP连接丢失）没有发送ack，rabbitMQ会认为该信息并没有被完整接收，将会返回到队列中。与此同时如果存在其他的消费者的话，会快速传递给其他消费值。</p><p>设置ack为false进行手动确认</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go">msgs, err := ch.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-comment">//true, //ack</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to register a consumer&quot;</span>)<br><br><span class="hljs-keyword">var</span> forever <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-comment">//forever := make(chan bool)</span><br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br>log.Printf(<span class="hljs-string">&quot;Received a message: %s&quot;</span>, d.Body)<br>dotCount := bytes.Count(d.Body, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>t := time.Duration(dotCount)<br>time.Sleep(time.Second * t)<br>log.Printf(<span class="hljs-string">&quot;Done&quot;</span>)<br>d.Ack(<span class="hljs-literal">false</span>)<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h1 id="公平分发"><a href="#公平分发" class="headerlink" title="公平分发"></a>公平分发</h1><p>如果存在调度的不公平性，例如：存在两个任务，但在任务分发的时候，存在奇数任务重，偶数轻，如果依旧按照上述的分配方式，会出现资源闲置的问题。</p><p><strong>解决：</strong>可以将预取计数设置为1（目的是告诉不要向一个work发出多个消息——在处理并确认前一条消息的之前，不要重复发送）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">err = ch.Qos(<br>  <span class="hljs-number">1</span>,     <span class="hljs-comment">// prefetch count</span><br>  <span class="hljs-number">0</span>,     <span class="hljs-comment">// prefetch size</span><br>  <span class="hljs-literal">false</span>, <span class="hljs-comment">// global</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ服务搭建</title>
    <link href="/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/rabbitMQ%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/rabbitMQ%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>RabbitMQ是一个消息代理，它接收和发送消息。可以认为是一个邮局：当你把你想要邮寄的邮件放进一个邮箱时，你可以确定邮差会将邮件送到收件人那。</p><p>与邮局不同的，RabbitMQ接收、存储和转发二进制数据块——消息。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><strong>生产者</strong>意味着发送，发送消息的程序就是生产者。</p><p><strong>队列</strong>一个较大的缓冲队列，生产者可以发送消息，消费者可以从里面获取消息。</p><p><strong>消费者</strong>是一个主要等待接受消息的程序</p><h1 id="镜像获取"><a href="#镜像获取" class="headerlink" title="镜像获取"></a>镜像获取</h1><p>获取RabbitMQ 管理端镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker rabbitmq:<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">22</span>-management<br><span class="hljs-attribute">sudo</span> docker run -itd --name rabbitmq -p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> rabbitmq:<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">22</span>-management<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(一) RabbitMQ go教程——Hello World</title>
    <link href="/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/"/>
    <url>/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/</url>
    
    <content type="html"><![CDATA[<p>使用GO RabbitMQ client</p><p>在该示例中，会分别写一个生产者一个消费者，其中生产者发送简单的消息，消费者获取信息并打印。</p><p><img src="/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/python-one.png" alt="python-one"></p><h1 id="send-go"><a href="#send-go" class="headerlink" title="send.go"></a>send.go</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-comment">//定义一个helper函数来接受处理错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, msg, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br><span class="hljs-comment">//作为发送者，需要声明队列：向队列中推送消息</span><br>q, err := ch.QueueDeclare(<br><span class="hljs-string">&quot;hello&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><br>    <span class="hljs-comment">//设置context包，context:可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">//定义的队列是幂等的，消息内容是byte数组</span><br>body := <span class="hljs-string">&quot;Hello World&quot;</span><br><br>err = ch.PublishWithContext(ctx,<br><span class="hljs-string">&quot;&quot;</span>,<br>q.Name,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br>amqp.Publishing&#123;<br>ContentType: <span class="hljs-string">&quot;text/plain&quot;</span>,<br>Body:        []<span class="hljs-type">byte</span>(body),<br>&#125;)<br>failOnError(err, <span class="hljs-string">&quot;Failed to publish a message&quot;</span>)<br>log.Printf(<span class="hljs-string">&quot;[x] Sent %s\n&quot;</span>, body)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="receive-go"><a href="#receive-go" class="headerlink" title="receive.go"></a>receive.go</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><br>amqp <span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">failOnError</span><span class="hljs-params">(err <span class="hljs-type">error</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panicf(<span class="hljs-string">&quot;%s:%s&quot;</span>, err, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//连接rabbitMQ服务端</span><br>conn, err := amqp.Dial(<span class="hljs-string">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to connect to RabbitMQ&quot;</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建管道</span><br>ch, err := conn.Channel()<br>failOnError(err, <span class="hljs-string">&quot;Failed to open a channel&quot;</span>)<br><span class="hljs-keyword">defer</span> ch.Close()<br><br><span class="hljs-comment">//声明队列，先于发布者开始消费者，需要确保队列在消费的时候是存在的</span><br>q, err := ch.QueueDeclare(<br><span class="hljs-string">&quot;hello&quot;</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;failed to declare a queue&quot;</span>)<br><span class="hljs-comment">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br>failOnError(err, <span class="hljs-string">&quot;Failed to register a consumer&quot;</span>)<br><br><span class="hljs-comment">//var forever chan struct&#123;&#125;</span><br>forever := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> d := <span class="hljs-keyword">range</span> msgs &#123;<br>log.Printf(<span class="hljs-string">&quot;Received a message: %s&quot;</span>, d.Body)<br>&#125;<br>&#125;()<br>log.Printf(<span class="hljs-string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/go/src/gotest/send$  go run send.go<br>2022/09/20 15:28:31 [x] Sent Hello World<br>ubuntu@root:~/go/src/gotest/recevice$  go run receive.go<br>2022/09/20 15:28:18  [*] Waiting for messages. To exit press CTRL+C<br>2022/09/20 15:28:31 Receiced a message: Hello World<br>panic: Receiced a message: Hello World<br>......<br></code></pre></td></tr></table></figure><p>消费者将打印通过RabbitMQ从发布者那里得到的消息。使用者将持续运行，等待消息（使用Ctrl-C停止它），因此请尝试从另一个终端运行发布者。</p><p>如果要检查队列，可以使用<code>rabbitmqctl list_queues</code></p><p>查看<a href="http://jane-lucky.github.io/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/">第二节</a>创建简单的工作队列</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>RabbitMQ-go教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git相关操作命令</title>
    <link href="/2022/09/20/linux/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/20/linux/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h1><p>使用git remote set-url命令从SSH到HTTPS的远程URL,设置之后，可无需输入密码进行<code>git push</code>等操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote set-url origin https://token@github.com/username/repositoryName<br></code></pre></td></tr></table></figure><p>验证是否改变</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br>originhttps://token@github.com/username/repositoryName (fetch)<br>originhttps://token@github.com/username/repositoryName (push)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">origin为远程地址的别名</span><br></code></pre></td></tr></table></figure><h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>配置规则不生效，因为<code>.gitignore</code>只能忽略那些原来没有被track的文件，如果文件已经被纳入了版本管理，该文件内容是不生效的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rm -r --cached .<br>git add .<br>git commit -m &quot;update .gitignore&quot;<br></code></pre></td></tr></table></figure><p><code>.gitignore</code>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs .gitignore">_config.yml<br>.gitignore<br>.deploy_git/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker镜像获取失败</title>
    <link href="/2022/09/20/docker/docker%E9%95%9C%E5%83%8F%E8%8E%B7%E5%8F%96%E5%A4%B1%E8%B4%A5/"/>
    <url>/2022/09/20/docker/docker%E9%95%9C%E5%83%8F%E8%8E%B7%E5%8F%96%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-pull失败"><a href="#docker-pull失败" class="headerlink" title="docker pull失败"></a>docker pull失败</h1><p>最经在虚机中下载docker镜像，之前已经可以成功<code>docker pull</code>下来，今天都获取失败，均报如下错误，但有的又可以正常下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22-alpine<br>Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: x509: certificate is valid for *.helpapp.io, not registry-1.docker.io<br>ubuntu@root:~/Desktop$ docker logout<br>Removing login credentials for https://index.docker.io/v1/<br>ubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22<br>3.9.22: Pulling from library/rabbitmq<br>675920708c8b: Already exists <br>......<br>21d42f925919: Already exists <br>Digest: sha256:fa2a3e972323d5e3a426acec7159b460aa06b07a3732cebb4892fe65446048d6<br>Status: Downloaded newer image for rabbitmq:3.9.22<br>docker.io/library/rabbitmq:3.9.22<br></code></pre></td></tr></table></figure><h1 id="解决方法-玄学，下午下载又成功了，可能是网络问题"><a href="#解决方法-玄学，下午下载又成功了，可能是网络问题" class="headerlink" title="解决方法(玄学，下午下载又成功了，可能是网络问题)"></a>解决方法(玄学，下午下载又成功了，可能是网络问题)</h1><p>查看网上好多解决方法，表示国内把hub禁了（大概率不需要），不能下载，需要切换docker下载镜像的源配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop$ cat /etc/docker/daemon.json <br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],<br>    &quot;live-restore&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><p>但配置文件之后，不能正常下载。</p><ol><li>换到其他云环境，依旧不能正常下载，报错为获取超时，后续尝试成功，可能是因为网络问题，建议如果下载失败，之后没准就成功了，玄学：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ecs-arm-k8s-master01 ~]# docker pull rabbitmq:3.9.22-alpine<br>Error response from daemon: Head &quot;https://registry-1.docker.io/v2/library/rabbitmq/manifests/3.9.22-alpine&quot;: net/http: TLS handshake timeout<br></code></pre></td></tr></table></figure><ol start="2"><li><p>之前在云服务器上也有相同的下载问题，但极大可能都是其他人在环境有登陆docker，可能导致镜像获取不到，一般<code>docker logout</code>就可以解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">you are load balancing between two (or more) registries, and you did not configure the shared secret properly<br>your are load balancing, and one of your registry is not configured properly to use the shared storage<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改linux命令提示符</title>
    <link href="/2022/09/20/linux/%E4%BF%AE%E6%94%B9linux%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/"/>
    <url>/2022/09/20/linux/%E4%BF%AE%E6%94%B9linux%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p><strong>通过设置PS1环境变量的值来达到修改linux命令提示符的目的</strong></p><h2 id="Linux修改命令提示符参数"><a href="#Linux修改命令提示符参数" class="headerlink" title="Linux修改命令提示符参数"></a>Linux修改命令提示符参数</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>\d</code></td><td>代表日期，格式为 weekday month date，例如：”Mon Aug 1”</td></tr><tr><td><code>\H</code></td><td>完整的主机名称</td></tr><tr><td><code>\h</code></td><td>仅取主机的第一个名字</td></tr><tr><td><code>\T</code></td><td>显示时间为 24 小时格式，如：HH：MM：SS</td></tr><tr><td><code>\t</code></td><td>显示时间为 12 小时格式 , 如：HH：MM：SS</td></tr><tr><td><code>\A</code></td><td>显示时间为 12 小时格式：HH：MM</td></tr><tr><td><code>\u</code></td><td>当前用户的账号名称</td></tr><tr><td><code>\v</code></td><td>BASH 的版本信息</td></tr><tr><td><code>\w</code></td><td>完整的工作目录名称</td></tr><tr><td><code>\W</code></td><td>利用 basename 取得工作目录名称，所以只会列出最后一个目录</td></tr><tr><td><code>#</code></td><td>下达的第几个命令</td></tr><tr><td><code>$</code></td><td>提示字符，如果是 root 时，提示符为：# ，普通用户则为：$</td></tr></tbody></table><h2 id="临时修改linux提示符"><a href="#临时修改linux提示符" class="headerlink" title="临时修改linux提示符"></a>临时修改linux提示符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@74d785955174 /08:18:59]# PS1=&quot;[\u\w\t]\\$&quot;<br>[root/08:19:16]#PS1=&quot;[\u\w\v]\\$&quot;<br>[root/4.2]#PS1=&quot;[\u\v]\\$&quot;<br>[root4.2]#PS1=&quot;[\u@\v]\\$&quot;<br>[root@4.2]#PS1=&quot;[\u@\v \W]\\$&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 常见文本处理命令</title>
    <link href="/2022/09/20/linux/Linux-cut%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/20/linux/Linux-cut%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><table><thead><tr><th>类型</th><th>命令</th></tr></thead><tbody><tr><td>查看文件</td><td>cat、more、less</td></tr><tr><td>文件摘选</td><td>head、tail</td></tr><tr><td>提取文件内容</td><td>cut、awk、grep</td></tr><tr><td>文件排序与比较</td><td>wc、sort、diff</td></tr><tr><td>文本操作工具</td><td>sed、tr</td></tr></tbody></table><h2 id="CUT"><a href="#CUT" class="headerlink" title="CUT"></a>CUT</h2><p>文件内容的查看，显示行中的指定部分，删除文件中的指定字段。</p><p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Mandatory arguments to long options are mandatory for short options too.<br>  -b, --bytes=LIST        select only these bytes<br>  -c, --characters=LIST   select only these characters<br>  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter<br>  -f, --fields=LIST       select only these fields;  also print any line<br>                            that contains no delimiter character, unless<br>                            the -s option is specified<br>  -n                      with -b: don&#x27;t split multibyte characters<br>      --complement        complement the set of selected bytes, characters<br>                            or fields<br>  -s, --only-delimited    do not print lines not containing delimiters<br>      --output-delimiter=STRING  use STRING as the output delimiter<br>                            the default is to use the input delimiter<br>      --help     display this help and exit<br>      --version  output version information and exit<br></code></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-node1 localhost]# cat test.txt<br>No Name Mark Percent<br>01 tom 69 91<br>02 jack 71 87<br>03 alex 68 98<br>[root@k8s-node1 localhost]# cut -f2 -d&quot; &quot; test.txt<br>Name<br>tom<br>jack<br>alex<br>[root@k8s-node1 localhost]# cut -f2- -d&quot; &quot; test.txt<br>Name Mark Percent<br>tom 69 91<br>jack 71 87<br>alex 68 98<br>[root@k8s-node1 localhost]# cut -c 2 test.txt<br>o<br>1<br>2<br>3<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim的常用操作</title>
    <link href="/2022/09/20/linux/vim%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/20/linux/vim%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td>vim -M test.log</td><td>以只读的方式打开，不可强制保存</td></tr><tr><td>vim +8 test.log</td><td>编辑打开文档，光标停留的行数</td></tr><tr><td>vim -R test.log</td><td>以只读的方式打开，强制保存</td></tr><tr><td>yy或者y</td><td>复制一行</td></tr><tr><td>p</td><td>光标后一行粘贴</td></tr><tr><td>dd</td><td>删除</td></tr><tr><td>0</td><td>行尾</td></tr><tr><td>$</td><td>行首</td></tr><tr><td>:set nu</td><td>显示行数</td></tr><tr><td>/字符串+enter</td><td>查找字符串</td></tr><tr><td>:set hlsearch</td><td>查找字符串高亮</td></tr><tr><td>n</td><td>查找下一个</td></tr><tr><td>shift+n</td><td>查找上一个</td></tr><tr><td>:1.5s/new/old/g</td><td>替换</td></tr><tr><td>ctrl+r</td><td>还原</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>P</td><td>光标前一行插入</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s对象管理</title>
    <link href="/2022/09/19/k8s/%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86/"/>
    <url>/2022/09/19/k8s/%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="指令式命令管理"><a href="#指令式命令管理" class="headerlink" title="指令式命令管理"></a>指令式命令管理</h1><p><code>kubectl</code>采用动词驱动的方式来创建一些常见的对象类型。</p><p><code>run</code>:创建一个pod运行容器。</p><p><code>create</code>:创建对象——支持JSON和YMAL格式类型。</p><p>可以创建不同的对象类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">Examples:<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Create a pod using the data <span class="hljs-keyword">in</span> pod.json</span><br>  kubectl create -f ./pod.json<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Create a pod based on the JSON passed into stdin</span><br>  cat pod.json | kubectl create -f -<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Edit the data <span class="hljs-keyword">in</span> registry.yaml <span class="hljs-keyword">in</span> JSON <span class="hljs-keyword">then</span> create the resource using the edited data</span><br>  kubectl create -f registry.yaml --edit -o json<br></code></pre></td></tr></table></figure><p><code>delete</code>:与create的用法相似</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">Examples:<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete a pod using the <span class="hljs-built_in">type</span> and name specified <span class="hljs-keyword">in</span> pod.json</span><br>  kubectl delete -f ./pod.json<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete resources from a directory containing kustomization.yaml - e.g. <span class="hljs-built_in">dir</span>/kustomization.yaml</span><br>  kubectl delete -k dir<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete resources from all files that end with <span class="hljs-string">&#x27;.json&#x27;</span> - i.e. <span class="hljs-built_in">expand</span> wildcard characters <span class="hljs-keyword">in</span> file names</span><br>  kubectl delete -f &#x27;*.json&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete a pod based on the <span class="hljs-built_in">type</span> and name <span class="hljs-keyword">in</span> the JSON passed into stdin</span><br>  cat pod.json | kubectl delete -f -<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete pods and services with same names <span class="hljs-string">&quot;baz&quot;</span> and <span class="hljs-string">&quot;foo&quot;</span></span><br>  kubectl delete pod,service baz foo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete pods and services with label name=myLabel</span><br>  kubectl delete pods,services -l name=myLabel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete a pod with minimal delay</span><br>  kubectl delete pod foo --now<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Force delete a pod on a dead node</span><br>  kubectl delete pod foo --force<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Delete all pods</span><br>  kubectl delete pods --all<br><br></code></pre></td></tr></table></figure><p><code>set</code>：在创建对象之前修改对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create service clusterip my-svc --clusterip=&quot;None&quot; -o yaml --dry-run=client | kubectl set selector --local -f - &#x27;environment=qa&#x27; -o yaml | kubectl create -f -<br></code></pre></td></tr></table></figure><p><code>kubectl create service clusterip my-svc --clusterip=&quot;None&quot; -o yaml --dry-run=client</code>:创建service配置，但将其以YAML格式标准输出上打印而不是发送API服务器。</p><p><code>kubectl set selector --local -f - &#39;environment=qa&#39; -o yaml</code>从标准输入读入配置，更新yaml。</p><p><code>kubectl create -f -</code>:使用标准输入上获得的配置创建对象</p><p><code>edit</code>更改对象</p><p><code>kubectl create --edit</code>来在对象创建之前更改配置。</p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s基础</title>
    <link href="/2022/09/19/k8s/k8s%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <url>/2022/09/19/k8s/k8s%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>kubernetes——可移植、可扩展，用于管理容器化的工作负载和服务。可促进声明式配置和自动化。</p><h2 id="组件的部署方式"><a href="#组件的部署方式" class="headerlink" title="组件的部署方式"></a>组件的部署方式</h2><p>传统部署：在物理服务器中部署不同的应用程序，多种不同的应用程序在部署过程中存在资源分配的问题。如果将不同的应用程序部署在不同的服务器部署，则会出现资源浪费问题。</p><p>虚拟化部署：在物理服务器中设置不同的虚机系统，实现的资源的隔离，解决了资源分配问题。虚拟化技术能够更好的利用物理服务器资源，具有较好的可扩缩行等。</p><p>容器部署：和虚拟化部署类似，但相比虚拟化，容器部署会更加的轻，只要基础架构相同，可以更便捷的进行不同主机、不同云之间的移植。</p><ul><li>敏捷应用程序的创建和部署。</li><li>持续开发、集成和部署。</li><li>关注开发和运维的分离、跨开发、测试和生产的环境的一致性、可移植性。</li><li>以应用程序为中心的管理。</li><li>松散耦合、分布式、弹性、解放的微服务。</li><li>可观察性、资源隔离、利用</li></ul><h2 id="k8s的用处和劣势"><a href="#k8s的用处和劣势" class="headerlink" title="k8s的用处和劣势"></a>k8s的用处和劣势</h2><ul><li>服务发现和负载均衡</li><li>存储编排：自主选择自己的存储挂载系统，本地存储、公共云提供商等。</li><li>自动部署和回滚：确保服务的完整运行。</li><li>自动完成装箱计算、自动修复</li><li>密钥与配置管理</li></ul><p>服务发现：在传统的部署环境中，服务运行在已知的IP和端口上。服务器之间的调用是通过端口和ip的方式来进行通信。在虚拟化环境中，服务的的地址经常发生变动，变动也就产生了服务发现的方式。</p><p>可移植：可以在不同的系统运行。</p><p>可扩展：资源、空间不够的时候，可以轻松扩展。</p><p>声明式配置：相对于命令式操作，对于重复操作的效果是稳定的。</p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http详解</title>
    <link href="/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/http%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/http%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="web工作"><a href="#web工作" class="headerlink" title="web工作"></a>web工作</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SayHello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>r.ParseForm()       <span class="hljs-comment">//解析参数</span><br>fmt.Println(r.Form) <span class="hljs-comment">//输出到服务器端的</span><br>fmt.Println(<span class="hljs-string">&quot;path&quot;</span>, r.URL.Path)<br>fmt.Println(<span class="hljs-string">&quot;scheme&quot;</span>, r.URL.Scheme)<br>fmt.Println(r.Form[<span class="hljs-string">&quot;url_long&quot;</span>])<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Form &#123;<br>fmt.Println(<span class="hljs-string">&quot;key:&quot;</span>, k)<br>fmt.Println(<span class="hljs-string">&quot;val:&quot;</span>, strings.Join(v, <span class="hljs-string">&quot; &quot;</span>))<br>&#125;<br><br>fmt.Fprintln(w, <span class="hljs-string">&quot;hello World&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, SayHello)<br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>request:用户请求信息，用来解析用户的请求信息。</li><li>response:服务器需要反馈给客户端的信息。</li><li>conn:请求链接</li><li>handler:处理请求和生成返回信息的处理逻辑</li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>建立监听，等待客户端的请求。</p><p><code>http.ListenAndServe(&quot;:8080&quot;, nil)</code></p><p>监听过程中会创建Server对象，之后调用<code>server.ListenAndServe()</code>方法，底层用tcp搭建了一个服务，最后调用<code>srv.Serve(ln)</code>监听端口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span></span> ListenAndServe() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> srv.shuttingDown() &#123;<br><span class="hljs-keyword">return</span> ErrServerClosed<br>&#125;<br>addr := srv.Addr<br><span class="hljs-keyword">if</span> addr == <span class="hljs-string">&quot;&quot;</span> &#123;<br>addr = <span class="hljs-string">&quot;:http&quot;</span><br>&#125;<br>ln, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> srv.Serve(ln)<br><br></code></pre></td></tr></table></figure></li><li><p>Listen Socket 接受客户端的请求，进行通信。</p><p>首先通过Listener接收请求：<code>l.Accept()</code>，其次创建一个Conn：<code>c := srv.newConn(rw)</code>，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：<code>go c.serve(connCtx)</code>。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。</p></li><li><p>处理客户端请求，handler处理。</p><p>conn首先会解析request:<code>w, err := c.readRequest(ctx)</code>, 然后获取相应的handler去处理请求:<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code>，<code>ServeHTTP</code>的具体实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sh serverHandler)</span></span> ServeHTTP(rw ResponseWriter, req *Request) &#123;<br>handler := sh.srv.Handler<br><span class="hljs-keyword">if</span> handler == <span class="hljs-literal">nil</span> &#123;<br>handler = DefaultServeMux<br>&#125;<br><span class="hljs-keyword">if</span> req.RequestURI == <span class="hljs-string">&quot;*&quot;</span> &amp;&amp; req.Method == <span class="hljs-string">&quot;OPTIONS&quot;</span> &#123;<br>handler = globalOptionsHandler&#123;&#125;<br>&#125;<br>handler.ServeHTTP(rw, req)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sh.srv.Handler</code>就是我们刚才在调用函数<code>ListenAndServe</code>时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取<code>handler = DefaultServeMux</code>,这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，我们调用的代码里面第一句不是调用了<code>http.HandleFunc(&quot;/&quot;, sayhelloName)</code>。这个作用就是注册了请求/的路由规则，当请求uri为”/“，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>struct类型</title>
    <link href="/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/struct%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/struct%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>声明新的类型，作为其他类型的属性或者字段的容器。</p><h2 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age <span class="hljs-type">int</span><br>    weight <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>    Human  <span class="hljs-comment">// 匿名字段，那么默认Student就包含了Human的所有字段</span><br>    speciality <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>匿名字段可以实现字段的继承。</p><p>struct不仅仅能够将struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>协程泄露</title>
    <link href="/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%8D%8F%E7%A8%8B%E6%B3%84%E9%9C%B2/"/>
    <url>/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%8D%8F%E7%A8%8B%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>goroutine创建后，长时间得不到释放，并且不断地创建新的goroutine协程（尽管协程轻量，但也造不住指数级递增），导致内存耗尽，程序崩溃。</p><h1 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h1>]]></content>
    
    
    
    <tags>
      
      <tag>goroutine</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志收集实战</title>
    <link href="/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <url>/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="如何结束子goroutine"><a href="#如何结束子goroutine" class="headerlink" title="如何结束子goroutine"></a>如何结束子goroutine</h2><ol><li>全局变量</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>_ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-comment">//设置全局变量</span><br><span class="hljs-keyword">var</span> exit <span class="hljs-type">bool</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;...worker...&quot;</span>)<br>time.Sleep(time.Second)<br><span class="hljs-keyword">if</span> exit &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> worker()<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>exit = <span class="hljs-literal">true</span><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>channel的方式实现</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>_ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-comment">//channel</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch:<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...worker...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> exitChan = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> worker(exitChan)<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>exitChan &lt;- <span class="hljs-literal">true</span><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>context</strong><ul><li>控制多个goroutine退出</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-comment">//channel</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;...worker...&quot;</span>)<br>time.Sleep(time.Second)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithCancel(context.Background())<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> worker(ctx)<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>cancel()<br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...worker1...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker2</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...worker2...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">go</span> worker(ctx)<br><span class="hljs-keyword">go</span> worker2(ctx)<br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-keyword">go</span> worker2(ctx)<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="new和make"><a href="#new和make" class="headerlink" title="new和make"></a><strong>new和make</strong></h3><p>都是初始化内存</p><p>new，多用来为基本数据类型初始化内存，返回指针</p><p>make：用来初始化（slice、map、chan）,返回对于类型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/09/15/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>文字描述：</strong></p><p>通过const定义了一些常量，然后定义了一些自定义类型</p><ul><li>Color作为byte的别名</li><li>定义了一个struct:Box，含有三个长宽高字段和一个颜色属性</li><li>定义了一个slice:BoxList，含有Box</li></ul><p>然后以上面的自定义类型为接收者定义了一些method</p><ul><li>Volume()定义了接收者为Box，返回Box的容量</li><li>SetColor(c Color)，把Box的颜色改为c</li><li>BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色</li><li>PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色</li><li>String()定义在Color上面，返回Color的具体颜色(字符串格式)</li></ul><p>定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也可以调用method.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Human<br>school <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Company <span class="hljs-keyword">struct</span> &#123;<br>Human<br>conpany <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span></span> SayHi() &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tony := Student&#123;Human&#123;name: <span class="hljs-string">&quot;tony&quot;</span>, age: <span class="hljs-number">12</span>&#125;, <span class="hljs-string">&quot;MTA&quot;</span>&#125;<br>Mark := Company&#123;Human&#123;name: <span class="hljs-string">&quot;Mark&quot;</span>, age: <span class="hljs-number">22</span>&#125;, <span class="hljs-string">&quot;TA&quot;</span>&#125;<br><br>tony.SayHi()<br>Mark.SayHi()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>重新定义一个相同的mrthod，重新写匿名字段的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Human<br>school <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Company <span class="hljs-keyword">struct</span> &#123;<br>Human<br>conpany <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span></span> SayHi() &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Company)</span></span> SayHi() &#123;<br>e.conpany = <span class="hljs-string">&quot;TB&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tony := Student&#123;Human&#123;name: <span class="hljs-string">&quot;tony&quot;</span>, age: <span class="hljs-number">12</span>&#125;, <span class="hljs-string">&quot;MTA&quot;</span>&#125;<br>Mark := Company&#123;Human&#123;name: <span class="hljs-string">&quot;Mark&quot;</span>, age: <span class="hljs-number">22</span>&#125;, <span class="hljs-string">&quot;TA&quot;</span>&#125;<br><br>tony.SayHi()<br>Mark.SayHi()<br>fmt.Println(Mark.conpany)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>harbor镜像内容自动化同步metabese</title>
    <link href="/2022/09/15/CICD/drone/harbor%E4%BF%A1%E6%81%AF%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/09/15/CICD/drone/harbor%E4%BF%A1%E6%81%AF%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>获取harbor中信息，包括仓库、镜像名称、版本、架构等，存储到metabase对应的数据库中。</p><h2 id="Drone自动化工程"><a href="#Drone自动化工程" class="headerlink" title="Drone自动化工程"></a>Drone自动化工程</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>  <span class="hljs-attr">host:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/harbor/Doc</span><br><br><span class="hljs-attr">steps:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">greeting</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">IP:8085/images/harbor_data:v1</span><br>  <span class="hljs-attr">settings:</span><br>    <span class="hljs-attr">admin:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">Harbor12345</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">IP:8085</span><br>  <span class="hljs-attr">volumes:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor_table</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">IP:8085/images/harbor_database:v1</span><br>  <span class="hljs-comment">#数据库环境信息</span><br>  <span class="hljs-attr">settings:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">testdb</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">postgres</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">IP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10590</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/</span><br>  <span class="hljs-attr">commands:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">python</span> <span class="hljs-string">/harbor_flush.py</span><br><span class="hljs-comment">#私有镜像获取密钥</span><br><span class="hljs-attr">image_pull_secrets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">dockerconfigjson</span><br><span class="hljs-comment">#选择运行服务器</span><br><span class="hljs-attr">node:</span><br>  <span class="hljs-attr">foo:</span> <span class="hljs-string">bar</span><br></code></pre></td></tr></table></figure><h2 id="IP-8085-images-harbor-data-v1、IP-8085-images-harbor-database-v1的使用方式"><a href="#IP-8085-images-harbor-data-v1、IP-8085-images-harbor-database-v1的使用方式" class="headerlink" title="IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式"></a>IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式</h2><h3 id="IP-8085-images-harbor-data-v1"><a href="#IP-8085-images-harbor-data-v1" class="headerlink" title="IP:8085/images/harbor_data:v1"></a>IP:8085/images/harbor_data:v1</h3><p><strong>作用：</strong>获取私有仓库（harbor）中所有的镜像所属仓库、镜像名称、架构等信息，并保存成.csv的格式（<em>后续可优化成保存文件格式自选</em>）</p><p><strong>参数：</strong></p><p>admin:harbor登录账号</p><p>password：密码</p><p>address：harbor仓库地址</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">admin: XXX<br>password: XXX<br><span class="hljs-selector-tag">address</span>: XX<span class="hljs-selector-class">.XX</span><span class="hljs-selector-class">.XX</span><span class="hljs-selector-class">.XX</span>:<span class="hljs-number">8085</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>如果需要获取.csv的文件，需要映射容器内部的opt目录获取。</p><h3 id="IP-8085-images-harbor-database-v1"><a href="#IP-8085-images-harbor-database-v1" class="headerlink" title="IP:8085/images/harbor_database:v1"></a>IP:8085/images/harbor_database:v1</h3><p><strong>作用：</strong>将前者获取到的镜像信息更新至数据库中，该数据库仅为pg数据库（<em>后续可优化成数据库的选取，类似MySQL、pg等等</em>）</p><p><strong>参数：</strong></p><p>database:数据库名称</p><p>user:用户名</p><p>password：数据库密码</p><p>host：服务器地址</p><p>port：数据库服务器端口</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">database:</span> xx<br><span class="hljs-symbol">user:</span> xx<br><span class="hljs-symbol">password:</span> xx<br><span class="hljs-symbol">host:</span> xx<br><span class="hljs-symbol">port:</span> xx<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>.csv的文件，需要将文件映射容器内部的opt目录进行获取。</p><h2 id="harbor镜像获取设置"><a href="#harbor镜像获取设置" class="headerlink" title="harbor镜像获取设置"></a>harbor镜像获取设置</h2><p>密码管理</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">echo -n &#x27;admin:Harbor<span class="hljs-number">1234</span>5&#x27; <span class="hljs-string">| base64</span><br></code></pre></td></tr></table></figure><p>镜像管理</p><p>name: dockerconfigjson</p><p>value: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;auths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;XX.XX.XX.XX:8085&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>作用：</strong>通过该设置获取私有仓库镜像</p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
      <category>drone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>harbor</tag>
      
      <tag>drone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义droe 插件</title>
    <link href="/2022/09/15/CICD/drone/%E8%87%AA%E5%AE%9A%E4%B9%89drone%20%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/09/15/CICD/drone/%E8%87%AA%E5%AE%9A%E4%B9%89drone%20%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="drone插件"><a href="#drone插件" class="headerlink" title="drone插件"></a>drone插件</h1><p><strong>制作原理：</strong>参照变量的方式（PLUGIN_）</p><p>制作脚本文件——》封装镜像——》插件完成，编写drone文件验证正确性</p><p>插件也仅仅时dockers 容器，也就意味着可以采用任何语言来实现插件。如下是基于bash和go语言构成插件内容.</p><h2 id="基于bash的插件制作"><a href="#基于bash的插件制作" class="headerlink" title="基于bash的插件制作"></a>基于bash的插件制作</h2><ol><li>制作脚本文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><br>curl -X <span class="hljs-variable">$&#123;PLUGIN_METHOD&#125;</span> -d <span class="hljs-variable">$&#123;PLUGIN_BODY&#125;</span> <span class="hljs-variable">$&#123;PLUGIN_URL&#125;</span><br></code></pre></td></tr></table></figure><ol><li>制作Dockerfile文件</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.14</span>.<span class="hljs-number">6</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> build.sh /bin/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /bin/build.sh</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk -Uuv add curl ca-certificates</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> /bin/build.sh</span><br></code></pre></td></tr></table></figure><p>构建镜像：docker build -t test:v1 .</p><ol><li>.drone.yml文件</li></ol><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">kind: pipeline<br><span class="hljs-keyword">type</span>: docker<br>name: <span class="hljs-keyword">default</span><br><br>steps:<br>- name: greeting<br>  image: test:v1<br>  settings:<br>    url: http:<span class="hljs-comment">//hook.acme.com</span><br>    <span class="hljs-keyword">method</span>: post<br>    body: |<br>      hello world<br><br>node:<br>  foo: bar<br></code></pre></td></tr></table></figure><h2 id="基于go语言的插件"><a href="#基于go语言的插件" class="headerlink" title="基于go语言的插件"></a>基于go语言的插件</h2><ol><li>编写需求对应的go文件</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">body</span> := strings<span class="hljs-selector-class">.NewReader</span>(<br>        os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;PLUGIN_BODY&quot;</span>),<br>    )<br><br>    _, err := http<span class="hljs-selector-class">.NewRequest</span>(<br>        os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;PLUGIN_METHOD&quot;</span>),<br>        os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;PLUGIN_URL&quot;</span>),<br>        <span class="hljs-selector-tag">body</span>,<br>    )<br>    <span class="hljs-keyword">if</span> err != nil &#123;<br>        os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>go build -o wehook</p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
      <category>drone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>drone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装</title>
    <link href="/2022/09/15/docker/docker%E5%AE%89%E8%A3%85/"/>
    <url>/2022/09/15/docker/docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="安装（一）"><a href="#安装（一）" class="headerlink" title="安装（一）"></a>安装（一）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure><h2 id="安装（二）"><a href="#安装（二）" class="headerlink" title="安装（二）"></a>安装（二）</h2><p>系统：centos 7.6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum remove docker docker-common docker-selinux docker-engine<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装依赖</span><br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置yum源</span><br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><br>yum list docker-ce --showduplicates | sort -r<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装docker</span><br><br>yum install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 containerd.io <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span><br><br>systemctl daemon-reload<br><br>systemctl start docker<br><br>systemctl enable docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看docker版本</span><br><br>docker version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitlab-14.0.5镜像编译安装</title>
    <link href="/2022/09/15/docker/gitlab-14.0.5%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <url>/2022/09/15/docker/gitlab-14.0.5%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><em>注:其中CE和EE的安装包括镜像构建方式相同</em></p><h2 id="直接安装gitlab"><a href="#直接安装gitlab" class="headerlink" title="直接安装gitlab"></a>直接安装gitlab</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -s https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/gitlab/gi</span>tlab-ee/script.deb.sh | bash<br>apt-get install gitlab-ee=<span class="hljs-number">14.0</span>.<span class="hljs-number">5</span>-ee.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="下载gitlab"><a href="#下载gitlab" class="headerlink" title="下载gitlab"></a>下载gitlab</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget --content-disposition https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/gitlab/gi</span>tlab-ee<span class="hljs-regexp">/packages/u</span>buntu<span class="hljs-regexp">/focal/gi</span>tlab-ee_14.<span class="hljs-number">0.5</span>-ee.<span class="hljs-number">0</span>_arm64.deb/download.deb<br></code></pre></td></tr></table></figure><p>获取gitlab源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ecs-5e66 gitlab]$ git clone https://gitlab.com/gitlab-org/omnibus-gitlab.git<br>Cloning into &#x27;omnibus-gitlab&#x27;...<br>remote: Enumerating objects: 148163, done.<br>remote: Counting objects: 100% (16/16), done.<br>remote: Compressing objects: 100% (16/16), done.<br>remote: Total 148163 (delta 8), reused 0 (delta 0), pack-reused 148147<br>Receiving objects: 100% (148163/148163), 24.69 MiB | 6.92 MiB/s, done.<br>Resolving deltas: 100% (94777/94777), done.<br>[root@ecs-5e66 gitlab]$ cd omnibus-gitlab/<br>[root@ecs-5e66 omnibus-gitlab]$ git checkout 14.0.5+ee.0<br>Note: checking out &#x27;14.0.5+ee.0&#x27;.<br>....<br><br>HEAD is now at fe10a61... Update VERSION to 14.0.5-ee<br><br></code></pre></td></tr></table></figure><h2 id="构建gitlab"><a href="#构建gitlab" class="headerlink" title="构建gitlab"></a>构建gitlab</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">切换分支</span><br>[root@ecs-5e66 omnibus-gitlab]$ cd docker<br>[root@ecs-5e66 docker]$<br>[root@ecs-5e66 docker]$ cat &lt;&lt; EOF &gt; RELEASE<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">RELEASE_PACKAGE=gitlab-ee</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">RELEASE_VERSION=14.0.5-ee</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">DOWNLOAD_URL=https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要添加依赖libatomic1</span><br>[root@ecs-5e66 docker]$ git diff<br>diff --git a/docker/Dockerfile b/docker/Dockerfile<br>index d07c1f4..602d412 100644<br>--- a/docker/Dockerfile<br>+++ b/docker/Dockerfile<br>@@ -14,6 +14,7 @@ RUN apt-get update -q \<br>       openssh-server \<br>       tzdata \<br>       wget \<br>+      libatomic1 \<br>     &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">Use BusyBox</span><br>[root@ecs-5e66 docker]$ docker build -t gitlab/gitlab-ee:14.0.5 .<br>Sending build context to Docker daemon  28.67kB<br>Step 1/18 : FROM ubuntu:20.04<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">d5ca7a445605</span><br>Step 2/18 : MAINTAINER GitLab Inc. &lt;support@gitlab.com&gt;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">fbceb05a9c47</span><br>Step 3/18 : SHELL [&quot;/bin/sh&quot;, &quot;-c&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">acf3fce3b499</span><br>Step 4/18 : ENV LANG=C.UTF-8<br>......<br>Step 18/18 : HEALTHCHECK --interval=60s --timeout=30s --retries=5 CMD /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 5b6cac9a902a</span><br>Removing intermediate container 5b6cac9a902a<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">9bb5a07d8303</span><br>Successfully built 9bb5a07d8303<br>Successfully tagged gitlab/gitlab-ee:14.0.5<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 5.0.6 arm镜像构建</title>
    <link href="/2022/09/15/docker/redis%205.0.6%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <url>/2022/09/15/docker/redis%205.0.6%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基础镜像-alpine"><a href="#基础镜像-alpine" class="headerlink" title="基础镜像 alpine"></a>基础镜像 alpine</h1><p>源码获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/Dockerfile<br>wget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/docker-entrypoint.sh<br>chmod +x docker-entrypoint.sh<br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>redis 5.0.X版本中，尽管官方已经提供了arm版本的redis镜像，但是在arm centos 7.6系统中，会出现page size的问题，因此建议重新获取dockerfile构建对应的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ecs-5e66 jdk]$ docker logs redist<br>&lt;jemalloc&gt;: Unsupported system page size<br>&lt;jemalloc&gt;: Unsupported system page size<br><br></code></pre></td></tr></table></figure><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>在构建过程中，由于redis的Dockerfile在不停的更新，包括对应的基础镜像，因此建议在构建过程中，采用对应的Dockerfile构建，而不仅仅是改变Dockerfile中的版本。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>临时源搭建</title>
    <link href="/2022/09/15/docker/%E6%90%AD%E5%BB%BAhttpd%E4%B8%B4%E6%97%B6%E6%BA%90/"/>
    <url>/2022/09/15/docker/%E6%90%AD%E5%BB%BAhttpd%E4%B8%B4%E6%97%B6%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-HTTP搭建临时源"><a href="#docker-HTTP搭建临时源" class="headerlink" title="docker HTTP搭建临时源"></a>docker HTTP搭建临时源</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ecs-5e66 jdk-src]$ docker run -itd --name httptest -v $PWD:/usr/local/apache2/htdocs/ httpd:alpine<br>6e4536e60d4971eb7cdeb11d22aeed64fa87d763c240373e3a82994de0358b74<br>[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep Ip<br>            &quot;IpcMode&quot;: &quot;private&quot;,<br>[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep IP<br>            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,<br>            &quot;LinkLocalIPv6PrefixLen&quot;: 0,<br>            &quot;SecondaryIPAddresses&quot;: null,<br>            &quot;SecondaryIPv6Addresses&quot;: null,<br>            &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>            &quot;GlobalIPv6PrefixLen&quot;: 0,<br>            &quot;IPAddress&quot;: &quot;172.17.0.41&quot;,<br>            &quot;IPPrefixLen&quot;: 16,<br>            &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;IPAMConfig&quot;: null,<br>                    &quot;IPAddress&quot;: &quot;172.17.0.41&quot;,<br>                    &quot;IPPrefixLen&quot;: 16,<br>                    &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6PrefixLen&quot;: 0,<br><br><br></code></pre></td></tr></table></figure><h1 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[jiatong@ecs-5e66 jdk]$ wget 172.17.0.41:80/jdk-8u301-linux-aarch64.tar.gz<br>--2022-09-14 14:52:17--  http://172.17.0.41/jdk-8u301-linux-aarch64.tar.gz<br>Connecting to 172.17.0.41:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 74283479 (71M) [application/x-gzip]<br>Saving to: ‘jdk-8u301-linux-aarch64.tar.gz’<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[====================================================================================================================================================================&gt;] 74,283,479  --.-K/s   <span class="hljs-keyword">in</span> 0.09s</span><br><br>2022-09-14 14:52:17 (797 MB/s) - ‘jdk-8u301-linux-aarch64.tar.gz’ saved [74283479/74283479]<br></code></pre></td></tr></table></figure><h1 id="pip临时源搭建"><a href="#pip临时源搭建" class="headerlink" title="pip临时源搭建"></a>pip临时源搭建</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">pip临时源搭建<br>[zhaiwb zhaiwb@~]$ docker run -itd --rm --name pipts_zhai -p <span class="hljs-number">8083</span>:<span class="hljs-number">8080</span> -v $PWD/PIP_ding:<span class="hljs-regexp">/data/</span> centos:<span class="hljs-number">7</span><br>[root@1deeaa27aa36 /]<span class="hljs-comment"># yum install -y python3-pip python3-devel</span><br>[root@1deeaa27aa36 home]<span class="hljs-comment"># pip3 install pypiserver</span><br>[root@1deeaa27aa36 data]<span class="hljs-comment"># pypi-server -p 8080 /data</span><br><br>pip3 install --trusted-host <span class="hljs-number">122.9</span>.<span class="hljs-number">34.193</span> -i http:<span class="hljs-regexp">//</span><span class="hljs-number">122.9</span>.<span class="hljs-number">34.193</span>:<span class="hljs-number">8083</span> --<span class="hljs-keyword">no</span>-cache-dir -r dlist.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>httpd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSA-自旋锁</title>
    <link href="/2022/09/15/golang/CSA%20%E8%87%AA%E6%97%8B%E9%94%81/"/>
    <url>/2022/09/15/golang/CSA%20%E8%87%AA%E6%97%8B%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p>比较和交换——原子操作：在多线程没有锁的状态下确保多个线程对一个值的更新。</p><h1 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h1><p>不断的判断比较。</p><p>持有的锁和等待竞争的锁不需要作内核态和用户态之间的转换，只需要循环等待持有锁的释放锁。避免不同状态转换的消耗。</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo安装及主题配置</title>
    <link href="/2022/09/15/hexo/%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <url>/2022/09/15/hexo/%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装nodejs(需要注意nodejs的版本要求)：<a href="../deploy/ubuntu%E5%AE%89%E8%A3%85nodejs">ubuntu安装nodejs</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Blog$ hexo -v<br>INFO  Validating config<br>hexo: 5.4.2<br>hexo-cli: 4.3.0<br>os: linux 5.15.0-46-generic Ubuntu 20.04.4 LTS (Focal Fossa)<br>node: 14.20.0<br>v8: 8.4.371.23-node.87<br>uv: 1.42.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 83<br>nghttp2: 1.42.0<br>napi: 8<br>llhttp: 2.1.5<br>openssl: 1.1.1q<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br></code></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir Blog<br>cd Blog<br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可不写文件夹，默认是在本目录层级构建</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>基本目录层级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Blog$ tree -L 1<br>.<br>├── _config.landscape.yml<br>├── _config.yml<br>├── node_modules<br>├── package.json<br>├── package-lock.json<br>├── scaffolds<br>├── source<br>└── themes<br><br>4 directories, 4 files<br></code></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><h2 id="fluid-主题配置"><a href="#fluid-主题配置" class="headerlink" title="fluid 主题配置"></a>fluid 主题配置</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>在博客目录下创建 <code>_config.fluid.yml</code> 文件，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml"> </a><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml"> (opens new window)</a> 全部配置（或部分配置）复制过去。</p><p>根据自己的需要进行主题配置，<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">fluid主题配置</a></p><h2 id="图片插件设置"><a href="#图片插件设置" class="headerlink" title="图片插件设置"></a>图片插件设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/CodeFalling/hexo-asset-image --save<br><br></code></pre></td></tr></table></figure><p>在博客目录<code>_config.yml</code>文件，</p><h2 id="基础配置文件"><a href="#基础配置文件" class="headerlink" title="基础配置文件"></a>基础配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Hexo Configuration</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Source: https://github.com/hexojs/hexo/</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Site</span><br>title: Jane&#x27;s Blog<br>subtitle: &#x27;&#x27;<br>description: &#x27;&#x27;<br>keywords:<br>author: 彤～<br>language: en<br>timezone: &#x27;&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">URL</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br>url: http://jane-lucky.github.io<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Directory</span><br>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Writing</span><br>new_post_name: :title.md # File name of new posts<br>default_layout: post<br>titlecase: false # Transform title into titlecase<br>external_link:<br>  enable: true # Open external links in new tab<br>  field: site # Apply to the whole site<br>  exclude: &#x27;&#x27;<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: true<br>relative_link: false<br>future: true<br>highlight:<br>  enable: true<br>  line_number: true<br>  auto_detect: false<br>  tab_replace: &#x27;&#x27;<br>  wrap: true<br>  hljs: false<br>prismjs:<br>  enable: false<br>  preprocess: true<br>  line_number: true<br>  tab_replace: &#x27;&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Home page setting</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">path: Root path <span class="hljs-keyword">for</span> your blogs index page. (default = <span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">per_page: Posts displayed per page. (0 = <span class="hljs-built_in">disable</span> pagination)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">order_by: Posts order. (Order by <span class="hljs-built_in">date</span> descending by default)</span><br>index_generator:<br>  path: &#x27;&#x27;<br>  per_page: 10<br>  order_by: -date<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Category &amp; Tag</span><br>default_category: uncategorized<br>category_map:<br>tag_map:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Metadata elements</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br>meta_generator: true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Date / Time format</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Hexo uses Moment.js to parse and display date</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># You can customize the date format as defined in</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># http://momentjs.com/docs/#/displaying/format/</span></span><br>date_format: YYYY-MM-DD<br>time_format: HH:mm:ss<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br>updated_option: &#x27;mtime&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Pagination</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set per_page to 0 to disable pagination</span></span><br>per_page: 10<br>pagination_dir: page<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Include / Exclude file(s)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br>include:<br>exclude:<br>ignore:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Extensions</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Plugins: https://hexo.io/plugins/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Themes: https://hexo.io/themes/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#theme: landscape</span></span><br>theme: fluid<br><span class="hljs-meta prompt_">#</span><span class="language-bash">language: zh-CN</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repository: https://oauth2:token@github.com/Jane-lucky/Jane-lucky.github.io.git<br>  branch: deploy-dev<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
      <tag>安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crictl 对 Kubernetes 节点进行调试</title>
    <link href="/2022/09/15/k8s/crictl%20%E5%AF%B9%20Kubernetes%20%E8%8A%82%E7%82%B9%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/"/>
    <url>/2022/09/15/k8s/crictl%20%E5%AF%B9%20Kubernetes%20%E8%8A%82%E7%82%B9%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>CRI 是一个插件接口，它使 kubelet 能够使用各种容器运行时，无需重新编译集群组件。</p><p>你需要在集群中的每个节点上都有一个可以正常工作的容器运行时， 这样kubelet 能启动pod及其容器。</p><p>而crictl是CRI兼容的容器运行时命令行接口。使用它来检查和调试kubernetes节点上的容器运行时和应用程序。</p><h1 id="命令用法"><a href="#命令用法" class="headerlink" title="命令用法"></a>命令用法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@kind-control-plane3:/# crictl help<br>NAME:<br>   crictl - client for CRI<br><br>USAGE:<br>   crictl [global options] command [command options] [arguments...]<br><br>VERSION:<br>   v1.24.0<br><br>COMMANDS:<br>   attach              Attach to a running container<br>   create              Create a new container<br>   exec                Run a command in a running container<br>   version             Display runtime version information<br>   images, image, img  List images<br>   inspect             Display the status of one or more containers<br>   inspecti            Return the status of one or more images<br>   imagefsinfo         Return image filesystem info<br>   inspectp            Display the status of one or more pods<br>   logs                Fetch the logs of a container<br>   port-forward        Forward local port to a pod<br>   ps                  List containers<br>   pull                Pull an image from a registry<br>   run                 Run a new container inside a sandbox<br>   runp                Run a new pod<br>   rm                  Remove one or more containers<br>   rmi                 Remove one or more images<br>   rmp                 Remove one or more pods<br>   pods                List pods<br>   start               Start one or more created containers<br>   info                Display information of the container runtime<br>   stop                Stop one or more running containers<br>   stopp               Stop one or more running pods<br>   update              Update one or more running containers<br>   config              Get and set crictl client configuration options<br>   stats               List container(s) resource usage statistics<br>   statsp              List pod resource usage statistics<br>   completion          Output shell completion code<br>   help, h             Shows a list of commands or help for one command<br><br>GLOBAL OPTIONS:<br>   --config value, -c value            Location of the client config file. If not specified and the default does not exist, the program&#x27;s directory is searched as well (default: &quot;/etc/crictl.yaml&quot;) [$CRI_CONFIG_FILE]<br>   --debug, -D                         Enable debug mode (default: false)<br>   --image-endpoint value, -i value    Endpoint of CRI image manager service (default: uses &#x27;runtime-endpoint&#x27; setting) [$IMAGE_SERVICE_ENDPOINT]<br>   --runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: uses in order the first successful one of [unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock]). Default is now deprecated and the endpoint should be set instead. [$CONTAINER_RUNTIME_ENDPOINT]<br>   --timeout value, -t value           Timeout of connecting to the server in seconds (e.g. 2s, 20s.). 0 or less is set to default (default: 2s)<br>   --help, -h                          show help (default: false)<br>   --version, -v                       print the version (default: false)<br><br></code></pre></td></tr></table></figure><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@kind-control-plane3:/# crictl image -h<br>NAME:<br>   crictl images - List images<br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取宿主机中的镜像</span><br>USAGE:<br>   crictl images [command options] [REPOSITORY[:TAG]]<br><br>OPTIONS:<br>   --digests                 Show digests (default: false)<br>   --no-trunc                Show output without truncating the ID (default: false)<br>   --output value, -o value  Output format, One of: json|yaml|table<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">显示image的sha256 ID</span><br>   --quiet, -q               Only show image IDs (default: false)<br>   --verbose, -v             Show verbose info for images (default: false)<br>   --help, -h                show help (default: false)<br><br></code></pre></td></tr></table></figure><h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@kind-control-plane3:/# crictl pods -h<br>NAME:<br>   crictl pods - List pods<br><br>USAGE:<br>   crictl pods [command options] [arguments...]<br><br>OPTIONS:<br>   --id value                filter by pod id<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">根据标签打印pod</span><br>   --label value             filter by key=value label  (accepts multiple inputs)<br>   --last value, -n value    Show last n recently created pods. Set 0 for unlimited (default: 0)<br>   --latest, -l              Show the most recently created pod (default: false)<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">根据名称显示pod</span><br>   --name value              filter by pod name regular expression pattern<br>   --namespace value         filter by pod namespace regular expression pattern<br>   --no-trunc                Show output without truncating the ID (default: false)<br>   --output value, -o value  Output format, One of: json|yaml|table (default: &quot;table&quot;)<br>   --quiet, -q               list only pod IDs (default: false)<br>   --state value, -s value   filter by pod state<br>   --verbose, -v             show verbose info for pods (default: false)<br>   --help, -h                show help (default: false)<br><br></code></pre></td></tr></table></figure><h2 id="在正在执行的容器上面执行命令"><a href="#在正在执行的容器上面执行命令" class="headerlink" title="在正在执行的容器上面执行命令"></a>在正在执行的容器上面执行命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看运行的pod</span><br>root@kind-worker2:/# crictl pods<br>POD ID              CREATED             STATE               NAME                    NAMESPACE           ATTEMPT             RUNTIME<br>5fb86aa7066e8       44 minutes ago      Ready               nginx-76d6c9b8c-q9vbp   default             0                   (default)<br>a4add35241344       4 hours ago         Ready               kube-proxy-6447g        kube-system         0                   (default)<br>403d98dd85f0e       4 hours ago         Ready               kindnet-5mk2k           kube-system         0                   (default)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看运行的容器</span><br>root@kind-worker2:/# crictl ps<br>CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID              POD<br>18cad97f205ca       2b7d6430f78d4       44 minutes ago      Running             nginx               0                   5fb86aa7066e8       nginx-76d6c9b8c-q9vbp<br>eb989888bde0d       d921cee849482       4 hours ago         Running             kindnet-cni         0                   403d98dd85f0e       kindnet-5mk2k<br>476b9aa0e666e       c12a8a85ef17f       4 hours ago         Running             kube-proxy          0                   a4add35241344       kube-proxy-6447g<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在运行的容器上执行命令</span><br>root@kind-worker2:/# crictl exec -i -t 18cad97f205ca ls<br>bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  product_name  product_uuid  root  run  sbin  srv  sys  tmp  usr  var<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看容器日志</span><br>root@kind-worker2:/# crictl logs 18cad97f205ca<br>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration<br>/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/<br>/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh<br>10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf<br>......<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s在kind上的简单使用</title>
    <link href="/2022/09/15/k8s/k8s%E5%9C%A8kind%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/15/k8s/k8s%E5%9C%A8kind%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在创建k8s集群可参考<a href>kind安装部署k8s集群</a></p><h1 id="查看运行的节点"><a href="#查看运行的节点" class="headerlink" title="查看运行的节点"></a>查看运行的节点</h1><p>创建了3个work节点和3个master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@host-server ~]# kubectl get nodes<br>NAME                  STATUS   ROLES           AGE     VERSION<br>kind-control-plane    Ready    control-plane   4h23m   v1.25.0<br>kind-control-plane2   Ready    control-plane   4h22m   v1.25.0<br>kind-control-plane3   Ready    control-plane   4h22m   v1.25.0<br>kind-worker           Ready    &lt;none&gt;          4h21m   v1.25.0<br>kind-worker2          Ready    &lt;none&gt;          4h21m   v1.25.0<br>kind-worker3          Ready    &lt;none&gt;          4h21m   v1.25.0<br></code></pre></td></tr></table></figure><h1 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h1><p>在宿主机中，使用kubectl就可以完成几大部分的k8s操作，有些人可能就对于和平常看见的k8s部署不同，包括看不见构建k8s的镜像、它到底是如何部署上去、怎么就成功部署了3个works和3个master等有诸多的疑惑。</p><p>先上图：</p><p><img src="/2022/09/15/k8s/k8s%E5%9C%A8kind%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20220909161301440-1663039219073-7.png" alt="kind"></p><p>在此也仅是简单介绍该工作流程，如果需要进一步了解，可参考<a href="https://kind.sigs.k8s.io/">kind文档</a></p><ol><li><p>采用镜像的方式构建k8s node节点</p><p>kind,原文就是 Kubernetes in docker 。这样事情也就变得明朗起来。将k8s环境以docker container的方式搭建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@host-server ~]# docker ps -a<br>CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                       NAMES<br>a9459c6610fd        kindest/haproxy:v20220607-9a4d8d2a   &quot;haproxy -sf 7 -W -d…&quot;   4 hours ago         Up 4 hours          127.0.0.1:34805-&gt;6443/tcp   kind-external-load-balancer<br>1747e4be5b45        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker2<br>1af5558bd923        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:46155-&gt;6443/tcp   kind-control-plane3<br>d8fd68d3fb29        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:38435-&gt;6443/tcp   kind-control-plane<br>543d3a6c7d22        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker<br>78580624a92e        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:34349-&gt;6443/tcp   kind-control-plane2<br>35e8c2851baf        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker3<br></code></pre></td></tr></table></figure></li><li><p>简化了环境的搭建</p><p>kind命令的使用，可以让操作者不在纠结搭建环境中出现的错误，毕竟在搭建环境的过程中，可能常常会出现各种各样的问题，最终导致从入门到放弃。</p></li><li><p>进入节点内部</p><p>以容器的方式进入节点环境，容器中涵盖了k8s所需的环境，包括kubeadm 、kubectl 、kubelet管理套件，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@host-server ~]# docker exec -it kind-worker bash<br>root@kind-worker:/# kube<br>kubeadm  kubectl  kubelet<br></code></pre></td></tr></table></figure></li><li><p>采用crictl的方式 检查和调试kubernetes节点上的容器运行时和应用程序，其余的操作命令可参见<a href="https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/">https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@kind-worker:/# crictl pods<br>POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT             RUNTIME<br>70378a1203be0       5 hours ago         Ready               kube-proxy-9b29x    kube-system         0                   (default)<br>1155cba575f39       5 hours ago         Ready               kindnet-ftncm       kube-system         0                   (default)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kind概念&amp;安装部署k8s集群</title>
    <link href="/2022/09/15/k8s/kind%E6%A6%82%E5%BF%B5&amp;%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/09/15/k8s/kind%E6%A6%82%E5%BF%B5&amp;%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>kind：</strong>kubernetes in docker。将k8s所有需要的组件，全部部署在一个docker容器中，一套开箱即用的k8s环境搭建方案</p><h2 id="Kind-相比于-Minikube-有什么优势呢？"><a href="#Kind-相比于-Minikube-有什么优势呢？" class="headerlink" title="Kind 相比于 Minikube 有什么优势呢？"></a>Kind 相比于 Minikube 有什么优势呢？</h2><p><strong>基于</strong> <a href="https://cloud.tencent.com/product/tke?from=10680"><strong>Docker</strong></a> <strong>而不是虚拟化</strong></p><p>Kind 不是打包一个虚拟化镜像，而是直接讲 K8S 组件运行在 Docker。带来了什么好处呢？</p><ol><li>不需要运行 GuestOS 占用资源更低。</li><li>不基于虚拟化技术，可以在 VM 中使用。</li><li>文件更小，更利于移植。</li></ol><p><strong>支持多节点 K8S 集群和 HA</strong></p><p>Kind 支持多角色的节点部署，你可以通过配置文件控制你需要几个 Master 节点，几个 Worker 节点，以更好的模拟生产中的实际环境。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure><h2 id="安装kubectl-稳定最新版本-1-25-0"><a href="#安装kubectl-稳定最新版本-1-25-0" class="headerlink" title="安装kubectl(稳定最新版本 1.25.0)"></a>安装kubectl(稳定最新版本 1.25.0)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;<br>install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br>chmod +x kubectl<br>mkdir -p ~/.local/bin<br>mv ./kubectl ~/.local/bin/kubectl<br>kubectl version --client<br></code></pre></td></tr></table></figure><h2 id="安装kind（根据kubectl的版本安装kind，不易出错可成功安装）"><a href="#安装kind（根据kubectl的版本安装kind，不易出错可成功安装）" class="headerlink" title="安装kind（根据kubectl的版本安装kind，不易出错可成功安装）"></a>安装kind（根据kubectl的版本安装kind，不易出错可成功安装）</h2><p><a href="https://github.com/kubernetes-sigs/kind/releases">Releases · kubernetes-sigs/kind · GitHub</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64<br>chmod +x kind<br>mv kind /usr/local/bin<br></code></pre></td></tr></table></figure><h2 id="安装一个k8s集群"><a href="#安装一个k8s集群" class="headerlink" title="安装一个k8s集群"></a>安装一个k8s集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@host-server ~]# kind create cluster<br>Creating cluster &quot;kind&quot; ...<br> ✓ Ensuring node image (kindest/node:v1.25.0) 🖼<br> ✓ Preparing nodes 📦<br> ✓ Writing configuration 📜<br> ✓ Starting control-plane 🕹️<br> ✓ Installing CNI 🔌<br> ✓ Installing StorageClass 💾<br>Set kubectl context to &quot;kind-kind&quot;<br>You can now use your cluster with:<br><br>kubectl cluster-info --context kind-kind<br><br>Have a nice day! 👋<br>[root@host-server ~]# kubectl cluster-info --context kind-kind<br>Kubernetes control plane is running at https://127.0.0.1:45151<br>CoreDNS is running at https://127.0.0.1:45151/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy<br><br>To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.<br><br>[root@host-server home]# kind create cluster --name kind-2<br>Creating cluster &quot;kind-2&quot; ...<br> ✓ Ensuring node image (kindest/node:v1.25.0) 🖼<br> ✓ Preparing nodes 📦<br> .....<br><br></code></pre></td></tr></table></figure><h2 id="删除集群"><a href="#删除集群" class="headerlink" title="删除集群"></a>删除集群</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">kind <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cluster</span><br></code></pre></td></tr></table></figure><h2 id="配置文件创建k8s集群"><a href="#配置文件创建k8s集群" class="headerlink" title="配置文件创建k8s集群"></a>配置文件创建k8s集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@host-server opt]# cat kind-config.yaml<br>kind: Cluster<br><span class="hljs-meta prompt_">#</span><span class="language-bash">高版本默认是这个，版本较低的需要进行修改</span><br>apiVersion: kind.x-k8s.io/v1alpha4<br>nodes:<br>- role: control-plane<br>- role: control-plane<br>- role: control-plane<br>- role: worker<br>- role: worker<br>- role: worker<br>[root@host-server ~]# kind create cluster --config=kind-config.yaml<br>[root@host-server ~]# kind get clusters<br>kind<br><span class="hljs-meta prompt_">#</span><span class="language-bash">构建成功之后node一直是notready的状态，可能是因为版本不对应</span><br>[root@host-server ~]# kubectl get node<br>NAME                  STATUS   ROLES           AGE     VERSION<br>kind-control-plane    Ready    control-plane   9m13s   v1.25.0<br>kind-control-plane2   Ready    control-plane   8m45s   v1.25.0<br>kind-control-plane3   Ready    control-plane   7m56s   v1.25.0<br>kind-worker           Ready    &lt;none&gt;          7m48s   v1.25.0<br>kind-worker2          Ready    &lt;none&gt;          7m48s   v1.25.0<br>kind-worker3          Ready    &lt;none&gt;          7m34s   v1.25.0<br></code></pre></td></tr></table></figure><p>集群创建成功</p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snap和apt</title>
    <link href="/2022/09/15/linux/snap%E5%92%8Capt/"/>
    <url>/2022/09/15/linux/snap%E5%92%8Capt/</url>
    
    <content type="html"><![CDATA[<h2 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h2><p><strong>软件包和部署系统</strong>。通过该应用程序与系统无关，也就是说可以在任何支持snap的linux发行版上本地运行。</p><p>一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。</p><p>类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。它们会被安装到单独的目录；各个应用程序之间相互隔离。使用snap有很多好处，首先它解决了软件包的依赖问题；其次，也使应用程序更容易管理。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><code>sudo snap list</code>:查看已下载snap的软件。</li></ol><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><p>软件包管理器，用于在基于 Debian 的系统上安装和删除软件包。APT 使检索、配置、升级、安装和删除包的过程自动化。</p><ul><li>你希望应用程序由你使用的发行版进行审核。</li><li>你担心节省存储空间。APT 安装的应用程序共享它们的依赖项。</li><li>你希望应用程序正确集成到GUI 环境中。</li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wget知识点详解</title>
    <link href="/2022/09/15/linux/wget%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/15/linux/wget%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>“world wide web”和”get”的结合，目前支持http、https以及ftp这三个TCP/IP协议下载。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持递归下载</li><li>支持代理服务器</li><li>恰当地转换页面中的连接</li><li>生成可在本地浏览的页面镜像</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p><code>wget</code>下载单文件</p></li><li><p><code>wget -O</code>：下载并以不同的文件名保存</p><p>将下载连接的文件保存为boost_1_80.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O boost_1_80.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li><li><p><code>wget -c</code>:断点续传</p></li><li><p><code>wget -q </code>:quiet (no output)——下载内容但不显示任何内容</p></li><li><p><code>wget -P</code>：下载到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -P/tmp https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ccache安装及使用</title>
    <link href="/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/ccache%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/ccache%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在处理一些较大规模工程时，编译会花费较长的时间。ccache会在第一遍编译时时间较长，之后的编译会成倍的提速。</p><p><strong>基本原理：</strong>通过头文件告诉缓存到源文件中而改进构建性能，因而通过减少每一步编译时添加头文件所需的时间而提高构建速度。</p><p>第一趟编译ccache缓存GCC的”-E”的输出，编译选项以及.o文件到$HOME/.ccache。第二次编译尽量利用缓存，必要时更新缓存。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@68ab9a9c9a49 ccache-3.2.4]# yum install gcc make cmake -y<br><br>[root@68ab9a9c9a49 home]# wget http://samba.org/ftp/ccache/ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# tar -zxf ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# ls<br>ccache-3.2.4  ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# cd ccache-3.2.4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置安装</span><br>[root@68ab9a9c9a49 ccache-3.2.4]# /home/ccache-3.2.4/configure -prefix=/usr/local/ccache-3.2.4<br>configure: Configuring ccache<br>checking build system type... aarch64-unknown-linux-gnu<br>checking host system type... aarch64-unknown-linux-gnu<br>checking for gcc... gcc<br>checking whether the C compiler works... yes<br>checking for C compiler default output file name... a.out<br>checking for suffix of executables...<br>checking whether we are cross compiling... no<br>checking for suffix of object files... o<br>checking whether we are using the GNU C compiler... yes<br>.......<br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译安装</span><br>[root@034ebb878219 ccache-3.2.4]# make -j4<br>[root@68ab9a9c9a49 ccache-3.2.4]# make install<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -m 755 ccache /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/share/man/man1<br>/usr/bin/install -c -m 644 ./ccache.1 /usr/local/ccache-3.2.4/share/man/man1/<br><br>[root@68ab9a9c9a49 home]# cd /usr/bin/<br>[root@68ab9a9c9a49 bin]# ln -s /usr/local/ccache-3.2.4/bin/ccache ccache<br><br>[root@68ab9a9c9a49 usr]# ccache --v<br>ccache version 3.2.4<br><br>Copyright (C) 2002-2007 Andrew Tridgell<br>Copyright (C) 2009-2015 Joel Rosdahl<br><br>This program is free software; you can redistribute it and/or modify it under<br>the terms of the GNU General Public License as published by the Free Software<br>Foundation; either version 3 of the License, or (at your option) any later<br>version.<br><br></code></pre></td></tr></table></figure><h2 id="编译加速使用（mysql编译）"><a href="#编译加速使用（mysql编译）" class="headerlink" title="编译加速使用（mysql编译）"></a>编译加速使用（mysql编译）</h2><h3 id="ccache加入环境变量，取代C编译器："><a href="#ccache加入环境变量，取代C编译器：" class="headerlink" title="ccache加入环境变量，取代C编译器："></a>ccache加入环境变量，取代C编译器：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>cc<br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>++<br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cc<br>ln -s ccache <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>c++<br></code></pre></td></tr></table></figure><p>yum安装以缓存的形式进行安装，目录挂载，本地源</p><p>可以大量的减少安装等待的时间</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum install <span class="hljs-comment">--downloadonly 包名</span><br></code></pre></td></tr></table></figure><p>在 ccache 中使用 -s 命令行选项来获得关于高速缓存性能的统计数据。</p><h3 id="MYSQL-5-7-X编译"><a href="#MYSQL-5-7-X编译" class="headerlink" title="MYSQL 5.7.X编译"></a>MYSQL 5.7.X编译</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>将sh文件后台执行，<code>sh test.sh &amp;&gt; /tmp/test.log</code></p><p>mysql版本：5.7.36</p><p>时间消耗：21 minutes</p><p>第一次使用 ccache 编译那个文件时，您将不会看到有任何的帮助，因为编译信息还没有被高速缓存。</p><p>ccache获取的缓存的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shel">[root@74c8c1b5bfab home]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                    36<br>cache hit (preprocessed)              23<br>cache miss                          2239<br>called for link                      508<br>called for preprocessing              20<br>compile failed                        19<br>preprocessor error                    20<br>no input file                          3<br>files in cache                      4715<br>cache size                           1.6 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><strong>前提：</strong>.cacahe文件中已经获取到编译的缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name ccachtest -v $PWD/yumcache/:/home/lamp -v $PWD/ccache/:/root/.ccache -v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4 centos:7<br></code></pre></td></tr></table></figure><p>时间消耗：Total:4 minutes</p><ol><li><p>yum下载采用缓存的方式进行</p><p><code>-v $PWD/yumcache/:/home/lamp</code></p></li><li><p>ccache不必每次都进行编译</p><p><code>-v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4</code>    </p></li><li><p>缓存/root/.ccache文件目录</p><p><code>-v $PWD/ccache/:/root/.ccache</code></p></li></ol><h4 id="同缓存编译不同版本"><a href="#同缓存编译不同版本" class="headerlink" title="同缓存编译不同版本"></a>同缓存编译不同版本</h4><p>参考方法二，仅修改mysql的版本：5.7.35</p><p>时间消耗:19 minutes</p><p>ccache获取的缓存的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@0a200c0bc3fd .ccache]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                  2544<br>cache hit (preprocessed)              68<br>cache miss                          4386<br>called for link                     1630<br>called for preprocessing              60<br>compile failed                        57<br>preprocessor error                    62<br>no input file                         11<br>files in cache                      9245<br>cache size                           3.1 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编译安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ccache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kkFileView-4.0.0编译安装</title>
    <link href="/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/kkFileView-4.0.0%E5%AE%89%E8%A3%85/"/>
    <url>/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/kkFileView-4.0.0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><strong>获取源码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitee.com/kekingcn/file-online-preview.git<br>cd file-online-preview/<br>git checkout v4.0.0<br></code></pre></td></tr></table></figure><h2 id="centos-7-6-安装"><a href="#centos-7-6-安装" class="headerlink" title="centos 7.6 安装"></a>centos 7.6 安装</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install git wget vim libreoffice java-11-openjdk maven -y<br>java -version<br>mvn -v<br><span class="hljs-meta prompt_">#</span><span class="language-bash">/usr/lib64/libreoffice</span><br></code></pre></td></tr></table></figure><h3 id="修改原文档中的配置文件"><a href="#修改原文档中的配置文件" class="headerlink" title="修改原文档中的配置文件"></a>修改原文档中的配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff<br>diff --git a/server/src/main/bin/startup.sh b/server/src/main/bin/startup.sh<br>index cae3d3b..413c957 100644<br>--- a/server/src/main/bin/startup.sh<br>+++ b/server/src/main/bin/startup.sh<br>@@ -1,5 +1,5 @@<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">!/bin/bash</span><br>-DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib/libreoffice&quot;)<br>+DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib64/libreoffice&quot;)<br> FLAG=<br> OFFICE_HOME=<br> KKFILEVIEW_BIN_FOLDER=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)<br>diff --git a/server/src/main/config/application.properties b/server/src/main/config/application.properties<br>index fd79f6d..b78e4c2 100644<br>--- a/server/src/main/config/application.properties<br>+++ b/server/src/main/config/application.properties<br>@@ -27,7 +27,7 @@ office.plugin.task.timeout = 5m<br> file.dir = $&#123;KK_FILE_DIR:default&#125;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">openoffice home&lt;E8&gt;&lt;B7&gt;&lt;AF&gt;&lt;E5&gt;&lt;BE&gt;&lt;84&gt;</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">office.home = C:\\Program Files (x86)\\OpenOffice 4</span><br>-office.home = $&#123;KK_OFFICE_HOME:default&#125;<br>+office.home = /usr/lib64/libreoffice<br></code></pre></td></tr></table></figure><h3 id="mvn构建"><a href="#mvn构建" class="headerlink" title="mvn构建"></a>mvn构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean package -DskipTests -Prelease<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成对应的</span><br>cd server/target/<br>tar -zxvf kkFileView-4.0.0.tar.gz<br>cd kkFileView-4.0.0/bin<br>./start.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编译安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kkFileView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minio编译失败问题分析&amp;编译安装</title>
    <link href="/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/minio%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <url>/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/minio%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>下载编译minio，编译出现报错</p><h1 id="问题分析-amp-解决"><a href="#问题分析-amp-解决" class="headerlink" title="问题分析&amp;解决"></a>问题分析&amp;解决</h1><ol><li><p>查看是否go版本较低导致</p><p>可升级go版本，</p><p>注：可以<code>cat go.mod</code>查看mod的go版本，可匹配，如果安装的不匹配，git下载之后，需要执行<code>go mod tidy</code>根据环境修改mod文件。</p><p>以下为go 1.18安装步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz<br>tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/<br>vim /etc/profile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">最后一行写入</span><br>export PATH=$PATH:/usr/local/go/bin<br><br>source /etc/profile<br>go env<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入go代理</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io,direct</span><br>export GOPROXY=https://proxy.golang.org,direct<br></code></pre></td></tr></table></figure></li><li><p>make过程中出现校验码不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">go: downloading github.com/google/pprof v0.0.0-20211214055906-6f57359322fd<br>verifying github.com/go-openapi/spec@v0.20.5: checksum mismatch<br>        downloaded: h1:7VP8zufGZEIV+zfSwHGTWgbMINz/WhW3oFsA47Rhjsk=<br>        go.sum:     h1:skHa8av4VnAtJU5zyAUXrrdK/NDiVX8lchbG+BfcdrE=<br><br>SECURITY ERROR<br>This download does NOT match an earlier download recorded in go.sum.<br>The bits may have been replaced on the origin server, or an attacker may<br>have intercepted the download attempt.<br><br>For more information, see &#x27;go help module-auth&#x27;.<br>make: *** [build] Error 1<br><br></code></pre></td></tr></table></figure><ul><li>在 <code>go.sum</code> 文件存在的时候，则会使用 <code>go.sum</code> 里面记录的依赖 hash 和实际下载的依赖 hash 进行对比， 如果不匹配，会出现报错；</li><li>如果 <code>go.sum</code> 不存在，则使用 <code>GOSUMDB</code> （默认是 <a href="https://link.juejin.cn/?target=https://sum.golang.org/">sum.golang.org</a>）对实际下载的依赖 hash 进行检查，如果不匹配，则出现错误；</li></ul><p>解决方案</p><ul><li><p>删除go.sum或者清除缓存,编译，如果编译过程中出现超时，可重复执行该步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">go clean -modcache<br>rm -f go.sum<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看代理设置go <span class="hljs-built_in">env</span> GOPROXY，采用默认的：https://proxy.golang.org,direct，</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改：<span class="hljs-built_in">export</span> GOPROXY=https://proxy.golang.org,direct</span><br>go mod tidy<br> make<br></code></pre></td></tr></table></figure></li><li><p><strong>如果已经删除go.sum之后，mod的时候报错文件依旧不匹配，可采用该方法</strong> <code>GOSUMDB</code>，即 <code>export GOSUMDB=off</code></p><p><em>如果设置了 GOSUMDB 为 “off” 或者使用 go get 的时候启用了<code>-insecure</code>参数，Go 不会去对下载的依赖包做安全校验，存在一定的安全隐患，不建议</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">go clean -modcache<br>rm -f go.sum<br> export GOSUMDB=off<br>go mod tidy<br>make<br></code></pre></td></tr></table></figure></li></ul><p>编译成功</p></li></ol><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="MinIO-Server-安装"><a href="#MinIO-Server-安装" class="headerlink" title="MinIO Server 安装"></a>MinIO Server 安装</h2><p><strong>仅是编译minio,不存在配置及验证，如果验证，可参考<a href="https://ic-openlabs.huawei.com/client/#/knowledge/details?id=R1S1584D0021871822019121922381091416527">Huawei Kunpeng Innovation Center Flagship Store</a></strong></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@8154395e1759 /]# yum install vim wget git make -y<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装go</span><br>[root@8154395e1759 /]# wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz<br>[root@8154395e1759 /]# tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置环境变量</span><br>[root@8154395e1759 /]# cat /etc/profile | tail -n 2<br>unset -f pathmunge<br>export PATH=$PATH:/usr/local/go/bin<br>[root@8154395e1759 /]# go version<br>go version go1.18 linux/arm64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">参看go代理的配置</span><br>[root@8154395e1759 /]#  go env GOPROXY<br>https://proxy.golang.org,direct<br></code></pre></td></tr></table></figure><h3 id="下载minion"><a href="#下载minion" class="headerlink" title="下载minion"></a>下载minion</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@8154395e1759 /]#  git clone https://github.com/minio/minio.git<br>[root@8154395e1759 /]# cd minio/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">更新与编译环境对应的依赖</span><br>[root@8154395e1759 minio]# go mod tidy<br></code></pre></td></tr></table></figure><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@8154395e1759 minio]# make<br>[root@8154395e1759 minio]# make<br>Error generating git commit-time:  parsing time &quot;%cI&quot; as &quot;2006-01-02T15:04:05Z07:00&quot;: cannot parse &quot;%cI&quot; as &quot;2006&quot;<br>exit status 1<br>Checking dependencies<br>Building minio binary to &#x27;./minio&#x27;<br>[root@8154395e1759 minio]# ls -al ./minio<br>-rwxr-xr-x 1 root root 119773941 Sep  6 08:02 ./minio<br></code></pre></td></tr></table></figure><h2 id="MinIO-Client-安装"><a href="#MinIO-Client-安装" class="headerlink" title="MinIO Client 安装"></a>MinIO Client 安装</h2><h3 id="下载-amp-编译"><a href="#下载-amp-编译" class="headerlink" title="下载&amp;编译"></a>下载&amp;编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@8154395e1759 /]# git clone https://github.com/minio/mc.git<br>[root@8154395e1759 /]# cd mc/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">更新与编译环境对应的依赖</span><br>[root@8154395e1759 mc]# go mod tidy<br>[root@8154395e1759 mc]# make<br>Error generating git commit-time:  parsing time &quot;%cI&quot; as &quot;2006-01-02T15:04:05Z07:00&quot;: cannot parse &quot;%cI&quot; as &quot;2006&quot;<br>exit status 1<br>Checking dependencies<br>Building mc binary to &#x27;./mc&#x27;<br>[root@8154395e1759 mc]# ls -al ./mc<br>-rwxr-xr-x 1 root root 32852718 Sep  6 08:18 ./mc<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编译安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 安装nodejs</title>
    <link href="/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/ubuntu%E5%AE%89%E8%A3%85nodejs/"/>
    <url>/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/ubuntu%E5%AE%89%E8%A3%85nodejs/</url>
    
    <content type="html"><![CDATA[<h3 id="安装指定版本的nodejs"><a href="#安装指定版本的nodejs" class="headerlink" title="安装指定版本的nodejs"></a>安装指定版本的nodejs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -<br>sudo apt install nodejs<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编译安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装vscode</title>
    <link href="/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/ubuntu%E5%AE%89%E8%A3%85vscode/"/>
    <url>/2022/09/15/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/ubuntu%E5%AE%89%E8%A3%85vscode/</url>
    
    <content type="html"><![CDATA[<h3 id="在ubuntu的软件商城中安装code报错"><a href="#在ubuntu的软件商城中安装code报错" class="headerlink" title="在ubuntu的软件商城中安装code报错"></a>在ubuntu的软件商城中安装code报错</h3><p>Unable to install “Visual Studio Code”: snap “code” has “install-snap” change in progress；</p><h4 id="问题原因-amp-amp-解决"><a href="#问题原因-amp-amp-解决" class="headerlink" title="问题原因&amp;&amp;解决"></a>问题原因&amp;&amp;解决</h4><p>软件正在安装，所以不需要再次点击</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Doc$ snap changes<br>ID   Status  Spawn                   Ready                   Summary<br>1    Done    2022-02-23              yesterday at 11:37 CST  Initialize system state<br>2    Done    yesterday at 11:37 CST  yesterday at 11:37 CST  Initialize device<br>3    Done    yesterday at 11:42 CST  yesterday at 11:43 CST  Install &quot;typora&quot; snap from &quot;latest/stable&quot; channel<br>4    Done    yesterday at 14:03 CST  yesterday at 14:12 CST  Auto-refresh 4 snaps<br>5    Do      today at 11:06 CST      -                       Install &quot;code&quot; snap from &quot;latest/stable&quot; channel<br><br></code></pre></td></tr></table></figure><h3 id="从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode"><a href="#从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode" class="headerlink" title="从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode"></a>从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode</h3><p><strong>ubuntu 添加信任源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/<br>[sudo] password for ubuntu: <br>ubuntu@root:~/Desktop$ sudo sh -c &#x27;echo &quot;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;<br>ubuntu@root:~/Desktop$ rm -f packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo apt install apt-transport-https<br>Reading package lists... Done<br>Building dependency tree       <br>Reading state information... Done<br>The following packages were automatically installed and are no longer required:<br>  gyp javascript-common libc-ares2 libjs-inherits libjs-is-typedarray libjs-psl libjs-typedarray-to-buffer libpython2-stdlib libpython2.7-minimal libpython2.7-stdlib libssl-dev libuv1-dev<br>  python-pkg-resources python2 python2-minimal python2.7 python2.7-minimal<br>Use &#x27;sudo apt autoremove&#x27; to remove them.<br>The following NEW packages will be installed:<br>  apt-transport-https<br>0 upgraded, 1 newly installed, 0 to remove and 257 not upgraded.<br>Need to get 1,704 B of archives.<br>After this operation, 162 kB of additional disk space will be used.<br>Get:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]<br>Fetched 1,704 B in 1s (2,988 B/s)        <br>Selecting previously unselected package apt-transport-https.<br>(Reading database ... 196975 files and directories currently installed.)<br>Preparing to unpack .../apt-transport-https_2.0.9_all.deb ...<br>Unpacking apt-transport-https (2.0.9) ...<br>Setting up apt-transport-https (2.0.9) ...<br>ubuntu@root:~/Desktop$ sudo apt update -y<br>ubuntu@root:~/Desktop$ sudo apt install code -y<br></code></pre></td></tr></table></figure><p>下载之后重新打开，支持中文输入。</p>]]></content>
    
    
    <categories>
      
      <category>编译安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell脚本获取habor仓库信息</title>
    <link href="/2022/09/15/CICD/drone/habor-data/"/>
    <url>/2022/09/15/CICD/drone/habor-data/</url>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>镜像获取harbor工程中所有的仓库、镜像名称、镜像版本、镜像架构</p><p>可作为drone插件使用</p><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><p>build.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">镜像清单文件，将获取到的镜像信息存到该文件中</span><br>File=harbor-`date &#x27;+%Y-%m-%d&#x27;`.csv<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置的为drone的变量</span><br>USER=$PLUGIN_ADMIN<br>PASS=$PLUGIN_PASSWORD<br>TOU=$PLUGIN_ADDRESS<br>HURL=&quot;https://$TOU/api/v2.0&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 获取Harbor中有哪些项目（Project）</span></span><br>Project_List=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects | sed &#x27;s/,/\n/g&#x27; | grep -w name | awk -F &quot;\&quot;&quot; &#x27;&#123;print $4&#125;&#x27;)<br><br>for Project in $Project_List;do<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">循环获取每个项目下所有的镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Image_Names=$(curl -k  -s -u <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>:<span class="hljs-variable">$PASS</span>&quot;</span>  -X GET <span class="hljs-variable">$HURL</span>/search?q=<span class="hljs-variable">$Project</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> | python -m json.tool | grep <span class="hljs-string">&quot;repository_name&quot;</span> | awk -F <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="hljs-string">&quot;\&quot;&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br> Image_Names=$(curl -k  -s -u &quot;$USER:$PASS&quot;  -X GET $HURL/search?q=$Project -H &quot;Content-Type: application/json&quot; | sed &#x27;s/,/\n/g&#x27; | grep &quot;repository_name&quot; | awk -F &quot;\&quot;&quot; &#x27;&#123;print $4&#125;&#x27; | awk -F &quot;$Project&quot; &#x27;&#123;$1=&quot;&quot;;print&#125;&#x27; | awk -F &quot;/&quot; &#x27;&#123;$1=&quot;&quot;;print&#125;&#x27; | awk &#x27;$1=$1&#x27; | sed &#x27;s/ /%252F/g&#x27;)<br>   for Image in $Image_Names;do<br><span class="hljs-meta prompt_"># </span><span class="language-bash">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;https://<span class="hljs-variable">$TOU</span>/<span class="hljs-variable">$Project</span>/<span class="hljs-variable">$Image</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$allImage</span></span><br>    # 循环获取每个镜像所有的标签（版本）<br>    Image_Tags=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects/$Project/repositories/$Image/artifacts | sed &#x27;s/,/\n/g&#x27; | grep name | sed -e &#x27;s/.\&#123;8\&#125;//&#x27; -e &#x27;s/&quot;$//&#x27; )<br>        for Tag in $Image_Tags;do<br>        arch=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects/$Project/repositories/$Image/artifacts/$Tag  | sed &#x27;s/,/\n/g&#x27; | grep architecture | awk -F &quot;\&quot;&quot; &#x27;&#123;print $6&#125;&#x27;)<br>        # 将获取到的镜像完整路径存档到镜像清单文件<br>        #echo &quot;https://$TOU/$Project/$Image:$Tag&quot; | grep -v Base | grep -v Image | grep -v CentOS &gt;&gt;  $File<br>        image=$(echo &quot;$Image&quot; | sed &#x27;s/%252F/\//g&#x27;)<br>         echo &quot;$TOU,$Project,$image,$Tag,$arch,docker pull $TOU/$Project/$image:$Tag&quot; &gt;&gt;  /opt/$File<br>        done<br>    done<br>done<br>exec &quot;$@&quot;<br></code></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.14</span>.<span class="hljs-number">6</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> build.sh /bin/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /bin/build.sh</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span><br><span class="language-bash">    apk -Uuv add curl ca-certificates</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> /bin/build.sh</span><br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>drone</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><br><span class="hljs-attr">platform:</span><br>    <span class="hljs-attr">os:</span> <span class="hljs-string">linux</span><br>    <span class="hljs-attr">arch:</span> <span class="hljs-string">amd64</span><br>    <br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>    <span class="hljs-attr">host:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/data/harbor/Doc</span><br><span class="hljs-attr">steps:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">greeting</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">IP:8085/image_amd64/harbor_data:v1</span><br>  <span class="hljs-attr">settings:</span><br>    <span class="hljs-attr">admin:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">Harbor12345</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">IP:8085</span><br>  <span class="hljs-attr">volumes:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/</span><br></code></pre></td></tr></table></figure><p>docker 命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it --rm -e PLUGIN_ADMIN=admin -e PLUGIN_PASSWORD=Harbor12345 -e PLUGIN_ADDRESS=IP:8085 -v $PWD:/opt/ IP:8085/image_amd64/harbor_data:v1 sh<br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>会在映射目录保存harbor-<code>date &#39;+%Y-%m-%d&#39;</code>格式的文件</p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
      <category>drone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>harbor</tag>
      
      <tag>drone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSV数据同步pg</title>
    <link href="/2022/09/15/CICD/drone/harbor-database/"/>
    <url>/2022/09/15/CICD/drone/harbor-database/</url>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>更新harbor数据（harbor-<code>date &#39;+%Y-%m-%d&#39;</code>.csv）到数据库（pg）。</p><p>可作为drone插件（将传入的值作为环境变量获取）使用。</p><p><em>注：该文档需要固定数据库类型，csv格式等</em></p><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><p>harbor_flush.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> psycopg2<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-comment">#连接数据库，os.getenv获取环境变量</span><br>   conn=psycopg2.connect(database=os.getenv(<span class="hljs-string">&#x27;PLUGIN_DATABASE&#x27;</span>),user=os.getenv(<span class="hljs-string">&#x27;PLUGIN_USER&#x27;</span>),password=os.getenv(<span class="hljs-string">&#x27;PLUGIN_PASSWORD&#x27;</span>),host=os.getenv(<span class="hljs-string">&#x27;PLUGIN_HOST&#x27;</span>),port=os.getenv(<span class="hljs-string">&#x27;PLUGIN_PORT&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Opened database successfully&quot;</span>)<br>    cur=conn.cursor()<br>    <span class="hljs-comment">#如果数据库不存在创建数据库</span><br>    cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;CREATE TABLE if not exists harbor_table (</span><br><span class="hljs-string">        repoaddress VARCHAR(255),</span><br><span class="hljs-string">        storehouse VARCHAR(255),</span><br><span class="hljs-string">        image  VARCHAR(255),</span><br><span class="hljs-string">        version  VARCHAR(255),</span><br><span class="hljs-string">        arch  VARCHAR(255),</span><br><span class="hljs-string">        command  VARCHAR(255)</span><br><span class="hljs-string">        );&#x27;&#x27;&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Table created successfully&quot;</span>)<br><br>    cur.execute(<span class="hljs-string">&quot;TRUNCATE TABLE harbor_table;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Table truncate successfully&quot;</span>)<br>    conn.commit()<br>    filename=<span class="hljs-string">&#x27;/opt/harbor-&#x27;</span>+<span class="hljs-built_in">str</span>(datetime.date.today())+<span class="hljs-string">&#x27;.csv&#x27;</span><br>    f=<span class="hljs-built_in">open</span>(filename,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    <span class="hljs-comment">#同步csv文件</span><br>    <span class="hljs-keyword">try</span>:<br>        cur.copy_from(f, <span class="hljs-string">&#x27;harbor_table&#x27;</span>, sep=<span class="hljs-string">&#x27;,&#x27;</span>, null=<span class="hljs-string">&#x27;&#x27;</span>)<br>        conn.commit()<br>    <span class="hljs-keyword">except</span> (Exception, psycopg2.DatabaseError) <span class="hljs-keyword">as</span> error:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: %s&quot;</span> % error)<br><br>    conn.close()<br></code></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.9</span>-alpine3.<span class="hljs-number">13</span><br><span class="hljs-comment">#下载依赖</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span><br><span class="language-bash">    apk add build-base postgresql-dev &amp;&amp; \</span><br><span class="language-bash">    pip install psycopg2 pandas openpyxl</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> harbor_flush.py ./</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>drone</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><br><span class="hljs-attr">platform:</span><br>    <span class="hljs-attr">os:</span> <span class="hljs-string">linux</span><br>    <span class="hljs-attr">arch:</span> <span class="hljs-string">amd64</span><br>    <br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>    <span class="hljs-attr">host:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/data/harbor/Doc</span><br><span class="hljs-comment">#同步数据库</span><br><span class="hljs-attr">steps:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor_database</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">IP:8085/image_amd64/harbor_database:v1</span><br>  <span class="hljs-attr">settings:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">testdb</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">postgres</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">10.100</span><span class="hljs-number">.93</span><span class="hljs-string">.X</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10590</span><br>  <span class="hljs-attr">volumes:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/</span><br>  <span class="hljs-attr">commands:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">python</span> <span class="hljs-string">harbor_flush.py</span><br></code></pre></td></tr></table></figure><p>docker 命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it --rm -e PLUGIN_DATBASE=testdb -e PLUGIN_USER=postgres -e PLUGIN_PASSWORD=123456 -e PLUGIN_HOST=10.100.93.X -e PLUGIN_PORT=10590 -v $PWD:/opt IP:8085/image_amd64/harbor_database:v1 sh<br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>成功写入数据库中</p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
      <category>drone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>harbor</tag>
      
      <tag>drone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>time包方法详解</title>
    <link href="/2022/09/15/golang/Golang%E5%8C%85/Time/"/>
    <url>/2022/09/15/golang/Golang%E5%8C%85/Time/</url>
    
    <content type="html"><![CDATA[<h1 id="time-Now"><a href="#time-Now" class="headerlink" title="time.Now"></a>time.Now</h1><p>获取当前时间.</p><h1 id="time-Until"><a href="#time-Until" class="headerlink" title="time.Until"></a>time.Until</h1><p>保存时间值t，用于评估直到时间t的持续时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//获取当前时间</span><br>t := time.Now()<br>fmt.Println(<span class="hljs-string">&quot;Duration until t:&quot;</span>, time.Until(t)) <span class="hljs-comment">//Duration until t: -112ns</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="time-AfterFunc"><a href="#time-AfterFunc" class="headerlink" title="time.AfterFunc"></a>time.AfterFunc</h1><p>用于等待经过的时间，也就是在经历时间之后执行方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>waitchan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>time.AfterFunc(time.Second*<span class="hljs-number">5</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;AfterFunc excuted&quot;</span>)<br>waitchan &lt;- <span class="hljs-number">1</span><br>&#125;)<br>&lt;-waitchan<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>Golang包</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>atomic.Value 类型</title>
    <link href="/2022/09/15/golang/Golang%E5%8C%85/atomic.Value%20%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/09/15/golang/Golang%E5%8C%85/atomic.Value%20%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>Golang包</category>
      
    </categories>
    
    
    <tags>
      
      <tag>atomic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>context源码学习</title>
    <link href="/2022/09/15/golang/Golang%E5%8C%85/context/"/>
    <url>/2022/09/15/golang/Golang%E5%8C%85/context/</url>
    
    <content type="html"><![CDATA[<p>go:1.18.5</p><h1 id="context包架构布局"><a href="#context包架构布局" class="headerlink" title="context包架构布局"></a>context包架构布局</h1><table><thead><tr><th>类型</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>Context</td><td>接口</td><td>定义了 Context 接口的四个方法</td></tr><tr><td>emptyCtx</td><td>结构体</td><td>实现了 Context 接口，它其实是个空的 context</td></tr><tr><td>CancelFunc</td><td>函数</td><td>取消函数</td></tr><tr><td>canceler</td><td>接口</td><td>context 取消接口，定义了两个方法</td></tr><tr><td>cancelCtx</td><td>结构体</td><td>可以被取消</td></tr><tr><td>timerCtx</td><td>结构体</td><td>超时会被取消</td></tr><tr><td>valueCtx</td><td>结构体</td><td>可以存储 k-v 对</td></tr><tr><td>Background</td><td>函数</td><td>返回一个空的 context，常作为根 context</td></tr><tr><td>TODO</td><td>函数</td><td>返回一个空的 context，常用于重构时期，没有合适的 context 可用</td></tr><tr><td>WithCancel</td><td>函数</td><td>基于父 context，生成一个可以取消的 context</td></tr><tr><td>newCancelCtx</td><td>函数</td><td>创建一个可取消的 context</td></tr><tr><td>propagateCancel</td><td>函数</td><td>向下传递 context 节点间的取消关系</td></tr><tr><td>parentCancelCtx</td><td>函数</td><td>找到第一个可取消的父节点</td></tr><tr><td>removeChild</td><td>函数</td><td>去掉父节点的孩子节点</td></tr><tr><td>init</td><td>函数</td><td>包初始化</td></tr><tr><td>WithDeadline</td><td>函数</td><td>创建一个有 deadline 的 context</td></tr><tr><td>WithTimeout</td><td>函数</td><td>创建一个有 timeout 的 context</td></tr><tr><td>WithValue</td><td>函数</td><td>创建一个存储 k-v 对的 context</td></tr></tbody></table><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="context"><a href="#context" class="headerlink" title="context"></a><strong>context</strong></h3><p>定义4个方法，都是幂等，也就是多次执行返回的结果一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Context <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// 返回context是否会被取消以及自动取消的时间</span><br>Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>)<br><br><span class="hljs-comment">//context被取消或deadline的时候，返回一个关闭的chan</span><br>Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-comment">//Done之后，返回context的原因</span><br>Err() <span class="hljs-type">error</span><br><br><span class="hljs-comment">//获取key对应的alue</span><br>Value(key any) any<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="canceler"><a href="#canceler" class="headerlink" title="canceler"></a><strong>canceler</strong></h3><p>说明context是可以取消的。</p><ul><li>“取消”操作应该是建议性，而非强制性</li></ul><p>caller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。</p><ul><li>“取消”操作应该可传递</li></ul><p>“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，<code>Done()</code> 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> canceler <span class="hljs-keyword">interface</span> &#123;<br>cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>)<br>Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="emptyCtx"><a href="#emptyCtx" class="headerlink" title="emptyCtx"></a>emptyCtx</h3><p>它被包装成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    <span class="hljs-comment">//BackGround返回一个非空的context，且绝不会被取消，没有值和取消时间。通常用在main函数、初始化和测试中或者作为输入请求的高context</span><br><span class="hljs-comment">// Background returns a non-nil, empty Context. It is never canceled, has no</span><br><span class="hljs-comment">// values, and has no deadline. It is typically used by the main function,</span><br><span class="hljs-comment">// initialization, and tests, and as the top-level Context for incoming</span><br><span class="hljs-comment">// requests.</span><br>background = <span class="hljs-built_in">new</span>(emptyCtx)<br>    <span class="hljs-comment">//TODO返回一个非空的context，代码可以使用context。当不清楚采用那种context或者不确定是都有用可以采用TODO，</span><br><span class="hljs-comment">// TODO returns a non-nil, empty Context. Code should use context.TODO when</span><br><span class="hljs-comment">// it&#x27;s unclear which Context to use or it is not yet available (because the</span><br><span class="hljs-comment">// surrounding function has not yet been extended to accept a Context</span><br><span class="hljs-comment">// parameter).</span><br>todo       = <span class="hljs-built_in">new</span>(emptyCtx)<br>)<br></code></pre></td></tr></table></figure><p>background通常用在main函数中，作为context的根节点。</p><h3 id="cancelCtx"><a href="#cancelCtx" class="headerlink" title="cancelCtx"></a>cancelCtx</h3><p>可取消的context，他可以确保父被取消的时候，其余的子context也会被取消。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//</span><br><span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br><br>mu       sync.Mutex            <span class="hljs-comment">// protects following fields</span><br>done     atomic.Value          <span class="hljs-comment">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span><br>children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// set to nil by the first cancel call</span><br>err      <span class="hljs-type">error</span>                 <span class="hljs-comment">// set to non-nil by the first cancel call</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，value、Done、String、Err等均实现了canceler方法。</p><p><code>Done</code>方法的实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br>d := c.done.Load()<br><span class="hljs-keyword">if</span> d != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> d.(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br>d = c.done.Load()<br><span class="hljs-keyword">if</span> d == <span class="hljs-literal">nil</span> &#123;<br>d = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>c.done.Store(d)<br>&#125;<br><span class="hljs-keyword">return</span> d.(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。</p><p><code>value</code>方法实现:返回取消的key值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Value(key any) any &#123;<br><span class="hljs-keyword">if</span> key == &amp;cancelCtxKey &#123;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><span class="hljs-keyword">return</span> value(c.Context, key)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>cancel</code>方法实现</p><p>关闭所有的channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">//传入err</span><br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)<br>&#125;<br>c.mu.Lock()<br>    <span class="hljs-comment">//判断是否已经取消，因为Done之后会返回取消原因，因此采用err的的方法判断是否取消</span><br><span class="hljs-keyword">if</span> c.err != <span class="hljs-literal">nil</span> &#123;<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// already canceled</span><br>&#125;<br>c.err = err<br>d, _ := c.done.Load().(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>    <span class="hljs-comment">//关闭channel，通知其他协程</span><br><span class="hljs-keyword">if</span> d == <span class="hljs-literal">nil</span> &#123;<br>c.done.Store(closedchan)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">close</span>(d)<br>&#125;<br>    <span class="hljs-comment">//遍历循环子context关闭</span><br><span class="hljs-keyword">for</span> child := <span class="hljs-keyword">range</span> c.children &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>child.cancel(<span class="hljs-literal">false</span>, err)<br>&#125;<br>    <span class="hljs-comment">//子结点置空</span><br>c.children = <span class="hljs-literal">nil</span><br>c.mu.Unlock()<br><br>    <span class="hljs-comment">//如果为True，将自己从父节点删除</span><br><span class="hljs-keyword">if</span> removeFromParent &#123;<br>removeChild(c.Context, c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建可取消的cancel方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCancel</span><span class="hljs-params">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;<br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>c := newCancelCtx(parent)<br>    <span class="hljs-comment">//向上遍历可删除的父节点以及他的子结点进行删除</span><br>    <span class="hljs-comment">//</span><br>propagateCancel(parent, &amp;c)<br>    <span class="hljs-comment">//返回context和func，其中c.cancel(true, Canceled)已经默认需要将自己从父节点中删除。</span><br><span class="hljs-keyword">return</span> &amp;c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br><br><span class="hljs-comment">// newCancelCtx returns an initialized cancelCtx.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newCancelCtx</span><span class="hljs-params">(parent Context)</span></span> cancelCtx &#123;<br><span class="hljs-keyword">return</span> cancelCtx&#123;Context: parent&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在调用方法的时候，默认调用的cancel方法中传入的true，而在在执行该方法的内部循环取消子结点的时候child调用的cancel传入的是false</strong></p><ol><li><p>可取消的cancel的方法中传入的为true,将child进行删除</p><p><code>removeChild</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeChild</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br><span class="hljs-comment">//判断是否有可取消的父节点</span><br>p, ok := parentCancelCtx(parent)<br><span class="hljs-comment">//不存在，说明父节点已经取消</span><br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>p.mu.Lock()<br><span class="hljs-comment">//判断child节点是否存在，存在delete</span><br><span class="hljs-keyword">if</span> p.children != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">delete</span>(p.children, child)<br>&#125;<br>p.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>parentCancelCtx</code>方法，查看父节点如何递归遍历删除</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parentCancelCtx</span><span class="hljs-params">(parent Context)</span></span> (*cancelCtx, <span class="hljs-type">bool</span>) &#123;<br>    <span class="hljs-comment">//done为一个结构体管道</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == closedchan || done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>    <span class="hljs-comment">//通过value值查找到匹配的parent.Done()</span><br>p, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>    <span class="hljs-comment">//如果没有，*cancelCtx已被包装在一个自定义实现中，提供了一个不同的完成通道，在这种情况下，我们不应该绕过它</span><br>pdone, _ := p.done.Load().(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">if</span> pdone != done &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> p, <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>例子：</p><p>mcCtx，childCtx 和正常的 parentContext不一样，因为它是一个自定义的结构体类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Mycontext <span class="hljs-keyword">struct</span> &#123;<br>context.Context<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>childCancel := <span class="hljs-literal">true</span><br>parentContext, parentFunc := context.WithCancel(context.Background())<br>mcCtx := Mycontext&#123;parentContext&#125;<br><br>childCtx, childFunc := context.WithCancel(mcCtx)<br><br><span class="hljs-keyword">if</span> childCancel &#123;<br>childFunc()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>parentFunc()<br>&#125;<br><br>fmt.Println(parentContext) <span class="hljs-comment">//context.Background.WithCancel</span><br>fmt.Println(mcCtx) <span class="hljs-comment">//&#123;context.Background.WithCancel&#125;</span><br>fmt.Println(childCtx) <span class="hljs-comment">//main.Mycontext.WithCancel</span><br><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="timerCtx"><a href="#timerCtx" class="headerlink" title="timerCtx"></a>timerCtx</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> timerCtx <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//基于cancelCtx</span><br>cancelCtx<br>timer *time.Timer <span class="hljs-comment">// Under cancelCtx.mu.</span><br>    <span class="hljs-comment">//设置Deadline的时间</span><br>deadline time.Time<br>&#125;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">return</span> c.deadline, <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> contextName(c.cancelCtx.Context) + <span class="hljs-string">&quot;.WithDeadline(&quot;</span> +<br>c.deadline.String() + <span class="hljs-string">&quot; [&quot;</span> +<br>time.Until(c.deadline).String() + <span class="hljs-string">&quot;])&quot;</span><br>&#125;<br><span class="hljs-comment">//可取消的timeOut</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">//调用cancelCtx的cancel方法</span><br>c.cancelCtx.cancel(<span class="hljs-literal">false</span>, err)<br><span class="hljs-keyword">if</span> removeFromParent &#123;<br><span class="hljs-comment">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>        <span class="hljs-comment">//移除子节点</span><br>removeChild(c.cancelCtx.Context, c)<br>&#125;<br>c.mu.Lock()<br>    <span class="hljs-comment">//判断c的时间，关掉定时器，不会再次取消</span><br><span class="hljs-keyword">if</span> c.timer != <span class="hljs-literal">nil</span> &#123;<br>c.timer.Stop()<br>c.timer = <span class="hljs-literal">nil</span><br>&#125;<br>c.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p>创建可取消的time context</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">WithTimeout(<span class="hljs-params">parent</span> Context, <span class="hljs-params">timeout</span> <span class="hljs-params">time</span>.Duration)</span> (Context, CancelFunc) &#123;<br>return <span class="hljs-constructor">WithDeadline(<span class="hljs-params">parent</span>, <span class="hljs-params">time</span>.Now()</span>.<span class="hljs-constructor">Add(<span class="hljs-params">timeout</span>)</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>直接调用<code>WithDeadline</code>,添加超时时间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadline</span><span class="hljs-params">(parent Context, d time.Time)</span></span> (Context, CancelFunc) &#123;<br>    <span class="hljs-comment">//判断父节点是否为空</span><br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>    <span class="hljs-comment">//获取当前parent的时间和结果。如果父节点超时，会自动调用cancel函数。</span><br><span class="hljs-keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br><span class="hljs-comment">// The current deadline is already sooner than the new one.</span><br><span class="hljs-keyword">return</span> WithCancel(parent)<br>&#125;<br>c := &amp;timerCtx&#123;<br>cancelCtx: newCancelCtx(parent),<br>deadline:  d,<br>&#125;<br>    <span class="hljs-comment">//挂靠父节点</span><br>propagateCancel(parent, c)<br>    <span class="hljs-comment">//获取距离到达dealine的时间</span><br>dur := time.Until(d)<br>    <span class="hljs-comment">//超时</span><br><span class="hljs-keyword">if</span> dur &lt;= <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-comment">//取消并返回</span><br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded) <span class="hljs-comment">// deadline has already passed</span><br>        <br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">false</span>, Canceled) &#125;<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br><span class="hljs-keyword">if</span> c.err == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">//在到达超时的时间的时候，执行取消命令</span><br>c.timer = time.AfterFunc(dur, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded)<br>&#125;)<br>&#125;<br>    <span class="hljs-comment">//是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型</span><br>    <span class="hljs-comment">//返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。</span><br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="valueCtx"><a href="#valueCtx" class="headerlink" title="valueCtx"></a>valueCtx</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> valueCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br>key, val any<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="propagateCancel"><a href="#propagateCancel" class="headerlink" title="propagateCancel"></a>propagateCancel</h2><p>父节点时取消子节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// propagateCancel arranges for child to be canceled when parent is.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">propagateCancel</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br>    <span class="hljs-comment">//父节点是空节点</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// parent is never canceled</span><br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-comment">// parent is already canceled</span><br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>&#125;<br><br>    <span class="hljs-comment">//判断父节点是否可取消</span><br><span class="hljs-keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;<br>p.mu.Lock()<br>        <span class="hljs-comment">// 父节点已经被取消了，本节点（子节点）也要取消</span><br><span class="hljs-keyword">if</span> p.err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// parent has already been canceled</span><br>child.cancel(<span class="hljs-literal">false</span>, p.err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> p.children == <span class="hljs-literal">nil</span> &#123;<br>p.children = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>            <span class="hljs-comment">//挂到父节点</span><br>p.children[child] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>p.mu.Unlock()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//没有找到可取消的父节点</span><br>atomic.AddInt32(&amp;goroutines, +<span class="hljs-number">1</span>)<br>        <span class="hljs-comment">//重新启动一个新协程，监控父节点和子节点</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-parent.Done():<br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">case</span> &lt;-child.Done():<br>&#125;<br>&#125;()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="传递共享数据"><a href="#传递共享数据" class="headerlink" title="传递共享数据"></a>传递共享数据</h2><p>通常使用WithValue()的方法共享数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx := context.Background()<br>process(ctx) <span class="hljs-comment">//process over. no trace_id</span><br><br>ctx = context.WithValue(ctx, <span class="hljs-string">&quot;traceId&quot;</span>, <span class="hljs-string">&quot;qwe-2011&quot;</span>)<br>process(ctx)<span class="hljs-comment">//process over,trace_id=qwe-2011</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">process</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>traceID, ok := ctx.Value(<span class="hljs-string">&quot;traceId&quot;</span>).(<span class="hljs-type">string</span>)<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Printf(<span class="hljs-string">&quot;process over,trace_id=%s\n&quot;</span>, traceID)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;process over. no trace_id\n&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="取消goroutine-amp-防止goroutine泄露"><a href="#取消goroutine-amp-防止goroutine泄露" class="headerlink" title="取消goroutine&amp;防止goroutine泄露"></a>取消goroutine&amp;防止goroutine泄露</h2><ol><li><p>取消goroutine</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">work1</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...work1...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">work2</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br>LABEL:<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">break</span> LABEL<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;...work2...&quot;</span>)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> work1(ctx)<br><span class="hljs-keyword">go</span> work2(ctx)<br><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>cancel()<br>fmt.Println(<span class="hljs-string">&quot;...cancel...&quot;</span>)<br><span class="hljs-keyword">go</span> work2(ctx)<br>fmt.Println(<span class="hljs-string">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/go/src/gotest$ go run main.go <br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...cancel...<br>...over...<br></code></pre></td></tr></table></figure></li><li><p>防止goroutine泄露</p></li></ol><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://www.cnblogs.com/qcrao-2018/p/11007503.html">深度解密Go语言之context</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>Golang包</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sync.Once 源码</title>
    <link href="/2022/09/15/golang/Golang%E5%8C%85/sync.Once/"/>
    <url>/2022/09/15/golang/Golang%E5%8C%85/sync.Once/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Go 标准库提供的使函数只执行一次的实现，常应用于单例模式。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>保证变量仅被初始化一次，线程安全，支持并发。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>因为源码很少，所以就直接全部复制上来了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">package</span> sync<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;sync/atomic&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Once <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//标记是否完成初始化</span><br>done <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//互斥锁</span><br>m    Mutex<br>&#125;<br><span class="hljs-comment">// f 是对象初始化函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Once)</span></span> Do(f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>) &#123;<br><span class="hljs-keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Outlined slow-path to allow inlining of the fast-path.</span><br>o.doSlow(f)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Once)</span></span> doSlow(f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>) &#123;<br>o.m.Lock()<br><span class="hljs-keyword">defer</span> o.m.Unlock()<br><span class="hljs-keyword">if</span> o.done == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="hljs-number">1</span>)<br>f()<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>Golang包</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sync</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互斥锁-sync.Mutex</title>
    <link href="/2022/09/15/golang/Golang%E5%8C%85/%E4%BA%92%E6%96%A5%E9%94%81-sync.Mutex/"/>
    <url>/2022/09/15/golang/Golang%E5%8C%85/%E4%BA%92%E6%96%A5%E9%94%81-sync.Mutex/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>go语言中的一种互斥锁，保证同步的一种工具。</p><p>实现协程对互斥资源的访问，其中，<code>Lock()</code>用于争夺锁资源，<code>Unlock()</code>用于释放锁资源并唤醒等待队列中的协程。在正常的使用情况下（如代码所示），只有进入临界区的协程会执行<code>Unlock()</code>。因此，<strong>同一时刻只有一个协程可以执行<code>Unlock()</code>方法</strong>。</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>避免多个线程在同一个时刻操作同一数据块。</li><li>协调多个线程，避免在同一时刻执行同一个代码块</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br>mu.Lock() <span class="hljs-comment">// 加锁</span><br><span class="hljs-comment">// 执行业务逻辑</span><br>mu.Unlock() <span class="hljs-comment">// 释放锁</span><br></code></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//结构体</span><br><span class="hljs-keyword">type</span> Mutex <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//互斥锁</span><br>state <span class="hljs-type">int32</span><br>sema  <span class="hljs-type">uint32</span><br>&#125;<br><span class="hljs-comment">//常量</span><br><span class="hljs-keyword">const</span> (<br>mutexLocked = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span> <span class="hljs-comment">// mutex is locked</span><br>mutexWoken<br>mutexStarving<br>mutexWaiterShift = <span class="hljs-literal">iota</span><br><br>starvationThresholdNs = <span class="hljs-number">1e6</span><br>)<br></code></pre></td></tr></table></figure><p><strong>状态二进制表示</strong></p><table><thead><tr><th>字段</th><th>十进制</th><th>二进制</th><th>名称</th></tr></thead><tbody><tr><td>mutexLocked</td><td>1</td><td>0001</td><td>加锁</td></tr><tr><td>mutexUnLocked</td><td>0</td><td>0000</td><td>未加锁</td></tr><tr><td>mutexWoken</td><td>2</td><td>0010</td><td>唤醒</td></tr><tr><td>mutexStarving</td><td>4</td><td>0100</td><td>饥饿</td></tr><tr><td>mutexWaiterShift</td><td>3</td><td>0011</td><td>代表位移</td></tr></tbody></table><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Locker</span> interface &#123;<br><span class="hljs-type">Lock</span>()<br><span class="hljs-type">Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><ol><li>单协程获取锁，通过CAS把state状态从0设置成1，加锁成功后返回</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Lock() &#123;<br><span class="hljs-comment">// Fast path: grab unlocked mutex.</span><br>    <span class="hljs-comment">//CSA判断锁的状态，如果执行CAS把互斥锁状态从0设置成1，则加锁成功，返回</span><br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class="hljs-number">0</span>, mutexLocked) &#123;<br>        <span class="hljs-comment">//race检测</span><br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 存在多个线程，设置失败之后，表示存在冲突，执行该方式</span><br>m.lockSlow()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lockSlow"><a href="#lockSlow" class="headerlink" title="lockSlow"></a>lockSlow</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> lockSlow() &#123;<br><span class="hljs-keyword">var</span> waitStartTime <span class="hljs-type">int64</span><br>    <span class="hljs-comment">//饥饿状态</span><br>starving := <span class="hljs-literal">false</span><br>    <span class="hljs-comment">//唤醒状态</span><br>awoke := <span class="hljs-literal">false</span><br>    <span class="hljs-comment">//循环次数</span><br>iter := <span class="hljs-number">0</span><br>    <span class="hljs-comment">//当前锁的状态</span><br>old := m.state<br>    <span class="hljs-comment">//循环</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span><br><span class="hljs-comment">// so we won&#x27;t be able to acquire the mutex anyway.</span><br>        <span class="hljs-comment">//不要在饥饿模式下旋转，所有权将移交给服务员，所以我门不再获得锁</span><br>        <span class="hljs-comment">//判断old&amp;(0001|0100)==0001——》old&amp;0101是否等于0001，则old只能为0001（加锁）等，不可能是被唤醒或者饥饿状态</span><br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;<br><span class="hljs-comment">// Active spinning makes sense.</span><br><span class="hljs-comment">// Try to set mutexWoken flag to inform Unlock</span><br><span class="hljs-comment">// to not wake other blocked goroutines.</span><br>            <span class="hljs-comment">//将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了</span><br><span class="hljs-keyword">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class="hljs-number">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class="hljs-number">0</span> &amp;&amp;<br>atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;<br>awoke = <span class="hljs-literal">true</span><br>&#125;<br>            <span class="hljs-comment">//自主旋转</span><br>runtime_doSpin()<br>iter++<br>            <span class="hljs-comment">//更新锁的状态</span><br>old = m.state<br><span class="hljs-keyword">continue</span><br>&#125;<br>        <br>          <span class="hljs-comment">// 到了这一步， state的状态可能是：</span><br>          <span class="hljs-comment">// 1. 锁还没有被释放，锁处于正常状态</span><br>          <span class="hljs-comment">// 2. 锁还没有被释放， 锁处于饥饿状态</span><br>          <span class="hljs-comment">// 3. 锁已经被释放， 锁处于正常状态</span><br>          <span class="hljs-comment">// 4. 锁已经被释放， 锁处于饥饿状态</span><br>          <span class="hljs-comment">//</span><br><span class="hljs-built_in">new</span> := old<br><span class="hljs-comment">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span><br>        <span class="hljs-comment">//获取不是饥饿锁状态，新到达的协程在队列中</span><br>        <span class="hljs-comment">//old&amp;0100==0000</span><br><span class="hljs-keyword">if</span> old&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> |= mutexLocked<br>&#125;<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> += <span class="hljs-number">1</span> &lt;&lt; mutexWaiterShift<br>&#125;<br><span class="hljs-comment">// The current goroutine switches mutex to starvation mode.</span><br><span class="hljs-comment">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span><br><span class="hljs-comment">// Unlock expects that starving mutex has waiters, which will not</span><br><span class="hljs-comment">// be true in this case.</span><br><span class="hljs-keyword">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> |= mutexStarving<br>&#125;<br><span class="hljs-keyword">if</span> awoke &#123;<br><span class="hljs-comment">// The goroutine has been woken from sleep,</span><br><span class="hljs-comment">// so we need to reset the flag in either case.</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexWoken == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: inconsistent mutex state&quot;</span>)<br>&#125;<br><span class="hljs-built_in">new</span> &amp;^= mutexWoken<br>&#125;<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span> <span class="hljs-comment">// locked the mutex with CAS</span><br>&#125;<br><span class="hljs-comment">// If we were already waiting before, queue at the front of the queue.</span><br>queueLifo := waitStartTime != <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> waitStartTime == <span class="hljs-number">0</span> &#123;<br>waitStartTime = runtime_nanotime()<br>&#125;<br>runtime_SemacquireMutex(&amp;m.sema, queueLifo, <span class="hljs-number">1</span>)<br>starving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs<br>old = m.state<br><span class="hljs-keyword">if</span> old&amp;mutexStarving != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// If this goroutine was woken and mutex is in starvation mode,</span><br><span class="hljs-comment">// ownership was handed off to us but mutex is in somewhat</span><br><span class="hljs-comment">// inconsistent state: mutexLocked is not set and we are still</span><br><span class="hljs-comment">// accounted as waiter. Fix that.</span><br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexWoken) != <span class="hljs-number">0</span> || old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: inconsistent mutex state&quot;</span>)<br>&#125;<br>delta := <span class="hljs-type">int32</span>(mutexLocked - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift)<br><span class="hljs-keyword">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// Exit starvation mode.</span><br><span class="hljs-comment">// Critical to do it here and consider wait time.</span><br><span class="hljs-comment">// Starvation mode is so inefficient, that two goroutines</span><br><span class="hljs-comment">// can go lock-step infinitely once they switch mutex</span><br><span class="hljs-comment">// to starvation mode.</span><br>delta -= mutexStarving<br>&#125;<br>atomic.AddInt32(&amp;m.state, delta)<br><span class="hljs-keyword">break</span><br>&#125;<br>awoke = <span class="hljs-literal">true</span><br>iter = <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>old = m.state<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Unlock unlocks m.</span><br><span class="hljs-comment">// It is a run-time error if m is not locked on entry to Unlock.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// A locked Mutex is not associated with a particular goroutine.</span><br><span class="hljs-comment">// It is allowed for one goroutine to lock a Mutex and then</span><br><span class="hljs-comment">// arrange for another goroutine to unlock it.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Unlock() &#123;<br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>_ = m.state<br>race.Release(unsafe.Pointer(m))<br>&#125;<br><br><span class="hljs-comment">// Fast path: drop lock bit.</span><br><span class="hljs-built_in">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span> != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Outlined slow path to allow inlining the fast path.</span><br><span class="hljs-comment">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>m.unlockSlow(<span class="hljs-built_in">new</span>)<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="Unlock"><a href="#Unlock" class="headerlink" title="Unlock"></a>Unlock</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Unlock() &#123;<br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>_ = m.state<br>race.Release(unsafe.Pointer(m))<br>&#125;<br><br><span class="hljs-comment">// Fast path: drop lock bit.</span><br><span class="hljs-built_in">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span> != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Outlined slow path to allow inlining the fast path.</span><br><span class="hljs-comment">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>m.unlockSlow(<span class="hljs-built_in">new</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> unlockSlow(<span class="hljs-built_in">new</span> <span class="hljs-type">int32</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">new</span>+mutexLocked)&amp;mutexLocked == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br>old := <span class="hljs-built_in">new</span><br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-keyword">if</span> old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// Grab the right to wake someone.</span><br><span class="hljs-built_in">new</span> = (old - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">false</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>old = m.state<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="unlockSlow"><a href="#unlockSlow" class="headerlink" title="unlockSlow"></a>unlockSlow</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> unlockSlow(<span class="hljs-built_in">new</span> <span class="hljs-type">int32</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">new</span>+mutexLocked)&amp;mutexLocked == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br>old := <span class="hljs-built_in">new</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// If there are no waiters or a goroutine has already</span><br><span class="hljs-comment">// been woken or grabbed the lock, no need to wake anyone.</span><br><span class="hljs-comment">// In starvation mode ownership is directly handed off from unlocking</span><br><span class="hljs-comment">// goroutine to the next waiter. We are not part of this chain,</span><br><span class="hljs-comment">// since we did not observe mutexStarving when we unlocked the mutex above.</span><br><span class="hljs-comment">// So get off the way.</span><br><span class="hljs-keyword">if</span> old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// Grab the right to wake someone.</span><br><span class="hljs-built_in">new</span> = (old - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">false</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>old = m.state<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Starving mode: handoff mutex ownership to the next waiter, and yield</span><br><span class="hljs-comment">// our time slice so that the next waiter can start to run immediately.</span><br><span class="hljs-comment">// Note: mutexLocked is not set, the waiter will set it after wakeup.</span><br><span class="hljs-comment">// But mutex is still considered locked if mutexStarving is set,</span><br><span class="hljs-comment">// so new coming goroutines won&#x27;t acquire it.</span><br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TryLock"><a href="#TryLock" class="headerlink" title="TryLock"></a>TryLock</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> TryLock() <span class="hljs-type">bool</span> &#123;<br>old := m.state<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// There may be a goroutine waiting for the mutex, but we are</span><br><span class="hljs-comment">// running now and can try to grab the mutex before that</span><br><span class="hljs-comment">// goroutine wakes up.</span><br><span class="hljs-keyword">if</span> !atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexLocked) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.cn/post/6958979192574705701">[Go并发] - Mutex源码解析  </a>          </p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>Golang包</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sync</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传文件&amp;&amp;Template</title>
    <link href="/2022/09/15/golang/gin%E6%A1%86%E6%9E%B6/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6&amp;Template/"/>
    <url>/2022/09/15/golang/gin%E6%A1%86%E6%9E%B6/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6&amp;Template/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>stu1 := &amp;Student&#123;Name: <span class="hljs-string">&quot;Geektutu&quot;</span>, Age: <span class="hljs-number">20</span>&#125;<br>stu2 := &amp;Student&#123;Name: <span class="hljs-string">&quot;Jack&quot;</span>, Age: <span class="hljs-number">22</span>&#125;<br>r.GET(<span class="hljs-string">&quot;/arr&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;arr.tmpl&quot;</span>, gin.H&#123;<br><span class="hljs-string">&quot;title&quot;</span>:  <span class="hljs-string">&quot;World&quot;</span>,<br><span class="hljs-string">&quot;stuArr&quot;</span>: [<span class="hljs-number">2</span>]*Student&#123;stu1, stu2&#125;,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- templates/arr.tmpl --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello, </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.title</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> $index, $ele <span class="hljs-attr">:</span>= .stuArr &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$index</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$ele.Name</span> &#125;&#125;</span><span class="language-xml"> is </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$ele.Age</span> &#125;&#125;</span><span class="language-xml"> years old<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Pictures$ curl http://localhost:8080/arr<br><br>&lt;html&gt;<br>&lt;body&gt;<br>    &lt;p&gt;hello, World&lt;/p&gt;<br>    <br>    &lt;p&gt;0: Geektutu is 20 years old&lt;/p&gt;<br>    <br>    &lt;p&gt;1: Jack is 22 years old&lt;/p&gt;<br>    <br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>file, err := c.FormFile(<span class="hljs-string">&quot;upload&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;请求失败&quot;</span>)<br>&#125;<br><br>filename := file.Filename<br>fmt.Println(<span class="hljs-string">&quot;文件名:&quot;</span>, filename)<br><br><span class="hljs-comment">//保存到本地服务器</span><br><span class="hljs-keyword">if</span> err := c.SaveUploadedFile(file, filename); err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>&#125;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;上传成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>测试： </p><p>curl -X POST <a href="http://localhost:8080/upload">http://localhost:8080/upload</a> -F “upload=@文件目录地址” -H “Content-Type: multipart/form-data”<br>上传成功</p><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/uploads&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>form, err := c.MultipartForm()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;请求失败&quot;</span>)<br>&#125;<br>files := form.File[<span class="hljs-string">&quot;uploads[]&quot;</span>]<br><br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>fmt.Println(<span class="hljs-string">&quot;文件名：&quot;</span>, file)<br><span class="hljs-keyword">if</span> err := c.SaveUploadedFile(file, file.Filename); err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusBadRequest, <span class="hljs-string">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>&#125;<br>&#125;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;上传成功&quot;</span>)<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Pictures$ curl -X POST http://localhost:8080/uploads -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-07.png&quot;  -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-38.png&quot; -H &quot;Content-Type: multipart/form-data&quot;<br>上传成功<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>gin框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>middleware——中间件</title>
    <link href="/2022/09/15/golang/gin%E6%A1%86%E6%9E%B6/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2022/09/15/golang/gin%E6%A1%86%E6%9E%B6/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>中间件处理处理程序是简单的http.Handler,它包装另一个http.Handler</p><p>作请求的一些预处理和或后处理，被称为中间件。</p><p>每个中间件只处理一件事情，完成后将其传递给另一个中间件或者最终处理程序，可以做到程序的解耦，减少程序的冗余和降低代码复用率。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>常见的用例：请求如之记录、header操纵、http请求认证和Responseriter劫持等等。</p><ul><li>记录对服务器发送的请求</li><li>处理服务器响应</li><li>请求和处理之间做一个权限认证工作</li><li>远程调用</li><li>安全</li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="单中间件"><a href="#单中间件" class="headerlink" title="单中间件"></a>单中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-comment">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logging</span><span class="hljs-params">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>log.Println(r.URL.Path)<br>f(w, r)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintln(w, <span class="hljs-string">&quot;foo&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintln(w, <span class="hljs-string">&quot;bar&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loggingMiddleWare</span><span class="hljs-params">(next http.Handler)</span></span> http.Handler &#123;<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>log.Println(r.URL.Path)<br>next.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.Handle(<span class="hljs-string">&quot;/foo&quot;</span>, loggingMiddleWare(http.HandlerFunc(foo)))<br>http.Handle(<span class="hljs-string">&quot;/bar&quot;</span>, loggingMiddleWare(http.HandlerFunc(bar)))<br><span class="hljs-comment">//http.HandleFunc(&quot;/foo&quot;, logging(foo))</span><br><span class="hljs-comment">//http.HandleFunc(&quot;/bar&quot;, logging(bar))</span><br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多中间件"><a href="#多中间件" class="headerlink" title="多中间件"></a>多中间件</h3><p>中间件将方法作为参数之一，包装并返回一个新的方法服务器，定义一种新的MiddlWare，容易将多个中间件连接起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-keyword">type</span> MiddleWare <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(http.HandlerFunc)</span></span> http.HandlerFunc<br><br><span class="hljs-keyword">type</span> MiddleWare1 <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(http.Handler)</span></span> http.Handler<br><br><span class="hljs-comment">//日志打印</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logging</span><span class="hljs-params">()</span></span> MiddleWare1 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(h http.Handler)</span></span> http.Handler &#123;<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>start := time.Now()<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Println(r.URL.Path)<br>time.Since(start)<br>&#125;()<br>h.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">method</span><span class="hljs-params">(m <span class="hljs-type">string</span>)</span></span> MiddleWare1 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(h http.Handler)</span></span> http.Handler &#123;<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.Method != m &#123;<br>http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>&#125;<br>h.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chain1</span><span class="hljs-params">(f http.Handler, middlewares ...MiddleWare1)</span></span> http.Handler &#123;<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> middlewares &#123;<br>f = m(f)<br>&#125;<br><span class="hljs-keyword">return</span> f<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Logging</span><span class="hljs-params">()</span></span> MiddleWare &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>start := time.Now()<br><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Println(r.URL.Path)<br>time.Since(start)<br>&#125;()<br>hf(w, r)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Method</span><span class="hljs-params">(m <span class="hljs-type">string</span>)</span></span> MiddleWare &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.Method != m &#123;<br>http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>&#125;<br>hf(w, r)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chain</span><span class="hljs-params">(f http.HandlerFunc, middlewares ...MiddleWare)</span></span> http.HandlerFunc &#123;<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> middlewares &#123;<br>f = m(f)<br>&#125;<br><span class="hljs-keyword">return</span> f<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintln(w, <span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.Handle(<span class="hljs-string">&quot;/test&quot;</span>, chain1(http.HandlerFunc(Hello), method(<span class="hljs-string">&quot;GET&quot;</span>), logging()))<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, chain(Hello, Method(<span class="hljs-string">&quot;GET&quot;</span>), Logging()))<br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="gin中间件"><a href="#gin中间件" class="headerlink" title="gin中间件"></a>gin中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r:=gin.Default()<span class="hljs-comment">//创建带有默认的中间件路由（包含logger和recovery）</span><br>r:=gin.<span class="hljs-built_in">new</span>()<span class="hljs-comment">//创建没有中间件的路由</span><br></code></pre></td></tr></table></figure><p>两种中间件方式，后续展示第二种</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">自定义日志中间件第一种方式-----请求之前</span><br><span class="hljs-comment">自定义日志中间件第一种方式-----请求之后</span><br><span class="hljs-comment">2022/08/31 15:40:57 12345</span><br><span class="hljs-comment">2022/08/31 15:40:57 64.542µs</span><br><span class="hljs-comment">2022/08/31 15:40:57 200</span><br><span class="hljs-comment">**/</span><br>func <span class="hljs-built_in">Logger</span>() gin<span class="hljs-selector-class">.HandlerFunc</span> &#123;<br>return <span class="hljs-built_in">func</span>(ctx *gin.Context) &#123;<br>t := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第一种方式-----请求之前&quot;</span>)<br><span class="hljs-comment">//在gin上下文定义一个变量</span><br>ctx<span class="hljs-selector-class">.Set</span>(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>)<br><span class="hljs-comment">//请求之前</span><br>ctx<span class="hljs-selector-class">.Next</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第一种方式-----请求之后&quot;</span>)<br><span class="hljs-comment">//计算整个请求过程</span><br>latency := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Since</span>(t)<br>log<span class="hljs-selector-class">.Print</span>(latency)<br><br><span class="hljs-comment">//请求状态打印</span><br>status := ctx<span class="hljs-selector-class">.Writer</span><span class="hljs-selector-class">.Status</span>()<br>log<span class="hljs-selector-class">.Println</span>(status)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">自定义日志中间件第二种方式-----请求之前</span><br><span class="hljs-comment">自定义日志中间件第二种方式-----请求之后</span><br><span class="hljs-comment">2022/08/31 15:40:17 12345</span><br><span class="hljs-comment">2022/08/31 15:40:17 60.112µs</span><br><span class="hljs-comment">2022/08/31 15:40:17 200</span><br><span class="hljs-comment">**/</span><br>func <span class="hljs-built_in">Logger1</span>(c *gin.Context) &#123;<br>t := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第二种方式-----请求之前&quot;</span>)<br><span class="hljs-comment">//在gin上下文定义一个变量</span><br>c<span class="hljs-selector-class">.Set</span>(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>)<br><span class="hljs-comment">//请求之前</span><br>c<span class="hljs-selector-class">.Next</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;自定义日志中间件第二种方式-----请求之后&quot;</span>)<br><span class="hljs-comment">//计算整个请求过程</span><br>latency := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Since</span>(t)<br>log<span class="hljs-selector-class">.Print</span>(latency)<br><br><span class="hljs-comment">//请求状态打印</span><br>status := c<span class="hljs-selector-class">.Writer</span><span class="hljs-selector-class">.Status</span>()<br>log<span class="hljs-selector-class">.Println</span>(status)<br>&#125;<br>func <span class="hljs-selector-tag">main</span>() &#123;<br>r := gin<span class="hljs-selector-class">.New</span>()<br>r<span class="hljs-selector-class">.Use</span>(<span class="hljs-built_in">Logger</span>())<br><span class="hljs-comment">//r.Use(Logger1)</span><br>r<span class="hljs-selector-class">.GET</span>(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-built_in">func</span>(ctx *gin.Context) &#123;<br>exam := ctx<span class="hljs-selector-class">.MustGet</span>(<span class="hljs-string">&quot;example&quot;</span>).(string)<br>log<span class="hljs-selector-class">.Println</span>(exam)<br>&#125;)<br>r<span class="hljs-selector-class">.Run</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>路由器中间件</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RouterMiddle1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;路由中间1&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RouterMiddle2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;路由中间2&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">onRouterMiddleHandle</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;业务处理&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.New()<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">路由中间1</span><br><span class="hljs-comment">路由中间2</span><br><span class="hljs-comment">业务处理</span><br><span class="hljs-comment">*/</span><br>r.GET(<span class="hljs-string">&quot;/onRouterMiddle&quot;</span>, RouterMiddle1, RouterMiddle2, onRouterMiddleHandle())<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>路由组中间件</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">//路由组中间件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterGoodsMiddle1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;goods路由组中间件1&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterGoodsMiddle2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;goods路由组中间件2&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterOrdersMiddle1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Orders路由组中间件1&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GroupRouterOrdersMiddle2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Orders路由组中间件2&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.New()<br>r.Use(gin.Logger())<br><br>    <span class="hljs-comment">//curl 127.0.0.1:8080/goods/add</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    goods路由组中间件1</span><br><span class="hljs-comment">goods路由组中间件2</span><br><span class="hljs-comment">/goods/add</span><br><span class="hljs-comment">    */</span><br>goodsGroup := r.Group(<span class="hljs-string">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>&#123;<br>goodsGroup.GET(<span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/goods/add&quot;</span>)<br>&#125;)<br>&#125;<br>    r.Group(<span class="hljs-string">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2).GET(<span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/goods/add&quot;</span>)<br>&#125;)<br>    <br>    <span class="hljs-comment">//curl 127.0.0.1:8080/goods/add</span><br>    <span class="hljs-comment">//控制台结果：/goods/add</span><br>r.Group(<span class="hljs-string">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>r.GET(<span class="hljs-string">&quot;/goods/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/goods/add&quot;</span>)<br>&#125;)<br>    <br>    <br>orderGroup := r.Group(<span class="hljs-string">&quot;/order&quot;</span>)<br>orderGroup.Use(GroupRouterOrdersMiddle1, GroupRouterOrdersMiddle2)<br>&#123;<br>orderGroup.GET(<span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/add&quot;</span>)<br>&#125;)<br><br>orderGroup.GET(<span class="hljs-string">&quot;/del&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/del&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">//嵌套</span><br>testGroup := orderGroup.Group(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/test下的中间件&quot;</span>)<br>&#125;)<br><br>testGroup.GET(<span class="hljs-string">&quot;/test1&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/order/test/test1下的函数&quot;</span>)<br>&#125;)<br><br>&#125;<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong> 全局中间件 &gt; 路由组中间件 &gt; 路由中间件<br> 全局中间件最先执行</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>gin框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一个gin程序</title>
    <link href="/2022/09/15/golang/gin%E6%A1%86%E6%9E%B6/%E7%AC%AC%E4%B8%80%E4%B8%AAgin%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/09/15/golang/gin%E6%A1%86%E6%9E%B6/%E7%AC%AC%E4%B8%80%E4%B8%AAgin%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;net/http&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/name&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;world&quot;</span>)<br>&#125;)<br><br>r.Run() <span class="hljs-comment">// listen and serve on 0.0.0.0:8080</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>首先，我们使用了<code>gin.Default()</code>生成了一个实例，这个实例即 WSGI 应用程序。</li><li>接下来，我们使用<code>r.Get(&quot;/&quot;, ...)</code>声明了一个路由，告诉 Gin 什么样的URL 能触发传入的函数，这个函数返回我们想要显示在用户浏览器中的信息。</li><li>最后用 <code>r.Run()</code>函数来让应用运行在本地服务器上，默认监听端口是 _8080_，可以传入参数设置端口，例如<code>r.Run(&quot;:9999&quot;)</code>即运行在 _9999_端口。</li></ol><h3 id="解析路经参数"><a href="#解析路经参数" class="headerlink" title="解析路经参数"></a>解析路经参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/user/:name&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>c.String(http.StatusOK, <span class="hljs-string">&quot;Hello %s&quot;</span>, name)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="解析qurey参数"><a href="#解析qurey参数" class="headerlink" title="解析qurey参数"></a>解析qurey参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/form&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)<br><span class="hljs-comment">//可设置默认的初始值</span><br>password := c.DefaultPostForm(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>)<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;username&quot;</span>: username,<br><span class="hljs-string">&quot;password&quot;</span>: password,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="解析qurey-amp-路经参数"><a href="#解析qurey-amp-路经参数" class="headerlink" title="解析qurey&amp;路经参数"></a>解析qurey&amp;路经参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/posts&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>id := c.Query(<span class="hljs-string">&quot;id&quot;</span>)<br>page := c.DefaultQuery(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>)<br>username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)<br><span class="hljs-comment">//可设置默认的初始值</span><br>password := c.DefaultPostForm(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>)<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;id&quot;</span>:       id,<br><span class="hljs-string">&quot;page&quot;</span>:     page,<br><span class="hljs-string">&quot;username&quot;</span>: username,<br><span class="hljs-string">&quot;password&quot;</span>: password,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>curl “<a href="http://localhost:8080/posts?id=1&amp;page=13&quot;">http://localhost:8080/posts?id=1&amp;page=13&quot;</a>  -X POST -d ‘username=geektutu&amp;password=1234’<br>{“id”:”1”,”page”:”13”,”password”:”1234”,”username”:”geektutu”}</p><h3 id="map参数"><a href="#map参数" class="headerlink" title="map参数"></a>map参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/post&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>ids := c.QueryMap(<span class="hljs-string">&quot;ids&quot;</span>)<br>names := c.PostFormMap(<span class="hljs-string">&quot;names&quot;</span>)<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;ids&quot;</span>:   ids,<br><span class="hljs-string">&quot;names&quot;</span>: names,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>curl -g “<a href="http://localhost:9999/post?ids%5BJack%5D=001&amp;ids%5BTom%5D=002&quot;">http://localhost:9999/post?ids[Jack]=001&amp;ids[Tom]=002&quot;</a> -X POST -d ‘names[a]=Sam&amp;names[b]=David’<br>{“ids”:{“Jack”:”001”,”Tom”:”002”},”names”:{“a”:”Sam”,”b”:”David”}}</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/redirect&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;/index&quot;</span>)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Request.URL.Path = <span class="hljs-string">&quot;/&quot;</span><br>r.HandleContext(c)<br>&#125;)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">ubuntu@root:~/go$ curl http://localhost:8080/index</span><br><span class="hljs-comment">Helloubuntu@root:~/go$ -i http://localhost:8080/redirect</span><br><span class="hljs-comment">HTTP/1.1 301 Moved Permanently</span><br><span class="hljs-comment">Content-Type: text/html; charset=utf-8</span><br><span class="hljs-comment">Location: /index</span><br><span class="hljs-comment">Date: Mon, 29 Aug 2022 09:08:43 GMT</span><br><span class="hljs-comment">Content-Length: 41</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;a href=&quot;/index&quot;&gt;Moved Permanently&lt;/a&gt;.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="多组路由"><a href="#多组路由" class="headerlink" title="多组路由"></a>多组路由</h3><p>利用分组路由可以更好地实现权限控制（将需要登陆鉴权的路由防盗同一组中去，简化权限控制）</p><p>划分一个模块一个路由，便于管理和查找相关的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">defaultHandler := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;path&quot;</span>: c.FullPath(),<br>&#125;)<br>&#125;<br><span class="hljs-comment">//https://geektutu.com/post/quick-go-gin.html</span><br><span class="hljs-comment">//group v1</span><br>v1 := r.Group(<span class="hljs-string">&quot;/v1&quot;</span>)<br>&#123;<br>v1.GET(<span class="hljs-string">&quot;/posts&quot;</span>, defaultHandler)<br>v1.GET(<span class="hljs-string">&quot;/series&quot;</span>, defaultHandler)<br>&#125;<br><br><span class="hljs-comment">//group v2</span><br>v2 := r.Group(<span class="hljs-string">&quot;/v2&quot;</span>)<br>&#123;<br>v2.GET(<span class="hljs-string">&quot;/posts&quot;</span>, defaultHandler)<br>v2.GET(<span class="hljs-string">&quot;/series&quot;</span>, defaultHandler)<br>&#125;<br><br><span class="hljs-comment">//ubuntu@root:~$ curl http://localhost:8080/v1/posts</span><br><span class="hljs-comment">//&#123;&quot;path&quot;:&quot;/v1/posts&quot;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>gin框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/09/15/golang/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/09/15/golang/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>只能开启一个线程，只有一个实例，并且能够实现自我实例化;</p><p>确保一个类只有一个实例，变成单例之后，确保程序运行之后查找的对象均是一个对象。</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>非线程安全，也就是多线程下可能创建多次对象。</p><p>线程安全，利用加锁保证线程安全，但由于每次调用都有加锁的操作，性能相较于不高效。</p><h3 id="不加锁"><a href="#不加锁" class="headerlink" title="不加锁"></a>不加锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> singleton <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">var</span> instance *singleton<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span> *singleton &#123;<br><span class="hljs-keyword">if</span> instance == <span class="hljs-literal">nil</span> &#123;<br>instance = &amp;singleton&#123;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure><p>线程不安全。如果执行多个goroutine（高并发），进行第一次检查都会创建singleton类型的实例，导致创建多个对象，并且会相互覆盖，</p><h3 id="整体加锁"><a href="#整体加锁" class="headerlink" title="整体加锁"></a>整体加锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br><br><span class="hljs-keyword">type</span> singleton <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">var</span> instance *singleton<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span> *singleton &#123;<br>mu.Lock()<br><span class="hljs-keyword">defer</span> mu.Unlock()<br><span class="hljs-keyword">if</span> instance == <span class="hljs-literal">nil</span> &#123;<br>instance = &amp;singleton&#123;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure><p>整体进行加锁之后，会使得在执行多个goroutine的时候，所有的都需要加锁和开锁，性能降低。</p><h3 id="在创建方法的时候加锁"><a href="#在创建方法的时候加锁" class="headerlink" title="在创建方法的时候加锁"></a>在创建方法的时候加锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br><br><span class="hljs-keyword">type</span> singleton <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">var</span> instance *singleton<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span> *singleton &#123;<br><br><span class="hljs-keyword">if</span> instance == <span class="hljs-literal">nil</span> &#123;<br>mu.Lock()<br>instance = &amp;singleton&#123;&#125;<br>mu.Unlock()<br>&#125;<br><span class="hljs-keyword">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure><p>线程不安全。多个线程依旧会创建多个实例。</p><h3 id="双重检锁"><a href="#双重检锁" class="headerlink" title="双重检锁"></a>双重检锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br><br><span class="hljs-keyword">type</span> singleton <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">var</span> instance *singleton<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span> *singleton &#123;<br><br><span class="hljs-keyword">if</span> instance == <span class="hljs-literal">nil</span> &#123;<br>mu.Lock()<br><span class="hljs-keyword">if</span> instance == <span class="hljs-literal">nil</span> &#123;<br>instance = &amp;singleton&#123;&#125;<br>&#125;<br><br>mu.Unlock()<br>&#125;<br><span class="hljs-keyword">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure><p>只有当对象未初始化的时候，才会有加减的操作</p><h3 id="sync-Once实现"><a href="#sync-Once实现" class="headerlink" title="sync.Once实现"></a>sync.Once实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> once sync.Once<br><br><span class="hljs-keyword">type</span> singleton <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">var</span> instance *singleton<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span> *singleton &#123;<br><br>once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>instance = &amp;singleton&#123;&#125;<br>&#125;)<br><span class="hljs-keyword">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://jane-lucky.github.io/2022/09/09/golang/Golang%E5%8C%85/sync.Once/"><code>Do</code>方法源码</a></p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>单例使用较少，并且创建的资源比较多。</p><p>直接创建好对象，不需要判断为空，线程安全。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">type singleton struct &#123;<br>&#125;<br><br>var<span class="hljs-built_in"> instance </span>*singleton<br><br>func init() &#123;<br><span class="hljs-built_in">instance </span>= &amp;singleton&#123;&#125;<br>&#125;<br>func GetInstance() *singleton &#123;<br><span class="hljs-built_in">return </span>instance<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>go设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo初始化基础配置文件解析</title>
    <link href="/2022/08/25/hexo/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/08/25/hexo/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>网站的配置信息，可以配置大部分参数。</p><h3 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站关键词</td></tr><tr><td>author</td><td>作者名称</td></tr><tr><td>language</td><td>使用语言</td></tr><tr><td>timezone</td><td>网站时区</td></tr></tbody></table><h3 id="网址设置"><a href="#网址设置" class="headerlink" title="网址设置"></a>网址设置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs json"># Hexo Configuration<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/configuration.html</span><br>## Source<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//github.com/hexojs/hexo/</span><br><br><br><br># URL<br>## Set your site url here. For example<span class="hljs-punctuation">,</span> if you use GitHub Page<span class="hljs-punctuation">,</span> set url as &#x27;https<span class="hljs-punctuation">:</span><span class="hljs-comment">//username.github.io/project&#x27;</span><br>url<span class="hljs-punctuation">:</span> http<span class="hljs-punctuation">:</span><span class="hljs-comment">//example.com</span><br>permalink<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">:</span>year/<span class="hljs-punctuation">:</span>month/<span class="hljs-punctuation">:</span>day/<span class="hljs-punctuation">:</span>title/<br>permalink_defaults<span class="hljs-punctuation">:</span><br>pretty_urls<span class="hljs-punctuation">:</span><br>  trailing_index<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> # Set to <span class="hljs-literal"><span class="hljs-keyword">false</span></span> to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> # Set to <span class="hljs-literal"><span class="hljs-keyword">false</span></span> to remove trailing &#x27;.html&#x27; from permalinks<br><br># Directory<br>source_dir<span class="hljs-punctuation">:</span> source<br>public_dir<span class="hljs-punctuation">:</span> public<br>tag_dir<span class="hljs-punctuation">:</span> tags<br>archive_dir<span class="hljs-punctuation">:</span> archives<br>category_dir<span class="hljs-punctuation">:</span> categories<br>code_dir<span class="hljs-punctuation">:</span> downloads/code<br>i18n_dir<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">:</span>lang<br>skip_render<span class="hljs-punctuation">:</span><br><br># Writing<br>new_post_name<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">:</span>title.md # File name of new posts<br>default_layout<span class="hljs-punctuation">:</span> post<br>titlecase<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> # Transform title into titlecase<br>external_link<span class="hljs-punctuation">:</span><br>  enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> # Open external links in new tab<br>  field<span class="hljs-punctuation">:</span> site # Apply to the whole site<br>  exclude<span class="hljs-punctuation">:</span> &#x27;&#x27;<br>filename_case<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>render_drafts<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>post_asset_folder<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>relative_link<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>future<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>highlight<span class="hljs-punctuation">:</span><br>  enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  line_number<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  auto_detect<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  tab_replace<span class="hljs-punctuation">:</span> &#x27;&#x27;<br>  wrap<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  hljs<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>prismjs<span class="hljs-punctuation">:</span><br>  enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  preprocess<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  line_number<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  tab_replace<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><br># Home page setting<br># path<span class="hljs-punctuation">:</span> Root path for your blogs index page. (default = &#x27;&#x27;)<br># per_page<span class="hljs-punctuation">:</span> Posts displayed per page. (<span class="hljs-number">0</span> = disable pagination)<br># order_by<span class="hljs-punctuation">:</span> Posts order. (Order by date descending by default)<br>index_generator<span class="hljs-punctuation">:</span><br>  path<span class="hljs-punctuation">:</span> &#x27;&#x27;<br>  per_page<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>  order_by<span class="hljs-punctuation">:</span> -date<br><br># Category &amp; Tag<br>default_category<span class="hljs-punctuation">:</span> uncategorized<br>category_map<span class="hljs-punctuation">:</span><br>tag_map<span class="hljs-punctuation">:</span><br><br># Metadata elements<br>## https<span class="hljs-punctuation">:</span><span class="hljs-comment">//developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br>meta_generator<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><br># Date / Time format<br>## Hexo uses Moment.js to parse and display date<br>## You can customize the date format as defined in<br>## http<span class="hljs-punctuation">:</span><span class="hljs-comment">//momentjs.com/docs/#/displaying/format/</span><br>date_format<span class="hljs-punctuation">:</span> YYYY-MM-DD<br>time_format<span class="hljs-punctuation">:</span> HH<span class="hljs-punctuation">:</span>mm<span class="hljs-punctuation">:</span>ss<br>## updated_option supports &#x27;mtime&#x27;<span class="hljs-punctuation">,</span> &#x27;date&#x27;<span class="hljs-punctuation">,</span> &#x27;empty&#x27;<br>updated_option<span class="hljs-punctuation">:</span> &#x27;mtime&#x27;<br><br># Pagination<br>## Set per_page to <span class="hljs-number">0</span> to disable pagination<br>per_page<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>pagination_dir<span class="hljs-punctuation">:</span> page<br><br># Include / Exclude file(s)<br>## include<span class="hljs-punctuation">:</span>/exclude<span class="hljs-punctuation">:</span> options only apply to the &#x27;source/&#x27; folder<br>include<span class="hljs-punctuation">:</span><br>exclude<span class="hljs-punctuation">:</span><br>ignore<span class="hljs-punctuation">:</span><br><br># Extensions<br>## Plugins<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/themes/</span><br>theme<span class="hljs-punctuation">:</span> landscape<br><br># Deployment<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy<span class="hljs-punctuation">:</span><br>  type<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><br></code></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>应用程序信息</p><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p>模板文件夹，当新建文章的时候会根据该模板建立文件。默认是post模板(可以自己添加模板内容)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@root:~/Desktop/Blog$ ls scaffolds/<br>draft.md  page.md  post.md<br>ubuntu@root:~/Desktop/Blog$ cat scaffolds/post.md <br>---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags:<br>---<br><br></code></pre></td></tr></table></figure><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>资源文件夹是用来存放用户资源的地方。</p><p>HTML和MarkDown文件会被解析并放到public文件夹，而其他文件会被拷贝过去</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>主题文件夹。根据该主题来生成静态页面。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
