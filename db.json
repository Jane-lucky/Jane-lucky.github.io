{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"d2fe22227f77c55ebb9433e9fa62a8806eb8c8b8","modified":1663722840790},{"_id":"source/_posts/docker/docker安装.md","hash":"10047a80ea610460764a9d6b3b15445720453097","modified":1663139607871},{"_id":"source/_posts/docker/RocketMQ编译&镜像构建.md","hash":"b607b07803a36a3373b7c018cea33c467a40f853","modified":1663845072789},{"_id":"source/_posts/docker/docker镜像获取失败.md","hash":"f73aaa4d7d6a281245600b51086a3d265393644e","modified":1663656069579},{"_id":"source/_posts/docker/gitlab-14.0.5镜像编译安装.md","hash":"ed0cf35d9822fed2f4f1f38bf30811f453b77e99","modified":1662625473983},{"_id":"source/_posts/docker/redis 5.0.6镜像构建.md","hash":"aeaaae8480d348ffff71cda8253914af4458a36f","modified":1663144977495},{"_id":"source/_posts/docker/搭建httpd临时源.md","hash":"3d29df5e478fd8ef16065c308e4e41249febbc48","modified":1663844207542},{"_id":"source/_posts/docker/构建镜像脚本.md","hash":"b19678ac4fd86c4ce79a2e8f93f0cf056dc5d593","modified":1663846063786},{"_id":"source/_posts/go基本知识整理/协程泄露.md","hash":"76879e5ba025fb615b84cce62cea72f87ebeb93c","modified":1662607491648},{"_id":"source/_posts/go基本知识整理/struct类型.md","hash":"ac12d73ba90f87ae7482972403d8922c6079ee51","modified":1662083863773},{"_id":"source/_posts/go基本知识整理/日志收集.md","hash":"fddea44be5486be50b8da701b8ca347eb6dbe313","modified":1662604635220},{"_id":"source/website/index.md","hash":"10e05f06121a284180afd886c802888379a20442","modified":1666665874601},{"_id":"source/_posts/golang/CSA 自旋锁.md","hash":"ac180d14ce21e7b07b1234c4d231e304f95ea422","modified":1663119492779},{"_id":"source/_posts/hexo/概念及安装.md","hash":"7c04a88434a50ef138c5dcb50cadceace13a466e","modified":1663813507614},{"_id":"source/_posts/hexo/基础配置文件解析.md","hash":"ceffd4c60130b9fe4c206f0760c151f7589187c4","modified":1662625624685},{"_id":"source/_posts/k8s/crictl 对 Kubernetes 节点进行调试.md","hash":"7d7c3cbe0145c5fc822c75a8bcd6fb7c15a66f9d","modified":1663034358097},{"_id":"source/_posts/k8s/ingress-nginx1.1.1安装部署.md","hash":"0d540322c29fdb7930d227d2259f712f37c1aba5","modified":1666232807201},{"_id":"source/_posts/k8s/k8s在kind上的简单使用.md","hash":"50b1a14c4eea71ac9df31f423ce07a45c98ca5b3","modified":1663637889897},{"_id":"source/_posts/k8s/ingress-nginx简介.md","hash":"17dba1b225b05c3c530a021b23310ff440f222a0","modified":1666246187727},{"_id":"source/_posts/k8s/k8s基础概念.md","hash":"e657f789994e322d440ebf021b55d6dbef578368","modified":1663574327604},{"_id":"source/_posts/k8s/kind概念&安装部署k8s集群.md","hash":"8736b2f60d6672c793b7bc4165edf0ce8d1eb13e","modified":1663556424126},{"_id":"source/_posts/k8s/对象管理.md","hash":"95b5a3d4f86381df1183e644941aa1d7136f0875","modified":1663637879433},{"_id":"source/_posts/编译安装/ccache安装及使用.md","hash":"82c9b668c7fabe6156ce36df73fe54e705e46e04","modified":1662625590135},{"_id":"source/_posts/编译安装/kkFileView-4.0.0安装.md","hash":"e9788025eb529ea2afe5b684b779dfe7806e6ead","modified":1662625594466},{"_id":"source/_posts/编译安装/ubuntu安装nodejs.md","hash":"561a3666797669f97369f466d562d167c3dd1dd0","modified":1662625696398},{"_id":"source/_posts/编译安装/minio编译安装.md","hash":"f8e958c87ccde842656d1fbdf7c6ea11de28b241","modified":1662625600328},{"_id":"source/_posts/编译安装/ubuntu安装vscode.md","hash":"7099bb481e3fb7dcaf99d52c47952124a705407c","modified":1662625701732},{"_id":"source/_posts/linux/Linux-cut命令.md","hash":"2f714263d2d547f914ec905b7eb4abffc9eed593","modified":1663637834517},{"_id":"source/_posts/linux/snap和apt.md","hash":"187d1f379c82da1d2c4e867e66117f979adacac3","modified":1662617905006},{"_id":"source/_posts/linux/vim快捷操作.md","hash":"cddb27e92b3635869d01fea802cf7cceb5d877f1","modified":1663662398136},{"_id":"source/_posts/linux/git相关操作.md","hash":"458b97562bef8a86e652fd9f06dd0440118dc66e","modified":1663813366857},{"_id":"source/_posts/linux/wget知识点详解.md","hash":"a3e597044898c0ec7199642cbbef5d0fbda8e714","modified":1662617917567},{"_id":"source/_posts/linux/修改linux命令提示符.md","hash":"022a8e44576b597fa3a73da745ac0322c0587f03","modified":1663644279932},{"_id":"source/_posts/linux/物理逻辑卷相关知识.md","hash":"655541450e0166341c81eb632ff9198f5e9d12f2","modified":1665542023239},{"_id":"source/_posts/CICD/drone/habor-data.md","hash":"3684d986e532fc56cce58f5bb98dd4ffdb9b0677","modified":1662623017797},{"_id":"source/_posts/CICD/drone/harbor-database.md","hash":"7cdf91e917aceca849fba3adb4a7661f8da23b2e","modified":1662623022037},{"_id":"source/_posts/CICD/drone/harbor信息同步数据库.md","hash":"c681280e2edeb85d6f0891b4c164b2b08b986921","modified":1662622490196},{"_id":"source/_posts/CICD/drone/自定义drone 插件.md","hash":"a886a446e7581ed9a5abbc27c7cc90be48d5649b","modified":1662623027193},{"_id":"source/_posts/golang/Golang包/Time.md","hash":"63e4453580ad59c03c0f6946973d26561611b944","modified":1662626012654},{"_id":"source/_posts/golang/Golang包/atomic.Value 类型.md","hash":"8426d00c920c7f93fd7db9ae83576bf9849e5675","modified":1663039796531},{"_id":"source/_posts/golang/Golang包/context.md","hash":"618f900351e185db7e394d9f00f0733bd320b4ca","modified":1662625772670},{"_id":"source/_posts/golang/Golang包/互斥锁-sync.Mutex.md","hash":"77c8397c4a5033d578374f505ffae8c911de0a91","modified":1663120139247},{"_id":"source/_posts/golang/Golang包/sync.Once.md","hash":"cab4cd95fa30d262f8aaaabb46278f80c76f2592","modified":1662693865702},{"_id":"source/_posts/golang/Redis-go内容学习/redis基础内容.md","hash":"3f14ea30524e61a6b625a2680656d15595107063","modified":1665734169590},{"_id":"source/_posts/golang/Redis-go内容学习/redis.md","hash":"c9e63e29f9c62fdd21fa7df49101c52ab380e1f4","modified":1665729726816},{"_id":"source/_posts/golang/RabbitMQ-go教程/Hello-world.md","hash":"03f8cd225c3b4bba0d6684c5a3859b9ca0c85f4c","modified":1663725750099},{"_id":"source/_posts/golang/RabbitMQ-go教程/RPC.md","hash":"cd4d04eb753cb9de2dba8a1a3813603e5e4cbd2b","modified":1664435057894},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish.md","hash":"d7a807cba6f12edaa1f8c4b8fb5c0454ecb9333d","modified":1663830169715},{"_id":"source/_posts/golang/RabbitMQ-go教程/channel.queueDeclare()方法参数解析.md","hash":"d8f564bfde2176f0cfc4f1258b64dc4c78633b3c","modified":1665473258074},{"_id":"source/_posts/golang/RabbitMQ-go教程/rabbitMQ服务搭建.md","hash":"a59e282ef7781a424e2ceb3f8a901fb5a720495e","modified":1663661185674},{"_id":"source/_posts/golang/RabbitMQ-go教程/主题topic.md","hash":"e2f78fd6763e54d2013d923da56b02363154da04","modified":1664328381518},{"_id":"source/_posts/golang/RabbitMQ-go教程/工作队列.md","hash":"c0983942342515a23e9a84dc279d74acf2adc13e","modified":1663814830557},{"_id":"source/_posts/golang/RabbitMQ-go教程/路由.md","hash":"fd31cc5d52b47b3d96ef1551d4814bd874bf4084","modified":1664328350622},{"_id":"source/_posts/golang/gin框架/上传文件&Template.md","hash":"c0cee40e1bd3130887ec8b2f955defa2fa39c102","modified":1662625922775},{"_id":"source/_posts/golang/gin框架/中间件.md","hash":"46866a2ae53001c91eafe4856617be5a55ed04c5","modified":1662625932938},{"_id":"source/_posts/golang/go基础/go基础知识.md","hash":"bb9858743ea870879ab22c9f41696ba15b5b7237","modified":1665631742842},{"_id":"source/_posts/golang/gin框架/第一个gin程序.md","hash":"ba6f6fb4352886cf818b00f109aa62d149096460","modified":1666665270151},{"_id":"source/_posts/golang/go基础/数据库操作.md","hash":"9b75ed6d12e5602b91b79a49d54722ccafd9b42b","modified":1665715656716},{"_id":"source/_posts/golang/go基础/web.md","hash":"1841db7355c8a84ab158fe18a22c137ca3b42539","modified":1665642788010},{"_id":"source/_posts/golang/go基础/表单和文件.md","hash":"a36ea4f561534cbc7b193f5a8db6924fba9075f1","modified":1665715599216},{"_id":"source/_posts/golang/go基础/面向对象.md","hash":"c36fc4282b0bdd2ba196772e7b03270da8e339e8","modified":1665545307277},{"_id":"source/_posts/k8s/ingress-nginx简介/image-20221020111254258.png","hash":"e38bd521e58485893c499c6cfa4be2dfafa2e1c4","modified":1666246155043},{"_id":"source/_posts/golang/go设计模式/单例模式.md","hash":"f81bacad41d012193d40741a18bddba54d5b12b9","modified":1663039525408},{"_id":"source/_posts/k8s/ingress-nginx简介/image-20221020112742780.png","hash":"59b0433552a5b78c5e4b738eeb8477dad690e617","modified":1666246172607},{"_id":"source/_posts/k8s/ingress-nginx简介/image-20221020113006395.png","hash":"1095be5a9816a291de20569c515346e389d7992a","modified":1666246186679},{"_id":"source/_posts/linux/物理逻辑卷相关知识/image-20220826145753160.png","hash":"73c5d4dd6792ae53bf356f9fc31c8a8f7f88aef7","modified":1665541971070},{"_id":"source/_posts/linux/物理逻辑卷相关知识/image-20220825165132736.png","hash":"6dd0d0a7c5f8e28b0ed0ab107ee4240977ffdf1b","modified":1665541925507},{"_id":"source/_posts/golang/RabbitMQ-go教程/Hello-world/python-one.png","hash":"be0611cd80bb4ca21b65f9c28edb329a18475ab0","modified":1663661446919},{"_id":"source/_posts/golang/RabbitMQ-go教程/主题topic/python-five.png","hash":"c1fffba56f2ba79a7d2dc5ed4867e6033bf41385","modified":1664246768861},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish/bindings.png","hash":"41e211a972dcd6bbca361008baa276318fadde15","modified":1663829155333},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish/runResult.png","hash":"5967fdc17563f84958921239bdfd70354edb01c6","modified":1663830129207},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish/exchanges.png","hash":"dd438322ed5919e11b186d4089aef47de7f719a6","modified":1663827528307},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"source/_posts/linux/物理逻辑卷相关知识/image-20220826152857911.png","hash":"a06cc6e0ff4cc51b9b8a59b03e3702762086ee93","modified":1665542015041},{"_id":"source/_posts/golang/RabbitMQ-go教程/路由/runtime.png","hash":"c3d67dfae71d3c5390193caa69e8b7a894d6bb47","modified":1664245604190},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"ebe26856c4cc286df3181136b5b391dd2e5f5ec7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"257bbeea08f67beabd231663b4b65c2578e507b4","modified":1662514606639},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":499162500000},{"_id":"source/_posts/golang/RabbitMQ-go教程/工作队列/1663727458340.png","hash":"2ed5739551863c5ba4b7fad9f552b9d5da322984","modified":1663727534063},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":499162500000},{"_id":"source/_posts/k8s/k8s在kind上的简单使用/image-20220909161301440-1663039219073-7.png","hash":"c3152e01e596ba8a9826de7db9bccaafa35bf3f3","modified":1663039219233},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":499162500000},{"_id":"public/local-search.xml","hash":"7001e4512412db04a08f699f46f7ea2f33e91b08","modified":1666772118351},{"_id":"public/about/index.html","hash":"f3da3bbc561f61e40f3286f87d2ca89990371c71","modified":1666247646120},{"_id":"public/website/index.html","hash":"117cd150567f2f402ce2aa8f864c1333585fba9d","modified":1666772118351},{"_id":"public/2022/09/15/golang/Golang包/atomic.Value 类型/index.html","hash":"a613be0b2f4f33c8408a2aa3c7b764ded32fd8d2","modified":1666247646120},{"_id":"public/archives/index.html","hash":"299149cffab3f51cbbea8799bb58ed8f4862efdf","modified":1666772118351},{"_id":"public/archives/page/2/index.html","hash":"55f3bdec46003480f496391302b9b45c6ec20c3a","modified":1666772118351},{"_id":"public/archives/page/3/index.html","hash":"2df871ab09c1641e349f1395c4f00f556d045690","modified":1666772118351},{"_id":"public/archives/page/4/index.html","hash":"d88e7d4376cf719354980012472f6ed11196ae03","modified":1666772118351},{"_id":"public/archives/page/5/index.html","hash":"b1fb6f526295349b19912cae799dd8ae7388028e","modified":1666772118351},{"_id":"public/archives/page/6/index.html","hash":"988d0b9b649a161dcbfb3000d1ac70608bb5fc7c","modified":1666772118351},{"_id":"public/archives/2022/index.html","hash":"32e373cd7ba59d4981c372b9deb09d92b5049eaf","modified":1666772118351},{"_id":"public/archives/2022/page/2/index.html","hash":"681650c188e44c67e6eb0987b6369b6186c99a91","modified":1666772118351},{"_id":"public/archives/2022/page/3/index.html","hash":"d10af78786006670195b487a76b9fe41716d9887","modified":1666772118351},{"_id":"public/archives/2022/page/4/index.html","hash":"14b788c7f762a401e27517dfef79985a945db1de","modified":1666772118351},{"_id":"public/archives/2022/page/5/index.html","hash":"14cb5b68b9df6e82aa9647854d2ac915d1b5360d","modified":1666772118351},{"_id":"public/archives/2022/page/6/index.html","hash":"85505c6fbca549f1f89f42ed05aa4b5159271475","modified":1666772118351},{"_id":"public/archives/2022/08/index.html","hash":"d3b1e31da429bb9e49fc8cac8e2a1603b8e65900","modified":1666772118351},{"_id":"public/archives/2022/09/index.html","hash":"e390d794f3e998e87df7545b441c3c6581053424","modified":1666772118351},{"_id":"public/archives/2022/09/page/2/index.html","hash":"450f5d87ac62001bebe971aed78ed2656a525c26","modified":1666772118351},{"_id":"public/archives/2022/09/page/3/index.html","hash":"44316df42ea71300d5ece0fbdd3d893b7c7fe600","modified":1666772118351},{"_id":"public/archives/2022/09/page/4/index.html","hash":"aeb425043165aeac634f93af9f3f192b58254b15","modified":1666772118351},{"_id":"public/archives/2022/09/page/5/index.html","hash":"27b53aecf9a347005921f3d5756741af2abe7b5c","modified":1666772118351},{"_id":"public/archives/2022/10/index.html","hash":"3a029536dfbf4452cc4923638e712ce2a2fe54c7","modified":1666772118351},{"_id":"public/categories/docker/index.html","hash":"7b8e2247b2c8ee41cfd9371daad91dd9d777e8eb","modified":1666247646120},{"_id":"public/categories/hexo/index.html","hash":"5503536d35424c35d8563c7dd9707c7343f4e0b2","modified":1666247646120},{"_id":"public/categories/golang/index.html","hash":"b52c227466aedfe872e97b42f3b6104a596c94ca","modified":1666247646120},{"_id":"public/categories/golang/page/2/index.html","hash":"3a6d0693b27ddd2a533c5bdbdd2d7d836c602fd8","modified":1666247646120},{"_id":"public/categories/golang/page/3/index.html","hash":"a85a68910242a2fe23bba5c77a17348dc7beb9bb","modified":1666247646120},{"_id":"public/categories/k8s/index.html","hash":"82eaf3a8c6b25426a368af7eb9a6fa2e3469dd37","modified":1666247646120},{"_id":"public/categories/编译安装/index.html","hash":"9ffb202e7b65a720b88deab6976ac76856956c31","modified":1666247646120},{"_id":"public/categories/linux/index.html","hash":"8d8847504f12019c39aebe324d17176b96f7acba","modified":1666247646120},{"_id":"public/categories/CICD/index.html","hash":"4b2e23b7815ac11197e378870c24b519dd9ffba4","modified":1666247646120},{"_id":"public/categories/golang/Golang包/index.html","hash":"92190a6df4f125cf548914df86a5c6d5c27adf99","modified":1666247646120},{"_id":"public/categories/golang/redis-go学习/index.html","hash":"4362ef74fb3dd9555b2be8951b1c24b8b7703dc2","modified":1666247646120},{"_id":"public/categories/golang/redis/index.html","hash":"9cdd1b53c972c6b661c6ce5d159dac815a0bbb9b","modified":1666247646120},{"_id":"public/categories/golang/RabbitMQ-go教程/index.html","hash":"052ee781e31a7e05f969864bcf57f71a23aa56fa","modified":1666247646120},{"_id":"public/categories/golang/gin框架/index.html","hash":"e3bd0e6e7d4b34d5b3f1b765521de5d6e2698095","modified":1666247646120},{"_id":"public/categories/golang/go语言基础/index.html","hash":"301132a0ca04b76b6f8899f9e42decca538e64eb","modified":1666247646120},{"_id":"public/categories/CICD/drone/index.html","hash":"2a711e70630998f6b89b3d0a99332c43b3e2028f","modified":1666247646120},{"_id":"public/categories/golang/go设计模式/index.html","hash":"ffa467d5d4f24084dabcc6523a96a7320bc0c7f3","modified":1666247646120},{"_id":"public/tags/docker/index.html","hash":"5c574957818b9600bf24809516295cf03b8e9132","modified":1666247646120},{"_id":"public/tags/gitlab/index.html","hash":"755c136db52cc97fae8d0c4578b07f5e4132bff6","modified":1666247646120},{"_id":"public/tags/redis/index.html","hash":"12343ad8623b39d1f38a8bfb961d2d6340fc8220","modified":1666247646120},{"_id":"public/tags/httpd/index.html","hash":"4ecbdf098bf0b7e3250141cd4415404d17b1f2ca","modified":1666247646120},{"_id":"public/tags/goroutine/index.html","hash":"be23ec5e1242662f16fd1072c9c5413e17d36ee1","modified":1666247646120},{"_id":"public/tags/go/index.html","hash":"f7622c65e37854d56a07b1a48fca4422cab47a90","modified":1666247646120},{"_id":"public/tags/hexo/index.html","hash":"9b72e13bd5d3112f2bdbdf300e2251bec7288271","modified":1666247646120},{"_id":"public/tags/fluid/index.html","hash":"6a20b4486a5a3418eb7fc288947ebfe1e9da589d","modified":1666247646120},{"_id":"public/tags/安装/index.html","hash":"dea9c316d912b81a5cd7409906504c4bb020a906","modified":1666247646120},{"_id":"public/tags/CSA/index.html","hash":"acffac3f5b2250a57cd56ebad1c78534f841f667","modified":1666247646120},{"_id":"public/tags/k8s/index.html","hash":"6def6487abc36ed81c5138d2bba89e80c5339b3b","modified":1666247646120},{"_id":"public/tags/kind/index.html","hash":"276cbfee27d6f47aad224ae3d8a62a43efc4ffb6","modified":1666247646120},{"_id":"public/tags/ingress-nginx/index.html","hash":"1e015a637a790c0ce2e583fc6a102076c013b742","modified":1666247646120},{"_id":"public/tags/ccache/index.html","hash":"d66ed08bbacbda43929d0a7b55e17a2ff614e078","modified":1666247646120},{"_id":"public/tags/kkFileView/index.html","hash":"618ede3c646c558af197596bd4dcd35156a2a5d6","modified":1666247646120},{"_id":"public/tags/minio/index.html","hash":"c46834e375a55f1c5be8d406cc932c1b0f946105","modified":1666247646120},{"_id":"public/tags/nodejs/index.html","hash":"e02a5cc58164b843067b7af98d44f980b13627e9","modified":1666247646120},{"_id":"public/tags/vscode/index.html","hash":"893fdc60b771bc8656e8d6789910b31474e8a6d4","modified":1666247646120},{"_id":"public/tags/linux/index.html","hash":"716aad211860712d5b2ea0ffa1694b4857d59355","modified":1666247646120},{"_id":"public/tags/harbor/index.html","hash":"3f31a42a52451f6adad432966d96ae0138f053ed","modified":1666247646120},{"_id":"public/tags/drone/index.html","hash":"17b31df5fbcb9dbf61b8da197f7475e3407a3914","modified":1666247646120},{"_id":"public/tags/atomic/index.html","hash":"81d2aa87a184ea309a820a27562b165c8d5eb566","modified":1666247646120},{"_id":"public/tags/sync/index.html","hash":"243764a9367881d2849c9d4dcd11d4ee5a57b245","modified":1666247646120},{"_id":"public/tags/RabbitMQ/index.html","hash":"292ca9a9d715470edd54b60f965334c1bb2205ba","modified":1666247646120},{"_id":"public/tags/golang/index.html","hash":"e857d150b1d91fda1d0bf7d7cf69f55d8bafd483","modified":1666247646120},{"_id":"public/404.html","hash":"cec05a83c570f5c6b5c882f5c420e85428cff880","modified":1666247646120},{"_id":"public/tags/index.html","hash":"fe1093c6f1996bd24f23b06c887e2d5d3ed4fc5e","modified":1666247646120},{"_id":"public/links/index.html","hash":"243b2a765493344500f550e05cf078d76b256eaf","modified":1666247646120},{"_id":"public/2022/10/20/k8s/ingress-nginx简介/index.html","hash":"390924dce402fc1c47b10fda643671a062890d81","modified":1666772118351},{"_id":"public/2022/10/20/k8s/ingress-nginx1.1.1安装部署/index.html","hash":"ff926938ee2d1af4129944bfa0529953136bd940","modified":1666247646120},{"_id":"public/2022/10/14/golang/Redis-go内容学习/redis基础内容/index.html","hash":"037889a1b45dcff82abbb08e981370b3aa6869d9","modified":1666247646120},{"_id":"public/2022/10/14/golang/Redis-go内容学习/redis/index.html","hash":"ad3c0a158ce0099fac92114e50f0425fef281196","modified":1666247646120},{"_id":"public/2022/10/14/golang/go基础/数据库操作/index.html","hash":"c2be4ae0af445da4a142c373b4eb70245961a6c4","modified":1666247646120},{"_id":"public/2022/10/14/golang/go基础/表单和文件/index.html","hash":"bb8f85b345a39d05686f53177c99791d438df9f6","modified":1666247646120},{"_id":"public/2022/10/13/golang/go基础/web/index.html","hash":"f17cd919c03bf0cff5c22d5cb3c7037e19a71a62","modified":1666247646120},{"_id":"public/2022/10/12/golang/go基础/go基础知识/index.html","hash":"f2b096cc8f4a779044aaa7fe4e16049ff3d12884","modified":1666247646120},{"_id":"public/2022/10/12/linux/物理逻辑卷相关知识/index.html","hash":"b9d8be4b3a84e3ee109cdd608916c0d272413e81","modified":1666247646120},{"_id":"public/2022/09/29/golang/RabbitMQ-go教程/channel.queueDeclare()方法参数解析/index.html","hash":"dc9fa1aafb79c445ec4ed8463fcd3f4b82126b95","modified":1666247646120},{"_id":"public/2022/09/28/golang/RabbitMQ-go教程/RPC/index.html","hash":"8cd6d2d570b96a304d7d295014e51a8ec5605d20","modified":1666247646120},{"_id":"public/2022/09/27/golang/RabbitMQ-go教程/主题topic/index.html","hash":"a668e7e0b8f860de2526623e01e26fd5ddd33195","modified":1666247646120},{"_id":"public/2022/09/26/golang/RabbitMQ-go教程/路由/index.html","hash":"e6464b086aa67618dc45c60952a2b138e68b9f7b","modified":1666247646120},{"_id":"public/2022/09/22/docker/构建镜像脚本/index.html","hash":"f62cb74365d8e641cddd194a1f674304a8de81b0","modified":1666247646120},{"_id":"public/2022/09/22/docker/RocketMQ编译&镜像构建/index.html","hash":"62271ab7c939dd71e0c77cd2e472dc4036d1ee5f","modified":1666247646120},{"_id":"public/2022/09/22/golang/RabbitMQ-go教程/publish/index.html","hash":"37e8a5795eefef3ffd883ea84232814107289b45","modified":1666247646120},{"_id":"public/2022/09/20/golang/RabbitMQ-go教程/工作队列/index.html","hash":"e4d2f5045f9b2d1d2f3d09f34094c973c84b6717","modified":1666247646120},{"_id":"public/2022/09/20/golang/RabbitMQ-go教程/rabbitMQ服务搭建/index.html","hash":"4efc745f728490d2cfd252d6c2f601b1da4b75e7","modified":1666247646120},{"_id":"public/2022/09/20/golang/RabbitMQ-go教程/Hello-world/index.html","hash":"4687eb3eeef4ef43ed715113810ba7a32745d9ad","modified":1666247646120},{"_id":"public/2022/09/20/linux/git相关操作/index.html","hash":"ea0f511e52beddf64a1cec611a6910975bd8f1df","modified":1666247646120},{"_id":"public/2022/09/20/docker/docker镜像获取失败/index.html","hash":"a6e7166197bb69ab98403312df0333596ad562b1","modified":1666247646120},{"_id":"public/2022/09/20/linux/修改linux命令提示符/index.html","hash":"492c4cd747cf5e21d24304808b79141dc0d673be","modified":1666247646120},{"_id":"public/2022/09/20/linux/Linux-cut命令/index.html","hash":"953045b32f17832746e4af272f6ffe072601a711","modified":1666247646120},{"_id":"public/2022/09/20/linux/vim快捷操作/index.html","hash":"120e2db326ab6e3c5b29b20b87c8912ae44840b7","modified":1666247646120},{"_id":"public/2022/09/19/k8s/对象管理/index.html","hash":"5624a4d68db7f0f148b88766ccfd9d33388a3242","modified":1666247646120},{"_id":"public/2022/09/19/k8s/k8s基础概念/index.html","hash":"d12df0ec3579b5826327e402921cb172c5658b2f","modified":1666247646120},{"_id":"public/2022/09/15/go基本知识整理/struct类型/index.html","hash":"9e7b0b9b322b3adead1ff1d3209e0e8768bf947e","modified":1666247646120},{"_id":"public/2022/09/15/go基本知识整理/协程泄露/index.html","hash":"4a2a69dd1d078860d52bc6ee09247a4e1ca56cb5","modified":1666247646120},{"_id":"public/2022/09/15/go基本知识整理/日志收集/index.html","hash":"8ee68bbc151dd2c924b34362aff85fa3eb61f5c2","modified":1666247646120},{"_id":"public/2022/09/15/CICD/drone/harbor信息同步数据库/index.html","hash":"1c8aa931a8a7b94d46d4c481d1322e92468a1291","modified":1666247646120},{"_id":"public/2022/09/15/CICD/drone/自定义drone 插件/index.html","hash":"f264502cbfe3a94e74316225020efe63bfd29d56","modified":1666247646120},{"_id":"public/2022/09/15/golang/go基础/面向对象/index.html","hash":"bb85e1e8be4959dc1b92e335f3956b88a50c3ef3","modified":1666247646120},{"_id":"public/2022/09/15/docker/docker安装/index.html","hash":"510cbbcab8c15fb527122e02f4f6620f52e05837","modified":1666247646120},{"_id":"public/2022/09/15/docker/gitlab-14.0.5镜像编译安装/index.html","hash":"9d7daca0a65ec3ada18eed1c1dfdc1d36bf74b05","modified":1666247646120},{"_id":"public/2022/09/15/docker/redis 5.0.6镜像构建/index.html","hash":"3048d67cc13616a5e9ab2797468690148d13ab30","modified":1666247646120},{"_id":"public/2022/09/15/docker/搭建httpd临时源/index.html","hash":"edcb0a904670afd61e41cb29be4881be41fcafb1","modified":1666247646120},{"_id":"public/2022/09/15/hexo/概念及安装/index.html","hash":"bb52ea6cc6d085d3536911715b4597748724b7a3","modified":1666247646120},{"_id":"public/2022/09/15/golang/CSA 自旋锁/index.html","hash":"605c96366a4e5dfa67726325450d192c2243b76f","modified":1666247646120},{"_id":"public/2022/09/15/k8s/crictl 对 Kubernetes 节点进行调试/index.html","hash":"dbcb0885e3169f99867f55fdd6a42f5726dccaa8","modified":1666247646120},{"_id":"public/2022/09/15/k8s/k8s在kind上的简单使用/index.html","hash":"b5fce1a10a6bfe9eada88ab21d46d0fa16b81e9c","modified":1666247646120},{"_id":"public/2022/09/15/k8s/kind概念&安装部署k8s集群/index.html","hash":"6d99d170d3fe915867d3531c6d5fcd6e0437b6b7","modified":1666247646120},{"_id":"public/2022/09/15/编译安装/ccache安装及使用/index.html","hash":"a29da6eb69a085f9a66dbea0773c09f3ca046668","modified":1666247646120},{"_id":"public/2022/09/15/编译安装/kkFileView-4.0.0安装/index.html","hash":"cb94c6d864685c7894ac1773b291ba0c0d85b95d","modified":1666247646120},{"_id":"public/2022/09/15/编译安装/minio编译安装/index.html","hash":"3d9ee324de4629e09982eb4418c997527d3fbc97","modified":1666247646120},{"_id":"public/2022/09/15/编译安装/ubuntu安装nodejs/index.html","hash":"896b66cb589cd663c7ab654a6ce66b4890b7d555","modified":1666247646120},{"_id":"public/2022/09/15/编译安装/ubuntu安装vscode/index.html","hash":"0030bdd5f07688d165fed6fd56fdbbf934665b04","modified":1666247646120},{"_id":"public/2022/09/15/linux/snap和apt/index.html","hash":"27e9ea3105ce894ac89d802530abe3d414066bc3","modified":1666247646120},{"_id":"public/2022/09/15/linux/wget知识点详解/index.html","hash":"374b9d919e7ecaad697e911aac690b84cc701a7a","modified":1666247646120},{"_id":"public/2022/09/15/CICD/drone/habor-data/index.html","hash":"8be607f2a4608d7ebc9fa5d43af43cf2d6a6b149","modified":1666247646120},{"_id":"public/2022/09/15/CICD/drone/harbor-database/index.html","hash":"1e701a530b922f77c4b43f23a2aecef7bcb2a344","modified":1666247646120},{"_id":"public/2022/09/15/golang/Golang包/Time/index.html","hash":"57941342987fa52822c6532acb341794ec10eb6a","modified":1666247646120},{"_id":"public/2022/09/15/golang/Golang包/context/index.html","hash":"6f3de1e61d6875f155b4502d9db34d39741e5a06","modified":1666247646120},{"_id":"public/2022/09/15/golang/Golang包/sync.Once/index.html","hash":"52d2714b6195636849a980e2e419edf84983461c","modified":1666247646120},{"_id":"public/2022/09/15/golang/Golang包/互斥锁-sync.Mutex/index.html","hash":"900b865344d5e43ad33d3cc0907d19a1f0617cde","modified":1666247646120},{"_id":"public/2022/09/15/golang/gin框架/上传文件&Template/index.html","hash":"76fdd942941cbb2589020854f126bf78c295ba3e","modified":1666247646120},{"_id":"public/2022/09/15/golang/gin框架/中间件/index.html","hash":"62a854df20f7a31acfbf7b88b966ad13ae6273d6","modified":1666247646120},{"_id":"public/2022/09/15/golang/gin框架/第一个gin程序/index.html","hash":"45a92391cefd32783e9f4d97cbbbb89ac01376a6","modified":1666772118351},{"_id":"public/2022/09/15/golang/go设计模式/单例模式/index.html","hash":"65205dd619331fd6fdddbce10b688c3f6574353e","modified":1666247646120},{"_id":"public/2022/08/25/hexo/基础配置文件解析/index.html","hash":"6d90b9f2f5062d27bd5020ce2681e0f522963831","modified":1666247646120},{"_id":"public/index.html","hash":"72b24cb9a252fb05ff8cc69ed82f6d6a294137a9","modified":1666772118351},{"_id":"public/page/2/index.html","hash":"3db5c37620bef6b974fc2899ff0493da9a42a967","modified":1666772118351},{"_id":"public/page/3/index.html","hash":"1fb166105c7bb41997eb2d05cd04655d0b0cdb0c","modified":1666772118351},{"_id":"public/page/4/index.html","hash":"206bb21e8b8ae304807712e1481c526696158c2c","modified":1666772118351},{"_id":"public/page/5/index.html","hash":"c43f6e5a38984281d455f652917c00420e7866e7","modified":1666772118351},{"_id":"public/page/6/index.html","hash":"2345f2ddf55af5206b87760ac9e63d371d3938b0","modified":1666772118351},{"_id":"public/categories/index.html","hash":"e52be95a77591cb2eb2dfd21e8ee0da0980d9366","modified":1666247646120},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1666247646120},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1666247646120},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1666247646120},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1666247646120},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1666247646120},{"_id":"public/2022/10/20/k8s/ingress-nginx简介/image-20221020111254258.png","hash":"e38bd521e58485893c499c6cfa4be2dfafa2e1c4","modified":1666247646120},{"_id":"public/2022/10/20/k8s/ingress-nginx简介/image-20221020112742780.png","hash":"59b0433552a5b78c5e4b738eeb8477dad690e617","modified":1666247646120},{"_id":"public/2022/10/20/k8s/ingress-nginx简介/image-20221020113006395.png","hash":"1095be5a9816a291de20569c515346e389d7992a","modified":1666247646120},{"_id":"public/2022/10/12/linux/物理逻辑卷相关知识/image-20220826145753160.png","hash":"73c5d4dd6792ae53bf356f9fc31c8a8f7f88aef7","modified":1666247646120},{"_id":"public/2022/10/12/linux/物理逻辑卷相关知识/image-20220825165132736.png","hash":"6dd0d0a7c5f8e28b0ed0ab107ee4240977ffdf1b","modified":1666247646120},{"_id":"public/2022/09/22/golang/RabbitMQ-go教程/publish/bindings.png","hash":"41e211a972dcd6bbca361008baa276318fadde15","modified":1666247646120},{"_id":"public/2022/09/22/golang/RabbitMQ-go教程/publish/exchanges.png","hash":"dd438322ed5919e11b186d4089aef47de7f719a6","modified":1666247646120},{"_id":"public/2022/09/20/golang/RabbitMQ-go教程/Hello-world/python-one.png","hash":"be0611cd80bb4ca21b65f9c28edb329a18475ab0","modified":1666247646120},{"_id":"public/2022/09/22/golang/RabbitMQ-go教程/publish/runResult.png","hash":"5967fdc17563f84958921239bdfd70354edb01c6","modified":1666247646120},{"_id":"public/2022/09/27/golang/RabbitMQ-go教程/主题topic/python-five.png","hash":"c1fffba56f2ba79a7d2dc5ed4867e6033bf41385","modified":1666247646120},{"_id":"public/2022/10/12/linux/物理逻辑卷相关知识/image-20220826152857911.png","hash":"a06cc6e0ff4cc51b9b8a59b03e3702762086ee93","modified":1666247646120},{"_id":"public/2022/09/20/golang/RabbitMQ-go教程/工作队列/1663727458340.png","hash":"2ed5739551863c5ba4b7fad9f552b9d5da322984","modified":1666247646120},{"_id":"public/2022/09/26/golang/RabbitMQ-go教程/路由/runtime.png","hash":"c3d67dfae71d3c5390193caa69e8b7a894d6bb47","modified":1666247646120},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1666247646120},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1666247646120},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1666247646120},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1666247646120},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1666247646120},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1666247646120},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1666247646120},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1666247646120},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1666247646120},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1666247646120},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1666247646120},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1666247646120},{"_id":"public/2022/09/15/k8s/k8s在kind上的简单使用/image-20220909161301440-1663039219073-7.png","hash":"c3152e01e596ba8a9826de7db9bccaafa35bf3f3","modified":1666247646120},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1666247646120},{"_id":"source/_posts/go基本知识整理/cookie和session.md","hash":"b8bd78712d5a824481076d21f100ea3c7b88b546","modified":1666332951517},{"_id":"source/_posts/go基本知识整理/cookie和session/image-20221021113657015.png","hash":"be9fd9a6937a1339db45c3768af2fb638d35657c","modified":1666332950453},{"_id":"public/2022/10/21/go基本知识整理/cookie和session/index.html","hash":"7cc29adbf71a153d8f0bae2cb03197a4982c001e","modified":1666772118351},{"_id":"public/2022/10/21/go基本知识整理/cookie和session/image-20221021113657015.png","hash":"be9fd9a6937a1339db45c3768af2fb638d35657c","modified":1666772118351}],"Category":[{"name":"docker","_id":"cl9gotsex0004tpdo46og3826"},{"name":"hexo","_id":"cl9gotsfa000xtpdo54lt223s"},{"name":"golang","_id":"cl9gotsfe0019tpdobtmk9s0v"},{"name":"k8s","_id":"cl9gotsfg001ftpdoahbo2k2g"},{"name":"编译安装","_id":"cl9gotsg2002etpdo6f0h1r0q"},{"name":"linux","_id":"cl9gotsgd0037tpdo7zzg6zw8"},{"name":"CICD","_id":"cl9gotsgu004htpdo1lip1clu"},{"name":"Golang包","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsgz004ztpdo2amo780r"},{"name":"redis-go学习","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh2005jtpdo6etv33e9"},{"name":"redis","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh4005ptpdo7g89508y"},{"name":"RabbitMQ-go教程","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh5005utpdoduup2xdw"},{"name":"gin框架","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshb0070tpdo7thfhpmx"},{"name":"go语言基础","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshd007gtpdoe7lxf7w3"},{"name":"drone","parent":"cl9gotsgu004htpdo1lip1clu","_id":"cl9gotshh007vtpdo1b7f6c2f"},{"name":"go设计模式","parent":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshk008gtpdo0nj4908b"}],"Data":[],"Page":[{"title":"about","layout":"about","_content":"\n# 技能掌握\n\n# 书本\n\n\n\n# 观影\n\n《海蒂和爷爷》\n\n《阿甘正传》\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\n---\n\n# 技能掌握\n\n# 书本\n\n\n\n# 观影\n\n《海蒂和爷爷》\n\n《阿甘正传》\n","date":"2022-09-21T01:14:00.790Z","updated":"2022-09-21T01:14:00.790Z","path":"about/index.html","comments":1,"_id":"cl9gotser0000tpdoh6es3vy7","content":"<h1 id=\"技能掌握\"><a href=\"#技能掌握\" class=\"headerlink\" title=\"技能掌握\"></a>技能掌握</h1><h1 id=\"书本\"><a href=\"#书本\" class=\"headerlink\" title=\"书本\"></a>书本</h1><h1 id=\"观影\"><a href=\"#观影\" class=\"headerlink\" title=\"观影\"></a>观影</h1><p>《海蒂和爷爷》</p>\n<p>《阿甘正传》</p>\n","site":{"data":{}},"wordcount":21,"excerpt":"","more":"<h1 id=\"技能掌握\"><a href=\"#技能掌握\" class=\"headerlink\" title=\"技能掌握\"></a>技能掌握</h1><h1 id=\"书本\"><a href=\"#书本\" class=\"headerlink\" title=\"书本\"></a>书本</h1><h1 id=\"观影\"><a href=\"#观影\" class=\"headerlink\" title=\"观影\"></a>观影</h1><p>《海蒂和爷爷》</p>\n<p>《阿甘正传》</p>\n"},{"title":"website","date":"2022-09-20T01:42:33.000Z","_content":"\n[李文周go语言学习](https://www.liwenzhou.com/)\n\n[PMP官方网站](http://event.chinapmp.cn)\n\n[陕西省人事考试网](http://www.sxrsks.cn/)\n\n[Kubernetes 文档 | Kubernetes](https://kubernetes.io/zh-cn/docs/home/)\n\n[PMI网站](https://www.pmi.org):后期查询成绩，下载证书，查找PDU，PMIID，证书换审等\n\n[go web编程](https://learnku.com/docs/build-web-application-with-golang/061-session-and-cookie/3189)\n\n[gin教程](https://gin-gonic.com/docs/examples/bind-form-data-request-with-custom-struct/)\n","source":"website/index.md","raw":"---\ntitle: website\ndate: 2022-09-20 09:42:33\n---\n\n[李文周go语言学习](https://www.liwenzhou.com/)\n\n[PMP官方网站](http://event.chinapmp.cn)\n\n[陕西省人事考试网](http://www.sxrsks.cn/)\n\n[Kubernetes 文档 | Kubernetes](https://kubernetes.io/zh-cn/docs/home/)\n\n[PMI网站](https://www.pmi.org):后期查询成绩，下载证书，查找PDU，PMIID，证书换审等\n\n[go web编程](https://learnku.com/docs/build-web-application-with-golang/061-session-and-cookie/3189)\n\n[gin教程](https://gin-gonic.com/docs/examples/bind-form-data-request-with-custom-struct/)\n","updated":"2022-10-25T02:44:34.601Z","path":"website/index.html","_id":"cl9gotsev0002tpdoe5a3glxl","comments":1,"layout":"page","content":"<p><a href=\"https://www.liwenzhou.com/\">李文周go语言学习</a></p>\n<p><a href=\"http://event.chinapmp.cn/\">PMP官方网站</a></p>\n<p><a href=\"http://www.sxrsks.cn/\">陕西省人事考试网</a></p>\n<p><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档 | Kubernetes</a></p>\n<p><a href=\"https://www.pmi.org/\">PMI网站</a>:后期查询成绩，下载证书，查找PDU，PMIID，证书换审等</p>\n<p><a href=\"https://learnku.com/docs/build-web-application-with-golang/061-session-and-cookie/3189\">go web编程</a></p>\n<p><a href=\"https://gin-gonic.com/docs/examples/bind-form-data-request-with-custom-struct/\">gin教程</a></p>\n","site":{"data":{}},"wordcount":94,"excerpt":"","more":"<p><a href=\"https://www.liwenzhou.com/\">李文周go语言学习</a></p>\n<p><a href=\"http://event.chinapmp.cn/\">PMP官方网站</a></p>\n<p><a href=\"http://www.sxrsks.cn/\">陕西省人事考试网</a></p>\n<p><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档 | Kubernetes</a></p>\n<p><a href=\"https://www.pmi.org/\">PMI网站</a>:后期查询成绩，下载证书，查找PDU，PMIID，证书换审等</p>\n<p><a href=\"https://learnku.com/docs/build-web-application-with-golang/061-session-and-cookie/3189\">go web编程</a></p>\n<p><a href=\"https://gin-gonic.com/docs/examples/bind-form-data-request-with-custom-struct/\">gin教程</a></p>\n"}],"Post":[{"title":"Aarch64编译RocketMQ 4.7.1&镜像构建","hide":true,"_content":"\n\n\n# 编译\n\n## 依赖下载安装\n\n```shell\nyum install java-1.8.0-openjdk* -y\n#maven安装\nwget https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz\ntar -zxvf apache-maven-3.6.1-bin.tar.gz\nrm -rf /usr/local/maven\nmv apache-maven-3.6.1 /usr/local/maven\n#vim /etc/profile 可采用命令追加\nMAVEN_HOME=/usr/local/maven\nexport PATH=${MAVEN_HOME}/bin:$PATH\nsource /etc/profile\nmvn -v\n```\n\n## 编译安装\n\n```shell\nwget -c https://github.com/apache/rocketmq/archive/refs/tags/rocketmq-all-4.7.1.tar.gz\ntar -xf rocketmq-all-4.7.1.tar.gz\ncd rocketmq-rocketmq-all-4.7.1\nmvn -Prelease-all -DskipTests clean install -U\n```\n\n# 镜像构建\n\n```shell\n[root@ecs-5e66 image-build]$ git clone https://github.com/apache/rocketmq-docker.git\n[root@ecs-5e66 image-build]$ cd rocketmq-docker/image-build\n[root@ecs-5e66 image-build]$ git diff Dockerfile-centos\ndiff --git a/image-build/Dockerfile-centos b/image-build/Dockerfile-centos\nindex 3f72e8d..00707e2 100644\n--- a/image-build/Dockerfile-centos\n+++ b/image-build/Dockerfile-centos\n@@ -17,7 +17,7 @@\n\n FROM centos:7\n\n-RUN yum install -y java-1.8.0-openjdk-devel.x86_64 unzip gettext nmap-ncat openssl, which gnupg, telnet \\\n+RUN yum install -y java-1.8.0-openjdk-devel unzip gettext nmap-ncat openssl, which gnupg, telnet \\\n  && yum clean all -y\n\n # FROM openjdk:8-jdk\n@@ -47,17 +47,17 @@ ENV ROCKETMQ_HOME  /home/rocketmq/rocketmq-${ROCKETMQ_VERSION}\n WORKDIR  ${ROCKETMQ_HOME}\n\n RUN set -eux; \\\n-    curl -L https://archive.apache.org/dist/rocketmq/${ROCKETMQ_VERSION}/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip -o rocketmq.zip; \\\n-    curl -L https://archive.apache.org/dist/rocketmq/${ROCKETMQ_VERSION}/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip.asc -o rocketmq.zip.asc; \\\n+    curl -L 172.17.0.15:80/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip -o rocketmq.zip; \\\n+#    curl -L https://archive.apache.org/dist/rocketmq/${ROCKETMQ_VERSION}/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip.asc -o rocketmq.zip.asc; \\\n     #https://www.apache.org/dist/rocketmq/KEYS\n-       curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\\n-       \\\n-       gpg --import KEYS; \\\n-    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\\n+#      curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\\n+#      \\\n+#      gpg --import KEYS; \\\n+#    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\\n     unzip rocketmq.zip ; \\\n        mv rocketmq*/* . ; \\\n        rmdir rocketmq-*  ; \\\n-       rm rocketmq.zip rocketmq.zip.asc KEYS\n+       rm rocketmq.zip\n\n # add scripts\n COPY scripts/ ${ROCKETMQ_HOME}/bin/\n@@ -84,7 +84,7 @@ RUN mv ${ROCKETMQ_HOME}/bin/runbroker-customize.sh ${ROCKETMQ_HOME}/bin/runbroke\n RUN export JAVA_OPT=\" -Duser.home=/opt\"\n\n # Add ${JAVA_HOME}/lib/ext as java.ext.dirs\n-RUN sed -i 's/${JAVA_HOME}\\/jre\\/lib\\/ext/${JAVA_HOME}\\/jre\\/lib\\/ext:${JAVA_HOME}\\/lib\\/ext/' ${ROCKETMQ_HOME}/bin/tools.sh\n+RUN sed -i 's/${JAVA_HOME}\\/jre\\/lib\\/ext/${JAVA_HOME}\\/jre\\/lib\\/ext:${JAVA_HOME}\\/lib\\/ext:\\/usr\\/lib\\/jvm\\/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.aarch64\\/jre\\/lib\\/ext/' ${ROCKETMQ_HOME}/bin/\n\n USER ${user}\n\n[root@ecs-5e66 image-build]$ sh build-image.sh 4.5.0 centos\n```\n\n# 验证\n\n```shell\n[rocketmq@323f9159d4c7 bin]$ sh mqnamesrv &\n[1] 92\n[rocketmq@323f9159d4c7 bin]$ sh mqbroker -n localhost:9876 aut**ateTopicEnable=true &\n[2] 131\n[rocketmq@323f9159d4c7 bin]$ exit./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic\n[rocketmq@323f9159d4c7 bin]$ The broker[323f9159d4c7, 172.17.0.2:10911] boot success. serializeType=JSON and name server is localhost:9876\n[rocketmq@323f9159d4c7 bin]$ ./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic\ncreate topic to 172.17.0.2:10911 success.\n\n```","source":"_posts/docker/RocketMQ编译&镜像构建.md","raw":"---\ntitle: Aarch64编译RocketMQ 4.7.1&镜像构建\ncategories: \n- docker\ntags:\n- RocketMQ\nhide: true\n---\n\n\n\n# 编译\n\n## 依赖下载安装\n\n```shell\nyum install java-1.8.0-openjdk* -y\n#maven安装\nwget https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz\ntar -zxvf apache-maven-3.6.1-bin.tar.gz\nrm -rf /usr/local/maven\nmv apache-maven-3.6.1 /usr/local/maven\n#vim /etc/profile 可采用命令追加\nMAVEN_HOME=/usr/local/maven\nexport PATH=${MAVEN_HOME}/bin:$PATH\nsource /etc/profile\nmvn -v\n```\n\n## 编译安装\n\n```shell\nwget -c https://github.com/apache/rocketmq/archive/refs/tags/rocketmq-all-4.7.1.tar.gz\ntar -xf rocketmq-all-4.7.1.tar.gz\ncd rocketmq-rocketmq-all-4.7.1\nmvn -Prelease-all -DskipTests clean install -U\n```\n\n# 镜像构建\n\n```shell\n[root@ecs-5e66 image-build]$ git clone https://github.com/apache/rocketmq-docker.git\n[root@ecs-5e66 image-build]$ cd rocketmq-docker/image-build\n[root@ecs-5e66 image-build]$ git diff Dockerfile-centos\ndiff --git a/image-build/Dockerfile-centos b/image-build/Dockerfile-centos\nindex 3f72e8d..00707e2 100644\n--- a/image-build/Dockerfile-centos\n+++ b/image-build/Dockerfile-centos\n@@ -17,7 +17,7 @@\n\n FROM centos:7\n\n-RUN yum install -y java-1.8.0-openjdk-devel.x86_64 unzip gettext nmap-ncat openssl, which gnupg, telnet \\\n+RUN yum install -y java-1.8.0-openjdk-devel unzip gettext nmap-ncat openssl, which gnupg, telnet \\\n  && yum clean all -y\n\n # FROM openjdk:8-jdk\n@@ -47,17 +47,17 @@ ENV ROCKETMQ_HOME  /home/rocketmq/rocketmq-${ROCKETMQ_VERSION}\n WORKDIR  ${ROCKETMQ_HOME}\n\n RUN set -eux; \\\n-    curl -L https://archive.apache.org/dist/rocketmq/${ROCKETMQ_VERSION}/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip -o rocketmq.zip; \\\n-    curl -L https://archive.apache.org/dist/rocketmq/${ROCKETMQ_VERSION}/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip.asc -o rocketmq.zip.asc; \\\n+    curl -L 172.17.0.15:80/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip -o rocketmq.zip; \\\n+#    curl -L https://archive.apache.org/dist/rocketmq/${ROCKETMQ_VERSION}/rocketmq-all-${ROCKETMQ_VERSION}-bin-release.zip.asc -o rocketmq.zip.asc; \\\n     #https://www.apache.org/dist/rocketmq/KEYS\n-       curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\\n-       \\\n-       gpg --import KEYS; \\\n-    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\\n+#      curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\\n+#      \\\n+#      gpg --import KEYS; \\\n+#    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\\n     unzip rocketmq.zip ; \\\n        mv rocketmq*/* . ; \\\n        rmdir rocketmq-*  ; \\\n-       rm rocketmq.zip rocketmq.zip.asc KEYS\n+       rm rocketmq.zip\n\n # add scripts\n COPY scripts/ ${ROCKETMQ_HOME}/bin/\n@@ -84,7 +84,7 @@ RUN mv ${ROCKETMQ_HOME}/bin/runbroker-customize.sh ${ROCKETMQ_HOME}/bin/runbroke\n RUN export JAVA_OPT=\" -Duser.home=/opt\"\n\n # Add ${JAVA_HOME}/lib/ext as java.ext.dirs\n-RUN sed -i 's/${JAVA_HOME}\\/jre\\/lib\\/ext/${JAVA_HOME}\\/jre\\/lib\\/ext:${JAVA_HOME}\\/lib\\/ext/' ${ROCKETMQ_HOME}/bin/tools.sh\n+RUN sed -i 's/${JAVA_HOME}\\/jre\\/lib\\/ext/${JAVA_HOME}\\/jre\\/lib\\/ext:${JAVA_HOME}\\/lib\\/ext:\\/usr\\/lib\\/jvm\\/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.aarch64\\/jre\\/lib\\/ext/' ${ROCKETMQ_HOME}/bin/\n\n USER ${user}\n\n[root@ecs-5e66 image-build]$ sh build-image.sh 4.5.0 centos\n```\n\n# 验证\n\n```shell\n[rocketmq@323f9159d4c7 bin]$ sh mqnamesrv &\n[1] 92\n[rocketmq@323f9159d4c7 bin]$ sh mqbroker -n localhost:9876 aut**ateTopicEnable=true &\n[2] 131\n[rocketmq@323f9159d4c7 bin]$ exit./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic\n[rocketmq@323f9159d4c7 bin]$ The broker[323f9159d4c7, 172.17.0.2:10911] boot success. serializeType=JSON and name server is localhost:9876\n[rocketmq@323f9159d4c7 bin]$ ./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic\ncreate topic to 172.17.0.2:10911 success.\n\n```","slug":"docker/RocketMQ编译&镜像构建","published":1,"date":"2022-09-22T11:09:05.688Z","updated":"2022-09-22T11:11:12.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotset0001tpdobuoj0jq5","content":"<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h2 id=\"依赖下载安装\"><a href=\"#依赖下载安装\" class=\"headerlink\" title=\"依赖下载安装\"></a>依赖下载安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum install java-1.8.0-openjdk* -y<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">maven安装</span><br>wget https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz<br>tar -zxvf apache-maven-3.6.1-bin.tar.gz<br>rm -rf /usr/local/maven<br>mv apache-maven-3.6.1 /usr/local/maven<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">vim /etc/profile 可采用命令追加</span><br>MAVEN_HOME=/usr/local/maven<br>export PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH<br>source /etc/profile<br>mvn -v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget -c https://github.com/apache/rocketmq/archive/refs/tags/rocketmq-all-4.7.1.tar.gz<br>tar -xf rocketmq-all-4.7.1.tar.gz<br>cd rocketmq-rocketmq-all-4.7.1<br>mvn -Prelease-all -DskipTests clean install -U<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"镜像构建\"><a href=\"#镜像构建\" class=\"headerlink\" title=\"镜像构建\"></a>镜像构建</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 image-build]$ git clone https://github.com/apache/rocketmq-docker.git<br>[root@ecs-5e66 image-build]$ cd rocketmq-docker/image-build<br>[root@ecs-5e66 image-build]$ git diff Dockerfile-centos<br>diff --git a/image-build/Dockerfile-centos b/image-build/Dockerfile-centos<br>index 3f72e8d..00707e2 100644<br>--- a/image-build/Dockerfile-centos<br>+++ b/image-build/Dockerfile-centos<br>@@ -17,7 +17,7 @@<br><br> FROM centos:7<br><br>-RUN yum install -y java-1.8.0-openjdk-devel.x86_64 unzip gettext nmap-ncat openssl, which gnupg, telnet \\<br>+RUN yum install -y java-1.8.0-openjdk-devel unzip gettext nmap-ncat openssl, which gnupg, telnet \\<br>  &amp;&amp; yum clean all -y<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">FROM openjdk:8-jdk</span><br>@@ -47,17 +47,17 @@ ENV ROCKETMQ_HOME  /home/rocketmq/rocketmq-$&#123;ROCKETMQ_VERSION&#125;<br> WORKDIR  $&#123;ROCKETMQ_HOME&#125;<br><br> RUN set -eux; \\<br>-    curl -L https://archive.apache.org/dist/rocketmq/$&#123;ROCKETMQ_VERSION&#125;/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip -o rocketmq.zip; \\<br>-    curl -L https://archive.apache.org/dist/rocketmq/$&#123;ROCKETMQ_VERSION&#125;/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip.asc -o rocketmq.zip.asc; \\<br>+    curl -L 172.17.0.15:80/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip -o rocketmq.zip; \\<br>+#    curl -L https://archive.apache.org/dist/rocketmq/$&#123;ROCKETMQ_VERSION&#125;/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip.asc -o rocketmq.zip.asc; \\<br>     #https://www.apache.org/dist/rocketmq/KEYS<br>-       curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\<br>-       \\<br>-       gpg --import KEYS; \\<br>-    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\<br>+#      curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\<br>+#      \\<br>+#      gpg --import KEYS; \\<br>+#    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\<br>     unzip rocketmq.zip ; \\<br>        mv rocketmq*/* . ; \\<br>        rmdir rocketmq-*  ; \\<br>-       rm rocketmq.zip rocketmq.zip.asc KEYS<br>+       rm rocketmq.zip<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">add scripts</span><br> COPY scripts/ $&#123;ROCKETMQ_HOME&#125;/bin/<br>@@ -84,7 +84,7 @@ RUN mv $&#123;ROCKETMQ_HOME&#125;/bin/runbroker-customize.sh $&#123;ROCKETMQ_HOME&#125;/bin/runbroke<br> RUN export JAVA_OPT=&quot; -Duser.home=/opt&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">Add <span class=\"hljs-variable\">$&#123;JAVA_HOME&#125;</span>/lib/ext as java.ext.dirs</span><br>-RUN sed -i &#x27;s/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext:$&#123;JAVA_HOME&#125;\\/lib\\/ext/&#x27; $&#123;ROCKETMQ_HOME&#125;/bin/tools.sh<br>+RUN sed -i &#x27;s/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext:$&#123;JAVA_HOME&#125;\\/lib\\/ext:\\/usr\\/lib\\/jvm\\/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.aarch64\\/jre\\/lib\\/ext/&#x27; $&#123;ROCKETMQ_HOME&#125;/bin/<br><br> USER $&#123;user&#125;<br><br>[root@ecs-5e66 image-build]$ sh build-image.sh 4.5.0 centos<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[rocketmq@323f9159d4c7 bin]$ sh mqnamesrv &amp;<br>[1] 92<br>[rocketmq@323f9159d4c7 bin]$ sh mqbroker -n localhost:9876 aut**ateTopicEnable=true &amp;<br>[2] 131<br>[rocketmq@323f9159d4c7 bin]$ exit./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic<br>[rocketmq@323f9159d4c7 bin]$ The broker[323f9159d4c7, 172.17.0.2:10911] boot success. serializeType=JSON and name server is localhost:9876<br>[rocketmq@323f9159d4c7 bin]$ ./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic<br>create topic to 172.17.0.2:10911 success.<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":3603,"excerpt":"","more":"<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h2 id=\"依赖下载安装\"><a href=\"#依赖下载安装\" class=\"headerlink\" title=\"依赖下载安装\"></a>依赖下载安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum install java-1.8.0-openjdk* -y<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">maven安装</span><br>wget https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz<br>tar -zxvf apache-maven-3.6.1-bin.tar.gz<br>rm -rf /usr/local/maven<br>mv apache-maven-3.6.1 /usr/local/maven<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">vim /etc/profile 可采用命令追加</span><br>MAVEN_HOME=/usr/local/maven<br>export PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH<br>source /etc/profile<br>mvn -v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget -c https://github.com/apache/rocketmq/archive/refs/tags/rocketmq-all-4.7.1.tar.gz<br>tar -xf rocketmq-all-4.7.1.tar.gz<br>cd rocketmq-rocketmq-all-4.7.1<br>mvn -Prelease-all -DskipTests clean install -U<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"镜像构建\"><a href=\"#镜像构建\" class=\"headerlink\" title=\"镜像构建\"></a>镜像构建</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 image-build]$ git clone https://github.com/apache/rocketmq-docker.git<br>[root@ecs-5e66 image-build]$ cd rocketmq-docker/image-build<br>[root@ecs-5e66 image-build]$ git diff Dockerfile-centos<br>diff --git a/image-build/Dockerfile-centos b/image-build/Dockerfile-centos<br>index 3f72e8d..00707e2 100644<br>--- a/image-build/Dockerfile-centos<br>+++ b/image-build/Dockerfile-centos<br>@@ -17,7 +17,7 @@<br><br> FROM centos:7<br><br>-RUN yum install -y java-1.8.0-openjdk-devel.x86_64 unzip gettext nmap-ncat openssl, which gnupg, telnet \\<br>+RUN yum install -y java-1.8.0-openjdk-devel unzip gettext nmap-ncat openssl, which gnupg, telnet \\<br>  &amp;&amp; yum clean all -y<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">FROM openjdk:8-jdk</span><br>@@ -47,17 +47,17 @@ ENV ROCKETMQ_HOME  /home/rocketmq/rocketmq-$&#123;ROCKETMQ_VERSION&#125;<br> WORKDIR  $&#123;ROCKETMQ_HOME&#125;<br><br> RUN set -eux; \\<br>-    curl -L https://archive.apache.org/dist/rocketmq/$&#123;ROCKETMQ_VERSION&#125;/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip -o rocketmq.zip; \\<br>-    curl -L https://archive.apache.org/dist/rocketmq/$&#123;ROCKETMQ_VERSION&#125;/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip.asc -o rocketmq.zip.asc; \\<br>+    curl -L 172.17.0.15:80/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip -o rocketmq.zip; \\<br>+#    curl -L https://archive.apache.org/dist/rocketmq/$&#123;ROCKETMQ_VERSION&#125;/rocketmq-all-$&#123;ROCKETMQ_VERSION&#125;-bin-release.zip.asc -o rocketmq.zip.asc; \\<br>     #https://www.apache.org/dist/rocketmq/KEYS<br>-       curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\<br>-       \\<br>-       gpg --import KEYS; \\<br>-    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\<br>+#      curl -L https://www.apache.org/dist/rocketmq/KEYS -o KEYS; \\<br>+#      \\<br>+#      gpg --import KEYS; \\<br>+#    gpg --batch --verify rocketmq.zip.asc rocketmq.zip ; \\<br>     unzip rocketmq.zip ; \\<br>        mv rocketmq*/* . ; \\<br>        rmdir rocketmq-*  ; \\<br>-       rm rocketmq.zip rocketmq.zip.asc KEYS<br>+       rm rocketmq.zip<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">add scripts</span><br> COPY scripts/ $&#123;ROCKETMQ_HOME&#125;/bin/<br>@@ -84,7 +84,7 @@ RUN mv $&#123;ROCKETMQ_HOME&#125;/bin/runbroker-customize.sh $&#123;ROCKETMQ_HOME&#125;/bin/runbroke<br> RUN export JAVA_OPT=&quot; -Duser.home=/opt&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">Add <span class=\"hljs-variable\">$&#123;JAVA_HOME&#125;</span>/lib/ext as java.ext.dirs</span><br>-RUN sed -i &#x27;s/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext:$&#123;JAVA_HOME&#125;\\/lib\\/ext/&#x27; $&#123;ROCKETMQ_HOME&#125;/bin/tools.sh<br>+RUN sed -i &#x27;s/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext/$&#123;JAVA_HOME&#125;\\/jre\\/lib\\/ext:$&#123;JAVA_HOME&#125;\\/lib\\/ext:\\/usr\\/lib\\/jvm\\/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.aarch64\\/jre\\/lib\\/ext/&#x27; $&#123;ROCKETMQ_HOME&#125;/bin/<br><br> USER $&#123;user&#125;<br><br>[root@ecs-5e66 image-build]$ sh build-image.sh 4.5.0 centos<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[rocketmq@323f9159d4c7 bin]$ sh mqnamesrv &amp;<br>[1] 92<br>[rocketmq@323f9159d4c7 bin]$ sh mqbroker -n localhost:9876 aut**ateTopicEnable=true &amp;<br>[2] 131<br>[rocketmq@323f9159d4c7 bin]$ exit./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic<br>[rocketmq@323f9159d4c7 bin]$ The broker[323f9159d4c7, 172.17.0.2:10911] boot success. serializeType=JSON and name server is localhost:9876<br>[rocketmq@323f9159d4c7 bin]$ ./mqadmin updateTopic -c DefaultCluster -n 127.0.0.1:9876 -t wangli-topic<br>create topic to 172.17.0.2:10911 success.<br><br></code></pre></td></tr></table></figure>"},{"title":"docker安装","_content":"\n## 安装（一）\n\n```shell\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n```\n\n## 安装（二）\n\n系统：centos 7.6\n\n```shell\nyum remove docker docker-common docker-selinux docker-engine\n#安装依赖\nyum install -y yum-utils device-mapper-persistent-data lvm2\n#设置yum源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\nyum list docker-ce --showduplicates | sort -r\n\n#安装docker\n\nyum install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 containerd.io \n\n#启动docker\n\nsystemctl daemon-reload\n\nsystemctl start docker\n\nsystemctl enable docker\n\n#查看docker版本\n\ndocker version\n```\n","source":"_posts/docker/docker安装.md","raw":"---\ntitle: docker安装\ncategories: \n- docker\ntags:\n- docker\n---\n\n## 安装（一）\n\n```shell\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n```\n\n## 安装（二）\n\n系统：centos 7.6\n\n```shell\nyum remove docker docker-common docker-selinux docker-engine\n#安装依赖\nyum install -y yum-utils device-mapper-persistent-data lvm2\n#设置yum源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\nyum list docker-ce --showduplicates | sort -r\n\n#安装docker\n\nyum install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 containerd.io \n\n#启动docker\n\nsystemctl daemon-reload\n\nsystemctl start docker\n\nsystemctl enable docker\n\n#查看docker版本\n\ndocker version\n```\n","slug":"docker/docker安装","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-14T07:13:27.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsev0003tpdo8h3g5ue8","content":"<h2 id=\"安装（一）\"><a href=\"#安装（一）\" class=\"headerlink\" title=\"安装（一）\"></a>安装（一）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装（二）\"><a href=\"#安装（二）\" class=\"headerlink\" title=\"安装（二）\"></a>安装（二）</h2><p>系统：centos 7.6</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum remove docker docker-common docker-selinux docker-engine<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装依赖</span><br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置yum源</span><br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><br>yum list docker-ce --showduplicates | sort -r<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装docker</span><br><br>yum install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 containerd.io <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动docker</span><br><br>systemctl daemon-reload<br><br>systemctl start docker<br><br>systemctl enable docker<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看docker版本</span><br><br>docker version<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":529,"excerpt":"","more":"<h2 id=\"安装（一）\"><a href=\"#安装（一）\" class=\"headerlink\" title=\"安装（一）\"></a>安装（一）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装（二）\"><a href=\"#安装（二）\" class=\"headerlink\" title=\"安装（二）\"></a>安装（二）</h2><p>系统：centos 7.6</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum remove docker docker-common docker-selinux docker-engine<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装依赖</span><br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置yum源</span><br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><br>yum list docker-ce --showduplicates | sort -r<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装docker</span><br><br>yum install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 containerd.io <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动docker</span><br><br>systemctl daemon-reload<br><br>systemctl start docker<br><br>systemctl enable docker<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看docker版本</span><br><br>docker version<br></code></pre></td></tr></table></figure>\n"},{"title":"docker镜像获取失败","_content":"\n# docker pull失败\n\n最经在虚机中下载docker镜像，之前已经可以成功`docker pull`下来，今天都获取失败，均报如下错误，但有的又可以正常下载：\n\n```shell\nubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22-alpine\nError response from daemon: Get \"https://registry-1.docker.io/v2/\": x509: certificate is valid for *.helpapp.io, not registry-1.docker.io\nubuntu@root:~/Desktop$ docker logout\nRemoving login credentials for https://index.docker.io/v1/\nubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22\n3.9.22: Pulling from library/rabbitmq\n675920708c8b: Already exists \n......\n21d42f925919: Already exists \nDigest: sha256:fa2a3e972323d5e3a426acec7159b460aa06b07a3732cebb4892fe65446048d6\nStatus: Downloaded newer image for rabbitmq:3.9.22\ndocker.io/library/rabbitmq:3.9.22\n```\n\n\n\n# 解决方法(玄学，下午下载又成功了，可能是网络问题)\n\n查看网上好多解决方法，表示国内把hub禁了（大概率不需要），不能下载，需要切换docker下载镜像的源配置文件\n\n```shell\nubuntu@root:~/Desktop$ cat /etc/docker/daemon.json \n{\n    \"registry-mirrors\": [\"https://registry.docker-cn.com\",\"http://hub-mirror.c.163.com\"],\n    \"live-restore\": true\n}\n```\n\n但配置文件之后，不能正常下载。\n\n1. 换到其他云环境，依旧不能正常下载，报错为获取超时，后续尝试成功，可能是因为网络问题，建议如果下载失败，之后没准就成功了，玄学：\n\n```shell\n[root@ecs-arm-k8s-master01 ~]# docker pull rabbitmq:3.9.22-alpine\nError response from daemon: Head \"https://registry-1.docker.io/v2/library/rabbitmq/manifests/3.9.22-alpine\": net/http: TLS handshake timeout\n```\n\n2. 之前在云服务器上也有相同的下载问题，但极大可能都是其他人在环境有登陆docker，可能导致镜像获取不到，一般`docker logout`就可以解决。\n\n   ```shell\n   you are load balancing between two (or more) registries, and you did not configure the shared secret properly\n   your are load balancing, and one of your registry is not configured properly to use the shared storage\n   ```\n\n   \n\n","source":"_posts/docker/docker镜像获取失败.md","raw":"---\ntitle: docker镜像获取失败\ncategories: \n- docker\ntags:\n- docker\n\n---\n\n# docker pull失败\n\n最经在虚机中下载docker镜像，之前已经可以成功`docker pull`下来，今天都获取失败，均报如下错误，但有的又可以正常下载：\n\n```shell\nubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22-alpine\nError response from daemon: Get \"https://registry-1.docker.io/v2/\": x509: certificate is valid for *.helpapp.io, not registry-1.docker.io\nubuntu@root:~/Desktop$ docker logout\nRemoving login credentials for https://index.docker.io/v1/\nubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22\n3.9.22: Pulling from library/rabbitmq\n675920708c8b: Already exists \n......\n21d42f925919: Already exists \nDigest: sha256:fa2a3e972323d5e3a426acec7159b460aa06b07a3732cebb4892fe65446048d6\nStatus: Downloaded newer image for rabbitmq:3.9.22\ndocker.io/library/rabbitmq:3.9.22\n```\n\n\n\n# 解决方法(玄学，下午下载又成功了，可能是网络问题)\n\n查看网上好多解决方法，表示国内把hub禁了（大概率不需要），不能下载，需要切换docker下载镜像的源配置文件\n\n```shell\nubuntu@root:~/Desktop$ cat /etc/docker/daemon.json \n{\n    \"registry-mirrors\": [\"https://registry.docker-cn.com\",\"http://hub-mirror.c.163.com\"],\n    \"live-restore\": true\n}\n```\n\n但配置文件之后，不能正常下载。\n\n1. 换到其他云环境，依旧不能正常下载，报错为获取超时，后续尝试成功，可能是因为网络问题，建议如果下载失败，之后没准就成功了，玄学：\n\n```shell\n[root@ecs-arm-k8s-master01 ~]# docker pull rabbitmq:3.9.22-alpine\nError response from daemon: Head \"https://registry-1.docker.io/v2/library/rabbitmq/manifests/3.9.22-alpine\": net/http: TLS handshake timeout\n```\n\n2. 之前在云服务器上也有相同的下载问题，但极大可能都是其他人在环境有登陆docker，可能导致镜像获取不到，一般`docker logout`就可以解决。\n\n   ```shell\n   you are load balancing between two (or more) registries, and you did not configure the shared secret properly\n   your are load balancing, and one of your registry is not configured properly to use the shared storage\n   ```\n\n   \n\n","slug":"docker/docker镜像获取失败","published":1,"date":"2022-09-20T06:11:26.222Z","updated":"2022-09-20T06:41:09.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsez0006tpdo7241bmbb","content":"<h1 id=\"docker-pull失败\"><a href=\"#docker-pull失败\" class=\"headerlink\" title=\"docker pull失败\"></a>docker pull失败</h1><p>最经在虚机中下载docker镜像，之前已经可以成功<code>docker pull</code>下来，今天都获取失败，均报如下错误，但有的又可以正常下载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22-alpine<br>Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: x509: certificate is valid for *.helpapp.io, not registry-1.docker.io<br>ubuntu@root:~/Desktop$ docker logout<br>Removing login credentials for https://index.docker.io/v1/<br>ubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22<br>3.9.22: Pulling from library/rabbitmq<br>675920708c8b: Already exists <br>......<br>21d42f925919: Already exists <br>Digest: sha256:fa2a3e972323d5e3a426acec7159b460aa06b07a3732cebb4892fe65446048d6<br>Status: Downloaded newer image for rabbitmq:3.9.22<br>docker.io/library/rabbitmq:3.9.22<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"解决方法-玄学，下午下载又成功了，可能是网络问题\"><a href=\"#解决方法-玄学，下午下载又成功了，可能是网络问题\" class=\"headerlink\" title=\"解决方法(玄学，下午下载又成功了，可能是网络问题)\"></a>解决方法(玄学，下午下载又成功了，可能是网络问题)</h1><p>查看网上好多解决方法，表示国内把hub禁了（大概率不需要），不能下载，需要切换docker下载镜像的源配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop$ cat /etc/docker/daemon.json <br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],<br>    &quot;live-restore&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但配置文件之后，不能正常下载。</p>\n<ol>\n<li>换到其他云环境，依旧不能正常下载，报错为获取超时，后续尝试成功，可能是因为网络问题，建议如果下载失败，之后没准就成功了，玄学：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-arm-k8s-master01 ~]# docker pull rabbitmq:3.9.22-alpine<br>Error response from daemon: Head &quot;https://registry-1.docker.io/v2/library/rabbitmq/manifests/3.9.22-alpine&quot;: net/http: TLS handshake timeout<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>之前在云服务器上也有相同的下载问题，但极大可能都是其他人在环境有登陆docker，可能导致镜像获取不到，一般<code>docker logout</code>就可以解决。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">you are load balancing between two (or more) registries, and you did not configure the shared secret properly<br>your are load balancing, and one of your registry is not configured properly to use the shared storage<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":1491,"excerpt":"","more":"<h1 id=\"docker-pull失败\"><a href=\"#docker-pull失败\" class=\"headerlink\" title=\"docker pull失败\"></a>docker pull失败</h1><p>最经在虚机中下载docker镜像，之前已经可以成功<code>docker pull</code>下来，今天都获取失败，均报如下错误，但有的又可以正常下载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22-alpine<br>Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: x509: certificate is valid for *.helpapp.io, not registry-1.docker.io<br>ubuntu@root:~/Desktop$ docker logout<br>Removing login credentials for https://index.docker.io/v1/<br>ubuntu@root:~/Desktop$ sudo docker pull rabbitmq:3.9.22<br>3.9.22: Pulling from library/rabbitmq<br>675920708c8b: Already exists <br>......<br>21d42f925919: Already exists <br>Digest: sha256:fa2a3e972323d5e3a426acec7159b460aa06b07a3732cebb4892fe65446048d6<br>Status: Downloaded newer image for rabbitmq:3.9.22<br>docker.io/library/rabbitmq:3.9.22<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"解决方法-玄学，下午下载又成功了，可能是网络问题\"><a href=\"#解决方法-玄学，下午下载又成功了，可能是网络问题\" class=\"headerlink\" title=\"解决方法(玄学，下午下载又成功了，可能是网络问题)\"></a>解决方法(玄学，下午下载又成功了，可能是网络问题)</h1><p>查看网上好多解决方法，表示国内把hub禁了（大概率不需要），不能下载，需要切换docker下载镜像的源配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop$ cat /etc/docker/daemon.json <br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],<br>    &quot;live-restore&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但配置文件之后，不能正常下载。</p>\n<ol>\n<li>换到其他云环境，依旧不能正常下载，报错为获取超时，后续尝试成功，可能是因为网络问题，建议如果下载失败，之后没准就成功了，玄学：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-arm-k8s-master01 ~]# docker pull rabbitmq:3.9.22-alpine<br>Error response from daemon: Head &quot;https://registry-1.docker.io/v2/library/rabbitmq/manifests/3.9.22-alpine&quot;: net/http: TLS handshake timeout<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>之前在云服务器上也有相同的下载问题，但极大可能都是其他人在环境有登陆docker，可能导致镜像获取不到，一般<code>docker logout</code>就可以解决。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">you are load balancing between two (or more) registries, and you did not configure the shared secret properly<br>your are load balancing, and one of your registry is not configured properly to use the shared storage<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"gitlab-14.0.5镜像编译安装","_content":"\n*注:其中CE和EE的安装包括镜像构建方式相同*\n\n## 直接安装gitlab\n\n```\ncurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | bash\napt-get install gitlab-ee=14.0.5-ee.0\n```\n\n## 下载gitlab\n\n```\nwget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb\n```\n\n获取gitlab源码\n\n```shell\n[root@ecs-5e66 gitlab]$ git clone https://gitlab.com/gitlab-org/omnibus-gitlab.git\nCloning into 'omnibus-gitlab'...\nremote: Enumerating objects: 148163, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (16/16), done.\nremote: Total 148163 (delta 8), reused 0 (delta 0), pack-reused 148147\nReceiving objects: 100% (148163/148163), 24.69 MiB | 6.92 MiB/s, done.\nResolving deltas: 100% (94777/94777), done.\n[root@ecs-5e66 gitlab]$ cd omnibus-gitlab/\n[root@ecs-5e66 omnibus-gitlab]$ git checkout 14.0.5+ee.0\nNote: checking out '14.0.5+ee.0'.\n....\n\nHEAD is now at fe10a61... Update VERSION to 14.0.5-ee\n\n```\n\n## 构建gitlab\n\n```shell\n#切换分支\n[root@ecs-5e66 omnibus-gitlab]$ cd docker\n[root@ecs-5e66 docker]$\n[root@ecs-5e66 docker]$ cat << EOF > RELEASE\n> RELEASE_PACKAGE=gitlab-ee\n> RELEASE_VERSION=14.0.5-ee\n> DOWNLOAD_URL=https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb\n#需要添加依赖libatomic1\n[root@ecs-5e66 docker]$ git diff\ndiff --git a/docker/Dockerfile b/docker/Dockerfile\nindex d07c1f4..602d412 100644\n--- a/docker/Dockerfile\n+++ b/docker/Dockerfile\n@@ -14,6 +14,7 @@ RUN apt-get update -q \\\n       openssh-server \\\n       tzdata \\\n       wget \\\n+      libatomic1 \\\n     && rm -rf /var/lib/apt/lists/*\n\n # Use BusyBox\n[root@ecs-5e66 docker]$ docker build -t gitlab/gitlab-ee:14.0.5 .\nSending build context to Docker daemon  28.67kB\nStep 1/18 : FROM ubuntu:20.04\n ---> d5ca7a445605\nStep 2/18 : MAINTAINER GitLab Inc. <support@gitlab.com>\n ---> Using cache\n ---> fbceb05a9c47\nStep 3/18 : SHELL [\"/bin/sh\", \"-c\"]\n ---> Using cache\n ---> acf3fce3b499\nStep 4/18 : ENV LANG=C.UTF-8\n......\nStep 18/18 : HEALTHCHECK --interval=60s --timeout=30s --retries=5 CMD /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10\n ---> Running in 5b6cac9a902a\nRemoving intermediate container 5b6cac9a902a\n ---> 9bb5a07d8303\nSuccessfully built 9bb5a07d8303\nSuccessfully tagged gitlab/gitlab-ee:14.0.5\n```","source":"_posts/docker/gitlab-14.0.5镜像编译安装.md","raw":"---\ntitle: gitlab-14.0.5镜像编译安装\ncategories: \n- docker\ntags:\n- gitlab\n---\n\n*注:其中CE和EE的安装包括镜像构建方式相同*\n\n## 直接安装gitlab\n\n```\ncurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | bash\napt-get install gitlab-ee=14.0.5-ee.0\n```\n\n## 下载gitlab\n\n```\nwget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb\n```\n\n获取gitlab源码\n\n```shell\n[root@ecs-5e66 gitlab]$ git clone https://gitlab.com/gitlab-org/omnibus-gitlab.git\nCloning into 'omnibus-gitlab'...\nremote: Enumerating objects: 148163, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (16/16), done.\nremote: Total 148163 (delta 8), reused 0 (delta 0), pack-reused 148147\nReceiving objects: 100% (148163/148163), 24.69 MiB | 6.92 MiB/s, done.\nResolving deltas: 100% (94777/94777), done.\n[root@ecs-5e66 gitlab]$ cd omnibus-gitlab/\n[root@ecs-5e66 omnibus-gitlab]$ git checkout 14.0.5+ee.0\nNote: checking out '14.0.5+ee.0'.\n....\n\nHEAD is now at fe10a61... Update VERSION to 14.0.5-ee\n\n```\n\n## 构建gitlab\n\n```shell\n#切换分支\n[root@ecs-5e66 omnibus-gitlab]$ cd docker\n[root@ecs-5e66 docker]$\n[root@ecs-5e66 docker]$ cat << EOF > RELEASE\n> RELEASE_PACKAGE=gitlab-ee\n> RELEASE_VERSION=14.0.5-ee\n> DOWNLOAD_URL=https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb\n#需要添加依赖libatomic1\n[root@ecs-5e66 docker]$ git diff\ndiff --git a/docker/Dockerfile b/docker/Dockerfile\nindex d07c1f4..602d412 100644\n--- a/docker/Dockerfile\n+++ b/docker/Dockerfile\n@@ -14,6 +14,7 @@ RUN apt-get update -q \\\n       openssh-server \\\n       tzdata \\\n       wget \\\n+      libatomic1 \\\n     && rm -rf /var/lib/apt/lists/*\n\n # Use BusyBox\n[root@ecs-5e66 docker]$ docker build -t gitlab/gitlab-ee:14.0.5 .\nSending build context to Docker daemon  28.67kB\nStep 1/18 : FROM ubuntu:20.04\n ---> d5ca7a445605\nStep 2/18 : MAINTAINER GitLab Inc. <support@gitlab.com>\n ---> Using cache\n ---> fbceb05a9c47\nStep 3/18 : SHELL [\"/bin/sh\", \"-c\"]\n ---> Using cache\n ---> acf3fce3b499\nStep 4/18 : ENV LANG=C.UTF-8\n......\nStep 18/18 : HEALTHCHECK --interval=60s --timeout=30s --retries=5 CMD /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10\n ---> Running in 5b6cac9a902a\nRemoving intermediate container 5b6cac9a902a\n ---> 9bb5a07d8303\nSuccessfully built 9bb5a07d8303\nSuccessfully tagged gitlab/gitlab-ee:14.0.5\n```","slug":"docker/gitlab-14.0.5镜像编译安装","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:24:33.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsez0007tpdo64uyel8f","content":"<p><em>注:其中CE和EE的安装包括镜像构建方式相同</em></p>\n<h2 id=\"直接安装gitlab\"><a href=\"#直接安装gitlab\" class=\"headerlink\" title=\"直接安装gitlab\"></a>直接安装gitlab</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">curl -s https:<span class=\"hljs-regexp\">//</span>packages.gitlab.com<span class=\"hljs-regexp\">/install/</span>repositories<span class=\"hljs-regexp\">/gitlab/gi</span>tlab-ee/script.deb.sh | bash<br>apt-get install gitlab-ee=<span class=\"hljs-number\">14.0</span>.<span class=\"hljs-number\">5</span>-ee.<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"下载gitlab\"><a href=\"#下载gitlab\" class=\"headerlink\" title=\"下载gitlab\"></a>下载gitlab</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget --content-disposition https:<span class=\"hljs-regexp\">//</span>packages.gitlab.com<span class=\"hljs-regexp\">/gitlab/gi</span>tlab-ee<span class=\"hljs-regexp\">/packages/u</span>buntu<span class=\"hljs-regexp\">/focal/gi</span>tlab-ee_14.<span class=\"hljs-number\">0.5</span>-ee.<span class=\"hljs-number\">0</span>_arm64.deb/download.deb<br></code></pre></td></tr></table></figure>\n\n<p>获取gitlab源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 gitlab]$ git clone https://gitlab.com/gitlab-org/omnibus-gitlab.git<br>Cloning into &#x27;omnibus-gitlab&#x27;...<br>remote: Enumerating objects: 148163, done.<br>remote: Counting objects: 100% (16/16), done.<br>remote: Compressing objects: 100% (16/16), done.<br>remote: Total 148163 (delta 8), reused 0 (delta 0), pack-reused 148147<br>Receiving objects: 100% (148163/148163), 24.69 MiB | 6.92 MiB/s, done.<br>Resolving deltas: 100% (94777/94777), done.<br>[root@ecs-5e66 gitlab]$ cd omnibus-gitlab/<br>[root@ecs-5e66 omnibus-gitlab]$ git checkout 14.0.5+ee.0<br>Note: checking out &#x27;14.0.5+ee.0&#x27;.<br>....<br><br>HEAD is now at fe10a61... Update VERSION to 14.0.5-ee<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"构建gitlab\"><a href=\"#构建gitlab\" class=\"headerlink\" title=\"构建gitlab\"></a>构建gitlab</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换分支</span><br>[root@ecs-5e66 omnibus-gitlab]$ cd docker<br>[root@ecs-5e66 docker]$<br>[root@ecs-5e66 docker]$ cat &lt;&lt; EOF &gt; RELEASE<br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">RELEASE_PACKAGE=gitlab-ee</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">RELEASE_VERSION=14.0.5-ee</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">DOWNLOAD_URL=https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">需要添加依赖libatomic1</span><br>[root@ecs-5e66 docker]$ git diff<br>diff --git a/docker/Dockerfile b/docker/Dockerfile<br>index d07c1f4..602d412 100644<br>--- a/docker/Dockerfile<br>+++ b/docker/Dockerfile<br>@@ -14,6 +14,7 @@ RUN apt-get update -q \\<br>       openssh-server \\<br>       tzdata \\<br>       wget \\<br>+      libatomic1 \\<br>     &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">Use BusyBox</span><br>[root@ecs-5e66 docker]$ docker build -t gitlab/gitlab-ee:14.0.5 .<br>Sending build context to Docker daemon  28.67kB<br>Step 1/18 : FROM ubuntu:20.04<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">d5ca7a445605</span><br>Step 2/18 : MAINTAINER GitLab Inc. &lt;support@gitlab.com&gt;<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Using cache</span><br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">fbceb05a9c47</span><br>Step 3/18 : SHELL [&quot;/bin/sh&quot;, &quot;-c&quot;]<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Using cache</span><br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">acf3fce3b499</span><br>Step 4/18 : ENV LANG=C.UTF-8<br>......<br>Step 18/18 : HEALTHCHECK --interval=60s --timeout=30s --retries=5 CMD /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Running <span class=\"hljs-keyword\">in</span> 5b6cac9a902a</span><br>Removing intermediate container 5b6cac9a902a<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">9bb5a07d8303</span><br>Successfully built 9bb5a07d8303<br>Successfully tagged gitlab/gitlab-ee:14.0.5<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":2193,"excerpt":"","more":"<p><em>注:其中CE和EE的安装包括镜像构建方式相同</em></p>\n<h2 id=\"直接安装gitlab\"><a href=\"#直接安装gitlab\" class=\"headerlink\" title=\"直接安装gitlab\"></a>直接安装gitlab</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">curl -s https:<span class=\"hljs-regexp\">//</span>packages.gitlab.com<span class=\"hljs-regexp\">/install/</span>repositories<span class=\"hljs-regexp\">/gitlab/gi</span>tlab-ee/script.deb.sh | bash<br>apt-get install gitlab-ee=<span class=\"hljs-number\">14.0</span>.<span class=\"hljs-number\">5</span>-ee.<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"下载gitlab\"><a href=\"#下载gitlab\" class=\"headerlink\" title=\"下载gitlab\"></a>下载gitlab</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget --content-disposition https:<span class=\"hljs-regexp\">//</span>packages.gitlab.com<span class=\"hljs-regexp\">/gitlab/gi</span>tlab-ee<span class=\"hljs-regexp\">/packages/u</span>buntu<span class=\"hljs-regexp\">/focal/gi</span>tlab-ee_14.<span class=\"hljs-number\">0.5</span>-ee.<span class=\"hljs-number\">0</span>_arm64.deb/download.deb<br></code></pre></td></tr></table></figure>\n\n<p>获取gitlab源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 gitlab]$ git clone https://gitlab.com/gitlab-org/omnibus-gitlab.git<br>Cloning into &#x27;omnibus-gitlab&#x27;...<br>remote: Enumerating objects: 148163, done.<br>remote: Counting objects: 100% (16/16), done.<br>remote: Compressing objects: 100% (16/16), done.<br>remote: Total 148163 (delta 8), reused 0 (delta 0), pack-reused 148147<br>Receiving objects: 100% (148163/148163), 24.69 MiB | 6.92 MiB/s, done.<br>Resolving deltas: 100% (94777/94777), done.<br>[root@ecs-5e66 gitlab]$ cd omnibus-gitlab/<br>[root@ecs-5e66 omnibus-gitlab]$ git checkout 14.0.5+ee.0<br>Note: checking out &#x27;14.0.5+ee.0&#x27;.<br>....<br><br>HEAD is now at fe10a61... Update VERSION to 14.0.5-ee<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"构建gitlab\"><a href=\"#构建gitlab\" class=\"headerlink\" title=\"构建gitlab\"></a>构建gitlab</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换分支</span><br>[root@ecs-5e66 omnibus-gitlab]$ cd docker<br>[root@ecs-5e66 docker]$<br>[root@ecs-5e66 docker]$ cat &lt;&lt; EOF &gt; RELEASE<br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">RELEASE_PACKAGE=gitlab-ee</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">RELEASE_VERSION=14.0.5-ee</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">DOWNLOAD_URL=https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_14.0.5-ee.0_arm64.deb/download.deb</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">需要添加依赖libatomic1</span><br>[root@ecs-5e66 docker]$ git diff<br>diff --git a/docker/Dockerfile b/docker/Dockerfile<br>index d07c1f4..602d412 100644<br>--- a/docker/Dockerfile<br>+++ b/docker/Dockerfile<br>@@ -14,6 +14,7 @@ RUN apt-get update -q \\<br>       openssh-server \\<br>       tzdata \\<br>       wget \\<br>+      libatomic1 \\<br>     &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"> # </span><span class=\"language-bash\">Use BusyBox</span><br>[root@ecs-5e66 docker]$ docker build -t gitlab/gitlab-ee:14.0.5 .<br>Sending build context to Docker daemon  28.67kB<br>Step 1/18 : FROM ubuntu:20.04<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">d5ca7a445605</span><br>Step 2/18 : MAINTAINER GitLab Inc. &lt;support@gitlab.com&gt;<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Using cache</span><br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">fbceb05a9c47</span><br>Step 3/18 : SHELL [&quot;/bin/sh&quot;, &quot;-c&quot;]<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Using cache</span><br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">acf3fce3b499</span><br>Step 4/18 : ENV LANG=C.UTF-8<br>......<br>Step 18/18 : HEALTHCHECK --interval=60s --timeout=30s --retries=5 CMD /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Running <span class=\"hljs-keyword\">in</span> 5b6cac9a902a</span><br>Removing intermediate container 5b6cac9a902a<br><span class=\"hljs-meta prompt_\"> ---&gt; </span><span class=\"language-bash\">9bb5a07d8303</span><br>Successfully built 9bb5a07d8303<br>Successfully tagged gitlab/gitlab-ee:14.0.5<br></code></pre></td></tr></table></figure>"},{"title":"redis 5.0.6 arm镜像构建","_content":"\n# 基础镜像 alpine\n\n源码获取\n\n```shell\nwget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/Dockerfile\nwget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/docker-entrypoint.sh\nchmod +x docker-entrypoint.sh\n```\n\n# 注意\n\n## 问题一\n\nredis 5.0.X版本中，尽管官方已经提供了arm版本的redis镜像，但是在arm centos 7.6系统中，会出现page size的问题，因此建议重新获取dockerfile构建对应的镜像。\n\n```shell\n[root@ecs-5e66 jdk]$ docker logs redist\n<jemalloc>: Unsupported system page size\n<jemalloc>: Unsupported system page size\n\n```\n\n## 问题二\n\n在构建过程中，由于redis的Dockerfile在不停的更新，包括对应的基础镜像，因此建议在构建过程中，采用对应的Dockerfile构建，而不仅仅是改变Dockerfile中的版本。","source":"_posts/docker/redis 5.0.6镜像构建.md","raw":"---\ntitle: redis 5.0.6 arm镜像构建\ncategories: \n- docker\ntags:\n- redis\n---\n\n# 基础镜像 alpine\n\n源码获取\n\n```shell\nwget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/Dockerfile\nwget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/docker-entrypoint.sh\nchmod +x docker-entrypoint.sh\n```\n\n# 注意\n\n## 问题一\n\nredis 5.0.X版本中，尽管官方已经提供了arm版本的redis镜像，但是在arm centos 7.6系统中，会出现page size的问题，因此建议重新获取dockerfile构建对应的镜像。\n\n```shell\n[root@ecs-5e66 jdk]$ docker logs redist\n<jemalloc>: Unsupported system page size\n<jemalloc>: Unsupported system page size\n\n```\n\n## 问题二\n\n在构建过程中，由于redis的Dockerfile在不停的更新，包括对应的基础镜像，因此建议在构建过程中，采用对应的Dockerfile构建，而不仅仅是改变Dockerfile中的版本。","slug":"docker/redis 5.0.6镜像构建","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-14T08:42:57.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf00008tpdo2r3qeeu6","content":"<h1 id=\"基础镜像-alpine\"><a href=\"#基础镜像-alpine\" class=\"headerlink\" title=\"基础镜像 alpine\"></a>基础镜像 alpine</h1><p>源码获取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/Dockerfile<br>wget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/docker-entrypoint.sh<br>chmod +x docker-entrypoint.sh<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><h2 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h2><p>redis 5.0.X版本中，尽管官方已经提供了arm版本的redis镜像，但是在arm centos 7.6系统中，会出现page size的问题，因此建议重新获取dockerfile构建对应的镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 jdk]$ docker logs redist<br>&lt;jemalloc&gt;: Unsupported system page size<br>&lt;jemalloc&gt;: Unsupported system page size<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h2><p>在构建过程中，由于redis的Dockerfile在不停的更新，包括对应的基础镜像，因此建议在构建过程中，采用对应的Dockerfile构建，而不仅仅是改变Dockerfile中的版本。</p>\n","site":{"data":{}},"wordcount":595,"excerpt":"","more":"<h1 id=\"基础镜像-alpine\"><a href=\"#基础镜像-alpine\" class=\"headerlink\" title=\"基础镜像 alpine\"></a>基础镜像 alpine</h1><p>源码获取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/Dockerfile<br>wget https://github.com/docker-library/redis/raw/6ec0ad5628df2404509f776e9c70fbecf5364c10/5.0/alpine/docker-entrypoint.sh<br>chmod +x docker-entrypoint.sh<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><h2 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h2><p>redis 5.0.X版本中，尽管官方已经提供了arm版本的redis镜像，但是在arm centos 7.6系统中，会出现page size的问题，因此建议重新获取dockerfile构建对应的镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 jdk]$ docker logs redist<br>&lt;jemalloc&gt;: Unsupported system page size<br>&lt;jemalloc&gt;: Unsupported system page size<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h2><p>在构建过程中，由于redis的Dockerfile在不停的更新，包括对应的基础镜像，因此建议在构建过程中，采用对应的Dockerfile构建，而不仅仅是改变Dockerfile中的版本。</p>\n"},{"title":"临时源搭建","_content":"\n# docker HTTP搭建临时源\n\n```shell\n[root@ecs-5e66 jdk-src]$ docker run -itd --name httptest -v $PWD:/usr/local/apache2/htdocs/ httpd:alpine\n6e4536e60d4971eb7cdeb11d22aeed64fa87d763c240373e3a82994de0358b74\n[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep Ip\n            \"IpcMode\": \"private\",\n[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep IP\n            \"LinkLocalIPv6Address\": \"\",\n            \"LinkLocalIPv6PrefixLen\": 0,\n            \"SecondaryIPAddresses\": null,\n            \"SecondaryIPv6Addresses\": null,\n            \"GlobalIPv6Address\": \"\",\n            \"GlobalIPv6PrefixLen\": 0,\n            \"IPAddress\": \"172.17.0.41\",\n            \"IPPrefixLen\": 16,\n            \"IPv6Gateway\": \"\",\n                    \"IPAMConfig\": null,\n                    \"IPAddress\": \"172.17.0.41\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n                    \"GlobalIPv6Address\": \"\",\n                    \"GlobalIPv6PrefixLen\": 0,\n\n\n```\n\n# 获取文件\n\n```shell\n[jiatong@ecs-5e66 jdk]$ wget 172.17.0.41:80/jdk-8u301-linux-aarch64.tar.gz\n--2022-09-14 14:52:17--  http://172.17.0.41/jdk-8u301-linux-aarch64.tar.gz\nConnecting to 172.17.0.41:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 74283479 (71M) [application/x-gzip]\nSaving to: ‘jdk-8u301-linux-aarch64.tar.gz’\n\n100%[====================================================================================================================================================================>] 74,283,479  --.-K/s   in 0.09s\n\n2022-09-14 14:52:17 (797 MB/s) - ‘jdk-8u301-linux-aarch64.tar.gz’ saved [74283479/74283479]\n```\n\n# pip临时源搭建\n\n```\npip临时源搭建\n[zhaiwb zhaiwb@~]$ docker run -itd --rm --name pipts_zhai -p 8083:8080 -v $PWD/PIP_ding:/data/ centos:7\n[root@1deeaa27aa36 /]# yum install -y python3-pip python3-devel\n[root@1deeaa27aa36 home]# pip3 install pypiserver\n[root@1deeaa27aa36 data]# pypi-server -p 8080 /data\n\npip3 install --trusted-host 122.9.34.193 -i http://122.9.34.193:8083 --no-cache-dir -r dlist.txt\n```\n\n","source":"_posts/docker/搭建httpd临时源.md","raw":"---\ntitle: 临时源搭建\ncategories: \n- docker\ntags:\n- httpd\n\n---\n\n# docker HTTP搭建临时源\n\n```shell\n[root@ecs-5e66 jdk-src]$ docker run -itd --name httptest -v $PWD:/usr/local/apache2/htdocs/ httpd:alpine\n6e4536e60d4971eb7cdeb11d22aeed64fa87d763c240373e3a82994de0358b74\n[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep Ip\n            \"IpcMode\": \"private\",\n[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep IP\n            \"LinkLocalIPv6Address\": \"\",\n            \"LinkLocalIPv6PrefixLen\": 0,\n            \"SecondaryIPAddresses\": null,\n            \"SecondaryIPv6Addresses\": null,\n            \"GlobalIPv6Address\": \"\",\n            \"GlobalIPv6PrefixLen\": 0,\n            \"IPAddress\": \"172.17.0.41\",\n            \"IPPrefixLen\": 16,\n            \"IPv6Gateway\": \"\",\n                    \"IPAMConfig\": null,\n                    \"IPAddress\": \"172.17.0.41\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n                    \"GlobalIPv6Address\": \"\",\n                    \"GlobalIPv6PrefixLen\": 0,\n\n\n```\n\n# 获取文件\n\n```shell\n[jiatong@ecs-5e66 jdk]$ wget 172.17.0.41:80/jdk-8u301-linux-aarch64.tar.gz\n--2022-09-14 14:52:17--  http://172.17.0.41/jdk-8u301-linux-aarch64.tar.gz\nConnecting to 172.17.0.41:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 74283479 (71M) [application/x-gzip]\nSaving to: ‘jdk-8u301-linux-aarch64.tar.gz’\n\n100%[====================================================================================================================================================================>] 74,283,479  --.-K/s   in 0.09s\n\n2022-09-14 14:52:17 (797 MB/s) - ‘jdk-8u301-linux-aarch64.tar.gz’ saved [74283479/74283479]\n```\n\n# pip临时源搭建\n\n```\npip临时源搭建\n[zhaiwb zhaiwb@~]$ docker run -itd --rm --name pipts_zhai -p 8083:8080 -v $PWD/PIP_ding:/data/ centos:7\n[root@1deeaa27aa36 /]# yum install -y python3-pip python3-devel\n[root@1deeaa27aa36 home]# pip3 install pypiserver\n[root@1deeaa27aa36 data]# pypi-server -p 8080 /data\n\npip3 install --trusted-host 122.9.34.193 -i http://122.9.34.193:8083 --no-cache-dir -r dlist.txt\n```\n\n","slug":"docker/搭建httpd临时源","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-22T10:56:47.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf2000ctpdo8lw7gpwk","content":"<h1 id=\"docker-HTTP搭建临时源\"><a href=\"#docker-HTTP搭建临时源\" class=\"headerlink\" title=\"docker HTTP搭建临时源\"></a>docker HTTP搭建临时源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 jdk-src]$ docker run -itd --name httptest -v $PWD:/usr/local/apache2/htdocs/ httpd:alpine<br>6e4536e60d4971eb7cdeb11d22aeed64fa87d763c240373e3a82994de0358b74<br>[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep Ip<br>            &quot;IpcMode&quot;: &quot;private&quot;,<br>[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep IP<br>            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,<br>            &quot;LinkLocalIPv6PrefixLen&quot;: 0,<br>            &quot;SecondaryIPAddresses&quot;: null,<br>            &quot;SecondaryIPv6Addresses&quot;: null,<br>            &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>            &quot;GlobalIPv6PrefixLen&quot;: 0,<br>            &quot;IPAddress&quot;: &quot;172.17.0.41&quot;,<br>            &quot;IPPrefixLen&quot;: 16,<br>            &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;IPAMConfig&quot;: null,<br>                    &quot;IPAddress&quot;: &quot;172.17.0.41&quot;,<br>                    &quot;IPPrefixLen&quot;: 16,<br>                    &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6PrefixLen&quot;: 0,<br><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"获取文件\"><a href=\"#获取文件\" class=\"headerlink\" title=\"获取文件\"></a>获取文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[jiatong@ecs-5e66 jdk]$ wget 172.17.0.41:80/jdk-8u301-linux-aarch64.tar.gz<br>--2022-09-14 14:52:17--  http://172.17.0.41/jdk-8u301-linux-aarch64.tar.gz<br>Connecting to 172.17.0.41:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 74283479 (71M) [application/x-gzip]<br>Saving to: ‘jdk-8u301-linux-aarch64.tar.gz’<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">100%</span><span class=\"language-bash\">[====================================================================================================================================================================&gt;] 74,283,479  --.-K/s   <span class=\"hljs-keyword\">in</span> 0.09s</span><br><br>2022-09-14 14:52:17 (797 MB/s) - ‘jdk-8u301-linux-aarch64.tar.gz’ saved [74283479/74283479]<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"pip临时源搭建\"><a href=\"#pip临时源搭建\" class=\"headerlink\" title=\"pip临时源搭建\"></a>pip临时源搭建</h1><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">pip临时源搭建<br>[zhaiwb zhaiwb@~]$ docker run -itd --rm --name pipts_zhai -p <span class=\"hljs-number\">8083</span>:<span class=\"hljs-number\">8080</span> -v $PWD/PIP_ding:<span class=\"hljs-regexp\">/data/</span> centos:<span class=\"hljs-number\">7</span><br>[root@1deeaa27aa36 /]<span class=\"hljs-comment\"># yum install -y python3-pip python3-devel</span><br>[root@1deeaa27aa36 home]<span class=\"hljs-comment\"># pip3 install pypiserver</span><br>[root@1deeaa27aa36 data]<span class=\"hljs-comment\"># pypi-server -p 8080 /data</span><br><br>pip3 install --trusted-host <span class=\"hljs-number\">122.9</span>.<span class=\"hljs-number\">34.193</span> -i http:<span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">122.9</span>.<span class=\"hljs-number\">34.193</span>:<span class=\"hljs-number\">8083</span> --<span class=\"hljs-keyword\">no</span>-cache-dir -r dlist.txt<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1863,"excerpt":"","more":"<h1 id=\"docker-HTTP搭建临时源\"><a href=\"#docker-HTTP搭建临时源\" class=\"headerlink\" title=\"docker HTTP搭建临时源\"></a>docker HTTP搭建临时源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 jdk-src]$ docker run -itd --name httptest -v $PWD:/usr/local/apache2/htdocs/ httpd:alpine<br>6e4536e60d4971eb7cdeb11d22aeed64fa87d763c240373e3a82994de0358b74<br>[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep Ip<br>            &quot;IpcMode&quot;: &quot;private&quot;,<br>[root@ecs-5e66 jdk-src]$ docker inspect httptest | grep IP<br>            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,<br>            &quot;LinkLocalIPv6PrefixLen&quot;: 0,<br>            &quot;SecondaryIPAddresses&quot;: null,<br>            &quot;SecondaryIPv6Addresses&quot;: null,<br>            &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>            &quot;GlobalIPv6PrefixLen&quot;: 0,<br>            &quot;IPAddress&quot;: &quot;172.17.0.41&quot;,<br>            &quot;IPPrefixLen&quot;: 16,<br>            &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;IPAMConfig&quot;: null,<br>                    &quot;IPAddress&quot;: &quot;172.17.0.41&quot;,<br>                    &quot;IPPrefixLen&quot;: 16,<br>                    &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6PrefixLen&quot;: 0,<br><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"获取文件\"><a href=\"#获取文件\" class=\"headerlink\" title=\"获取文件\"></a>获取文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[jiatong@ecs-5e66 jdk]$ wget 172.17.0.41:80/jdk-8u301-linux-aarch64.tar.gz<br>--2022-09-14 14:52:17--  http://172.17.0.41/jdk-8u301-linux-aarch64.tar.gz<br>Connecting to 172.17.0.41:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 74283479 (71M) [application/x-gzip]<br>Saving to: ‘jdk-8u301-linux-aarch64.tar.gz’<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">100%</span><span class=\"language-bash\">[====================================================================================================================================================================&gt;] 74,283,479  --.-K/s   <span class=\"hljs-keyword\">in</span> 0.09s</span><br><br>2022-09-14 14:52:17 (797 MB/s) - ‘jdk-8u301-linux-aarch64.tar.gz’ saved [74283479/74283479]<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"pip临时源搭建\"><a href=\"#pip临时源搭建\" class=\"headerlink\" title=\"pip临时源搭建\"></a>pip临时源搭建</h1><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">pip临时源搭建<br>[zhaiwb zhaiwb@~]$ docker run -itd --rm --name pipts_zhai -p <span class=\"hljs-number\">8083</span>:<span class=\"hljs-number\">8080</span> -v $PWD/PIP_ding:<span class=\"hljs-regexp\">/data/</span> centos:<span class=\"hljs-number\">7</span><br>[root@1deeaa27aa36 /]<span class=\"hljs-comment\"># yum install -y python3-pip python3-devel</span><br>[root@1deeaa27aa36 home]<span class=\"hljs-comment\"># pip3 install pypiserver</span><br>[root@1deeaa27aa36 data]<span class=\"hljs-comment\"># pypi-server -p 8080 /data</span><br><br>pip3 install --trusted-host <span class=\"hljs-number\">122.9</span>.<span class=\"hljs-number\">34.193</span> -i http:<span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">122.9</span>.<span class=\"hljs-number\">34.193</span>:<span class=\"hljs-number\">8083</span> --<span class=\"hljs-keyword\">no</span>-cache-dir -r dlist.txt<br></code></pre></td></tr></table></figure>\n\n"},{"title":"build-images自动化脚本学习（一）","_content":"\n\n\n# 镜像构建命令\n\n脚本 版本 操作系统\n\n```shell\nsh build-image.sh 4.5.0 alpine\n```\n\n# 镜像构建脚本样例（rocketmq）\n\n文件目录\n\n```shell\n[root@ecs-5e66 image-build]$ ll\ntotal 28\n-rw-r--r-- 1 root docker 1633 Sep 22 16:10 build-image-dashboard.sh\n-rwxr-xr-x 1 root docker 1734 Sep 22 16:10 build-image.sh\n-rw-r--r-- 1 root docker 3027 Sep 22 16:10 Dockerfile-alpine\n-rw-r--r-- 1 root docker 3102 Sep 22 17:47 Dockerfile-centos\n-rw-r--r-- 1 root docker 3861 Sep 22 16:10 Dockerfile-centos-dashboard\ndrwxr-xr-x 2 root docker 4096 Sep 22 16:10 scripts\n-rwxr-xr-x 1 root docker 1726 Sep 22 16:10 update.sh\n[root@ecs-5e66 image-build]$ cat build-image.sh\n#检查版本\ncheckVersion() {\n    echo \"Version = $1\"\n        echo $1 |grep -E \"^[0-9]+\\.[0-9]+\\.[0-9]+\" > /dev/null\n    if [ $? = 0 ]; then\n        return 1\n    fi\n\n        echo \"Version $1 illegal, it should be X.X.X format(e.g. 4.5.0), please check released versions in 'https://archive.apache.org/dist/rocketmq/'\"\n    exit -1\n}\n\nif [ $# -lt 2 ]; then\n    echo -e \"Usage: sh $0 Version BaseImage\"\n    exit -1\nfi\n\n#赋值命令行中的参数\nROCKETMQ_VERSION=$1\nBASE_IMAGE=$2\n\ncheckVersion $ROCKETMQ_VERSION\n\n# Build rocketmq 构建\ncase \"${BASE_IMAGE}\" in\n    alpine)\n        docker build --no-cache -f Dockerfile-alpine -t apache/rocketmq:${ROCKETMQ_VERSION}-alpine --build-arg version=${ROCKETMQ_VERSION} .\n    ;;\n    centos)\n        docker build --no-cache -f Dockerfile-centos -t apache/rocketmq:${ROCKETMQ_VERSION} --build-arg version=${ROCKETMQ_VERSION} .\n    ;;\n    *)\n        echo \"${BASE_IMAGE} is not supported, supported base images: centos, alpine\"\n        exit -1\n    ;;\nesac\n\n```","source":"_posts/docker/构建镜像脚本.md","raw":"---\ntitle: build-images自动化脚本学习（一）\ncategories: \n- docker\ntags:\n- docker\n---\n\n\n\n# 镜像构建命令\n\n脚本 版本 操作系统\n\n```shell\nsh build-image.sh 4.5.0 alpine\n```\n\n# 镜像构建脚本样例（rocketmq）\n\n文件目录\n\n```shell\n[root@ecs-5e66 image-build]$ ll\ntotal 28\n-rw-r--r-- 1 root docker 1633 Sep 22 16:10 build-image-dashboard.sh\n-rwxr-xr-x 1 root docker 1734 Sep 22 16:10 build-image.sh\n-rw-r--r-- 1 root docker 3027 Sep 22 16:10 Dockerfile-alpine\n-rw-r--r-- 1 root docker 3102 Sep 22 17:47 Dockerfile-centos\n-rw-r--r-- 1 root docker 3861 Sep 22 16:10 Dockerfile-centos-dashboard\ndrwxr-xr-x 2 root docker 4096 Sep 22 16:10 scripts\n-rwxr-xr-x 1 root docker 1726 Sep 22 16:10 update.sh\n[root@ecs-5e66 image-build]$ cat build-image.sh\n#检查版本\ncheckVersion() {\n    echo \"Version = $1\"\n        echo $1 |grep -E \"^[0-9]+\\.[0-9]+\\.[0-9]+\" > /dev/null\n    if [ $? = 0 ]; then\n        return 1\n    fi\n\n        echo \"Version $1 illegal, it should be X.X.X format(e.g. 4.5.0), please check released versions in 'https://archive.apache.org/dist/rocketmq/'\"\n    exit -1\n}\n\nif [ $# -lt 2 ]; then\n    echo -e \"Usage: sh $0 Version BaseImage\"\n    exit -1\nfi\n\n#赋值命令行中的参数\nROCKETMQ_VERSION=$1\nBASE_IMAGE=$2\n\ncheckVersion $ROCKETMQ_VERSION\n\n# Build rocketmq 构建\ncase \"${BASE_IMAGE}\" in\n    alpine)\n        docker build --no-cache -f Dockerfile-alpine -t apache/rocketmq:${ROCKETMQ_VERSION}-alpine --build-arg version=${ROCKETMQ_VERSION} .\n    ;;\n    centos)\n        docker build --no-cache -f Dockerfile-centos -t apache/rocketmq:${ROCKETMQ_VERSION} --build-arg version=${ROCKETMQ_VERSION} .\n    ;;\n    *)\n        echo \"${BASE_IMAGE} is not supported, supported base images: centos, alpine\"\n        exit -1\n    ;;\nesac\n\n```","slug":"docker/构建镜像脚本","published":1,"date":"2022-09-22T11:26:20.537Z","updated":"2022-09-22T11:27:43.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf3000dtpdoaxxwbukr","content":"<h1 id=\"镜像构建命令\"><a href=\"#镜像构建命令\" class=\"headerlink\" title=\"镜像构建命令\"></a>镜像构建命令</h1><p>脚本 版本 操作系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh build-image.sh 4.5.0 alpine<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"镜像构建脚本样例（rocketmq）\"><a href=\"#镜像构建脚本样例（rocketmq）\" class=\"headerlink\" title=\"镜像构建脚本样例（rocketmq）\"></a>镜像构建脚本样例（rocketmq）</h1><p>文件目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 image-build]$ ll<br>total 28<br>-rw-r--r-- 1 root docker 1633 Sep 22 16:10 build-image-dashboard.sh<br>-rwxr-xr-x 1 root docker 1734 Sep 22 16:10 build-image.sh<br>-rw-r--r-- 1 root docker 3027 Sep 22 16:10 Dockerfile-alpine<br>-rw-r--r-- 1 root docker 3102 Sep 22 17:47 Dockerfile-centos<br>-rw-r--r-- 1 root docker 3861 Sep 22 16:10 Dockerfile-centos-dashboard<br>drwxr-xr-x 2 root docker 4096 Sep 22 16:10 scripts<br>-rwxr-xr-x 1 root docker 1726 Sep 22 16:10 update.sh<br>[root@ecs-5e66 image-build]$ cat build-image.sh<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">检查版本</span><br>checkVersion() &#123;<br>    echo &quot;Version = $1&quot;<br>        echo $1 |grep -E &quot;^[0-9]+\\.[0-9]+\\.[0-9]+&quot; &gt; /dev/null<br>    if [ $? = 0 ]; then<br>        return 1<br>    fi<br><br>        echo &quot;Version $1 illegal, it should be X.X.X format(e.g. 4.5.0), please check released versions in &#x27;https://archive.apache.org/dist/rocketmq/&#x27;&quot;<br>    exit -1<br>&#125;<br><br>if [ $# -lt 2 ]; then<br>    echo -e &quot;Usage: sh $0 Version BaseImage&quot;<br>    exit -1<br>fi<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">赋值命令行中的参数</span><br>ROCKETMQ_VERSION=$1<br>BASE_IMAGE=$2<br><br>checkVersion $ROCKETMQ_VERSION<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Build rocketmq 构建</span><br>case &quot;$&#123;BASE_IMAGE&#125;&quot; in<br>    alpine)<br>        docker build --no-cache -f Dockerfile-alpine -t apache/rocketmq:$&#123;ROCKETMQ_VERSION&#125;-alpine --build-arg version=$&#123;ROCKETMQ_VERSION&#125; .<br>    ;;<br>    centos)<br>        docker build --no-cache -f Dockerfile-centos -t apache/rocketmq:$&#123;ROCKETMQ_VERSION&#125; --build-arg version=$&#123;ROCKETMQ_VERSION&#125; .<br>    ;;<br>    *)<br>        echo &quot;$&#123;BASE_IMAGE&#125; is not supported, supported base images: centos, alpine&quot;<br>        exit -1<br>    ;;<br>esac<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1476,"excerpt":"","more":"<h1 id=\"镜像构建命令\"><a href=\"#镜像构建命令\" class=\"headerlink\" title=\"镜像构建命令\"></a>镜像构建命令</h1><p>脚本 版本 操作系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh build-image.sh 4.5.0 alpine<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"镜像构建脚本样例（rocketmq）\"><a href=\"#镜像构建脚本样例（rocketmq）\" class=\"headerlink\" title=\"镜像构建脚本样例（rocketmq）\"></a>镜像构建脚本样例（rocketmq）</h1><p>文件目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@ecs-5e66 image-build]$ ll<br>total 28<br>-rw-r--r-- 1 root docker 1633 Sep 22 16:10 build-image-dashboard.sh<br>-rwxr-xr-x 1 root docker 1734 Sep 22 16:10 build-image.sh<br>-rw-r--r-- 1 root docker 3027 Sep 22 16:10 Dockerfile-alpine<br>-rw-r--r-- 1 root docker 3102 Sep 22 17:47 Dockerfile-centos<br>-rw-r--r-- 1 root docker 3861 Sep 22 16:10 Dockerfile-centos-dashboard<br>drwxr-xr-x 2 root docker 4096 Sep 22 16:10 scripts<br>-rwxr-xr-x 1 root docker 1726 Sep 22 16:10 update.sh<br>[root@ecs-5e66 image-build]$ cat build-image.sh<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">检查版本</span><br>checkVersion() &#123;<br>    echo &quot;Version = $1&quot;<br>        echo $1 |grep -E &quot;^[0-9]+\\.[0-9]+\\.[0-9]+&quot; &gt; /dev/null<br>    if [ $? = 0 ]; then<br>        return 1<br>    fi<br><br>        echo &quot;Version $1 illegal, it should be X.X.X format(e.g. 4.5.0), please check released versions in &#x27;https://archive.apache.org/dist/rocketmq/&#x27;&quot;<br>    exit -1<br>&#125;<br><br>if [ $# -lt 2 ]; then<br>    echo -e &quot;Usage: sh $0 Version BaseImage&quot;<br>    exit -1<br>fi<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">赋值命令行中的参数</span><br>ROCKETMQ_VERSION=$1<br>BASE_IMAGE=$2<br><br>checkVersion $ROCKETMQ_VERSION<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Build rocketmq 构建</span><br>case &quot;$&#123;BASE_IMAGE&#125;&quot; in<br>    alpine)<br>        docker build --no-cache -f Dockerfile-alpine -t apache/rocketmq:$&#123;ROCKETMQ_VERSION&#125;-alpine --build-arg version=$&#123;ROCKETMQ_VERSION&#125; .<br>    ;;<br>    centos)<br>        docker build --no-cache -f Dockerfile-centos -t apache/rocketmq:$&#123;ROCKETMQ_VERSION&#125; --build-arg version=$&#123;ROCKETMQ_VERSION&#125; .<br>    ;;<br>    *)<br>        echo &quot;$&#123;BASE_IMAGE&#125; is not supported, supported base images: centos, alpine&quot;<br>        exit -1<br>    ;;<br>esac<br><br></code></pre></td></tr></table></figure>"},{"title":"struct类型","_content":"\n## struct\n\n声明新的类型，作为其他类型的属性或者字段的容器。\n\n## 匿名字段\n\n```go\ntype Human struct {\n    name string\n    age int\n    weight int\n}\n\ntype Student struct {\n    Human  // 匿名字段，那么默认Student就包含了Human的所有字段\n    speciality string\n}\n```\n\n匿名字段可以实现字段的继承。\n\nstruct不仅仅能够将struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作","source":"_posts/go基本知识整理/struct类型.md","raw":"---\ntitle: struct类型\n---\n\n## struct\n\n声明新的类型，作为其他类型的属性或者字段的容器。\n\n## 匿名字段\n\n```go\ntype Human struct {\n    name string\n    age int\n    weight int\n}\n\ntype Student struct {\n    Human  // 匿名字段，那么默认Student就包含了Human的所有字段\n    speciality string\n}\n```\n\n匿名字段可以实现字段的继承。\n\nstruct不仅仅能够将struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作","slug":"go基本知识整理/struct类型","published":1,"date":"2022-09-15T01:21:15.656Z","updated":"2022-09-02T01:57:43.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf5000htpdo2tq4d503","content":"<h2 id=\"struct\"><a href=\"#struct\" class=\"headerlink\" title=\"struct\"></a>struct</h2><p>声明新的类型，作为其他类型的属性或者字段的容器。</p>\n<h2 id=\"匿名字段\"><a href=\"#匿名字段\" class=\"headerlink\" title=\"匿名字段\"></a>匿名字段</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;<br>    name <span class=\"hljs-type\">string</span><br>    age <span class=\"hljs-type\">int</span><br>    weight <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>    Human  <span class=\"hljs-comment\">// 匿名字段，那么默认Student就包含了Human的所有字段</span><br>    speciality <span class=\"hljs-type\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>匿名字段可以实现字段的继承。</p>\n<p>struct不仅仅能够将struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作</p>\n","site":{"data":{}},"wordcount":256,"excerpt":"","more":"<h2 id=\"struct\"><a href=\"#struct\" class=\"headerlink\" title=\"struct\"></a>struct</h2><p>声明新的类型，作为其他类型的属性或者字段的容器。</p>\n<h2 id=\"匿名字段\"><a href=\"#匿名字段\" class=\"headerlink\" title=\"匿名字段\"></a>匿名字段</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;<br>    name <span class=\"hljs-type\">string</span><br>    age <span class=\"hljs-type\">int</span><br>    weight <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>    Human  <span class=\"hljs-comment\">// 匿名字段，那么默认Student就包含了Human的所有字段</span><br>    speciality <span class=\"hljs-type\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>匿名字段可以实现字段的继承。</p>\n<p>struct不仅仅能够将struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作</p>\n"},{"title":"协程泄露","_content":"\n# 概念\n\ngoroutine创建后，长时间得不到释放，并且不断地创建新的goroutine协程（尽管协程轻量，但也造不住指数级递增），导致内存耗尽，程序崩溃。\n\n# 常见场景\n\n","source":"_posts/go基本知识整理/协程泄露.md","raw":"---\ntitle: 协程泄露\ntag: \n- goroutine\n- go\n---\n\n# 概念\n\ngoroutine创建后，长时间得不到释放，并且不断地创建新的goroutine协程（尽管协程轻量，但也造不住指数级递增），导致内存耗尽，程序崩溃。\n\n# 常见场景\n\n","slug":"go基本知识整理/协程泄露","published":1,"date":"2022-09-15T01:21:15.656Z","updated":"2022-09-08T03:24:51.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf6000ktpdo28dm6owy","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>goroutine创建后，长时间得不到释放，并且不断地创建新的goroutine协程（尽管协程轻量，但也造不住指数级递增），导致内存耗尽，程序崩溃。</p>\n<h1 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h1>","site":{"data":{}},"wordcount":80,"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>goroutine创建后，长时间得不到释放，并且不断地创建新的goroutine协程（尽管协程轻量，但也造不住指数级递增），导致内存耗尽，程序崩溃。</p>\n<h1 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h1>"},{"title":"日志收集实战","_content":"\n## 如何结束子goroutine\n\n1. 全局变量\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar wg sync.WaitGroup\n\n//设置全局变量\nvar exit bool\n\nfunc worker() {\n\tdefer wg.Done()\n\tfor {\n\t\tfmt.Println(\"...worker...\")\n\t\ttime.Sleep(time.Second)\n\t\tif exit {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc main() {\n\twg.Add(1)\n\tgo worker()\n\n\ttime.Sleep(time.Second * 5)\n\texit = true\n\twg.Wait()\n\tfmt.Println(\"...over...\")\n\n}\n```\n\n2. channel的方式实现\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar wg sync.WaitGroup\n\n//channel\n\nfunc worker(ch <-chan bool) {\n\tdefer wg.Done()\nLABEL:\n\tfor {\n\t\tselect {\n\t\tcase <-ch:\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t\tfmt.Println(\"...worker...\")\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\n\t}\n}\n\nfunc main() {\n\tvar exitChan = make(chan bool, 1)\n\twg.Add(1)\n\tgo worker(exitChan)\n\n\ttime.Sleep(time.Second * 5)\n\texitChan <- true\n\twg.Wait()\n\tfmt.Println(\"...over...\")\n\n}\n\n```\n\n3. **context**\n   - 控制多个goroutine退出\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n)\n\nvar wg sync.WaitGroup\n\n//channel\n\nfunc worker(ctx context.Context) {\n\tdefer wg.Done()\nLABEL:\n\tfor {\n\t\tfmt.Println(\"...worker...\")\n\t\ttime.Sleep(time.Second)\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t}\n\t}\n}\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\twg.Add(1)\n\tgo worker(ctx)\n\n\ttime.Sleep(time.Second * 5)\n\tcancel()\n\twg.Wait()\n\tfmt.Println(\"...over...\")\n\n}\n\n```\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc worker(ctx context.Context) {\nLABEL:\n\tfor {\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t\tfmt.Println(\"...worker1...\")\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n}\n\nfunc worker2(ctx context.Context) {\nLABEL:\n\tfor {\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t\tfmt.Println(\"...worker2...\")\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tgo worker(ctx)\n\tgo worker2(ctx)\n\ttime.Sleep(time.Second * 5)\n\tdefer cancel()\n\tgo worker2(ctx)\n\tfmt.Println(\"...over...\")\n\n}\n\n```\n\n\n\n### **new和make**\n\n都是初始化内存\n\nnew，多用来为基本数据类型初始化内存，返回指针\n\nmake：用来初始化（slice、map、chan）,返回对于类型","source":"_posts/go基本知识整理/日志收集.md","raw":"---\ntitle: 日志收集实战\n\n---\n\n## 如何结束子goroutine\n\n1. 全局变量\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar wg sync.WaitGroup\n\n//设置全局变量\nvar exit bool\n\nfunc worker() {\n\tdefer wg.Done()\n\tfor {\n\t\tfmt.Println(\"...worker...\")\n\t\ttime.Sleep(time.Second)\n\t\tif exit {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc main() {\n\twg.Add(1)\n\tgo worker()\n\n\ttime.Sleep(time.Second * 5)\n\texit = true\n\twg.Wait()\n\tfmt.Println(\"...over...\")\n\n}\n```\n\n2. channel的方式实现\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar wg sync.WaitGroup\n\n//channel\n\nfunc worker(ch <-chan bool) {\n\tdefer wg.Done()\nLABEL:\n\tfor {\n\t\tselect {\n\t\tcase <-ch:\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t\tfmt.Println(\"...worker...\")\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\n\t}\n}\n\nfunc main() {\n\tvar exitChan = make(chan bool, 1)\n\twg.Add(1)\n\tgo worker(exitChan)\n\n\ttime.Sleep(time.Second * 5)\n\texitChan <- true\n\twg.Wait()\n\tfmt.Println(\"...over...\")\n\n}\n\n```\n\n3. **context**\n   - 控制多个goroutine退出\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n)\n\nvar wg sync.WaitGroup\n\n//channel\n\nfunc worker(ctx context.Context) {\n\tdefer wg.Done()\nLABEL:\n\tfor {\n\t\tfmt.Println(\"...worker...\")\n\t\ttime.Sleep(time.Second)\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t}\n\t}\n}\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\twg.Add(1)\n\tgo worker(ctx)\n\n\ttime.Sleep(time.Second * 5)\n\tcancel()\n\twg.Wait()\n\tfmt.Println(\"...over...\")\n\n}\n\n```\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc worker(ctx context.Context) {\nLABEL:\n\tfor {\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t\tfmt.Println(\"...worker1...\")\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n}\n\nfunc worker2(ctx context.Context) {\nLABEL:\n\tfor {\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak LABEL\n\t\tdefault:\n\t\t\tfmt.Println(\"...worker2...\")\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tgo worker(ctx)\n\tgo worker2(ctx)\n\ttime.Sleep(time.Second * 5)\n\tdefer cancel()\n\tgo worker2(ctx)\n\tfmt.Println(\"...over...\")\n\n}\n\n```\n\n\n\n### **new和make**\n\n都是初始化内存\n\nnew，多用来为基本数据类型初始化内存，返回指针\n\nmake：用来初始化（slice、map、chan）,返回对于类型","slug":"go基本知识整理/日志收集","published":1,"date":"2022-09-15T01:21:15.656Z","updated":"2022-09-08T02:37:15.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf7000otpdo41k19ymu","content":"<h2 id=\"如何结束子goroutine\"><a href=\"#如何结束子goroutine\" class=\"headerlink\" title=\"如何结束子goroutine\"></a>如何结束子goroutine</h2><ol>\n<li>全局变量</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t_ <span class=\"hljs-string\">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br><br><span class=\"hljs-comment\">//设置全局变量</span><br><span class=\"hljs-keyword\">var</span> exit <span class=\"hljs-type\">bool</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> wg.Done()<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker...&quot;</span>)<br>\t\ttime.Sleep(time.Second)<br>\t\t<span class=\"hljs-keyword\">if</span> exit &#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\twg.Add(<span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker()<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\texit = <span class=\"hljs-literal\">true</span><br>\twg.Wait()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>channel的方式实现</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t_ <span class=\"hljs-string\">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br><br><span class=\"hljs-comment\">//channel</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(ch &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">bool</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> wg.Done()<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ch:<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> exitChan = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">bool</span>, <span class=\"hljs-number\">1</span>)<br>\twg.Add(<span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker(exitChan)<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\texitChan &lt;- <span class=\"hljs-literal\">true</span><br>\twg.Wait()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>context</strong><ul>\n<li>控制多个goroutine退出</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>)<br><br><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br><br><span class=\"hljs-comment\">//channel</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> wg.Done()<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker...&quot;</span>)<br>\t\ttime.Sleep(time.Second)<br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx, cancel := context.WithCancel(context.Background())<br>\twg.Add(<span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker(ctx)<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\tcancel()<br>\twg.Wait()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker1...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker2</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker2...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker(ctx)<br>\t<span class=\"hljs-keyword\">go</span> worker2(ctx)<br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\t<span class=\"hljs-keyword\">go</span> worker2(ctx)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"new和make\"><a href=\"#new和make\" class=\"headerlink\" title=\"new和make\"></a><strong>new和make</strong></h3><p>都是初始化内存</p>\n<p>new，多用来为基本数据类型初始化内存，返回指针</p>\n<p>make：用来初始化（slice、map、chan）,返回对于类型</p>\n","site":{"data":{}},"wordcount":2430,"excerpt":"","more":"<h2 id=\"如何结束子goroutine\"><a href=\"#如何结束子goroutine\" class=\"headerlink\" title=\"如何结束子goroutine\"></a>如何结束子goroutine</h2><ol>\n<li>全局变量</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t_ <span class=\"hljs-string\">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br><br><span class=\"hljs-comment\">//设置全局变量</span><br><span class=\"hljs-keyword\">var</span> exit <span class=\"hljs-type\">bool</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> wg.Done()<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker...&quot;</span>)<br>\t\ttime.Sleep(time.Second)<br>\t\t<span class=\"hljs-keyword\">if</span> exit &#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\twg.Add(<span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker()<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\texit = <span class=\"hljs-literal\">true</span><br>\twg.Wait()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>channel的方式实现</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t_ <span class=\"hljs-string\">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br><br><span class=\"hljs-comment\">//channel</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(ch &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">bool</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> wg.Done()<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ch:<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> exitChan = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">bool</span>, <span class=\"hljs-number\">1</span>)<br>\twg.Add(<span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker(exitChan)<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\texitChan &lt;- <span class=\"hljs-literal\">true</span><br>\twg.Wait()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>context</strong><ul>\n<li>控制多个goroutine退出</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>)<br><br><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br><br><span class=\"hljs-comment\">//channel</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> wg.Done()<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker...&quot;</span>)<br>\t\ttime.Sleep(time.Second)<br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx, cancel := context.WithCancel(context.Background())<br>\twg.Add(<span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker(ctx)<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\tcancel()<br>\twg.Wait()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;sync&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker1...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker2</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...worker2...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">go</span> worker(ctx)<br>\t<span class=\"hljs-keyword\">go</span> worker2(ctx)<br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\t<span class=\"hljs-keyword\">go</span> worker2(ctx)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"new和make\"><a href=\"#new和make\" class=\"headerlink\" title=\"new和make\"></a><strong>new和make</strong></h3><p>都是初始化内存</p>\n<p>new，多用来为基本数据类型初始化内存，返回指针</p>\n<p>make：用来初始化（slice、map、chan）,返回对于类型</p>\n"},{"title":"hexo初始化基础配置文件解析","date":"2022-08-24T16:00:00.000Z","_content":"\n## _config.yml\n\n网站的配置信息，可以配置大部分参数。\n\n### 站点设置\n\n| 参数        | 描述       |\n| ----------- | ---------- |\n| title       | 网站标题   |\n| subtitle    | 网站副标题 |\n| description | 网站描述   |\n| keywords    | 网站关键词 |\n| author      | 作者名称   |\n| language    | 使用语言   |\n| timezone    | 网站时区   |\n\n### 网址设置\n\n```json\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://example.com\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: ''\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Metadata elements\n## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\nmeta_generator: true\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## updated_option supports 'mtime', 'date', 'empty'\nupdated_option: 'mtime'\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:\nexclude:\nignore:\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: ''\n\n```\n\n\n\n## package.json\n\n应用程序信息\n\n## scaffolds\n\n模板文件夹，当新建文章的时候会根据该模板建立文件。默认是post模板(可以自己添加模板内容)\n\n```shell\nubuntu@root:~/Desktop/Blog$ ls scaffolds/\ndraft.md  page.md  post.md\nubuntu@root:~/Desktop/Blog$ cat scaffolds/post.md \n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n\n```\n\n## source\n\n资源文件夹是用来存放用户资源的地方。\n\nHTML和MarkDown文件会被解析并放到public文件夹，而其他文件会被拷贝过去\n\n## themes\n\n主题文件夹。根据该主题来生成静态页面。\n\n","source":"_posts/hexo/基础配置文件解析.md","raw":"---\ntitle: hexo初始化基础配置文件解析\ndate: 2022/08/25\ncategories: \n- hexo\n---\n\n## _config.yml\n\n网站的配置信息，可以配置大部分参数。\n\n### 站点设置\n\n| 参数        | 描述       |\n| ----------- | ---------- |\n| title       | 网站标题   |\n| subtitle    | 网站副标题 |\n| description | 网站描述   |\n| keywords    | 网站关键词 |\n| author      | 作者名称   |\n| language    | 使用语言   |\n| timezone    | 网站时区   |\n\n### 网址设置\n\n```json\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://example.com\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: ''\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Metadata elements\n## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\nmeta_generator: true\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## updated_option supports 'mtime', 'date', 'empty'\nupdated_option: 'mtime'\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:\nexclude:\nignore:\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: ''\n\n```\n\n\n\n## package.json\n\n应用程序信息\n\n## scaffolds\n\n模板文件夹，当新建文章的时候会根据该模板建立文件。默认是post模板(可以自己添加模板内容)\n\n```shell\nubuntu@root:~/Desktop/Blog$ ls scaffolds/\ndraft.md  page.md  post.md\nubuntu@root:~/Desktop/Blog$ cat scaffolds/post.md \n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n\n```\n\n## source\n\n资源文件夹是用来存放用户资源的地方。\n\nHTML和MarkDown文件会被解析并放到public文件夹，而其他文件会被拷贝过去\n\n## themes\n\n主题文件夹。根据该主题来生成静态页面。\n\n","slug":"hexo/基础配置文件解析","published":1,"updated":"2022-09-08T08:27:04.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf8000rtpdo6y3q1aas","content":"<h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><p>网站的配置信息，可以配置大部分参数。</p>\n<h3 id=\"站点设置\"><a href=\"#站点设置\" class=\"headerlink\" title=\"站点设置\"></a>站点设置</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>网站关键词</td>\n</tr>\n<tr>\n<td>author</td>\n<td>作者名称</td>\n</tr>\n<tr>\n<td>language</td>\n<td>使用语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区</td>\n</tr>\n</tbody></table>\n<h3 id=\"网址设置\"><a href=\"#网址设置\" class=\"headerlink\" title=\"网址设置\"></a>网址设置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"># Hexo Configuration<br>## Docs<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/docs/configuration.html</span><br>## Source<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//github.com/hexojs/hexo/</span><br><br><br><br># URL<br>## Set your site url here. For example<span class=\"hljs-punctuation\">,</span> if you use GitHub Page<span class=\"hljs-punctuation\">,</span> set url as &#x27;https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//username.github.io/project&#x27;</span><br>url<span class=\"hljs-punctuation\">:</span> http<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//example.com</span><br>permalink<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">:</span>year/<span class=\"hljs-punctuation\">:</span>month/<span class=\"hljs-punctuation\">:</span>day/<span class=\"hljs-punctuation\">:</span>title/<br>permalink_defaults<span class=\"hljs-punctuation\">:</span><br>pretty_urls<span class=\"hljs-punctuation\">:</span><br>  trailing_index<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> # Set to <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span> to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> # Set to <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span> to remove trailing &#x27;.html&#x27; from permalinks<br><br># Directory<br>source_dir<span class=\"hljs-punctuation\">:</span> source<br>public_dir<span class=\"hljs-punctuation\">:</span> public<br>tag_dir<span class=\"hljs-punctuation\">:</span> tags<br>archive_dir<span class=\"hljs-punctuation\">:</span> archives<br>category_dir<span class=\"hljs-punctuation\">:</span> categories<br>code_dir<span class=\"hljs-punctuation\">:</span> downloads/code<br>i18n_dir<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">:</span>lang<br>skip_render<span class=\"hljs-punctuation\">:</span><br><br># Writing<br>new_post_name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">:</span>title.md # File name of new posts<br>default_layout<span class=\"hljs-punctuation\">:</span> post<br>titlecase<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span> # Transform title into titlecase<br>external_link<span class=\"hljs-punctuation\">:</span><br>  enable<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> # Open external links in new tab<br>  field<span class=\"hljs-punctuation\">:</span> site # Apply to the whole site<br>  exclude<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br>filename_case<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><br>render_drafts<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>post_asset_folder<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>relative_link<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>future<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>highlight<span class=\"hljs-punctuation\">:</span><br>  enable<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  line_number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  auto_detect<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>  tab_replace<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br>  wrap<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  hljs<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>prismjs<span class=\"hljs-punctuation\">:</span><br>  enable<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>  preprocess<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  line_number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  tab_replace<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br><br># Home page setting<br># path<span class=\"hljs-punctuation\">:</span> Root path for your blogs index page. (default = &#x27;&#x27;)<br># per_page<span class=\"hljs-punctuation\">:</span> Posts displayed per page. (<span class=\"hljs-number\">0</span> = disable pagination)<br># order_by<span class=\"hljs-punctuation\">:</span> Posts order. (Order by date descending by default)<br>index_generator<span class=\"hljs-punctuation\">:</span><br>  path<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br>  per_page<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><br>  order_by<span class=\"hljs-punctuation\">:</span> -date<br><br># Category &amp; Tag<br>default_category<span class=\"hljs-punctuation\">:</span> uncategorized<br>category_map<span class=\"hljs-punctuation\">:</span><br>tag_map<span class=\"hljs-punctuation\">:</span><br><br># Metadata elements<br>## https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br>meta_generator<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br><br># Date / Time format<br>## Hexo uses Moment.js to parse and display date<br>## You can customize the date format as defined in<br>## http<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//momentjs.com/docs/#/displaying/format/</span><br>date_format<span class=\"hljs-punctuation\">:</span> YYYY-MM-DD<br>time_format<span class=\"hljs-punctuation\">:</span> HH<span class=\"hljs-punctuation\">:</span>mm<span class=\"hljs-punctuation\">:</span>ss<br>## updated_option supports &#x27;mtime&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;date&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;empty&#x27;<br>updated_option<span class=\"hljs-punctuation\">:</span> &#x27;mtime&#x27;<br><br># Pagination<br>## Set per_page to <span class=\"hljs-number\">0</span> to disable pagination<br>per_page<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><br>pagination_dir<span class=\"hljs-punctuation\">:</span> page<br><br># Include / Exclude file(s)<br>## include<span class=\"hljs-punctuation\">:</span>/exclude<span class=\"hljs-punctuation\">:</span> options only apply to the &#x27;source/&#x27; folder<br>include<span class=\"hljs-punctuation\">:</span><br>exclude<span class=\"hljs-punctuation\">:</span><br>ignore<span class=\"hljs-punctuation\">:</span><br><br># Extensions<br>## Plugins<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/plugins/</span><br>## Themes<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/themes/</span><br>theme<span class=\"hljs-punctuation\">:</span> landscape<br><br># Deployment<br>## Docs<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/docs/one-command-deployment</span><br>deploy<span class=\"hljs-punctuation\">:</span><br>  type<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><p>应用程序信息</p>\n<h2 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h2><p>模板文件夹，当新建文章的时候会根据该模板建立文件。默认是post模板(可以自己添加模板内容)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Blog$ ls scaffolds/<br>draft.md  page.md  post.md<br>ubuntu@root:~/Desktop/Blog$ cat scaffolds/post.md <br>---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags:<br>---<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h2><p>资源文件夹是用来存放用户资源的地方。</p>\n<p>HTML和MarkDown文件会被解析并放到public文件夹，而其他文件会被拷贝过去</p>\n<h2 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a>themes</h2><p>主题文件夹。根据该主题来生成静态页面。</p>\n","site":{"data":{}},"wordcount":2818,"excerpt":"","more":"<h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><p>网站的配置信息，可以配置大部分参数。</p>\n<h3 id=\"站点设置\"><a href=\"#站点设置\" class=\"headerlink\" title=\"站点设置\"></a>站点设置</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>网站关键词</td>\n</tr>\n<tr>\n<td>author</td>\n<td>作者名称</td>\n</tr>\n<tr>\n<td>language</td>\n<td>使用语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区</td>\n</tr>\n</tbody></table>\n<h3 id=\"网址设置\"><a href=\"#网址设置\" class=\"headerlink\" title=\"网址设置\"></a>网址设置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"># Hexo Configuration<br>## Docs<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/docs/configuration.html</span><br>## Source<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//github.com/hexojs/hexo/</span><br><br><br><br># URL<br>## Set your site url here. For example<span class=\"hljs-punctuation\">,</span> if you use GitHub Page<span class=\"hljs-punctuation\">,</span> set url as &#x27;https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//username.github.io/project&#x27;</span><br>url<span class=\"hljs-punctuation\">:</span> http<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//example.com</span><br>permalink<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">:</span>year/<span class=\"hljs-punctuation\">:</span>month/<span class=\"hljs-punctuation\">:</span>day/<span class=\"hljs-punctuation\">:</span>title/<br>permalink_defaults<span class=\"hljs-punctuation\">:</span><br>pretty_urls<span class=\"hljs-punctuation\">:</span><br>  trailing_index<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> # Set to <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span> to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> # Set to <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span> to remove trailing &#x27;.html&#x27; from permalinks<br><br># Directory<br>source_dir<span class=\"hljs-punctuation\">:</span> source<br>public_dir<span class=\"hljs-punctuation\">:</span> public<br>tag_dir<span class=\"hljs-punctuation\">:</span> tags<br>archive_dir<span class=\"hljs-punctuation\">:</span> archives<br>category_dir<span class=\"hljs-punctuation\">:</span> categories<br>code_dir<span class=\"hljs-punctuation\">:</span> downloads/code<br>i18n_dir<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">:</span>lang<br>skip_render<span class=\"hljs-punctuation\">:</span><br><br># Writing<br>new_post_name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">:</span>title.md # File name of new posts<br>default_layout<span class=\"hljs-punctuation\">:</span> post<br>titlecase<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span> # Transform title into titlecase<br>external_link<span class=\"hljs-punctuation\">:</span><br>  enable<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> # Open external links in new tab<br>  field<span class=\"hljs-punctuation\">:</span> site # Apply to the whole site<br>  exclude<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br>filename_case<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><br>render_drafts<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>post_asset_folder<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>relative_link<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>future<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>highlight<span class=\"hljs-punctuation\">:</span><br>  enable<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  line_number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  auto_detect<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>  tab_replace<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br>  wrap<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  hljs<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>prismjs<span class=\"hljs-punctuation\">:</span><br>  enable<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>  preprocess<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  line_number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  tab_replace<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br><br># Home page setting<br># path<span class=\"hljs-punctuation\">:</span> Root path for your blogs index page. (default = &#x27;&#x27;)<br># per_page<span class=\"hljs-punctuation\">:</span> Posts displayed per page. (<span class=\"hljs-number\">0</span> = disable pagination)<br># order_by<span class=\"hljs-punctuation\">:</span> Posts order. (Order by date descending by default)<br>index_generator<span class=\"hljs-punctuation\">:</span><br>  path<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br>  per_page<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><br>  order_by<span class=\"hljs-punctuation\">:</span> -date<br><br># Category &amp; Tag<br>default_category<span class=\"hljs-punctuation\">:</span> uncategorized<br>category_map<span class=\"hljs-punctuation\">:</span><br>tag_map<span class=\"hljs-punctuation\">:</span><br><br># Metadata elements<br>## https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br>meta_generator<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br><br># Date / Time format<br>## Hexo uses Moment.js to parse and display date<br>## You can customize the date format as defined in<br>## http<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//momentjs.com/docs/#/displaying/format/</span><br>date_format<span class=\"hljs-punctuation\">:</span> YYYY-MM-DD<br>time_format<span class=\"hljs-punctuation\">:</span> HH<span class=\"hljs-punctuation\">:</span>mm<span class=\"hljs-punctuation\">:</span>ss<br>## updated_option supports &#x27;mtime&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;date&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;empty&#x27;<br>updated_option<span class=\"hljs-punctuation\">:</span> &#x27;mtime&#x27;<br><br># Pagination<br>## Set per_page to <span class=\"hljs-number\">0</span> to disable pagination<br>per_page<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><br>pagination_dir<span class=\"hljs-punctuation\">:</span> page<br><br># Include / Exclude file(s)<br>## include<span class=\"hljs-punctuation\">:</span>/exclude<span class=\"hljs-punctuation\">:</span> options only apply to the &#x27;source/&#x27; folder<br>include<span class=\"hljs-punctuation\">:</span><br>exclude<span class=\"hljs-punctuation\">:</span><br>ignore<span class=\"hljs-punctuation\">:</span><br><br># Extensions<br>## Plugins<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/plugins/</span><br>## Themes<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/themes/</span><br>theme<span class=\"hljs-punctuation\">:</span> landscape<br><br># Deployment<br>## Docs<span class=\"hljs-punctuation\">:</span> https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//hexo.io/docs/one-command-deployment</span><br>deploy<span class=\"hljs-punctuation\">:</span><br>  type<span class=\"hljs-punctuation\">:</span> &#x27;&#x27;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><p>应用程序信息</p>\n<h2 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h2><p>模板文件夹，当新建文章的时候会根据该模板建立文件。默认是post模板(可以自己添加模板内容)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Blog$ ls scaffolds/<br>draft.md  page.md  post.md<br>ubuntu@root:~/Desktop/Blog$ cat scaffolds/post.md <br>---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags:<br>---<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h2><p>资源文件夹是用来存放用户资源的地方。</p>\n<p>HTML和MarkDown文件会被解析并放到public文件夹，而其他文件会被拷贝过去</p>\n<h2 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a>themes</h2><p>主题文件夹。根据该主题来生成静态页面。</p>\n"},{"title":"hexo安装及主题配置","_content":"\n## 概念\n\n[Hexo](https://hexo.io/zh-cn/docs/) 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 安装\n\n安装nodejs(需要注意nodejs的版本要求)：[ubuntu安装nodejs](../deploy/ubuntu安装nodejs)\n\n```shell\nnpm install -g hexo-cli\n```\n\n## 验证\n\n```shell\nubuntu@root:~/Desktop/Blog$ hexo -v\nINFO  Validating config\nhexo: 5.4.2\nhexo-cli: 4.3.0\nos: linux 5.15.0-46-generic Ubuntu 20.04.4 LTS (Focal Fossa)\nnode: 14.20.0\nv8: 8.4.371.23-node.87\nuv: 1.42.0\nzlib: 1.2.11\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 83\nnghttp2: 1.42.0\nnapi: 8\nllhttp: 2.1.5\nopenssl: 1.1.1q\ncldr: 40.0\nicu: 70.1\ntz: 2021a3\nunicode: 14.0\n```\n\n## 建站\n\n### init\n\n初始化\n\n```shell\nmkdir Blog\ncd Blog\n#也可不写文件夹，默认是在本目录层级构建\nhexo init <folder>\n```\n\n基本目录层级\n\n```shell\nubuntu@root:~/Desktop/Blog$ tree -L 1\n.\n├── _config.landscape.yml\n├── _config.yml\n├── node_modules\n├── package.json\n├── package-lock.json\n├── scaffolds\n├── source\n└── themes\n\n4 directories, 4 files\n```\n\n### new\n\n\n\n### hexo clean\n\n### hexo g\n\n### hexo s\n\n### hexo d\n\n## fluid 主题配置\n\n```\nnpm install --save hexo-theme-fluid\n```\n\n在博客目录下创建 `_config.fluid.yml` 文件，将主题的 [_config.yml](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)[ ](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)[ (opens new window)](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml) 全部配置（或部分配置）复制过去。\n\n根据自己的需要进行主题配置，[fluid主题配置](https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97)\n\n## 图片插件设置\n\n```shell\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n```\n\n在博客目录`_config.yml`文件，\n\n## 基础配置文件\n\n```shell\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Jane's Blog\nsubtitle: ''\ndescription: ''\nkeywords:\nauthor: 彤～\nlanguage: en\ntimezone: ''\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://jane-lucky.github.io\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: ''\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Metadata elements\n## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\nmeta_generator: true\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## updated_option supports 'mtime', 'date', 'empty'\nupdated_option: 'mtime'\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:\nexclude:\nignore:\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n##theme: landscape\ntheme: fluid\n#language: zh-CN\n\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repository: https://oauth2:token@github.com/Jane-lucky/Jane-lucky.github.io.git\n  branch: deploy-dev\n```\n\n","source":"_posts/hexo/概念及安装.md","raw":"---\ntitle: hexo安装及主题配置\ncategories: \n- hexo\ntag:\n- hexo\n- fluid\n- 安装\n---\n\n## 概念\n\n[Hexo](https://hexo.io/zh-cn/docs/) 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 安装\n\n安装nodejs(需要注意nodejs的版本要求)：[ubuntu安装nodejs](../deploy/ubuntu安装nodejs)\n\n```shell\nnpm install -g hexo-cli\n```\n\n## 验证\n\n```shell\nubuntu@root:~/Desktop/Blog$ hexo -v\nINFO  Validating config\nhexo: 5.4.2\nhexo-cli: 4.3.0\nos: linux 5.15.0-46-generic Ubuntu 20.04.4 LTS (Focal Fossa)\nnode: 14.20.0\nv8: 8.4.371.23-node.87\nuv: 1.42.0\nzlib: 1.2.11\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 83\nnghttp2: 1.42.0\nnapi: 8\nllhttp: 2.1.5\nopenssl: 1.1.1q\ncldr: 40.0\nicu: 70.1\ntz: 2021a3\nunicode: 14.0\n```\n\n## 建站\n\n### init\n\n初始化\n\n```shell\nmkdir Blog\ncd Blog\n#也可不写文件夹，默认是在本目录层级构建\nhexo init <folder>\n```\n\n基本目录层级\n\n```shell\nubuntu@root:~/Desktop/Blog$ tree -L 1\n.\n├── _config.landscape.yml\n├── _config.yml\n├── node_modules\n├── package.json\n├── package-lock.json\n├── scaffolds\n├── source\n└── themes\n\n4 directories, 4 files\n```\n\n### new\n\n\n\n### hexo clean\n\n### hexo g\n\n### hexo s\n\n### hexo d\n\n## fluid 主题配置\n\n```\nnpm install --save hexo-theme-fluid\n```\n\n在博客目录下创建 `_config.fluid.yml` 文件，将主题的 [_config.yml](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)[ ](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)[ (opens new window)](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml) 全部配置（或部分配置）复制过去。\n\n根据自己的需要进行主题配置，[fluid主题配置](https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97)\n\n## 图片插件设置\n\n```shell\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n```\n\n在博客目录`_config.yml`文件，\n\n## 基础配置文件\n\n```shell\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Jane's Blog\nsubtitle: ''\ndescription: ''\nkeywords:\nauthor: 彤～\nlanguage: en\ntimezone: ''\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://jane-lucky.github.io\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: ''\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Metadata elements\n## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\nmeta_generator: true\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## updated_option supports 'mtime', 'date', 'empty'\nupdated_option: 'mtime'\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:\nexclude:\nignore:\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n##theme: landscape\ntheme: fluid\n#language: zh-CN\n\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repository: https://oauth2:token@github.com/Jane-lucky/Jane-lucky.github.io.git\n  branch: deploy-dev\n```\n\n","slug":"hexo/概念及安装","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-22T02:25:07.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsf9000utpdo23sx6iwo","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><a href=\"https://hexo.io/zh-cn/docs/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装nodejs(需要注意nodejs的版本要求)：<a href=\"../deploy/ubuntu%E5%AE%89%E8%A3%85nodejs\">ubuntu安装nodejs</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Blog$ hexo -v<br>INFO  Validating config<br>hexo: 5.4.2<br>hexo-cli: 4.3.0<br>os: linux 5.15.0-46-generic Ubuntu 20.04.4 LTS (Focal Fossa)<br>node: 14.20.0<br>v8: 8.4.371.23-node.87<br>uv: 1.42.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 83<br>nghttp2: 1.42.0<br>napi: 8<br>llhttp: 2.1.5<br>openssl: 1.1.1q<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir Blog<br>cd Blog<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">也可不写文件夹，默认是在本目录层级构建</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure>\n\n<p>基本目录层级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Blog$ tree -L 1<br>.<br>├── _config.landscape.yml<br>├── _config.yml<br>├── node_modules<br>├── package.json<br>├── package-lock.json<br>├── scaffolds<br>├── source<br>└── themes<br><br>4 directories, 4 files<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><h3 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h3><h3 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h3><h3 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h3><h2 id=\"fluid-主题配置\"><a href=\"#fluid-主题配置\" class=\"headerlink\" title=\"fluid 主题配置\"></a>fluid 主题配置</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install <span class=\"hljs-comment\">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure>\n\n<p>在博客目录下创建 <code>_config.fluid.yml</code> 文件，将主题的 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\">_config.yml</a><a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\"> </a><a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\"> (opens new window)</a> 全部配置（或部分配置）复制过去。</p>\n<p>根据自己的需要进行主题配置，<a href=\"https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97\">fluid主题配置</a></p>\n<h2 id=\"图片插件设置\"><a href=\"#图片插件设置\" class=\"headerlink\" title=\"图片插件设置\"></a>图片插件设置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install https://github.com/CodeFalling/hexo-asset-image --save<br><br></code></pre></td></tr></table></figure>\n\n<p>在博客目录<code>_config.yml</code>文件，</p>\n<h2 id=\"基础配置文件\"><a href=\"#基础配置文件\" class=\"headerlink\" title=\"基础配置文件\"></a>基础配置文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Hexo Configuration</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Site</span><br>title: Jane&#x27;s Blog<br>subtitle: &#x27;&#x27;<br>description: &#x27;&#x27;<br>keywords:<br>author: 彤～<br>language: en<br>timezone: &#x27;&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">URL</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br>url: http://jane-lucky.github.io<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Directory</span><br>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Writing</span><br>new_post_name: :title.md # File name of new posts<br>default_layout: post<br>titlecase: false # Transform title into titlecase<br>external_link:<br>  enable: true # Open external links in new tab<br>  field: site # Apply to the whole site<br>  exclude: &#x27;&#x27;<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: true<br>relative_link: false<br>future: true<br>highlight:<br>  enable: true<br>  line_number: true<br>  auto_detect: false<br>  tab_replace: &#x27;&#x27;<br>  wrap: true<br>  hljs: false<br>prismjs:<br>  enable: false<br>  preprocess: true<br>  line_number: true<br>  tab_replace: &#x27;&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Home page setting</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">path: Root path <span class=\"hljs-keyword\">for</span> your blogs index page. (default = <span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">per_page: Posts displayed per page. (0 = <span class=\"hljs-built_in\">disable</span> pagination)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">order_by: Posts order. (Order by <span class=\"hljs-built_in\">date</span> descending by default)</span><br>index_generator:<br>  path: &#x27;&#x27;<br>  per_page: 10<br>  order_by: -date<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Category &amp; Tag</span><br>default_category: uncategorized<br>category_map:<br>tag_map:<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Metadata elements</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br>meta_generator: true<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Date / Time format</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Hexo uses Moment.js to parse and display date</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># You can customize the date format as defined in</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># http://momentjs.com/docs/#/displaying/format/</span></span><br>date_format: YYYY-MM-DD<br>time_format: HH:mm:ss<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br>updated_option: &#x27;mtime&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Pagination</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Set per_page to 0 to disable pagination</span></span><br>per_page: 10<br>pagination_dir: page<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Include / Exclude file(s)</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br>include:<br>exclude:<br>ignore:<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Extensions</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Plugins: https://hexo.io/plugins/</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Themes: https://hexo.io/themes/</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\">#theme: landscape</span></span><br>theme: fluid<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">language: zh-CN</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Deployment</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repository: https://oauth2:token@github.com/Jane-lucky/Jane-lucky.github.io.git<br>  branch: deploy-dev<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3599,"excerpt":"","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><a href=\"https://hexo.io/zh-cn/docs/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装nodejs(需要注意nodejs的版本要求)：<a href=\"../deploy/ubuntu%E5%AE%89%E8%A3%85nodejs\">ubuntu安装nodejs</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Blog$ hexo -v<br>INFO  Validating config<br>hexo: 5.4.2<br>hexo-cli: 4.3.0<br>os: linux 5.15.0-46-generic Ubuntu 20.04.4 LTS (Focal Fossa)<br>node: 14.20.0<br>v8: 8.4.371.23-node.87<br>uv: 1.42.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 83<br>nghttp2: 1.42.0<br>napi: 8<br>llhttp: 2.1.5<br>openssl: 1.1.1q<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir Blog<br>cd Blog<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">也可不写文件夹，默认是在本目录层级构建</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure>\n\n<p>基本目录层级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Blog$ tree -L 1<br>.<br>├── _config.landscape.yml<br>├── _config.yml<br>├── node_modules<br>├── package.json<br>├── package-lock.json<br>├── scaffolds<br>├── source<br>└── themes<br><br>4 directories, 4 files<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><h3 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h3><h3 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h3><h3 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h3><h2 id=\"fluid-主题配置\"><a href=\"#fluid-主题配置\" class=\"headerlink\" title=\"fluid 主题配置\"></a>fluid 主题配置</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install <span class=\"hljs-comment\">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure>\n\n<p>在博客目录下创建 <code>_config.fluid.yml</code> 文件，将主题的 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\">_config.yml</a><a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\"> </a><a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\"> (opens new window)</a> 全部配置（或部分配置）复制过去。</p>\n<p>根据自己的需要进行主题配置，<a href=\"https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97\">fluid主题配置</a></p>\n<h2 id=\"图片插件设置\"><a href=\"#图片插件设置\" class=\"headerlink\" title=\"图片插件设置\"></a>图片插件设置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install https://github.com/CodeFalling/hexo-asset-image --save<br><br></code></pre></td></tr></table></figure>\n\n<p>在博客目录<code>_config.yml</code>文件，</p>\n<h2 id=\"基础配置文件\"><a href=\"#基础配置文件\" class=\"headerlink\" title=\"基础配置文件\"></a>基础配置文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Hexo Configuration</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Site</span><br>title: Jane&#x27;s Blog<br>subtitle: &#x27;&#x27;<br>description: &#x27;&#x27;<br>keywords:<br>author: 彤～<br>language: en<br>timezone: &#x27;&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">URL</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br>url: http://jane-lucky.github.io<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Directory</span><br>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Writing</span><br>new_post_name: :title.md # File name of new posts<br>default_layout: post<br>titlecase: false # Transform title into titlecase<br>external_link:<br>  enable: true # Open external links in new tab<br>  field: site # Apply to the whole site<br>  exclude: &#x27;&#x27;<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: true<br>relative_link: false<br>future: true<br>highlight:<br>  enable: true<br>  line_number: true<br>  auto_detect: false<br>  tab_replace: &#x27;&#x27;<br>  wrap: true<br>  hljs: false<br>prismjs:<br>  enable: false<br>  preprocess: true<br>  line_number: true<br>  tab_replace: &#x27;&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Home page setting</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">path: Root path <span class=\"hljs-keyword\">for</span> your blogs index page. (default = <span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">per_page: Posts displayed per page. (0 = <span class=\"hljs-built_in\">disable</span> pagination)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">order_by: Posts order. (Order by <span class=\"hljs-built_in\">date</span> descending by default)</span><br>index_generator:<br>  path: &#x27;&#x27;<br>  per_page: 10<br>  order_by: -date<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Category &amp; Tag</span><br>default_category: uncategorized<br>category_map:<br>tag_map:<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Metadata elements</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br>meta_generator: true<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Date / Time format</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Hexo uses Moment.js to parse and display date</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># You can customize the date format as defined in</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># http://momentjs.com/docs/#/displaying/format/</span></span><br>date_format: YYYY-MM-DD<br>time_format: HH:mm:ss<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br>updated_option: &#x27;mtime&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Pagination</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Set per_page to 0 to disable pagination</span></span><br>per_page: 10<br>pagination_dir: page<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Include / Exclude file(s)</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br>include:<br>exclude:<br>ignore:<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Extensions</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Plugins: https://hexo.io/plugins/</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Themes: https://hexo.io/themes/</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\">#theme: landscape</span></span><br>theme: fluid<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">language: zh-CN</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Deployment</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repository: https://oauth2:token@github.com/Jane-lucky/Jane-lucky.github.io.git<br>  branch: deploy-dev<br></code></pre></td></tr></table></figure>\n\n"},{"title":"CSA-自旋锁","_content":"\n# CAS\n\n比较和交换——原子操作：在多线程没有锁的状态下确保多个线程对一个值的更新。\n\n# 自旋锁\n\n不断的判断比较。\n\n持有的锁和等待竞争的锁不需要作内核态和用户态之间的转换，只需要循环等待持有锁的释放锁。避免不同状态转换的消耗。\n\n\n\n","source":"_posts/golang/CSA 自旋锁.md","raw":"---\ntitle: CSA-自旋锁\ncategories: \n- golang\ntags: CSA\n---\n\n# CAS\n\n比较和交换——原子操作：在多线程没有锁的状态下确保多个线程对一个值的更新。\n\n# 自旋锁\n\n不断的判断比较。\n\n持有的锁和等待竞争的锁不需要作内核态和用户态之间的转换，只需要循环等待持有锁的释放锁。避免不同状态转换的消耗。\n\n\n\n","slug":"golang/CSA 自旋锁","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-14T01:38:12.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfa000ytpdodma14erb","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>比较和交换——原子操作：在多线程没有锁的状态下确保多个线程对一个值的更新。</p>\n<h1 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h1><p>不断的判断比较。</p>\n<p>持有的锁和等待竞争的锁不需要作内核态和用户态之间的转换，只需要循环等待持有锁的释放锁。避免不同状态转换的消耗。</p>\n","site":{"data":{}},"wordcount":106,"excerpt":"","more":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>比较和交换——原子操作：在多线程没有锁的状态下确保多个线程对一个值的更新。</p>\n<h1 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h1><p>不断的判断比较。</p>\n<p>持有的锁和等待竞争的锁不需要作内核态和用户态之间的转换，只需要循环等待持有锁的释放锁。避免不同状态转换的消耗。</p>\n"},{"title":"crictl 对 Kubernetes 节点进行调试","_content":"\n\n\nCRI 是一个插件接口，它使 kubelet 能够使用各种容器运行时，无需重新编译集群组件。\n\n你需要在集群中的每个节点上都有一个可以正常工作的容器运行时， 这样kubelet 能启动pod及其容器。\n\n而crictl是CRI兼容的容器运行时命令行接口。使用它来检查和调试kubernetes节点上的容器运行时和应用程序。\n\n# 命令用法\n\n```shell\nroot@kind-control-plane3:/# crictl help\nNAME:\n   crictl - client for CRI\n\nUSAGE:\n   crictl [global options] command [command options] [arguments...]\n\nVERSION:\n   v1.24.0\n\nCOMMANDS:\n   attach              Attach to a running container\n   create              Create a new container\n   exec                Run a command in a running container\n   version             Display runtime version information\n   images, image, img  List images\n   inspect             Display the status of one or more containers\n   inspecti            Return the status of one or more images\n   imagefsinfo         Return image filesystem info\n   inspectp            Display the status of one or more pods\n   logs                Fetch the logs of a container\n   port-forward        Forward local port to a pod\n   ps                  List containers\n   pull                Pull an image from a registry\n   run                 Run a new container inside a sandbox\n   runp                Run a new pod\n   rm                  Remove one or more containers\n   rmi                 Remove one or more images\n   rmp                 Remove one or more pods\n   pods                List pods\n   start               Start one or more created containers\n   info                Display information of the container runtime\n   stop                Stop one or more running containers\n   stopp               Stop one or more running pods\n   update              Update one or more running containers\n   config              Get and set crictl client configuration options\n   stats               List container(s) resource usage statistics\n   statsp              List pod resource usage statistics\n   completion          Output shell completion code\n   help, h             Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --config value, -c value            Location of the client config file. If not specified and the default does not exist, the program's directory is searched as well (default: \"/etc/crictl.yaml\") [$CRI_CONFIG_FILE]\n   --debug, -D                         Enable debug mode (default: false)\n   --image-endpoint value, -i value    Endpoint of CRI image manager service (default: uses 'runtime-endpoint' setting) [$IMAGE_SERVICE_ENDPOINT]\n   --runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: uses in order the first successful one of [unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock]). Default is now deprecated and the endpoint should be set instead. [$CONTAINER_RUNTIME_ENDPOINT]\n   --timeout value, -t value           Timeout of connecting to the server in seconds (e.g. 2s, 20s.). 0 or less is set to default (default: 2s)\n   --help, -h                          show help (default: false)\n   --version, -v                       print the version (default: false)\n\n```\n\n\n\n## 镜像\n\n```shell\nroot@kind-control-plane3:/# crictl image -h\nNAME:\n   crictl images - List images\n#获取宿主机中的镜像\nUSAGE:\n   crictl images [command options] [REPOSITORY[:TAG]]\n\nOPTIONS:\n   --digests                 Show digests (default: false)\n   --no-trunc                Show output without truncating the ID (default: false)\n   --output value, -o value  Output format, One of: json|yaml|table\n   #显示image的sha256 ID\n   --quiet, -q               Only show image IDs (default: false)\n   --verbose, -v             Show verbose info for images (default: false)\n   --help, -h                show help (default: false)\n\n```\n\n## pod\n\n```shell\nroot@kind-control-plane3:/# crictl pods -h\nNAME:\n   crictl pods - List pods\n\nUSAGE:\n   crictl pods [command options] [arguments...]\n\nOPTIONS:\n   --id value                filter by pod id\n   #根据标签打印pod\n   --label value             filter by key=value label  (accepts multiple inputs)\n   --last value, -n value    Show last n recently created pods. Set 0 for unlimited (default: 0)\n   --latest, -l              Show the most recently created pod (default: false)\n   #根据名称显示pod\n   --name value              filter by pod name regular expression pattern\n   --namespace value         filter by pod namespace regular expression pattern\n   --no-trunc                Show output without truncating the ID (default: false)\n   --output value, -o value  Output format, One of: json|yaml|table (default: \"table\")\n   --quiet, -q               list only pod IDs (default: false)\n   --state value, -s value   filter by pod state\n   --verbose, -v             show verbose info for pods (default: false)\n   --help, -h                show help (default: false)\n\n```\n\n## 在正在执行的容器上面执行命令\n\n```shell\n#查看运行的pod\nroot@kind-worker2:/# crictl pods\nPOD ID              CREATED             STATE               NAME                    NAMESPACE           ATTEMPT             RUNTIME\n5fb86aa7066e8       44 minutes ago      Ready               nginx-76d6c9b8c-q9vbp   default             0                   (default)\na4add35241344       4 hours ago         Ready               kube-proxy-6447g        kube-system         0                   (default)\n403d98dd85f0e       4 hours ago         Ready               kindnet-5mk2k           kube-system         0                   (default)\n#查看运行的容器\nroot@kind-worker2:/# crictl ps\nCONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID              POD\n18cad97f205ca       2b7d6430f78d4       44 minutes ago      Running             nginx               0                   5fb86aa7066e8       nginx-76d6c9b8c-q9vbp\neb989888bde0d       d921cee849482       4 hours ago         Running             kindnet-cni         0                   403d98dd85f0e       kindnet-5mk2k\n476b9aa0e666e       c12a8a85ef17f       4 hours ago         Running             kube-proxy          0                   a4add35241344       kube-proxy-6447g\n#在运行的容器上执行命令\nroot@kind-worker2:/# crictl exec -i -t 18cad97f205ca ls\nbin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  product_name  product_uuid  root  run  sbin  srv  sys  tmp  usr  var\n#查看容器日志\nroot@kind-worker2:/# crictl logs 18cad97f205ca\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n......\n\n```","source":"_posts/k8s/crictl 对 Kubernetes 节点进行调试.md","raw":"---\ntitle: crictl 对 Kubernetes 节点进行调试\ncategories: \n- k8s\ntags:\n- k8s\n- kind\n---\n\n\n\nCRI 是一个插件接口，它使 kubelet 能够使用各种容器运行时，无需重新编译集群组件。\n\n你需要在集群中的每个节点上都有一个可以正常工作的容器运行时， 这样kubelet 能启动pod及其容器。\n\n而crictl是CRI兼容的容器运行时命令行接口。使用它来检查和调试kubernetes节点上的容器运行时和应用程序。\n\n# 命令用法\n\n```shell\nroot@kind-control-plane3:/# crictl help\nNAME:\n   crictl - client for CRI\n\nUSAGE:\n   crictl [global options] command [command options] [arguments...]\n\nVERSION:\n   v1.24.0\n\nCOMMANDS:\n   attach              Attach to a running container\n   create              Create a new container\n   exec                Run a command in a running container\n   version             Display runtime version information\n   images, image, img  List images\n   inspect             Display the status of one or more containers\n   inspecti            Return the status of one or more images\n   imagefsinfo         Return image filesystem info\n   inspectp            Display the status of one or more pods\n   logs                Fetch the logs of a container\n   port-forward        Forward local port to a pod\n   ps                  List containers\n   pull                Pull an image from a registry\n   run                 Run a new container inside a sandbox\n   runp                Run a new pod\n   rm                  Remove one or more containers\n   rmi                 Remove one or more images\n   rmp                 Remove one or more pods\n   pods                List pods\n   start               Start one or more created containers\n   info                Display information of the container runtime\n   stop                Stop one or more running containers\n   stopp               Stop one or more running pods\n   update              Update one or more running containers\n   config              Get and set crictl client configuration options\n   stats               List container(s) resource usage statistics\n   statsp              List pod resource usage statistics\n   completion          Output shell completion code\n   help, h             Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --config value, -c value            Location of the client config file. If not specified and the default does not exist, the program's directory is searched as well (default: \"/etc/crictl.yaml\") [$CRI_CONFIG_FILE]\n   --debug, -D                         Enable debug mode (default: false)\n   --image-endpoint value, -i value    Endpoint of CRI image manager service (default: uses 'runtime-endpoint' setting) [$IMAGE_SERVICE_ENDPOINT]\n   --runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: uses in order the first successful one of [unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock]). Default is now deprecated and the endpoint should be set instead. [$CONTAINER_RUNTIME_ENDPOINT]\n   --timeout value, -t value           Timeout of connecting to the server in seconds (e.g. 2s, 20s.). 0 or less is set to default (default: 2s)\n   --help, -h                          show help (default: false)\n   --version, -v                       print the version (default: false)\n\n```\n\n\n\n## 镜像\n\n```shell\nroot@kind-control-plane3:/# crictl image -h\nNAME:\n   crictl images - List images\n#获取宿主机中的镜像\nUSAGE:\n   crictl images [command options] [REPOSITORY[:TAG]]\n\nOPTIONS:\n   --digests                 Show digests (default: false)\n   --no-trunc                Show output without truncating the ID (default: false)\n   --output value, -o value  Output format, One of: json|yaml|table\n   #显示image的sha256 ID\n   --quiet, -q               Only show image IDs (default: false)\n   --verbose, -v             Show verbose info for images (default: false)\n   --help, -h                show help (default: false)\n\n```\n\n## pod\n\n```shell\nroot@kind-control-plane3:/# crictl pods -h\nNAME:\n   crictl pods - List pods\n\nUSAGE:\n   crictl pods [command options] [arguments...]\n\nOPTIONS:\n   --id value                filter by pod id\n   #根据标签打印pod\n   --label value             filter by key=value label  (accepts multiple inputs)\n   --last value, -n value    Show last n recently created pods. Set 0 for unlimited (default: 0)\n   --latest, -l              Show the most recently created pod (default: false)\n   #根据名称显示pod\n   --name value              filter by pod name regular expression pattern\n   --namespace value         filter by pod namespace regular expression pattern\n   --no-trunc                Show output without truncating the ID (default: false)\n   --output value, -o value  Output format, One of: json|yaml|table (default: \"table\")\n   --quiet, -q               list only pod IDs (default: false)\n   --state value, -s value   filter by pod state\n   --verbose, -v             show verbose info for pods (default: false)\n   --help, -h                show help (default: false)\n\n```\n\n## 在正在执行的容器上面执行命令\n\n```shell\n#查看运行的pod\nroot@kind-worker2:/# crictl pods\nPOD ID              CREATED             STATE               NAME                    NAMESPACE           ATTEMPT             RUNTIME\n5fb86aa7066e8       44 minutes ago      Ready               nginx-76d6c9b8c-q9vbp   default             0                   (default)\na4add35241344       4 hours ago         Ready               kube-proxy-6447g        kube-system         0                   (default)\n403d98dd85f0e       4 hours ago         Ready               kindnet-5mk2k           kube-system         0                   (default)\n#查看运行的容器\nroot@kind-worker2:/# crictl ps\nCONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID              POD\n18cad97f205ca       2b7d6430f78d4       44 minutes ago      Running             nginx               0                   5fb86aa7066e8       nginx-76d6c9b8c-q9vbp\neb989888bde0d       d921cee849482       4 hours ago         Running             kindnet-cni         0                   403d98dd85f0e       kindnet-5mk2k\n476b9aa0e666e       c12a8a85ef17f       4 hours ago         Running             kube-proxy          0                   a4add35241344       kube-proxy-6447g\n#在运行的容器上执行命令\nroot@kind-worker2:/# crictl exec -i -t 18cad97f205ca ls\nbin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  product_name  product_uuid  root  run  sbin  srv  sys  tmp  usr  var\n#查看容器日志\nroot@kind-worker2:/# crictl logs 18cad97f205ca\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n......\n\n```","slug":"k8s/crictl 对 Kubernetes 节点进行调试","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-13T01:59:18.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfb0011tpdo1r2693cz","content":"<p>CRI 是一个插件接口，它使 kubelet 能够使用各种容器运行时，无需重新编译集群组件。</p>\n<p>你需要在集群中的每个节点上都有一个可以正常工作的容器运行时， 这样kubelet 能启动pod及其容器。</p>\n<p>而crictl是CRI兼容的容器运行时命令行接口。使用它来检查和调试kubernetes节点上的容器运行时和应用程序。</p>\n<h1 id=\"命令用法\"><a href=\"#命令用法\" class=\"headerlink\" title=\"命令用法\"></a>命令用法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-control-plane3:/# crictl help<br>NAME:<br>   crictl - client for CRI<br><br>USAGE:<br>   crictl [global options] command [command options] [arguments...]<br><br>VERSION:<br>   v1.24.0<br><br>COMMANDS:<br>   attach              Attach to a running container<br>   create              Create a new container<br>   exec                Run a command in a running container<br>   version             Display runtime version information<br>   images, image, img  List images<br>   inspect             Display the status of one or more containers<br>   inspecti            Return the status of one or more images<br>   imagefsinfo         Return image filesystem info<br>   inspectp            Display the status of one or more pods<br>   logs                Fetch the logs of a container<br>   port-forward        Forward local port to a pod<br>   ps                  List containers<br>   pull                Pull an image from a registry<br>   run                 Run a new container inside a sandbox<br>   runp                Run a new pod<br>   rm                  Remove one or more containers<br>   rmi                 Remove one or more images<br>   rmp                 Remove one or more pods<br>   pods                List pods<br>   start               Start one or more created containers<br>   info                Display information of the container runtime<br>   stop                Stop one or more running containers<br>   stopp               Stop one or more running pods<br>   update              Update one or more running containers<br>   config              Get and set crictl client configuration options<br>   stats               List container(s) resource usage statistics<br>   statsp              List pod resource usage statistics<br>   completion          Output shell completion code<br>   help, h             Shows a list of commands or help for one command<br><br>GLOBAL OPTIONS:<br>   --config value, -c value            Location of the client config file. If not specified and the default does not exist, the program&#x27;s directory is searched as well (default: &quot;/etc/crictl.yaml&quot;) [$CRI_CONFIG_FILE]<br>   --debug, -D                         Enable debug mode (default: false)<br>   --image-endpoint value, -i value    Endpoint of CRI image manager service (default: uses &#x27;runtime-endpoint&#x27; setting) [$IMAGE_SERVICE_ENDPOINT]<br>   --runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: uses in order the first successful one of [unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock]). Default is now deprecated and the endpoint should be set instead. [$CONTAINER_RUNTIME_ENDPOINT]<br>   --timeout value, -t value           Timeout of connecting to the server in seconds (e.g. 2s, 20s.). 0 or less is set to default (default: 2s)<br>   --help, -h                          show help (default: false)<br>   --version, -v                       print the version (default: false)<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-control-plane3:/# crictl image -h<br>NAME:<br>   crictl images - List images<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">获取宿主机中的镜像</span><br>USAGE:<br>   crictl images [command options] [REPOSITORY[:TAG]]<br><br>OPTIONS:<br>   --digests                 Show digests (default: false)<br>   --no-trunc                Show output without truncating the ID (default: false)<br>   --output value, -o value  Output format, One of: json|yaml|table<br><span class=\"hljs-meta prompt_\">   #</span><span class=\"language-bash\">显示image的sha256 ID</span><br>   --quiet, -q               Only show image IDs (default: false)<br>   --verbose, -v             Show verbose info for images (default: false)<br>   --help, -h                show help (default: false)<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"pod\"><a href=\"#pod\" class=\"headerlink\" title=\"pod\"></a>pod</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-control-plane3:/# crictl pods -h<br>NAME:<br>   crictl pods - List pods<br><br>USAGE:<br>   crictl pods [command options] [arguments...]<br><br>OPTIONS:<br>   --id value                filter by pod id<br><span class=\"hljs-meta prompt_\">   #</span><span class=\"language-bash\">根据标签打印pod</span><br>   --label value             filter by key=value label  (accepts multiple inputs)<br>   --last value, -n value    Show last n recently created pods. Set 0 for unlimited (default: 0)<br>   --latest, -l              Show the most recently created pod (default: false)<br><span class=\"hljs-meta prompt_\">   #</span><span class=\"language-bash\">根据名称显示pod</span><br>   --name value              filter by pod name regular expression pattern<br>   --namespace value         filter by pod namespace regular expression pattern<br>   --no-trunc                Show output without truncating the ID (default: false)<br>   --output value, -o value  Output format, One of: json|yaml|table (default: &quot;table&quot;)<br>   --quiet, -q               list only pod IDs (default: false)<br>   --state value, -s value   filter by pod state<br>   --verbose, -v             show verbose info for pods (default: false)<br>   --help, -h                show help (default: false)<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在正在执行的容器上面执行命令\"><a href=\"#在正在执行的容器上面执行命令\" class=\"headerlink\" title=\"在正在执行的容器上面执行命令\"></a>在正在执行的容器上面执行命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看运行的pod</span><br>root@kind-worker2:/# crictl pods<br>POD ID              CREATED             STATE               NAME                    NAMESPACE           ATTEMPT             RUNTIME<br>5fb86aa7066e8       44 minutes ago      Ready               nginx-76d6c9b8c-q9vbp   default             0                   (default)<br>a4add35241344       4 hours ago         Ready               kube-proxy-6447g        kube-system         0                   (default)<br>403d98dd85f0e       4 hours ago         Ready               kindnet-5mk2k           kube-system         0                   (default)<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看运行的容器</span><br>root@kind-worker2:/# crictl ps<br>CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID              POD<br>18cad97f205ca       2b7d6430f78d4       44 minutes ago      Running             nginx               0                   5fb86aa7066e8       nginx-76d6c9b8c-q9vbp<br>eb989888bde0d       d921cee849482       4 hours ago         Running             kindnet-cni         0                   403d98dd85f0e       kindnet-5mk2k<br>476b9aa0e666e       c12a8a85ef17f       4 hours ago         Running             kube-proxy          0                   a4add35241344       kube-proxy-6447g<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">在运行的容器上执行命令</span><br>root@kind-worker2:/# crictl exec -i -t 18cad97f205ca ls<br>bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  product_name  product_uuid  root  run  sbin  srv  sys  tmp  usr  var<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看容器日志</span><br>root@kind-worker2:/# crictl logs 18cad97f205ca<br>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration<br>/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/<br>/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh<br>10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf<br>......<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":4687,"excerpt":"","more":"<p>CRI 是一个插件接口，它使 kubelet 能够使用各种容器运行时，无需重新编译集群组件。</p>\n<p>你需要在集群中的每个节点上都有一个可以正常工作的容器运行时， 这样kubelet 能启动pod及其容器。</p>\n<p>而crictl是CRI兼容的容器运行时命令行接口。使用它来检查和调试kubernetes节点上的容器运行时和应用程序。</p>\n<h1 id=\"命令用法\"><a href=\"#命令用法\" class=\"headerlink\" title=\"命令用法\"></a>命令用法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-control-plane3:/# crictl help<br>NAME:<br>   crictl - client for CRI<br><br>USAGE:<br>   crictl [global options] command [command options] [arguments...]<br><br>VERSION:<br>   v1.24.0<br><br>COMMANDS:<br>   attach              Attach to a running container<br>   create              Create a new container<br>   exec                Run a command in a running container<br>   version             Display runtime version information<br>   images, image, img  List images<br>   inspect             Display the status of one or more containers<br>   inspecti            Return the status of one or more images<br>   imagefsinfo         Return image filesystem info<br>   inspectp            Display the status of one or more pods<br>   logs                Fetch the logs of a container<br>   port-forward        Forward local port to a pod<br>   ps                  List containers<br>   pull                Pull an image from a registry<br>   run                 Run a new container inside a sandbox<br>   runp                Run a new pod<br>   rm                  Remove one or more containers<br>   rmi                 Remove one or more images<br>   rmp                 Remove one or more pods<br>   pods                List pods<br>   start               Start one or more created containers<br>   info                Display information of the container runtime<br>   stop                Stop one or more running containers<br>   stopp               Stop one or more running pods<br>   update              Update one or more running containers<br>   config              Get and set crictl client configuration options<br>   stats               List container(s) resource usage statistics<br>   statsp              List pod resource usage statistics<br>   completion          Output shell completion code<br>   help, h             Shows a list of commands or help for one command<br><br>GLOBAL OPTIONS:<br>   --config value, -c value            Location of the client config file. If not specified and the default does not exist, the program&#x27;s directory is searched as well (default: &quot;/etc/crictl.yaml&quot;) [$CRI_CONFIG_FILE]<br>   --debug, -D                         Enable debug mode (default: false)<br>   --image-endpoint value, -i value    Endpoint of CRI image manager service (default: uses &#x27;runtime-endpoint&#x27; setting) [$IMAGE_SERVICE_ENDPOINT]<br>   --runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: uses in order the first successful one of [unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock]). Default is now deprecated and the endpoint should be set instead. [$CONTAINER_RUNTIME_ENDPOINT]<br>   --timeout value, -t value           Timeout of connecting to the server in seconds (e.g. 2s, 20s.). 0 or less is set to default (default: 2s)<br>   --help, -h                          show help (default: false)<br>   --version, -v                       print the version (default: false)<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-control-plane3:/# crictl image -h<br>NAME:<br>   crictl images - List images<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">获取宿主机中的镜像</span><br>USAGE:<br>   crictl images [command options] [REPOSITORY[:TAG]]<br><br>OPTIONS:<br>   --digests                 Show digests (default: false)<br>   --no-trunc                Show output without truncating the ID (default: false)<br>   --output value, -o value  Output format, One of: json|yaml|table<br><span class=\"hljs-meta prompt_\">   #</span><span class=\"language-bash\">显示image的sha256 ID</span><br>   --quiet, -q               Only show image IDs (default: false)<br>   --verbose, -v             Show verbose info for images (default: false)<br>   --help, -h                show help (default: false)<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"pod\"><a href=\"#pod\" class=\"headerlink\" title=\"pod\"></a>pod</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-control-plane3:/# crictl pods -h<br>NAME:<br>   crictl pods - List pods<br><br>USAGE:<br>   crictl pods [command options] [arguments...]<br><br>OPTIONS:<br>   --id value                filter by pod id<br><span class=\"hljs-meta prompt_\">   #</span><span class=\"language-bash\">根据标签打印pod</span><br>   --label value             filter by key=value label  (accepts multiple inputs)<br>   --last value, -n value    Show last n recently created pods. Set 0 for unlimited (default: 0)<br>   --latest, -l              Show the most recently created pod (default: false)<br><span class=\"hljs-meta prompt_\">   #</span><span class=\"language-bash\">根据名称显示pod</span><br>   --name value              filter by pod name regular expression pattern<br>   --namespace value         filter by pod namespace regular expression pattern<br>   --no-trunc                Show output without truncating the ID (default: false)<br>   --output value, -o value  Output format, One of: json|yaml|table (default: &quot;table&quot;)<br>   --quiet, -q               list only pod IDs (default: false)<br>   --state value, -s value   filter by pod state<br>   --verbose, -v             show verbose info for pods (default: false)<br>   --help, -h                show help (default: false)<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在正在执行的容器上面执行命令\"><a href=\"#在正在执行的容器上面执行命令\" class=\"headerlink\" title=\"在正在执行的容器上面执行命令\"></a>在正在执行的容器上面执行命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看运行的pod</span><br>root@kind-worker2:/# crictl pods<br>POD ID              CREATED             STATE               NAME                    NAMESPACE           ATTEMPT             RUNTIME<br>5fb86aa7066e8       44 minutes ago      Ready               nginx-76d6c9b8c-q9vbp   default             0                   (default)<br>a4add35241344       4 hours ago         Ready               kube-proxy-6447g        kube-system         0                   (default)<br>403d98dd85f0e       4 hours ago         Ready               kindnet-5mk2k           kube-system         0                   (default)<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看运行的容器</span><br>root@kind-worker2:/# crictl ps<br>CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID              POD<br>18cad97f205ca       2b7d6430f78d4       44 minutes ago      Running             nginx               0                   5fb86aa7066e8       nginx-76d6c9b8c-q9vbp<br>eb989888bde0d       d921cee849482       4 hours ago         Running             kindnet-cni         0                   403d98dd85f0e       kindnet-5mk2k<br>476b9aa0e666e       c12a8a85ef17f       4 hours ago         Running             kube-proxy          0                   a4add35241344       kube-proxy-6447g<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">在运行的容器上执行命令</span><br>root@kind-worker2:/# crictl exec -i -t 18cad97f205ca ls<br>bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  product_name  product_uuid  root  run  sbin  srv  sys  tmp  usr  var<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看容器日志</span><br>root@kind-worker2:/# crictl logs 18cad97f205ca<br>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration<br>/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/<br>/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh<br>10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf<br>......<br><br></code></pre></td></tr></table></figure>"},{"title":"ingress-nginx安装部署","_content":"\n\n\n# ingress-nginx 1.1.1\n\n环境:\n\nUbuntu 20.04 \n\nk8s v1.23.4\n\nArch:x86、arm均可（需要更换对应架构的镜像）\n\n## 安装\n\n下载部署文件，可直接[获取](),该yaml已修改：\n\n```shell\nwget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml\n```\n\n修改文件:\n\n- 修改镜像，文件中的镜像本地无法获取，需要修改成国内的镜像，本文档采用阿里的镜像。\n- 添加`hostNetwork: true`属性，确保直接使用 K8s 物理机的 DNS 来解析域名，而不再使用 K8s 内部的 DNS 来解析域名。\n- 修改svc类型为`nodePort`类型。\n\n```\nroot@master:/data# cat deploy.yaml | grep image:\n329:          image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.1.0\n611:          image: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.1.1\n663:          image: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.1.1\n\n\nroot@master:/data# cat deploy.yaml | grep host\n325:      hostNetwork: true\n\nroot@master:/data/jiatong# cat deploy.yaml | grep type -n\n250:  type: ClusterIP\n276:  type: NodePort\n```\n\n部署成功\n\n```shell\nroot@master:/data# kubectl apply -f deploy.yaml\nroot@master:/data# kubectl get po,svc -n ingress-nginx -o wide\nNAME                                            READY   STATUS      RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES\npod/ingress-nginx-admission-create-rvrbm        0/1     Completed   0          19m   10.244.167.157   node   <none>           <none>\npod/ingress-nginx-admission-patch-44llj         0/1     Completed   1          19m   10.244.167.156   node   <none>           <none>\npod/ingress-nginx-controller-85b88695bf-j9m7g   1/1     Running     0          19m   10.100.93.157    node   <none>           <none>\n\nNAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE   SELECTOR\nservice/ingress-nginx-controller             NodePort    10.100.205.184   <none>        80:30052/TCP,443:30149/TCP   19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx\nservice/ingress-nginx-controller-admission   ClusterIP   10.110.114.167   <none>        443/TCP                      19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx\n\n```\n\n## 测试验证\n\n`app-deployment.yaml`、`ingress-http.yaml`参见文末\n\n```shell\nroot@master:/data# kubectl apply -f app-deployment.yaml\nroot@master:/data# kubectl apply -f ingress-http.yaml\n#查看状态\nroot@master:/data# kubectl get po,svc -o wide\nNAME                                     READY   STATUS    RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES\npod/nginx-deployment-6975f7f8b5-bpkdp    1/1     Running   0          41h   10.244.167.133   node   <none>           <none>\n\nNAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE   SELECTOR\nservice/kubernetes       ClusterIP   10.96.0.1        <none>        443/TCP    62d   <none>\nservice/nginx-service    ClusterIP   10.104.236.179   <none>        80/TCP     41h   app=nginx-app\nroot@master:/data# kubectl get ing\nNAME           CLASS    HOSTS   ADDRESS          PORTS   AGE\ningress-http   <none>   *       10.100.205.184   80      22m\nroot@master:/data# curl -I 10.100.93.157\nHTTP/1.1 200 OK\nDate: Thu, 20 Oct xxxx 02:14:06 GMT\nContent-Type: text/html\nContent-Length: 615\nConnection: keep-alive\nLast-Modified: Tue, 25 Jan xxxx 15:03:52 GMT\nETag: \"61f01158-267\"\nAccept-Ranges: bytes\n```\n\n## 总结\n\n1. ingress在部署时添加`hostNetwork: true`参数：\n\n- 添加host名称：需要master节点配置/etc/hosts,域名（自己的虚拟域名）可以访问，ip访问失效\n\n- 不添加host参数：ip成功访问，域名在配置/etc/hosts之后访问成功\n\n2. ingress在部署时未添加`hostNetwork: true`参数：均不能访问\n\n## 验证文件\n\n`app-deployment.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: nginx-app\n  template:\n    metadata:\n      labels:\n        app: nginx-app\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.21.6\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: default\nspec:\n  selector:\n    app: nginx-app\n  ports:\n  - name: nginx-port\n    port: 80\n    targetPort: 80\n    protocol: TCP\n```\n\n`ingress-http.yaml`\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-http\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  #- host: nginx.mytest.org\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\n```","source":"_posts/k8s/ingress-nginx1.1.1安装部署.md","raw":"---\ntitle: ingress-nginx安装部署\ncategories: \n- k8s\ntags:\n- k8s\n- ingress-nginx\n---\n\n\n\n# ingress-nginx 1.1.1\n\n环境:\n\nUbuntu 20.04 \n\nk8s v1.23.4\n\nArch:x86、arm均可（需要更换对应架构的镜像）\n\n## 安装\n\n下载部署文件，可直接[获取](),该yaml已修改：\n\n```shell\nwget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml\n```\n\n修改文件:\n\n- 修改镜像，文件中的镜像本地无法获取，需要修改成国内的镜像，本文档采用阿里的镜像。\n- 添加`hostNetwork: true`属性，确保直接使用 K8s 物理机的 DNS 来解析域名，而不再使用 K8s 内部的 DNS 来解析域名。\n- 修改svc类型为`nodePort`类型。\n\n```\nroot@master:/data# cat deploy.yaml | grep image:\n329:          image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.1.0\n611:          image: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.1.1\n663:          image: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.1.1\n\n\nroot@master:/data# cat deploy.yaml | grep host\n325:      hostNetwork: true\n\nroot@master:/data/jiatong# cat deploy.yaml | grep type -n\n250:  type: ClusterIP\n276:  type: NodePort\n```\n\n部署成功\n\n```shell\nroot@master:/data# kubectl apply -f deploy.yaml\nroot@master:/data# kubectl get po,svc -n ingress-nginx -o wide\nNAME                                            READY   STATUS      RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES\npod/ingress-nginx-admission-create-rvrbm        0/1     Completed   0          19m   10.244.167.157   node   <none>           <none>\npod/ingress-nginx-admission-patch-44llj         0/1     Completed   1          19m   10.244.167.156   node   <none>           <none>\npod/ingress-nginx-controller-85b88695bf-j9m7g   1/1     Running     0          19m   10.100.93.157    node   <none>           <none>\n\nNAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE   SELECTOR\nservice/ingress-nginx-controller             NodePort    10.100.205.184   <none>        80:30052/TCP,443:30149/TCP   19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx\nservice/ingress-nginx-controller-admission   ClusterIP   10.110.114.167   <none>        443/TCP                      19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx\n\n```\n\n## 测试验证\n\n`app-deployment.yaml`、`ingress-http.yaml`参见文末\n\n```shell\nroot@master:/data# kubectl apply -f app-deployment.yaml\nroot@master:/data# kubectl apply -f ingress-http.yaml\n#查看状态\nroot@master:/data# kubectl get po,svc -o wide\nNAME                                     READY   STATUS    RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES\npod/nginx-deployment-6975f7f8b5-bpkdp    1/1     Running   0          41h   10.244.167.133   node   <none>           <none>\n\nNAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE   SELECTOR\nservice/kubernetes       ClusterIP   10.96.0.1        <none>        443/TCP    62d   <none>\nservice/nginx-service    ClusterIP   10.104.236.179   <none>        80/TCP     41h   app=nginx-app\nroot@master:/data# kubectl get ing\nNAME           CLASS    HOSTS   ADDRESS          PORTS   AGE\ningress-http   <none>   *       10.100.205.184   80      22m\nroot@master:/data# curl -I 10.100.93.157\nHTTP/1.1 200 OK\nDate: Thu, 20 Oct xxxx 02:14:06 GMT\nContent-Type: text/html\nContent-Length: 615\nConnection: keep-alive\nLast-Modified: Tue, 25 Jan xxxx 15:03:52 GMT\nETag: \"61f01158-267\"\nAccept-Ranges: bytes\n```\n\n## 总结\n\n1. ingress在部署时添加`hostNetwork: true`参数：\n\n- 添加host名称：需要master节点配置/etc/hosts,域名（自己的虚拟域名）可以访问，ip访问失效\n\n- 不添加host参数：ip成功访问，域名在配置/etc/hosts之后访问成功\n\n2. ingress在部署时未添加`hostNetwork: true`参数：均不能访问\n\n## 验证文件\n\n`app-deployment.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: nginx-app\n  template:\n    metadata:\n      labels:\n        app: nginx-app\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.21.6\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: default\nspec:\n  selector:\n    app: nginx-app\n  ports:\n  - name: nginx-port\n    port: 80\n    targetPort: 80\n    protocol: TCP\n```\n\n`ingress-http.yaml`\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-http\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  #- host: nginx.mytest.org\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\n```","slug":"k8s/ingress-nginx1.1.1安装部署","published":1,"date":"2022-10-20T02:24:02.695Z","updated":"2022-10-20T02:26:47.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfc0013tpdoe4c71wxc","content":"<h1 id=\"ingress-nginx-1-1-1\"><a href=\"#ingress-nginx-1-1-1\" class=\"headerlink\" title=\"ingress-nginx 1.1.1\"></a>ingress-nginx 1.1.1</h1><p>环境:</p>\n<p>Ubuntu 20.04 </p>\n<p>k8s v1.23.4</p>\n<p>Arch:x86、arm均可（需要更换对应架构的镜像）</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载部署文件，可直接<a href>获取</a>,该yaml已修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml<br></code></pre></td></tr></table></figure>\n\n<p>修改文件:</p>\n<ul>\n<li>修改镜像，文件中的镜像本地无法获取，需要修改成国内的镜像，本文档采用阿里的镜像。</li>\n<li>添加<code>hostNetwork: true</code>属性，确保直接使用 K8s 物理机的 DNS 来解析域名，而不再使用 K8s 内部的 DNS 来解析域名。</li>\n<li>修改svc类型为<code>nodePort</code>类型。</li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">root<span class=\"hljs-variable\">@master</span><span class=\"hljs-symbol\">:/data</span><span class=\"hljs-comment\"># cat deploy.yaml | grep image:</span><br><span class=\"hljs-number\">329</span>:          <span class=\"hljs-symbol\">image:</span> registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-<span class=\"hljs-symbol\">controller:</span>v1.<span class=\"hljs-number\">1.0</span><br><span class=\"hljs-number\">611</span>:          <span class=\"hljs-symbol\">image:</span> registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-<span class=\"hljs-symbol\">certgen:</span>v1.<span class=\"hljs-number\">1.1</span><br><span class=\"hljs-number\">663</span>:          <span class=\"hljs-symbol\">image:</span> registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-<span class=\"hljs-symbol\">certgen:</span>v1.<span class=\"hljs-number\">1.1</span><br><br><br>root<span class=\"hljs-variable\">@master</span><span class=\"hljs-symbol\">:/data</span><span class=\"hljs-comment\"># cat deploy.yaml | grep host</span><br><span class=\"hljs-number\">325</span>:      <span class=\"hljs-symbol\">hostNetwork:</span> <span class=\"hljs-literal\">true</span><br><br>root<span class=\"hljs-variable\">@master</span><span class=\"hljs-symbol\">:/data/jiatong</span><span class=\"hljs-comment\"># cat deploy.yaml | grep type -n</span><br><span class=\"hljs-number\">250</span>:  <span class=\"hljs-symbol\">type:</span> <span class=\"hljs-title class_\">ClusterIP</span><br><span class=\"hljs-number\">276</span>:  <span class=\"hljs-symbol\">type:</span> <span class=\"hljs-title class_\">NodePort</span><br></code></pre></td></tr></table></figure>\n\n<p>部署成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@master:/data# kubectl apply -f deploy.yaml<br>root@master:/data# kubectl get po,svc -n ingress-nginx -o wide<br>NAME                                            READY   STATUS      RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES<br>pod/ingress-nginx-admission-create-rvrbm        0/1     Completed   0          19m   10.244.167.157   node   &lt;none&gt;           &lt;none&gt;<br>pod/ingress-nginx-admission-patch-44llj         0/1     Completed   1          19m   10.244.167.156   node   &lt;none&gt;           &lt;none&gt;<br>pod/ingress-nginx-controller-85b88695bf-j9m7g   1/1     Running     0          19m   10.100.93.157    node   &lt;none&gt;           &lt;none&gt;<br><br>NAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE   SELECTOR<br>service/ingress-nginx-controller             NodePort    10.100.205.184   &lt;none&gt;        80:30052/TCP,443:30149/TCP   19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx<br>service/ingress-nginx-controller-admission   ClusterIP   10.110.114.167   &lt;none&gt;        443/TCP                      19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p><code>app-deployment.yaml</code>、<code>ingress-http.yaml</code>参见文末</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@master:/data# kubectl apply -f app-deployment.yaml<br>root@master:/data# kubectl apply -f ingress-http.yaml<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看状态</span><br>root@master:/data# kubectl get po,svc -o wide<br>NAME                                     READY   STATUS    RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES<br>pod/nginx-deployment-6975f7f8b5-bpkdp    1/1     Running   0          41h   10.244.167.133   node   &lt;none&gt;           &lt;none&gt;<br><br>NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE   SELECTOR<br>service/kubernetes       ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    62d   &lt;none&gt;<br>service/nginx-service    ClusterIP   10.104.236.179   &lt;none&gt;        80/TCP     41h   app=nginx-app<br>root@master:/data# kubectl get ing<br>NAME           CLASS    HOSTS   ADDRESS          PORTS   AGE<br>ingress-http   &lt;none&gt;   *       10.100.205.184   80      22m<br>root@master:/data# curl -I 10.100.93.157<br>HTTP/1.1 200 OK<br>Date: Thu, 20 Oct xxxx 02:14:06 GMT<br>Content-Type: text/html<br>Content-Length: 615<br>Connection: keep-alive<br>Last-Modified: Tue, 25 Jan xxxx 15:03:52 GMT<br>ETag: &quot;61f01158-267&quot;<br>Accept-Ranges: bytes<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>ingress在部署时添加<code>hostNetwork: true</code>参数：</li>\n</ol>\n<ul>\n<li><p>添加host名称：需要master节点配置/etc/hosts,域名（自己的虚拟域名）可以访问，ip访问失效</p>\n</li>\n<li><p>不添加host参数：ip成功访问，域名在配置/etc/hosts之后访问成功</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ingress在部署时未添加<code>hostNetwork: true</code>参数：均不能访问</li>\n</ol>\n<h2 id=\"验证文件\"><a href=\"#验证文件\" class=\"headerlink\" title=\"验证文件\"></a>验证文件</h2><p><code>app-deployment.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-deployment</span><br>  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">default</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">matchLabels:</span><br>      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx-app</span><br>  <span class=\"hljs-attr\">template:</span><br>    <span class=\"hljs-attr\">metadata:</span><br>      <span class=\"hljs-attr\">labels:</span><br>        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx-app</span><br>    <span class=\"hljs-attr\">spec:</span><br>      <span class=\"hljs-attr\">containers:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span><br>        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:1.21.6</span><br>        <span class=\"hljs-attr\">ports:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-service</span><br>  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">default</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx-app</span><br>  <span class=\"hljs-attr\">ports:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-port</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br>    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">80</span><br>    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span><br></code></pre></td></tr></table></figure>\n\n<p><code>ingress-http.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ingress-http</span><br>  <span class=\"hljs-attr\">annotations:</span><br>    <span class=\"hljs-attr\">kubernetes.io/ingress.class:</span> <span class=\"hljs-string\">&quot;nginx&quot;</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">rules:</span><br>  <span class=\"hljs-comment\">#- host: nginx.mytest.org</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span><br>        <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-service</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":3558,"excerpt":"","more":"<h1 id=\"ingress-nginx-1-1-1\"><a href=\"#ingress-nginx-1-1-1\" class=\"headerlink\" title=\"ingress-nginx 1.1.1\"></a>ingress-nginx 1.1.1</h1><p>环境:</p>\n<p>Ubuntu 20.04 </p>\n<p>k8s v1.23.4</p>\n<p>Arch:x86、arm均可（需要更换对应架构的镜像）</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载部署文件，可直接<a href>获取</a>,该yaml已修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml<br></code></pre></td></tr></table></figure>\n\n<p>修改文件:</p>\n<ul>\n<li>修改镜像，文件中的镜像本地无法获取，需要修改成国内的镜像，本文档采用阿里的镜像。</li>\n<li>添加<code>hostNetwork: true</code>属性，确保直接使用 K8s 物理机的 DNS 来解析域名，而不再使用 K8s 内部的 DNS 来解析域名。</li>\n<li>修改svc类型为<code>nodePort</code>类型。</li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">root<span class=\"hljs-variable\">@master</span><span class=\"hljs-symbol\">:/data</span><span class=\"hljs-comment\"># cat deploy.yaml | grep image:</span><br><span class=\"hljs-number\">329</span>:          <span class=\"hljs-symbol\">image:</span> registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-<span class=\"hljs-symbol\">controller:</span>v1.<span class=\"hljs-number\">1.0</span><br><span class=\"hljs-number\">611</span>:          <span class=\"hljs-symbol\">image:</span> registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-<span class=\"hljs-symbol\">certgen:</span>v1.<span class=\"hljs-number\">1.1</span><br><span class=\"hljs-number\">663</span>:          <span class=\"hljs-symbol\">image:</span> registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-<span class=\"hljs-symbol\">certgen:</span>v1.<span class=\"hljs-number\">1.1</span><br><br><br>root<span class=\"hljs-variable\">@master</span><span class=\"hljs-symbol\">:/data</span><span class=\"hljs-comment\"># cat deploy.yaml | grep host</span><br><span class=\"hljs-number\">325</span>:      <span class=\"hljs-symbol\">hostNetwork:</span> <span class=\"hljs-literal\">true</span><br><br>root<span class=\"hljs-variable\">@master</span><span class=\"hljs-symbol\">:/data/jiatong</span><span class=\"hljs-comment\"># cat deploy.yaml | grep type -n</span><br><span class=\"hljs-number\">250</span>:  <span class=\"hljs-symbol\">type:</span> <span class=\"hljs-title class_\">ClusterIP</span><br><span class=\"hljs-number\">276</span>:  <span class=\"hljs-symbol\">type:</span> <span class=\"hljs-title class_\">NodePort</span><br></code></pre></td></tr></table></figure>\n\n<p>部署成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@master:/data# kubectl apply -f deploy.yaml<br>root@master:/data# kubectl get po,svc -n ingress-nginx -o wide<br>NAME                                            READY   STATUS      RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES<br>pod/ingress-nginx-admission-create-rvrbm        0/1     Completed   0          19m   10.244.167.157   node   &lt;none&gt;           &lt;none&gt;<br>pod/ingress-nginx-admission-patch-44llj         0/1     Completed   1          19m   10.244.167.156   node   &lt;none&gt;           &lt;none&gt;<br>pod/ingress-nginx-controller-85b88695bf-j9m7g   1/1     Running     0          19m   10.100.93.157    node   &lt;none&gt;           &lt;none&gt;<br><br>NAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE   SELECTOR<br>service/ingress-nginx-controller             NodePort    10.100.205.184   &lt;none&gt;        80:30052/TCP,443:30149/TCP   19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx<br>service/ingress-nginx-controller-admission   ClusterIP   10.110.114.167   &lt;none&gt;        443/TCP                      19m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p><code>app-deployment.yaml</code>、<code>ingress-http.yaml</code>参见文末</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@master:/data# kubectl apply -f app-deployment.yaml<br>root@master:/data# kubectl apply -f ingress-http.yaml<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看状态</span><br>root@master:/data# kubectl get po,svc -o wide<br>NAME                                     READY   STATUS    RESTARTS   AGE   IP               NODE   NOMINATED NODE   READINESS GATES<br>pod/nginx-deployment-6975f7f8b5-bpkdp    1/1     Running   0          41h   10.244.167.133   node   &lt;none&gt;           &lt;none&gt;<br><br>NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE   SELECTOR<br>service/kubernetes       ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    62d   &lt;none&gt;<br>service/nginx-service    ClusterIP   10.104.236.179   &lt;none&gt;        80/TCP     41h   app=nginx-app<br>root@master:/data# kubectl get ing<br>NAME           CLASS    HOSTS   ADDRESS          PORTS   AGE<br>ingress-http   &lt;none&gt;   *       10.100.205.184   80      22m<br>root@master:/data# curl -I 10.100.93.157<br>HTTP/1.1 200 OK<br>Date: Thu, 20 Oct xxxx 02:14:06 GMT<br>Content-Type: text/html<br>Content-Length: 615<br>Connection: keep-alive<br>Last-Modified: Tue, 25 Jan xxxx 15:03:52 GMT<br>ETag: &quot;61f01158-267&quot;<br>Accept-Ranges: bytes<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>ingress在部署时添加<code>hostNetwork: true</code>参数：</li>\n</ol>\n<ul>\n<li><p>添加host名称：需要master节点配置/etc/hosts,域名（自己的虚拟域名）可以访问，ip访问失效</p>\n</li>\n<li><p>不添加host参数：ip成功访问，域名在配置/etc/hosts之后访问成功</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ingress在部署时未添加<code>hostNetwork: true</code>参数：均不能访问</li>\n</ol>\n<h2 id=\"验证文件\"><a href=\"#验证文件\" class=\"headerlink\" title=\"验证文件\"></a>验证文件</h2><p><code>app-deployment.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-deployment</span><br>  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">default</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">matchLabels:</span><br>      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx-app</span><br>  <span class=\"hljs-attr\">template:</span><br>    <span class=\"hljs-attr\">metadata:</span><br>      <span class=\"hljs-attr\">labels:</span><br>        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx-app</span><br>    <span class=\"hljs-attr\">spec:</span><br>      <span class=\"hljs-attr\">containers:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span><br>        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:1.21.6</span><br>        <span class=\"hljs-attr\">ports:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-service</span><br>  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">default</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx-app</span><br>  <span class=\"hljs-attr\">ports:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-port</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br>    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">80</span><br>    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span><br></code></pre></td></tr></table></figure>\n\n<p><code>ingress-http.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ingress-http</span><br>  <span class=\"hljs-attr\">annotations:</span><br>    <span class=\"hljs-attr\">kubernetes.io/ingress.class:</span> <span class=\"hljs-string\">&quot;nginx&quot;</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">rules:</span><br>  <span class=\"hljs-comment\">#- host: nginx.mytest.org</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span><br>        <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-service</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>"},{"title":"ingress-nginx基础概念","_content":"\n\n\n# ingress-nginx简介\n\n公开从集群外部到集群内服务的http和https路由。流量路由有Ingress组员上定义的规则控制。\n\n![Ingress](ingress-nginx简介/image-20221020111254258.png)\n\n## 规则\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-http\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  #- host: nginx.mytest.org\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\n```\n\n- host（可选）：\n\n  未指定host——适用于通过指定IP地址的所有入站HTTP通信\n\n  指定host——该规则使用于该host\n\n- paths：每一个路径都有一个由serviceName和servicePort定义关联后端。\n\n- backend：服务名称和端口名称的组合。\n\n## Ingress类型\n\n### 简单扇出（fanout）\n\n根据请求的http URI将来自同一IP地址的路由到多个service。\n\n![image-20221020112742780](ingress-nginx简介/image-20221020112742780.png)\n\n### 基于名称的虚拟托管\n\n针对多个主机名的http流量路由由到同一个IP地址上。\n\n![image-20221020113006395](ingress-nginx简介/image-20221020113006395.png)\n\n如，以下 Ingress 会将请求 `first.bar.com` 的流量路由到 `service1`，将请求 `second.bar.com` 的流量路由到 `service2`，而所有其他流量都会被路由到 `service3`。\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: name-virtual-host-ingress-no-third-host\nspec:\n  rules:\n  - host: first.bar.com\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: service1\n            port:\n              number: 80\n  - host: second.bar.com\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: service2\n            port:\n              number: 80\n  - http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: service3\n            port:\n              number: 80\n```","source":"_posts/k8s/ingress-nginx简介.md","raw":"---\ntitle: ingress-nginx基础概念\ncategories: \n- k8s\ntags:\n- k8s\n- ingress-nginx\n---\n\n\n\n# ingress-nginx简介\n\n公开从集群外部到集群内服务的http和https路由。流量路由有Ingress组员上定义的规则控制。\n\n![Ingress](ingress-nginx简介/image-20221020111254258.png)\n\n## 规则\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-http\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  #- host: nginx.mytest.org\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\n```\n\n- host（可选）：\n\n  未指定host——适用于通过指定IP地址的所有入站HTTP通信\n\n  指定host——该规则使用于该host\n\n- paths：每一个路径都有一个由serviceName和servicePort定义关联后端。\n\n- backend：服务名称和端口名称的组合。\n\n## Ingress类型\n\n### 简单扇出（fanout）\n\n根据请求的http URI将来自同一IP地址的路由到多个service。\n\n![image-20221020112742780](ingress-nginx简介/image-20221020112742780.png)\n\n### 基于名称的虚拟托管\n\n针对多个主机名的http流量路由由到同一个IP地址上。\n\n![image-20221020113006395](ingress-nginx简介/image-20221020113006395.png)\n\n如，以下 Ingress 会将请求 `first.bar.com` 的流量路由到 `service1`，将请求 `second.bar.com` 的流量路由到 `service2`，而所有其他流量都会被路由到 `service3`。\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: name-virtual-host-ingress-no-third-host\nspec:\n  rules:\n  - host: first.bar.com\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: service1\n            port:\n              number: 80\n  - host: second.bar.com\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: service2\n            port:\n              number: 80\n  - http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: service3\n            port:\n              number: 80\n```","slug":"k8s/ingress-nginx简介","published":1,"date":"2022-10-20T06:07:18.715Z","updated":"2022-10-20T06:09:47.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfd0015tpdoeh3x43gi","content":"<h1 id=\"ingress-nginx简介\"><a href=\"#ingress-nginx简介\" class=\"headerlink\" title=\"ingress-nginx简介\"></a>ingress-nginx简介</h1><p>公开从集群外部到集群内服务的http和https路由。流量路由有Ingress组员上定义的规则控制。</p>\n<p><img src=\"/2022/10/20/k8s/ingress-nginx%E7%AE%80%E4%BB%8B/image-20221020111254258.png\" alt=\"Ingress\"></p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ingress-http</span><br>  <span class=\"hljs-attr\">annotations:</span><br>    <span class=\"hljs-attr\">kubernetes.io/ingress.class:</span> <span class=\"hljs-string\">&quot;nginx&quot;</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">rules:</span><br>  <span class=\"hljs-comment\">#- host: nginx.mytest.org</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span><br>        <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-service</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>host（可选）：</p>\n<p>未指定host——适用于通过指定IP地址的所有入站HTTP通信</p>\n<p>指定host——该规则使用于该host</p>\n</li>\n<li><p>paths：每一个路径都有一个由serviceName和servicePort定义关联后端。</p>\n</li>\n<li><p>backend：服务名称和端口名称的组合。</p>\n</li>\n</ul>\n<h2 id=\"Ingress类型\"><a href=\"#Ingress类型\" class=\"headerlink\" title=\"Ingress类型\"></a>Ingress类型</h2><h3 id=\"简单扇出（fanout）\"><a href=\"#简单扇出（fanout）\" class=\"headerlink\" title=\"简单扇出（fanout）\"></a>简单扇出（fanout）</h3><p>根据请求的http URI将来自同一IP地址的路由到多个service。</p>\n<p><img src=\"/2022/10/20/k8s/ingress-nginx%E7%AE%80%E4%BB%8B/image-20221020112742780.png\" alt=\"image-20221020112742780\"></p>\n<h3 id=\"基于名称的虚拟托管\"><a href=\"#基于名称的虚拟托管\" class=\"headerlink\" title=\"基于名称的虚拟托管\"></a>基于名称的虚拟托管</h3><p>针对多个主机名的http流量路由由到同一个IP地址上。</p>\n<p><img src=\"/2022/10/20/k8s/ingress-nginx%E7%AE%80%E4%BB%8B/image-20221020113006395.png\" alt=\"image-20221020113006395\"></p>\n<p>如，以下 Ingress 会将请求 <code>first.bar.com</code> 的流量路由到 <code>service1</code>，将请求 <code>second.bar.com</code> 的流量路由到 <code>service2</code>，而所有其他流量都会被路由到 <code>service3</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">name-virtual-host-ingress-no-third-host</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">rules:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">first.bar.com</span><br>    <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&quot;/&quot;</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">service1</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">second.bar.com</span><br>    <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&quot;/&quot;</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">service2</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&quot;/&quot;</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">service3</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1123,"excerpt":"","more":"<h1 id=\"ingress-nginx简介\"><a href=\"#ingress-nginx简介\" class=\"headerlink\" title=\"ingress-nginx简介\"></a>ingress-nginx简介</h1><p>公开从集群外部到集群内服务的http和https路由。流量路由有Ingress组员上定义的规则控制。</p>\n<p><img src=\"/2022/10/20/k8s/ingress-nginx%E7%AE%80%E4%BB%8B/image-20221020111254258.png\" alt=\"Ingress\"></p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ingress-http</span><br>  <span class=\"hljs-attr\">annotations:</span><br>    <span class=\"hljs-attr\">kubernetes.io/ingress.class:</span> <span class=\"hljs-string\">&quot;nginx&quot;</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">rules:</span><br>  <span class=\"hljs-comment\">#- host: nginx.mytest.org</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/</span><br>        <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-service</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>host（可选）：</p>\n<p>未指定host——适用于通过指定IP地址的所有入站HTTP通信</p>\n<p>指定host——该规则使用于该host</p>\n</li>\n<li><p>paths：每一个路径都有一个由serviceName和servicePort定义关联后端。</p>\n</li>\n<li><p>backend：服务名称和端口名称的组合。</p>\n</li>\n</ul>\n<h2 id=\"Ingress类型\"><a href=\"#Ingress类型\" class=\"headerlink\" title=\"Ingress类型\"></a>Ingress类型</h2><h3 id=\"简单扇出（fanout）\"><a href=\"#简单扇出（fanout）\" class=\"headerlink\" title=\"简单扇出（fanout）\"></a>简单扇出（fanout）</h3><p>根据请求的http URI将来自同一IP地址的路由到多个service。</p>\n<p><img src=\"/2022/10/20/k8s/ingress-nginx%E7%AE%80%E4%BB%8B/image-20221020112742780.png\" alt=\"image-20221020112742780\"></p>\n<h3 id=\"基于名称的虚拟托管\"><a href=\"#基于名称的虚拟托管\" class=\"headerlink\" title=\"基于名称的虚拟托管\"></a>基于名称的虚拟托管</h3><p>针对多个主机名的http流量路由由到同一个IP地址上。</p>\n<p><img src=\"/2022/10/20/k8s/ingress-nginx%E7%AE%80%E4%BB%8B/image-20221020113006395.png\" alt=\"image-20221020113006395\"></p>\n<p>如，以下 Ingress 会将请求 <code>first.bar.com</code> 的流量路由到 <code>service1</code>，将请求 <code>second.bar.com</code> 的流量路由到 <code>service2</code>，而所有其他流量都会被路由到 <code>service3</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">name-virtual-host-ingress-no-third-host</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">rules:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">first.bar.com</span><br>    <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&quot;/&quot;</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">service1</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">second.bar.com</span><br>    <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&quot;/&quot;</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">service2</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span><br>      <span class=\"hljs-attr\">paths:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">Prefix</span><br>        <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&quot;/&quot;</span><br>        <span class=\"hljs-attr\">backend:</span><br>          <span class=\"hljs-attr\">service:</span><br>            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">service3</span><br>            <span class=\"hljs-attr\">port:</span><br>              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>"},{"title":"k8s在kind上的简单使用","_content":"\n\n\n在创建k8s集群可参考[kind安装部署k8s集群]()\n\n# 查看运行的节点\n\n创建了3个work节点和3个master\n\n```shell\n[root@host-server ~]# kubectl get nodes\nNAME                  STATUS   ROLES           AGE     VERSION\nkind-control-plane    Ready    control-plane   4h23m   v1.25.0\nkind-control-plane2   Ready    control-plane   4h22m   v1.25.0\nkind-control-plane3   Ready    control-plane   4h22m   v1.25.0\nkind-worker           Ready    <none>          4h21m   v1.25.0\nkind-worker2          Ready    <none>          4h21m   v1.25.0\nkind-worker3          Ready    <none>          4h21m   v1.25.0\n```\n\n# 如何运行\n\n在宿主机中，使用kubectl就可以完成几大部分的k8s操作，有些人可能就对于和平常看见的k8s部署不同，包括看不见构建k8s的镜像、它到底是如何部署上去、怎么就成功部署了3个works和3个master等有诸多的疑惑。\n\n先上图：\n\n![kind](k8s在kind上的简单使用/image-20220909161301440-1663039219073-7.png)\n\n在此也仅是简单介绍该工作流程，如果需要进一步了解，可参考[kind文档](https://kind.sigs.k8s.io/)\n\n1. 采用镜像的方式构建k8s node节点\n\n   kind,原文就是 Kubernetes in docker 。这样事情也就变得明朗起来。将k8s环境以docker container的方式搭建。\n\n   ```shell\n   [root@host-server ~]# docker ps -a\n   CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                       NAMES\n   a9459c6610fd        kindest/haproxy:v20220607-9a4d8d2a   \"haproxy -sf 7 -W -d…\"   4 hours ago         Up 4 hours          127.0.0.1:34805->6443/tcp   kind-external-load-balancer\n   1747e4be5b45        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours                                      kind-worker2\n   1af5558bd923        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours          127.0.0.1:46155->6443/tcp   kind-control-plane3\n   d8fd68d3fb29        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours          127.0.0.1:38435->6443/tcp   kind-control-plane\n   543d3a6c7d22        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours                                      kind-worker\n   78580624a92e        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours          127.0.0.1:34349->6443/tcp   kind-control-plane2\n   35e8c2851baf        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours                                      kind-worker3\n   ```\n\n2. 简化了环境的搭建\n\n   kind命令的使用，可以让操作者不在纠结搭建环境中出现的错误，毕竟在搭建环境的过程中，可能常常会出现各种各样的问题，最终导致从入门到放弃。\n\n3. 进入节点内部\n\n   以容器的方式进入节点环境，容器中涵盖了k8s所需的环境，包括kubeadm 、kubectl 、kubelet管理套件，\n\n   ```shell\n   [root@host-server ~]# docker exec -it kind-worker bash\n   root@kind-worker:/# kube\n   kubeadm  kubectl  kubelet\n   ```\n\n4. 采用crictl的方式 检查和调试kubernetes节点上的容器运行时和应用程序，其余的操作命令可参见https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/\n\n   ```shell\n   root@kind-worker:/# crictl pods\n   POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT             RUNTIME\n   70378a1203be0       5 hours ago         Ready               kube-proxy-9b29x    kube-system         0                   (default)\n   1155cba575f39       5 hours ago         Ready               kindnet-ftncm       kube-system         0                   (default)\n   ```","source":"_posts/k8s/k8s在kind上的简单使用.md","raw":"---\ntitle: k8s在kind上的简单使用\ncategories: \n- k8s\ntags:\n- k8s\n- kind\n---\n\n\n\n在创建k8s集群可参考[kind安装部署k8s集群]()\n\n# 查看运行的节点\n\n创建了3个work节点和3个master\n\n```shell\n[root@host-server ~]# kubectl get nodes\nNAME                  STATUS   ROLES           AGE     VERSION\nkind-control-plane    Ready    control-plane   4h23m   v1.25.0\nkind-control-plane2   Ready    control-plane   4h22m   v1.25.0\nkind-control-plane3   Ready    control-plane   4h22m   v1.25.0\nkind-worker           Ready    <none>          4h21m   v1.25.0\nkind-worker2          Ready    <none>          4h21m   v1.25.0\nkind-worker3          Ready    <none>          4h21m   v1.25.0\n```\n\n# 如何运行\n\n在宿主机中，使用kubectl就可以完成几大部分的k8s操作，有些人可能就对于和平常看见的k8s部署不同，包括看不见构建k8s的镜像、它到底是如何部署上去、怎么就成功部署了3个works和3个master等有诸多的疑惑。\n\n先上图：\n\n![kind](k8s在kind上的简单使用/image-20220909161301440-1663039219073-7.png)\n\n在此也仅是简单介绍该工作流程，如果需要进一步了解，可参考[kind文档](https://kind.sigs.k8s.io/)\n\n1. 采用镜像的方式构建k8s node节点\n\n   kind,原文就是 Kubernetes in docker 。这样事情也就变得明朗起来。将k8s环境以docker container的方式搭建。\n\n   ```shell\n   [root@host-server ~]# docker ps -a\n   CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                       NAMES\n   a9459c6610fd        kindest/haproxy:v20220607-9a4d8d2a   \"haproxy -sf 7 -W -d…\"   4 hours ago         Up 4 hours          127.0.0.1:34805->6443/tcp   kind-external-load-balancer\n   1747e4be5b45        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours                                      kind-worker2\n   1af5558bd923        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours          127.0.0.1:46155->6443/tcp   kind-control-plane3\n   d8fd68d3fb29        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours          127.0.0.1:38435->6443/tcp   kind-control-plane\n   543d3a6c7d22        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours                                      kind-worker\n   78580624a92e        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours          127.0.0.1:34349->6443/tcp   kind-control-plane2\n   35e8c2851baf        kindest/node:v1.25.0                 \"/usr/local/bin/entr…\"   4 hours ago         Up 4 hours                                      kind-worker3\n   ```\n\n2. 简化了环境的搭建\n\n   kind命令的使用，可以让操作者不在纠结搭建环境中出现的错误，毕竟在搭建环境的过程中，可能常常会出现各种各样的问题，最终导致从入门到放弃。\n\n3. 进入节点内部\n\n   以容器的方式进入节点环境，容器中涵盖了k8s所需的环境，包括kubeadm 、kubectl 、kubelet管理套件，\n\n   ```shell\n   [root@host-server ~]# docker exec -it kind-worker bash\n   root@kind-worker:/# kube\n   kubeadm  kubectl  kubelet\n   ```\n\n4. 采用crictl的方式 检查和调试kubernetes节点上的容器运行时和应用程序，其余的操作命令可参见https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/\n\n   ```shell\n   root@kind-worker:/# crictl pods\n   POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT             RUNTIME\n   70378a1203be0       5 hours ago         Ready               kube-proxy-9b29x    kube-system         0                   (default)\n   1155cba575f39       5 hours ago         Ready               kindnet-ftncm       kube-system         0                   (default)\n   ```","slug":"k8s/k8s在kind上的简单使用","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-20T01:38:09.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfe0018tpdohciyf1wt","content":"<p>在创建k8s集群可参考<a href>kind安装部署k8s集群</a></p>\n<h1 id=\"查看运行的节点\"><a href=\"#查看运行的节点\" class=\"headerlink\" title=\"查看运行的节点\"></a>查看运行的节点</h1><p>创建了3个work节点和3个master</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# kubectl get nodes<br>NAME                  STATUS   ROLES           AGE     VERSION<br>kind-control-plane    Ready    control-plane   4h23m   v1.25.0<br>kind-control-plane2   Ready    control-plane   4h22m   v1.25.0<br>kind-control-plane3   Ready    control-plane   4h22m   v1.25.0<br>kind-worker           Ready    &lt;none&gt;          4h21m   v1.25.0<br>kind-worker2          Ready    &lt;none&gt;          4h21m   v1.25.0<br>kind-worker3          Ready    &lt;none&gt;          4h21m   v1.25.0<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"如何运行\"><a href=\"#如何运行\" class=\"headerlink\" title=\"如何运行\"></a>如何运行</h1><p>在宿主机中，使用kubectl就可以完成几大部分的k8s操作，有些人可能就对于和平常看见的k8s部署不同，包括看不见构建k8s的镜像、它到底是如何部署上去、怎么就成功部署了3个works和3个master等有诸多的疑惑。</p>\n<p>先上图：</p>\n<p><img src=\"/2022/09/15/k8s/k8s%E5%9C%A8kind%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20220909161301440-1663039219073-7.png\" alt=\"kind\"></p>\n<p>在此也仅是简单介绍该工作流程，如果需要进一步了解，可参考<a href=\"https://kind.sigs.k8s.io/\">kind文档</a></p>\n<ol>\n<li><p>采用镜像的方式构建k8s node节点</p>\n<p>kind,原文就是 Kubernetes in docker 。这样事情也就变得明朗起来。将k8s环境以docker container的方式搭建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# docker ps -a<br>CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                       NAMES<br>a9459c6610fd        kindest/haproxy:v20220607-9a4d8d2a   &quot;haproxy -sf 7 -W -d…&quot;   4 hours ago         Up 4 hours          127.0.0.1:34805-&gt;6443/tcp   kind-external-load-balancer<br>1747e4be5b45        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker2<br>1af5558bd923        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:46155-&gt;6443/tcp   kind-control-plane3<br>d8fd68d3fb29        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:38435-&gt;6443/tcp   kind-control-plane<br>543d3a6c7d22        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker<br>78580624a92e        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:34349-&gt;6443/tcp   kind-control-plane2<br>35e8c2851baf        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker3<br></code></pre></td></tr></table></figure></li>\n<li><p>简化了环境的搭建</p>\n<p>kind命令的使用，可以让操作者不在纠结搭建环境中出现的错误，毕竟在搭建环境的过程中，可能常常会出现各种各样的问题，最终导致从入门到放弃。</p>\n</li>\n<li><p>进入节点内部</p>\n<p>以容器的方式进入节点环境，容器中涵盖了k8s所需的环境，包括kubeadm 、kubectl 、kubelet管理套件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# docker exec -it kind-worker bash<br>root@kind-worker:/# kube<br>kubeadm  kubectl  kubelet<br></code></pre></td></tr></table></figure></li>\n<li><p>采用crictl的方式 检查和调试kubernetes节点上的容器运行时和应用程序，其余的操作命令可参见<a href=\"https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/\">https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-worker:/# crictl pods<br>POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT             RUNTIME<br>70378a1203be0       5 hours ago         Ready               kube-proxy-9b29x    kube-system         0                   (default)<br>1155cba575f39       5 hours ago         Ready               kindnet-ftncm       kube-system         0                   (default)<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":2073,"excerpt":"","more":"<p>在创建k8s集群可参考<a href>kind安装部署k8s集群</a></p>\n<h1 id=\"查看运行的节点\"><a href=\"#查看运行的节点\" class=\"headerlink\" title=\"查看运行的节点\"></a>查看运行的节点</h1><p>创建了3个work节点和3个master</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# kubectl get nodes<br>NAME                  STATUS   ROLES           AGE     VERSION<br>kind-control-plane    Ready    control-plane   4h23m   v1.25.0<br>kind-control-plane2   Ready    control-plane   4h22m   v1.25.0<br>kind-control-plane3   Ready    control-plane   4h22m   v1.25.0<br>kind-worker           Ready    &lt;none&gt;          4h21m   v1.25.0<br>kind-worker2          Ready    &lt;none&gt;          4h21m   v1.25.0<br>kind-worker3          Ready    &lt;none&gt;          4h21m   v1.25.0<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"如何运行\"><a href=\"#如何运行\" class=\"headerlink\" title=\"如何运行\"></a>如何运行</h1><p>在宿主机中，使用kubectl就可以完成几大部分的k8s操作，有些人可能就对于和平常看见的k8s部署不同，包括看不见构建k8s的镜像、它到底是如何部署上去、怎么就成功部署了3个works和3个master等有诸多的疑惑。</p>\n<p>先上图：</p>\n<p><img src=\"/2022/09/15/k8s/k8s%E5%9C%A8kind%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20220909161301440-1663039219073-7.png\" alt=\"kind\"></p>\n<p>在此也仅是简单介绍该工作流程，如果需要进一步了解，可参考<a href=\"https://kind.sigs.k8s.io/\">kind文档</a></p>\n<ol>\n<li><p>采用镜像的方式构建k8s node节点</p>\n<p>kind,原文就是 Kubernetes in docker 。这样事情也就变得明朗起来。将k8s环境以docker container的方式搭建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# docker ps -a<br>CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                       NAMES<br>a9459c6610fd        kindest/haproxy:v20220607-9a4d8d2a   &quot;haproxy -sf 7 -W -d…&quot;   4 hours ago         Up 4 hours          127.0.0.1:34805-&gt;6443/tcp   kind-external-load-balancer<br>1747e4be5b45        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker2<br>1af5558bd923        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:46155-&gt;6443/tcp   kind-control-plane3<br>d8fd68d3fb29        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:38435-&gt;6443/tcp   kind-control-plane<br>543d3a6c7d22        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker<br>78580624a92e        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours          127.0.0.1:34349-&gt;6443/tcp   kind-control-plane2<br>35e8c2851baf        kindest/node:v1.25.0                 &quot;/usr/local/bin/entr…&quot;   4 hours ago         Up 4 hours                                      kind-worker3<br></code></pre></td></tr></table></figure></li>\n<li><p>简化了环境的搭建</p>\n<p>kind命令的使用，可以让操作者不在纠结搭建环境中出现的错误，毕竟在搭建环境的过程中，可能常常会出现各种各样的问题，最终导致从入门到放弃。</p>\n</li>\n<li><p>进入节点内部</p>\n<p>以容器的方式进入节点环境，容器中涵盖了k8s所需的环境，包括kubeadm 、kubectl 、kubelet管理套件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# docker exec -it kind-worker bash<br>root@kind-worker:/# kube<br>kubeadm  kubectl  kubelet<br></code></pre></td></tr></table></figure></li>\n<li><p>采用crictl的方式 检查和调试kubernetes节点上的容器运行时和应用程序，其余的操作命令可参见<a href=\"https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/\">https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/crictl/</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@kind-worker:/# crictl pods<br>POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT             RUNTIME<br>70378a1203be0       5 hours ago         Ready               kube-proxy-9b29x    kube-system         0                   (default)<br>1155cba575f39       5 hours ago         Ready               kindnet-ftncm       kube-system         0                   (default)<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"k8s基础","_content":"\nkubernetes——可移植、可扩展，用于管理容器化的工作负载和服务。可促进声明式配置和自动化。\n\n## 组件的部署方式\n\n传统部署：在物理服务器中部署不同的应用程序，多种不同的应用程序在部署过程中存在资源分配的问题。如果将不同的应用程序部署在不同的服务器部署，则会出现资源浪费问题。\n\n虚拟化部署：在物理服务器中设置不同的虚机系统，实现的资源的隔离，解决了资源分配问题。虚拟化技术能够更好的利用物理服务器资源，具有较好的可扩缩行等。\n\n容器部署：和虚拟化部署类似，但相比虚拟化，容器部署会更加的轻，只要基础架构相同，可以更便捷的进行不同主机、不同云之间的移植。\n\n- 敏捷应用程序的创建和部署。\n- 持续开发、集成和部署。\n- 关注开发和运维的分离、跨开发、测试和生产的环境的一致性、可移植性。\n- 以应用程序为中心的管理。\n- 松散耦合、分布式、弹性、解放的微服务。\n- 可观察性、资源隔离、利用\n\n## k8s的用处和劣势\n\n- 服务发现和负载均衡\n- 存储编排：自主选择自己的存储挂载系统，本地存储、公共云提供商等。\n- 自动部署和回滚：确保服务的完整运行。\n- 自动完成装箱计算、自动修复\n- 密钥与配置管理\n\n服务发现：在传统的部署环境中，服务运行在已知的IP和端口上。服务器之间的调用是通过端口和ip的方式来进行通信。在虚拟化环境中，服务的的地址经常发生变动，变动也就产生了服务发现的方式。\n\n可移植：可以在不同的系统运行。\n\n可扩展：资源、空间不够的时候，可以轻松扩展。\n\n声明式配置：相对于命令式操作，对于重复操作的效果是稳定的。","source":"_posts/k8s/k8s基础概念.md","raw":"---\ntitle: k8s基础\ncategories: \n- k8s\ntags:\n- k8s\n---\n\nkubernetes——可移植、可扩展，用于管理容器化的工作负载和服务。可促进声明式配置和自动化。\n\n## 组件的部署方式\n\n传统部署：在物理服务器中部署不同的应用程序，多种不同的应用程序在部署过程中存在资源分配的问题。如果将不同的应用程序部署在不同的服务器部署，则会出现资源浪费问题。\n\n虚拟化部署：在物理服务器中设置不同的虚机系统，实现的资源的隔离，解决了资源分配问题。虚拟化技术能够更好的利用物理服务器资源，具有较好的可扩缩行等。\n\n容器部署：和虚拟化部署类似，但相比虚拟化，容器部署会更加的轻，只要基础架构相同，可以更便捷的进行不同主机、不同云之间的移植。\n\n- 敏捷应用程序的创建和部署。\n- 持续开发、集成和部署。\n- 关注开发和运维的分离、跨开发、测试和生产的环境的一致性、可移植性。\n- 以应用程序为中心的管理。\n- 松散耦合、分布式、弹性、解放的微服务。\n- 可观察性、资源隔离、利用\n\n## k8s的用处和劣势\n\n- 服务发现和负载均衡\n- 存储编排：自主选择自己的存储挂载系统，本地存储、公共云提供商等。\n- 自动部署和回滚：确保服务的完整运行。\n- 自动完成装箱计算、自动修复\n- 密钥与配置管理\n\n服务发现：在传统的部署环境中，服务运行在已知的IP和端口上。服务器之间的调用是通过端口和ip的方式来进行通信。在虚拟化环境中，服务的的地址经常发生变动，变动也就产生了服务发现的方式。\n\n可移植：可以在不同的系统运行。\n\n可扩展：资源、空间不够的时候，可以轻松扩展。\n\n声明式配置：相对于命令式操作，对于重复操作的效果是稳定的。","slug":"k8s/k8s基础概念","published":1,"date":"2022-09-19T03:11:44.353Z","updated":"2022-09-19T07:58:47.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfe001btpdobh6d1542","content":"<p>kubernetes——可移植、可扩展，用于管理容器化的工作负载和服务。可促进声明式配置和自动化。</p>\n<h2 id=\"组件的部署方式\"><a href=\"#组件的部署方式\" class=\"headerlink\" title=\"组件的部署方式\"></a>组件的部署方式</h2><p>传统部署：在物理服务器中部署不同的应用程序，多种不同的应用程序在部署过程中存在资源分配的问题。如果将不同的应用程序部署在不同的服务器部署，则会出现资源浪费问题。</p>\n<p>虚拟化部署：在物理服务器中设置不同的虚机系统，实现的资源的隔离，解决了资源分配问题。虚拟化技术能够更好的利用物理服务器资源，具有较好的可扩缩行等。</p>\n<p>容器部署：和虚拟化部署类似，但相比虚拟化，容器部署会更加的轻，只要基础架构相同，可以更便捷的进行不同主机、不同云之间的移植。</p>\n<ul>\n<li>敏捷应用程序的创建和部署。</li>\n<li>持续开发、集成和部署。</li>\n<li>关注开发和运维的分离、跨开发、测试和生产的环境的一致性、可移植性。</li>\n<li>以应用程序为中心的管理。</li>\n<li>松散耦合、分布式、弹性、解放的微服务。</li>\n<li>可观察性、资源隔离、利用</li>\n</ul>\n<h2 id=\"k8s的用处和劣势\"><a href=\"#k8s的用处和劣势\" class=\"headerlink\" title=\"k8s的用处和劣势\"></a>k8s的用处和劣势</h2><ul>\n<li>服务发现和负载均衡</li>\n<li>存储编排：自主选择自己的存储挂载系统，本地存储、公共云提供商等。</li>\n<li>自动部署和回滚：确保服务的完整运行。</li>\n<li>自动完成装箱计算、自动修复</li>\n<li>密钥与配置管理</li>\n</ul>\n<p>服务发现：在传统的部署环境中，服务运行在已知的IP和端口上。服务器之间的调用是通过端口和ip的方式来进行通信。在虚拟化环境中，服务的的地址经常发生变动，变动也就产生了服务发现的方式。</p>\n<p>可移植：可以在不同的系统运行。</p>\n<p>可扩展：资源、空间不够的时候，可以轻松扩展。</p>\n<p>声明式配置：相对于命令式操作，对于重复操作的效果是稳定的。</p>\n","site":{"data":{}},"wordcount":616,"excerpt":"","more":"<p>kubernetes——可移植、可扩展，用于管理容器化的工作负载和服务。可促进声明式配置和自动化。</p>\n<h2 id=\"组件的部署方式\"><a href=\"#组件的部署方式\" class=\"headerlink\" title=\"组件的部署方式\"></a>组件的部署方式</h2><p>传统部署：在物理服务器中部署不同的应用程序，多种不同的应用程序在部署过程中存在资源分配的问题。如果将不同的应用程序部署在不同的服务器部署，则会出现资源浪费问题。</p>\n<p>虚拟化部署：在物理服务器中设置不同的虚机系统，实现的资源的隔离，解决了资源分配问题。虚拟化技术能够更好的利用物理服务器资源，具有较好的可扩缩行等。</p>\n<p>容器部署：和虚拟化部署类似，但相比虚拟化，容器部署会更加的轻，只要基础架构相同，可以更便捷的进行不同主机、不同云之间的移植。</p>\n<ul>\n<li>敏捷应用程序的创建和部署。</li>\n<li>持续开发、集成和部署。</li>\n<li>关注开发和运维的分离、跨开发、测试和生产的环境的一致性、可移植性。</li>\n<li>以应用程序为中心的管理。</li>\n<li>松散耦合、分布式、弹性、解放的微服务。</li>\n<li>可观察性、资源隔离、利用</li>\n</ul>\n<h2 id=\"k8s的用处和劣势\"><a href=\"#k8s的用处和劣势\" class=\"headerlink\" title=\"k8s的用处和劣势\"></a>k8s的用处和劣势</h2><ul>\n<li>服务发现和负载均衡</li>\n<li>存储编排：自主选择自己的存储挂载系统，本地存储、公共云提供商等。</li>\n<li>自动部署和回滚：确保服务的完整运行。</li>\n<li>自动完成装箱计算、自动修复</li>\n<li>密钥与配置管理</li>\n</ul>\n<p>服务发现：在传统的部署环境中，服务运行在已知的IP和端口上。服务器之间的调用是通过端口和ip的方式来进行通信。在虚拟化环境中，服务的的地址经常发生变动，变动也就产生了服务发现的方式。</p>\n<p>可移植：可以在不同的系统运行。</p>\n<p>可扩展：资源、空间不够的时候，可以轻松扩展。</p>\n<p>声明式配置：相对于命令式操作，对于重复操作的效果是稳定的。</p>\n"},{"title":"kind概念&安装部署k8s集群","_content":"\n\n\n\n\n**kind：**kubernetes in docker。将k8s所有需要的组件，全部部署在一个docker容器中，一套开箱即用的k8s环境搭建方案\n\n## Kind 相比于 Minikube 有什么优势呢？\n\n**基于** [**Docker**](https://cloud.tencent.com/product/tke?from=10680) **而不是虚拟化**\n\nKind 不是打包一个虚拟化镜像，而是直接讲 K8S 组件运行在 Docker。带来了什么好处呢？\n\n1. 不需要运行 GuestOS 占用资源更低。\n2. 不基于虚拟化技术，可以在 VM 中使用。\n3. 文件更小，更利于移植。\n\n**支持多节点 K8S 集群和 HA**\n\nKind 支持多角色的节点部署，你可以通过配置文件控制你需要几个 Master 节点，几个 Worker 节点，以更好的模拟生产中的实际环境。\n\n## 安装docker\n\n```shell\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n```\n\n## 安装kubectl(稳定最新版本 1.25.0)\n\n```shell\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\ninstall -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\nchmod +x kubectl\nmkdir -p ~/.local/bin\nmv ./kubectl ~/.local/bin/kubectl\nkubectl version --client\n```\n\n\n\n## 安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\n\n[Releases · kubernetes-sigs/kind · GitHub](https://github.com/kubernetes-sigs/kind/releases)\n\n```shell\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64\nchmod +x kind\nmv kind /usr/local/bin\n```\n\n## 安装一个k8s集群\n\n```shell\n[root@host-server ~]# kind create cluster\nCreating cluster \"kind\" ...\n ✓ Ensuring node image (kindest/node:v1.25.0) 🖼\n ✓ Preparing nodes 📦\n ✓ Writing configuration 📜\n ✓ Starting control-plane 🕹️\n ✓ Installing CNI 🔌\n ✓ Installing StorageClass 💾\nSet kubectl context to \"kind-kind\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kind\n\nHave a nice day! 👋\n[root@host-server ~]# kubectl cluster-info --context kind-kind\nKubernetes control plane is running at https://127.0.0.1:45151\nCoreDNS is running at https://127.0.0.1:45151/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n\n[root@host-server home]# kind create cluster --name kind-2\nCreating cluster \"kind-2\" ...\n ✓ Ensuring node image (kindest/node:v1.25.0) 🖼\n ✓ Preparing nodes 📦\n .....\n\n```\n\n## 删除集群\n\n```\nkind delete cluster\n```\n\n## 配置文件创建k8s集群\n\n```shell\n[root@host-server opt]# cat kind-config.yaml\nkind: Cluster\n#高版本默认是这个，版本较低的需要进行修改\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: control-plane\n- role: control-plane\n- role: worker\n- role: worker\n- role: worker\n[root@host-server ~]# kind create cluster --config=kind-config.yaml\n[root@host-server ~]# kind get clusters\nkind\n#构建成功之后node一直是notready的状态，可能是因为版本不对应\n[root@host-server ~]# kubectl get node\nNAME                  STATUS   ROLES           AGE     VERSION\nkind-control-plane    Ready    control-plane   9m13s   v1.25.0\nkind-control-plane2   Ready    control-plane   8m45s   v1.25.0\nkind-control-plane3   Ready    control-plane   7m56s   v1.25.0\nkind-worker           Ready    <none>          7m48s   v1.25.0\nkind-worker2          Ready    <none>          7m48s   v1.25.0\nkind-worker3          Ready    <none>          7m34s   v1.25.0\n```\n\n集群创建成功","source":"_posts/k8s/kind概念&安装部署k8s集群.md","raw":"---\ntitle: kind概念&安装部署k8s集群\ncategories: \n- k8s\ntags:\n- k8s\n- kind\n---\n\n\n\n\n\n**kind：**kubernetes in docker。将k8s所有需要的组件，全部部署在一个docker容器中，一套开箱即用的k8s环境搭建方案\n\n## Kind 相比于 Minikube 有什么优势呢？\n\n**基于** [**Docker**](https://cloud.tencent.com/product/tke?from=10680) **而不是虚拟化**\n\nKind 不是打包一个虚拟化镜像，而是直接讲 K8S 组件运行在 Docker。带来了什么好处呢？\n\n1. 不需要运行 GuestOS 占用资源更低。\n2. 不基于虚拟化技术，可以在 VM 中使用。\n3. 文件更小，更利于移植。\n\n**支持多节点 K8S 集群和 HA**\n\nKind 支持多角色的节点部署，你可以通过配置文件控制你需要几个 Master 节点，几个 Worker 节点，以更好的模拟生产中的实际环境。\n\n## 安装docker\n\n```shell\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n```\n\n## 安装kubectl(稳定最新版本 1.25.0)\n\n```shell\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\ninstall -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\nchmod +x kubectl\nmkdir -p ~/.local/bin\nmv ./kubectl ~/.local/bin/kubectl\nkubectl version --client\n```\n\n\n\n## 安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\n\n[Releases · kubernetes-sigs/kind · GitHub](https://github.com/kubernetes-sigs/kind/releases)\n\n```shell\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64\nchmod +x kind\nmv kind /usr/local/bin\n```\n\n## 安装一个k8s集群\n\n```shell\n[root@host-server ~]# kind create cluster\nCreating cluster \"kind\" ...\n ✓ Ensuring node image (kindest/node:v1.25.0) 🖼\n ✓ Preparing nodes 📦\n ✓ Writing configuration 📜\n ✓ Starting control-plane 🕹️\n ✓ Installing CNI 🔌\n ✓ Installing StorageClass 💾\nSet kubectl context to \"kind-kind\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kind\n\nHave a nice day! 👋\n[root@host-server ~]# kubectl cluster-info --context kind-kind\nKubernetes control plane is running at https://127.0.0.1:45151\nCoreDNS is running at https://127.0.0.1:45151/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n\n[root@host-server home]# kind create cluster --name kind-2\nCreating cluster \"kind-2\" ...\n ✓ Ensuring node image (kindest/node:v1.25.0) 🖼\n ✓ Preparing nodes 📦\n .....\n\n```\n\n## 删除集群\n\n```\nkind delete cluster\n```\n\n## 配置文件创建k8s集群\n\n```shell\n[root@host-server opt]# cat kind-config.yaml\nkind: Cluster\n#高版本默认是这个，版本较低的需要进行修改\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: control-plane\n- role: control-plane\n- role: worker\n- role: worker\n- role: worker\n[root@host-server ~]# kind create cluster --config=kind-config.yaml\n[root@host-server ~]# kind get clusters\nkind\n#构建成功之后node一直是notready的状态，可能是因为版本不对应\n[root@host-server ~]# kubectl get node\nNAME                  STATUS   ROLES           AGE     VERSION\nkind-control-plane    Ready    control-plane   9m13s   v1.25.0\nkind-control-plane2   Ready    control-plane   8m45s   v1.25.0\nkind-control-plane3   Ready    control-plane   7m56s   v1.25.0\nkind-worker           Ready    <none>          7m48s   v1.25.0\nkind-worker2          Ready    <none>          7m48s   v1.25.0\nkind-worker3          Ready    <none>          7m34s   v1.25.0\n```\n\n集群创建成功","slug":"k8s/kind概念&安装部署k8s集群","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-19T03:00:24.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsff001dtpdob46kbr55","content":"<p><strong>kind：</strong>kubernetes in docker。将k8s所有需要的组件，全部部署在一个docker容器中，一套开箱即用的k8s环境搭建方案</p>\n<h2 id=\"Kind-相比于-Minikube-有什么优势呢？\"><a href=\"#Kind-相比于-Minikube-有什么优势呢？\" class=\"headerlink\" title=\"Kind 相比于 Minikube 有什么优势呢？\"></a>Kind 相比于 Minikube 有什么优势呢？</h2><p><strong>基于</strong> <a href=\"https://cloud.tencent.com/product/tke?from=10680\"><strong>Docker</strong></a> <strong>而不是虚拟化</strong></p>\n<p>Kind 不是打包一个虚拟化镜像，而是直接讲 K8S 组件运行在 Docker。带来了什么好处呢？</p>\n<ol>\n<li>不需要运行 GuestOS 占用资源更低。</li>\n<li>不基于虚拟化技术，可以在 VM 中使用。</li>\n<li>文件更小，更利于移植。</li>\n</ol>\n<p><strong>支持多节点 K8S 集群和 HA</strong></p>\n<p>Kind 支持多角色的节点部署，你可以通过配置文件控制你需要几个 Master 节点，几个 Worker 节点，以更好的模拟生产中的实际环境。</p>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装kubectl-稳定最新版本-1-25-0\"><a href=\"#安装kubectl-稳定最新版本-1-25-0\" class=\"headerlink\" title=\"安装kubectl(稳定最新版本 1.25.0)\"></a>安装kubectl(稳定最新版本 1.25.0)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;<br>install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br>chmod +x kubectl<br>mkdir -p ~/.local/bin<br>mv ./kubectl ~/.local/bin/kubectl<br>kubectl version --client<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\"><a href=\"#安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\" class=\"headerlink\" title=\"安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\"></a>安装kind（根据kubectl的版本安装kind，不易出错可成功安装）</h2><p><a href=\"https://github.com/kubernetes-sigs/kind/releases\">Releases · kubernetes-sigs/kind · GitHub</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64<br>chmod +x kind<br>mv kind /usr/local/bin<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装一个k8s集群\"><a href=\"#安装一个k8s集群\" class=\"headerlink\" title=\"安装一个k8s集群\"></a>安装一个k8s集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# kind create cluster<br>Creating cluster &quot;kind&quot; ...<br> ✓ Ensuring node image (kindest/node:v1.25.0) 🖼<br> ✓ Preparing nodes 📦<br> ✓ Writing configuration 📜<br> ✓ Starting control-plane 🕹️<br> ✓ Installing CNI 🔌<br> ✓ Installing StorageClass 💾<br>Set kubectl context to &quot;kind-kind&quot;<br>You can now use your cluster with:<br><br>kubectl cluster-info --context kind-kind<br><br>Have a nice day! 👋<br>[root@host-server ~]# kubectl cluster-info --context kind-kind<br>Kubernetes control plane is running at https://127.0.0.1:45151<br>CoreDNS is running at https://127.0.0.1:45151/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy<br><br>To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.<br><br>[root@host-server home]# kind create cluster --name kind-2<br>Creating cluster &quot;kind-2&quot; ...<br> ✓ Ensuring node image (kindest/node:v1.25.0) 🖼<br> ✓ Preparing nodes 📦<br> .....<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除集群\"><a href=\"#删除集群\" class=\"headerlink\" title=\"删除集群\"></a>删除集群</h2><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\">kind <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">cluster</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件创建k8s集群\"><a href=\"#配置文件创建k8s集群\" class=\"headerlink\" title=\"配置文件创建k8s集群\"></a>配置文件创建k8s集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server opt]# cat kind-config.yaml<br>kind: Cluster<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">高版本默认是这个，版本较低的需要进行修改</span><br>apiVersion: kind.x-k8s.io/v1alpha4<br>nodes:<br>- role: control-plane<br>- role: control-plane<br>- role: control-plane<br>- role: worker<br>- role: worker<br>- role: worker<br>[root@host-server ~]# kind create cluster --config=kind-config.yaml<br>[root@host-server ~]# kind get clusters<br>kind<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">构建成功之后node一直是notready的状态，可能是因为版本不对应</span><br>[root@host-server ~]# kubectl get node<br>NAME                  STATUS   ROLES           AGE     VERSION<br>kind-control-plane    Ready    control-plane   9m13s   v1.25.0<br>kind-control-plane2   Ready    control-plane   8m45s   v1.25.0<br>kind-control-plane3   Ready    control-plane   7m56s   v1.25.0<br>kind-worker           Ready    &lt;none&gt;          7m48s   v1.25.0<br>kind-worker2          Ready    &lt;none&gt;          7m48s   v1.25.0<br>kind-worker3          Ready    &lt;none&gt;          7m34s   v1.25.0<br></code></pre></td></tr></table></figure>\n\n<p>集群创建成功</p>\n","site":{"data":{}},"wordcount":2381,"excerpt":"","more":"<p><strong>kind：</strong>kubernetes in docker。将k8s所有需要的组件，全部部署在一个docker容器中，一套开箱即用的k8s环境搭建方案</p>\n<h2 id=\"Kind-相比于-Minikube-有什么优势呢？\"><a href=\"#Kind-相比于-Minikube-有什么优势呢？\" class=\"headerlink\" title=\"Kind 相比于 Minikube 有什么优势呢？\"></a>Kind 相比于 Minikube 有什么优势呢？</h2><p><strong>基于</strong> <a href=\"https://cloud.tencent.com/product/tke?from=10680\"><strong>Docker</strong></a> <strong>而不是虚拟化</strong></p>\n<p>Kind 不是打包一个虚拟化镜像，而是直接讲 K8S 组件运行在 Docker。带来了什么好处呢？</p>\n<ol>\n<li>不需要运行 GuestOS 占用资源更低。</li>\n<li>不基于虚拟化技术，可以在 VM 中使用。</li>\n<li>文件更小，更利于移植。</li>\n</ol>\n<p><strong>支持多节点 K8S 集群和 HA</strong></p>\n<p>Kind 支持多角色的节点部署，你可以通过配置文件控制你需要几个 Master 节点，几个 Worker 节点，以更好的模拟生产中的实际环境。</p>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装kubectl-稳定最新版本-1-25-0\"><a href=\"#安装kubectl-稳定最新版本-1-25-0\" class=\"headerlink\" title=\"安装kubectl(稳定最新版本 1.25.0)\"></a>安装kubectl(稳定最新版本 1.25.0)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;<br>install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br>chmod +x kubectl<br>mkdir -p ~/.local/bin<br>mv ./kubectl ~/.local/bin/kubectl<br>kubectl version --client<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\"><a href=\"#安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\" class=\"headerlink\" title=\"安装kind（根据kubectl的版本安装kind，不易出错可成功安装）\"></a>安装kind（根据kubectl的版本安装kind，不易出错可成功安装）</h2><p><a href=\"https://github.com/kubernetes-sigs/kind/releases\">Releases · kubernetes-sigs/kind · GitHub</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64<br>chmod +x kind<br>mv kind /usr/local/bin<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装一个k8s集群\"><a href=\"#安装一个k8s集群\" class=\"headerlink\" title=\"安装一个k8s集群\"></a>安装一个k8s集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server ~]# kind create cluster<br>Creating cluster &quot;kind&quot; ...<br> ✓ Ensuring node image (kindest/node:v1.25.0) 🖼<br> ✓ Preparing nodes 📦<br> ✓ Writing configuration 📜<br> ✓ Starting control-plane 🕹️<br> ✓ Installing CNI 🔌<br> ✓ Installing StorageClass 💾<br>Set kubectl context to &quot;kind-kind&quot;<br>You can now use your cluster with:<br><br>kubectl cluster-info --context kind-kind<br><br>Have a nice day! 👋<br>[root@host-server ~]# kubectl cluster-info --context kind-kind<br>Kubernetes control plane is running at https://127.0.0.1:45151<br>CoreDNS is running at https://127.0.0.1:45151/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy<br><br>To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.<br><br>[root@host-server home]# kind create cluster --name kind-2<br>Creating cluster &quot;kind-2&quot; ...<br> ✓ Ensuring node image (kindest/node:v1.25.0) 🖼<br> ✓ Preparing nodes 📦<br> .....<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除集群\"><a href=\"#删除集群\" class=\"headerlink\" title=\"删除集群\"></a>删除集群</h2><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\">kind <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">cluster</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件创建k8s集群\"><a href=\"#配置文件创建k8s集群\" class=\"headerlink\" title=\"配置文件创建k8s集群\"></a>配置文件创建k8s集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@host-server opt]# cat kind-config.yaml<br>kind: Cluster<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">高版本默认是这个，版本较低的需要进行修改</span><br>apiVersion: kind.x-k8s.io/v1alpha4<br>nodes:<br>- role: control-plane<br>- role: control-plane<br>- role: control-plane<br>- role: worker<br>- role: worker<br>- role: worker<br>[root@host-server ~]# kind create cluster --config=kind-config.yaml<br>[root@host-server ~]# kind get clusters<br>kind<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">构建成功之后node一直是notready的状态，可能是因为版本不对应</span><br>[root@host-server ~]# kubectl get node<br>NAME                  STATUS   ROLES           AGE     VERSION<br>kind-control-plane    Ready    control-plane   9m13s   v1.25.0<br>kind-control-plane2   Ready    control-plane   8m45s   v1.25.0<br>kind-control-plane3   Ready    control-plane   7m56s   v1.25.0<br>kind-worker           Ready    &lt;none&gt;          7m48s   v1.25.0<br>kind-worker2          Ready    &lt;none&gt;          7m48s   v1.25.0<br>kind-worker3          Ready    &lt;none&gt;          7m34s   v1.25.0<br></code></pre></td></tr></table></figure>\n\n<p>集群创建成功</p>\n"},{"title":"k8s对象管理","_content":"\n# 指令式命令管理\n\n`kubectl`采用动词驱动的方式来创建一些常见的对象类型。\n\n`run`:创建一个pod运行容器。\n\n`create`:创建对象——支持JSON和YMAL格式类型。\n\n可以创建不同的对象类型\n\n```shell\nExamples:\n  # Create a pod using the data in pod.json\n  kubectl create -f ./pod.json\n\n  # Create a pod based on the JSON passed into stdin\n  cat pod.json | kubectl create -f -\n\n  # Edit the data in registry.yaml in JSON then create the resource using the edited data\n  kubectl create -f registry.yaml --edit -o json\n```\n\n`delete`:与create的用法相似\n\n```shell\nExamples:\n  # Delete a pod using the type and name specified in pod.json\n  kubectl delete -f ./pod.json\n\n  # Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n  kubectl delete -k dir\n\n  # Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n  kubectl delete -f '*.json'\n\n  # Delete a pod based on the type and name in the JSON passed into stdin\n  cat pod.json | kubectl delete -f -\n\n  # Delete pods and services with same names \"baz\" and \"foo\"\n  kubectl delete pod,service baz foo\n\n  # Delete pods and services with label name=myLabel\n  kubectl delete pods,services -l name=myLabel\n\n  # Delete a pod with minimal delay\n  kubectl delete pod foo --now\n\n  # Force delete a pod on a dead node\n  kubectl delete pod foo --force\n\n  # Delete all pods\n  kubectl delete pods --all\n\n```\n\n`set`：在创建对象之前修改对象\n\n```shell\nkubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -\n```\n\n`kubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client`:创建service配置，但将其以YAML格式标准输出上打印而不是发送API服务器。\n\n`kubectl set selector --local -f - 'environment=qa' -o yaml`从标准输入读入配置，更新yaml。\n\n`kubectl create -f -`:使用标准输入上获得的配置创建对象\n\n`edit`更改对象\n\n`kubectl create --edit`来在对象创建之前更改配置。","source":"_posts/k8s/对象管理.md","raw":"---\ntitle: k8s对象管理\ncategories: \n- k8s\ntags:\n- k8s\n---\n\n# 指令式命令管理\n\n`kubectl`采用动词驱动的方式来创建一些常见的对象类型。\n\n`run`:创建一个pod运行容器。\n\n`create`:创建对象——支持JSON和YMAL格式类型。\n\n可以创建不同的对象类型\n\n```shell\nExamples:\n  # Create a pod using the data in pod.json\n  kubectl create -f ./pod.json\n\n  # Create a pod based on the JSON passed into stdin\n  cat pod.json | kubectl create -f -\n\n  # Edit the data in registry.yaml in JSON then create the resource using the edited data\n  kubectl create -f registry.yaml --edit -o json\n```\n\n`delete`:与create的用法相似\n\n```shell\nExamples:\n  # Delete a pod using the type and name specified in pod.json\n  kubectl delete -f ./pod.json\n\n  # Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n  kubectl delete -k dir\n\n  # Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n  kubectl delete -f '*.json'\n\n  # Delete a pod based on the type and name in the JSON passed into stdin\n  cat pod.json | kubectl delete -f -\n\n  # Delete pods and services with same names \"baz\" and \"foo\"\n  kubectl delete pod,service baz foo\n\n  # Delete pods and services with label name=myLabel\n  kubectl delete pods,services -l name=myLabel\n\n  # Delete a pod with minimal delay\n  kubectl delete pod foo --now\n\n  # Force delete a pod on a dead node\n  kubectl delete pod foo --force\n\n  # Delete all pods\n  kubectl delete pods --all\n\n```\n\n`set`：在创建对象之前修改对象\n\n```shell\nkubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -\n```\n\n`kubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client`:创建service配置，但将其以YAML格式标准输出上打印而不是发送API服务器。\n\n`kubectl set selector --local -f - 'environment=qa' -o yaml`从标准输入读入配置，更新yaml。\n\n`kubectl create -f -`:使用标准输入上获得的配置创建对象\n\n`edit`更改对象\n\n`kubectl create --edit`来在对象创建之前更改配置。","slug":"k8s/对象管理","published":1,"date":"2022-09-19T07:59:18.389Z","updated":"2022-09-20T01:37:59.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfg001gtpdo0ro62h22","content":"<h1 id=\"指令式命令管理\"><a href=\"#指令式命令管理\" class=\"headerlink\" title=\"指令式命令管理\"></a>指令式命令管理</h1><p><code>kubectl</code>采用动词驱动的方式来创建一些常见的对象类型。</p>\n<p><code>run</code>:创建一个pod运行容器。</p>\n<p><code>create</code>:创建对象——支持JSON和YMAL格式类型。</p>\n<p>可以创建不同的对象类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Examples:<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Create a pod using the data <span class=\"hljs-keyword\">in</span> pod.json</span><br>  kubectl create -f ./pod.json<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Create a pod based on the JSON passed into stdin</span><br>  cat pod.json | kubectl create -f -<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Edit the data <span class=\"hljs-keyword\">in</span> registry.yaml <span class=\"hljs-keyword\">in</span> JSON <span class=\"hljs-keyword\">then</span> create the resource using the edited data</span><br>  kubectl create -f registry.yaml --edit -o json<br></code></pre></td></tr></table></figure>\n\n<p><code>delete</code>:与create的用法相似</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Examples:<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete a pod using the <span class=\"hljs-built_in\">type</span> and name specified <span class=\"hljs-keyword\">in</span> pod.json</span><br>  kubectl delete -f ./pod.json<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete resources from a directory containing kustomization.yaml - e.g. <span class=\"hljs-built_in\">dir</span>/kustomization.yaml</span><br>  kubectl delete -k dir<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete resources from all files that end with <span class=\"hljs-string\">&#x27;.json&#x27;</span> - i.e. <span class=\"hljs-built_in\">expand</span> wildcard characters <span class=\"hljs-keyword\">in</span> file names</span><br>  kubectl delete -f &#x27;*.json&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete a pod based on the <span class=\"hljs-built_in\">type</span> and name <span class=\"hljs-keyword\">in</span> the JSON passed into stdin</span><br>  cat pod.json | kubectl delete -f -<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete pods and services with same names <span class=\"hljs-string\">&quot;baz&quot;</span> and <span class=\"hljs-string\">&quot;foo&quot;</span></span><br>  kubectl delete pod,service baz foo<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete pods and services with label name=myLabel</span><br>  kubectl delete pods,services -l name=myLabel<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete a pod with minimal delay</span><br>  kubectl delete pod foo --now<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Force delete a pod on a dead node</span><br>  kubectl delete pod foo --force<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete all pods</span><br>  kubectl delete pods --all<br><br></code></pre></td></tr></table></figure>\n\n<p><code>set</code>：在创建对象之前修改对象</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">kubectl create service clusterip my-svc --clusterip=&quot;None&quot; -o yaml --dry-run=client | kubectl set selector --local -f - &#x27;environment=qa&#x27; -o yaml | kubectl create -f -<br></code></pre></td></tr></table></figure>\n\n<p><code>kubectl create service clusterip my-svc --clusterip=&quot;None&quot; -o yaml --dry-run=client</code>:创建service配置，但将其以YAML格式标准输出上打印而不是发送API服务器。</p>\n<p><code>kubectl set selector --local -f - &#39;environment=qa&#39; -o yaml</code>从标准输入读入配置，更新yaml。</p>\n<p><code>kubectl create -f -</code>:使用标准输入上获得的配置创建对象</p>\n<p><code>edit</code>更改对象</p>\n<p><code>kubectl create --edit</code>来在对象创建之前更改配置。</p>\n","site":{"data":{}},"wordcount":1588,"excerpt":"","more":"<h1 id=\"指令式命令管理\"><a href=\"#指令式命令管理\" class=\"headerlink\" title=\"指令式命令管理\"></a>指令式命令管理</h1><p><code>kubectl</code>采用动词驱动的方式来创建一些常见的对象类型。</p>\n<p><code>run</code>:创建一个pod运行容器。</p>\n<p><code>create</code>:创建对象——支持JSON和YMAL格式类型。</p>\n<p>可以创建不同的对象类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Examples:<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Create a pod using the data <span class=\"hljs-keyword\">in</span> pod.json</span><br>  kubectl create -f ./pod.json<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Create a pod based on the JSON passed into stdin</span><br>  cat pod.json | kubectl create -f -<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Edit the data <span class=\"hljs-keyword\">in</span> registry.yaml <span class=\"hljs-keyword\">in</span> JSON <span class=\"hljs-keyword\">then</span> create the resource using the edited data</span><br>  kubectl create -f registry.yaml --edit -o json<br></code></pre></td></tr></table></figure>\n\n<p><code>delete</code>:与create的用法相似</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Examples:<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete a pod using the <span class=\"hljs-built_in\">type</span> and name specified <span class=\"hljs-keyword\">in</span> pod.json</span><br>  kubectl delete -f ./pod.json<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete resources from a directory containing kustomization.yaml - e.g. <span class=\"hljs-built_in\">dir</span>/kustomization.yaml</span><br>  kubectl delete -k dir<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete resources from all files that end with <span class=\"hljs-string\">&#x27;.json&#x27;</span> - i.e. <span class=\"hljs-built_in\">expand</span> wildcard characters <span class=\"hljs-keyword\">in</span> file names</span><br>  kubectl delete -f &#x27;*.json&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete a pod based on the <span class=\"hljs-built_in\">type</span> and name <span class=\"hljs-keyword\">in</span> the JSON passed into stdin</span><br>  cat pod.json | kubectl delete -f -<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete pods and services with same names <span class=\"hljs-string\">&quot;baz&quot;</span> and <span class=\"hljs-string\">&quot;foo&quot;</span></span><br>  kubectl delete pod,service baz foo<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete pods and services with label name=myLabel</span><br>  kubectl delete pods,services -l name=myLabel<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete a pod with minimal delay</span><br>  kubectl delete pod foo --now<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Force delete a pod on a dead node</span><br>  kubectl delete pod foo --force<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">Delete all pods</span><br>  kubectl delete pods --all<br><br></code></pre></td></tr></table></figure>\n\n<p><code>set</code>：在创建对象之前修改对象</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">kubectl create service clusterip my-svc --clusterip=&quot;None&quot; -o yaml --dry-run=client | kubectl set selector --local -f - &#x27;environment=qa&#x27; -o yaml | kubectl create -f -<br></code></pre></td></tr></table></figure>\n\n<p><code>kubectl create service clusterip my-svc --clusterip=&quot;None&quot; -o yaml --dry-run=client</code>:创建service配置，但将其以YAML格式标准输出上打印而不是发送API服务器。</p>\n<p><code>kubectl set selector --local -f - &#39;environment=qa&#39; -o yaml</code>从标准输入读入配置，更新yaml。</p>\n<p><code>kubectl create -f -</code>:使用标准输入上获得的配置创建对象</p>\n<p><code>edit</code>更改对象</p>\n<p><code>kubectl create --edit</code>来在对象创建之前更改配置。</p>\n"},{"title":"ccache安装及使用","_content":"\n## 简介\n\n在处理一些较大规模工程时，编译会花费较长的时间。ccache会在第一遍编译时时间较长，之后的编译会成倍的提速。\n\n**基本原理：**通过头文件告诉缓存到源文件中而改进构建性能，因而通过减少每一步编译时添加头文件所需的时间而提高构建速度。\n\n第一趟编译ccache缓存GCC的\"-E\"的输出，编译选项以及.o文件到$HOME/.ccache。第二次编译尽量利用缓存，必要时更新缓存。\n\n## 安装\n\n```shell\n[root@68ab9a9c9a49 ccache-3.2.4]# yum install gcc make cmake -y\n\n[root@68ab9a9c9a49 home]# wget http://samba.org/ftp/ccache/ccache-3.2.4.tar.gz\n[root@68ab9a9c9a49 home]# tar -zxf ccache-3.2.4.tar.gz\n[root@68ab9a9c9a49 home]# ls\nccache-3.2.4  ccache-3.2.4.tar.gz\n[root@68ab9a9c9a49 home]# cd ccache-3.2.4\n#配置安装\n[root@68ab9a9c9a49 ccache-3.2.4]# /home/ccache-3.2.4/configure -prefix=/usr/local/ccache-3.2.4\nconfigure: Configuring ccache\nchecking build system type... aarch64-unknown-linux-gnu\nchecking host system type... aarch64-unknown-linux-gnu\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables...\nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\n.......\n#编译安装\n[root@034ebb878219 ccache-3.2.4]# make -j4\n[root@68ab9a9c9a49 ccache-3.2.4]# make install\n/usr/bin/install -c -d /usr/local/ccache-3.2.4/bin\n/usr/bin/install -c -m 755 ccache /usr/local/ccache-3.2.4/bin\n/usr/bin/install -c -d /usr/local/ccache-3.2.4/share/man/man1\n/usr/bin/install -c -m 644 ./ccache.1 /usr/local/ccache-3.2.4/share/man/man1/\n\n[root@68ab9a9c9a49 home]# cd /usr/bin/\n[root@68ab9a9c9a49 bin]# ln -s /usr/local/ccache-3.2.4/bin/ccache ccache\n\n[root@68ab9a9c9a49 usr]# ccache --v\nccache version 3.2.4\n\nCopyright (C) 2002-2007 Andrew Tridgell\nCopyright (C) 2009-2015 Joel Rosdahl\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 3 of the License, or (at your option) any later\nversion.\n\n```\n\n## 编译加速使用（mysql编译）\n\n### ccache加入环境变量，取代C编译器：\n\n```\ncp ccache /usr/local/bin/\nln -s ccache /usr/local/bin/gcc\nln -s ccache /usr/local/bin/g++\nln -s ccache /usr/local/bin/cc\nln -s ccache /usr/local/bin/c++\n```\n\nyum安装以缓存的形式进行安装，目录挂载，本地源\n\n可以大量的减少安装等待的时间\n\n```\nyum install --downloadonly 包名\n```\n\n在 ccache 中使用 -s 命令行选项来获得关于高速缓存性能的统计数据。\n\n### MYSQL 5.7.X编译\n\n#### 方法一\n\n将sh文件后台执行，`sh test.sh &> /tmp/test.log`\n\nmysql版本：5.7.36\n\n时间消耗：21 minutes\n\n第一次使用 ccache 编译那个文件时，您将不会看到有任何的帮助，因为编译信息还没有被高速缓存。\n\nccache获取的缓存的数据\n\n```shel\n[root@74c8c1b5bfab home]# ccache -s\ncache directory                     /root/.ccache\nprimary config                      /root/.ccache/ccache.conf\nsecondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf\ncache hit (direct)                    36\ncache hit (preprocessed)              23\ncache miss                          2239\ncalled for link                      508\ncalled for preprocessing              20\ncompile failed                        19\npreprocessor error                    20\nno input file                          3\nfiles in cache                      4715\ncache size                           1.6 GB\nmax cache size                       5.0 GB\n```\n\n#### 方法二\n\n**前提：**.cacahe文件中已经获取到编译的缓存\n\n```shell\ndocker run -itd --name ccachtest -v $PWD/yumcache/:/home/lamp -v $PWD/ccache/:/root/.ccache -v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4 centos:7\n```\n\n时间消耗：Total:4 minutes\n\n1. yum下载采用缓存的方式进行\n\n   `-v $PWD/yumcache/:/home/lamp`\n\n2. ccache不必每次都进行编译\n\n   `-v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4`\t\n\n3. 缓存/root/.ccache文件目录\n\n   `-v $PWD/ccache/:/root/.ccache`\n\n#### 同缓存编译不同版本\n\n参考方法二，仅修改mysql的版本：5.7.35\n\n时间消耗:19 minutes\n\nccache获取的缓存的数据\n\n```shell\n[root@0a200c0bc3fd .ccache]# ccache -s\ncache directory                     /root/.ccache\nprimary config                      /root/.ccache/ccache.conf\nsecondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf\ncache hit (direct)                  2544\ncache hit (preprocessed)              68\ncache miss                          4386\ncalled for link                     1630\ncalled for preprocessing              60\ncompile failed                        57\npreprocessor error                    62\nno input file                         11\nfiles in cache                      9245\ncache size                           3.1 GB\nmax cache size                       5.0 GB\n```\n\n","source":"_posts/编译安装/ccache安装及使用.md","raw":"---\ntitle: ccache安装及使用\ncategories: \n- 编译安装\ntags:\n- ccache\n---\n\n## 简介\n\n在处理一些较大规模工程时，编译会花费较长的时间。ccache会在第一遍编译时时间较长，之后的编译会成倍的提速。\n\n**基本原理：**通过头文件告诉缓存到源文件中而改进构建性能，因而通过减少每一步编译时添加头文件所需的时间而提高构建速度。\n\n第一趟编译ccache缓存GCC的\"-E\"的输出，编译选项以及.o文件到$HOME/.ccache。第二次编译尽量利用缓存，必要时更新缓存。\n\n## 安装\n\n```shell\n[root@68ab9a9c9a49 ccache-3.2.4]# yum install gcc make cmake -y\n\n[root@68ab9a9c9a49 home]# wget http://samba.org/ftp/ccache/ccache-3.2.4.tar.gz\n[root@68ab9a9c9a49 home]# tar -zxf ccache-3.2.4.tar.gz\n[root@68ab9a9c9a49 home]# ls\nccache-3.2.4  ccache-3.2.4.tar.gz\n[root@68ab9a9c9a49 home]# cd ccache-3.2.4\n#配置安装\n[root@68ab9a9c9a49 ccache-3.2.4]# /home/ccache-3.2.4/configure -prefix=/usr/local/ccache-3.2.4\nconfigure: Configuring ccache\nchecking build system type... aarch64-unknown-linux-gnu\nchecking host system type... aarch64-unknown-linux-gnu\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables...\nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\n.......\n#编译安装\n[root@034ebb878219 ccache-3.2.4]# make -j4\n[root@68ab9a9c9a49 ccache-3.2.4]# make install\n/usr/bin/install -c -d /usr/local/ccache-3.2.4/bin\n/usr/bin/install -c -m 755 ccache /usr/local/ccache-3.2.4/bin\n/usr/bin/install -c -d /usr/local/ccache-3.2.4/share/man/man1\n/usr/bin/install -c -m 644 ./ccache.1 /usr/local/ccache-3.2.4/share/man/man1/\n\n[root@68ab9a9c9a49 home]# cd /usr/bin/\n[root@68ab9a9c9a49 bin]# ln -s /usr/local/ccache-3.2.4/bin/ccache ccache\n\n[root@68ab9a9c9a49 usr]# ccache --v\nccache version 3.2.4\n\nCopyright (C) 2002-2007 Andrew Tridgell\nCopyright (C) 2009-2015 Joel Rosdahl\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 3 of the License, or (at your option) any later\nversion.\n\n```\n\n## 编译加速使用（mysql编译）\n\n### ccache加入环境变量，取代C编译器：\n\n```\ncp ccache /usr/local/bin/\nln -s ccache /usr/local/bin/gcc\nln -s ccache /usr/local/bin/g++\nln -s ccache /usr/local/bin/cc\nln -s ccache /usr/local/bin/c++\n```\n\nyum安装以缓存的形式进行安装，目录挂载，本地源\n\n可以大量的减少安装等待的时间\n\n```\nyum install --downloadonly 包名\n```\n\n在 ccache 中使用 -s 命令行选项来获得关于高速缓存性能的统计数据。\n\n### MYSQL 5.7.X编译\n\n#### 方法一\n\n将sh文件后台执行，`sh test.sh &> /tmp/test.log`\n\nmysql版本：5.7.36\n\n时间消耗：21 minutes\n\n第一次使用 ccache 编译那个文件时，您将不会看到有任何的帮助，因为编译信息还没有被高速缓存。\n\nccache获取的缓存的数据\n\n```shel\n[root@74c8c1b5bfab home]# ccache -s\ncache directory                     /root/.ccache\nprimary config                      /root/.ccache/ccache.conf\nsecondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf\ncache hit (direct)                    36\ncache hit (preprocessed)              23\ncache miss                          2239\ncalled for link                      508\ncalled for preprocessing              20\ncompile failed                        19\npreprocessor error                    20\nno input file                          3\nfiles in cache                      4715\ncache size                           1.6 GB\nmax cache size                       5.0 GB\n```\n\n#### 方法二\n\n**前提：**.cacahe文件中已经获取到编译的缓存\n\n```shell\ndocker run -itd --name ccachtest -v $PWD/yumcache/:/home/lamp -v $PWD/ccache/:/root/.ccache -v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4 centos:7\n```\n\n时间消耗：Total:4 minutes\n\n1. yum下载采用缓存的方式进行\n\n   `-v $PWD/yumcache/:/home/lamp`\n\n2. ccache不必每次都进行编译\n\n   `-v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4`\t\n\n3. 缓存/root/.ccache文件目录\n\n   `-v $PWD/ccache/:/root/.ccache`\n\n#### 同缓存编译不同版本\n\n参考方法二，仅修改mysql的版本：5.7.35\n\n时间消耗:19 minutes\n\nccache获取的缓存的数据\n\n```shell\n[root@0a200c0bc3fd .ccache]# ccache -s\ncache directory                     /root/.ccache\nprimary config                      /root/.ccache/ccache.conf\nsecondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf\ncache hit (direct)                  2544\ncache hit (preprocessed)              68\ncache miss                          4386\ncalled for link                     1630\ncalled for preprocessing              60\ncompile failed                        57\npreprocessor error                    62\nno input file                         11\nfiles in cache                      9245\ncache size                           3.1 GB\nmax cache size                       5.0 GB\n```\n\n","slug":"编译安装/ccache安装及使用","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:26:30.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfh001itpdob68uccpl","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在处理一些较大规模工程时，编译会花费较长的时间。ccache会在第一遍编译时时间较长，之后的编译会成倍的提速。</p>\n<p><strong>基本原理：</strong>通过头文件告诉缓存到源文件中而改进构建性能，因而通过减少每一步编译时添加头文件所需的时间而提高构建速度。</p>\n<p>第一趟编译ccache缓存GCC的”-E”的输出，编译选项以及.o文件到$HOME/.ccache。第二次编译尽量利用缓存，必要时更新缓存。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@68ab9a9c9a49 ccache-3.2.4]# yum install gcc make cmake -y<br><br>[root@68ab9a9c9a49 home]# wget http://samba.org/ftp/ccache/ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# tar -zxf ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# ls<br>ccache-3.2.4  ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# cd ccache-3.2.4<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">配置安装</span><br>[root@68ab9a9c9a49 ccache-3.2.4]# /home/ccache-3.2.4/configure -prefix=/usr/local/ccache-3.2.4<br>configure: Configuring ccache<br>checking build system type... aarch64-unknown-linux-gnu<br>checking host system type... aarch64-unknown-linux-gnu<br>checking for gcc... gcc<br>checking whether the C compiler works... yes<br>checking for C compiler default output file name... a.out<br>checking for suffix of executables...<br>checking whether we are cross compiling... no<br>checking for suffix of object files... o<br>checking whether we are using the GNU C compiler... yes<br>.......<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">编译安装</span><br>[root@034ebb878219 ccache-3.2.4]# make -j4<br>[root@68ab9a9c9a49 ccache-3.2.4]# make install<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -m 755 ccache /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/share/man/man1<br>/usr/bin/install -c -m 644 ./ccache.1 /usr/local/ccache-3.2.4/share/man/man1/<br><br>[root@68ab9a9c9a49 home]# cd /usr/bin/<br>[root@68ab9a9c9a49 bin]# ln -s /usr/local/ccache-3.2.4/bin/ccache ccache<br><br>[root@68ab9a9c9a49 usr]# ccache --v<br>ccache version 3.2.4<br><br>Copyright (C) 2002-2007 Andrew Tridgell<br>Copyright (C) 2009-2015 Joel Rosdahl<br><br>This program is free software; you can redistribute it and/or modify it under<br>the terms of the GNU General Public License as published by the Free Software<br>Foundation; either version 3 of the License, or (at your option) any later<br>version.<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译加速使用（mysql编译）\"><a href=\"#编译加速使用（mysql编译）\" class=\"headerlink\" title=\"编译加速使用（mysql编译）\"></a>编译加速使用（mysql编译）</h2><h3 id=\"ccache加入环境变量，取代C编译器：\"><a href=\"#ccache加入环境变量，取代C编译器：\" class=\"headerlink\" title=\"ccache加入环境变量，取代C编译器：\"></a>ccache加入环境变量，取代C编译器：</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cp ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span><br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/g</span>cc<br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/g</span>++<br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>cc<br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>c++<br></code></pre></td></tr></table></figure>\n\n<p>yum安装以缓存的形式进行安装，目录挂载，本地源</p>\n<p>可以大量的减少安装等待的时间</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">yum install <span class=\"hljs-comment\">--downloadonly 包名</span><br></code></pre></td></tr></table></figure>\n\n<p>在 ccache 中使用 -s 命令行选项来获得关于高速缓存性能的统计数据。</p>\n<h3 id=\"MYSQL-5-7-X编译\"><a href=\"#MYSQL-5-7-X编译\" class=\"headerlink\" title=\"MYSQL 5.7.X编译\"></a>MYSQL 5.7.X编译</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>将sh文件后台执行，<code>sh test.sh &amp;&gt; /tmp/test.log</code></p>\n<p>mysql版本：5.7.36</p>\n<p>时间消耗：21 minutes</p>\n<p>第一次使用 ccache 编译那个文件时，您将不会看到有任何的帮助，因为编译信息还没有被高速缓存。</p>\n<p>ccache获取的缓存的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shel\">[root@74c8c1b5bfab home]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                    36<br>cache hit (preprocessed)              23<br>cache miss                          2239<br>called for link                      508<br>called for preprocessing              20<br>compile failed                        19<br>preprocessor error                    20<br>no input file                          3<br>files in cache                      4715<br>cache size                           1.6 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p><strong>前提：</strong>.cacahe文件中已经获取到编译的缓存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -itd --name ccachtest -v $PWD/yumcache/:/home/lamp -v $PWD/ccache/:/root/.ccache -v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4 centos:7<br></code></pre></td></tr></table></figure>\n\n<p>时间消耗：Total:4 minutes</p>\n<ol>\n<li><p>yum下载采用缓存的方式进行</p>\n<p><code>-v $PWD/yumcache/:/home/lamp</code></p>\n</li>\n<li><p>ccache不必每次都进行编译</p>\n<p><code>-v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4</code>    </p>\n</li>\n<li><p>缓存/root/.ccache文件目录</p>\n<p><code>-v $PWD/ccache/:/root/.ccache</code></p>\n</li>\n</ol>\n<h4 id=\"同缓存编译不同版本\"><a href=\"#同缓存编译不同版本\" class=\"headerlink\" title=\"同缓存编译不同版本\"></a>同缓存编译不同版本</h4><p>参考方法二，仅修改mysql的版本：5.7.35</p>\n<p>时间消耗:19 minutes</p>\n<p>ccache获取的缓存的数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@0a200c0bc3fd .ccache]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                  2544<br>cache hit (preprocessed)              68<br>cache miss                          4386<br>called for link                     1630<br>called for preprocessing              60<br>compile failed                        57<br>preprocessor error                    62<br>no input file                         11<br>files in cache                      9245<br>cache size                           3.1 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3317,"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在处理一些较大规模工程时，编译会花费较长的时间。ccache会在第一遍编译时时间较长，之后的编译会成倍的提速。</p>\n<p><strong>基本原理：</strong>通过头文件告诉缓存到源文件中而改进构建性能，因而通过减少每一步编译时添加头文件所需的时间而提高构建速度。</p>\n<p>第一趟编译ccache缓存GCC的”-E”的输出，编译选项以及.o文件到$HOME/.ccache。第二次编译尽量利用缓存，必要时更新缓存。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@68ab9a9c9a49 ccache-3.2.4]# yum install gcc make cmake -y<br><br>[root@68ab9a9c9a49 home]# wget http://samba.org/ftp/ccache/ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# tar -zxf ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# ls<br>ccache-3.2.4  ccache-3.2.4.tar.gz<br>[root@68ab9a9c9a49 home]# cd ccache-3.2.4<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">配置安装</span><br>[root@68ab9a9c9a49 ccache-3.2.4]# /home/ccache-3.2.4/configure -prefix=/usr/local/ccache-3.2.4<br>configure: Configuring ccache<br>checking build system type... aarch64-unknown-linux-gnu<br>checking host system type... aarch64-unknown-linux-gnu<br>checking for gcc... gcc<br>checking whether the C compiler works... yes<br>checking for C compiler default output file name... a.out<br>checking for suffix of executables...<br>checking whether we are cross compiling... no<br>checking for suffix of object files... o<br>checking whether we are using the GNU C compiler... yes<br>.......<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">编译安装</span><br>[root@034ebb878219 ccache-3.2.4]# make -j4<br>[root@68ab9a9c9a49 ccache-3.2.4]# make install<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -m 755 ccache /usr/local/ccache-3.2.4/bin<br>/usr/bin/install -c -d /usr/local/ccache-3.2.4/share/man/man1<br>/usr/bin/install -c -m 644 ./ccache.1 /usr/local/ccache-3.2.4/share/man/man1/<br><br>[root@68ab9a9c9a49 home]# cd /usr/bin/<br>[root@68ab9a9c9a49 bin]# ln -s /usr/local/ccache-3.2.4/bin/ccache ccache<br><br>[root@68ab9a9c9a49 usr]# ccache --v<br>ccache version 3.2.4<br><br>Copyright (C) 2002-2007 Andrew Tridgell<br>Copyright (C) 2009-2015 Joel Rosdahl<br><br>This program is free software; you can redistribute it and/or modify it under<br>the terms of the GNU General Public License as published by the Free Software<br>Foundation; either version 3 of the License, or (at your option) any later<br>version.<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译加速使用（mysql编译）\"><a href=\"#编译加速使用（mysql编译）\" class=\"headerlink\" title=\"编译加速使用（mysql编译）\"></a>编译加速使用（mysql编译）</h2><h3 id=\"ccache加入环境变量，取代C编译器：\"><a href=\"#ccache加入环境变量，取代C编译器：\" class=\"headerlink\" title=\"ccache加入环境变量，取代C编译器：\"></a>ccache加入环境变量，取代C编译器：</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cp ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span><br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/g</span>cc<br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/g</span>++<br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>cc<br>ln -s ccache <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>c++<br></code></pre></td></tr></table></figure>\n\n<p>yum安装以缓存的形式进行安装，目录挂载，本地源</p>\n<p>可以大量的减少安装等待的时间</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">yum install <span class=\"hljs-comment\">--downloadonly 包名</span><br></code></pre></td></tr></table></figure>\n\n<p>在 ccache 中使用 -s 命令行选项来获得关于高速缓存性能的统计数据。</p>\n<h3 id=\"MYSQL-5-7-X编译\"><a href=\"#MYSQL-5-7-X编译\" class=\"headerlink\" title=\"MYSQL 5.7.X编译\"></a>MYSQL 5.7.X编译</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>将sh文件后台执行，<code>sh test.sh &amp;&gt; /tmp/test.log</code></p>\n<p>mysql版本：5.7.36</p>\n<p>时间消耗：21 minutes</p>\n<p>第一次使用 ccache 编译那个文件时，您将不会看到有任何的帮助，因为编译信息还没有被高速缓存。</p>\n<p>ccache获取的缓存的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shel\">[root@74c8c1b5bfab home]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                    36<br>cache hit (preprocessed)              23<br>cache miss                          2239<br>called for link                      508<br>called for preprocessing              20<br>compile failed                        19<br>preprocessor error                    20<br>no input file                          3<br>files in cache                      4715<br>cache size                           1.6 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p><strong>前提：</strong>.cacahe文件中已经获取到编译的缓存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -itd --name ccachtest -v $PWD/yumcache/:/home/lamp -v $PWD/ccache/:/root/.ccache -v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4 centos:7<br></code></pre></td></tr></table></figure>\n\n<p>时间消耗：Total:4 minutes</p>\n<ol>\n<li><p>yum下载采用缓存的方式进行</p>\n<p><code>-v $PWD/yumcache/:/home/lamp</code></p>\n</li>\n<li><p>ccache不必每次都进行编译</p>\n<p><code>-v $PWD/ccache-3.2.4:/usr/local/ccache-3.2.4</code>    </p>\n</li>\n<li><p>缓存/root/.ccache文件目录</p>\n<p><code>-v $PWD/ccache/:/root/.ccache</code></p>\n</li>\n</ol>\n<h4 id=\"同缓存编译不同版本\"><a href=\"#同缓存编译不同版本\" class=\"headerlink\" title=\"同缓存编译不同版本\"></a>同缓存编译不同版本</h4><p>参考方法二，仅修改mysql的版本：5.7.35</p>\n<p>时间消耗:19 minutes</p>\n<p>ccache获取的缓存的数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@0a200c0bc3fd .ccache]# ccache -s<br>cache directory                     /root/.ccache<br>primary config                      /root/.ccache/ccache.conf<br>secondary config      (readonly)    /usr/local/ccache-3.2.4/etc/ccache.conf<br>cache hit (direct)                  2544<br>cache hit (preprocessed)              68<br>cache miss                          4386<br>called for link                     1630<br>called for preprocessing              60<br>compile failed                        57<br>preprocessor error                    62<br>no input file                         11<br>files in cache                      9245<br>cache size                           3.1 GB<br>max cache size                       5.0 GB<br></code></pre></td></tr></table></figure>\n\n"},{"title":"kkFileView-4.0.0编译安装","_content":"\n**获取源码**\n\n```shell\ngit clone https://gitee.com/kekingcn/file-online-preview.git\ncd file-online-preview/\ngit checkout v4.0.0\n```\n\n## centos 7.6 安装\n\n### 安装依赖\n\n```shell\nyum install git wget vim libreoffice java-11-openjdk maven -y\njava -version\nmvn -v\n#/usr/lib64/libreoffice\n```\n\n### 修改原文档中的配置文件\n\n```shell\ngit diff\ndiff --git a/server/src/main/bin/startup.sh b/server/src/main/bin/startup.sh\nindex cae3d3b..413c957 100644\n--- a/server/src/main/bin/startup.sh\n+++ b/server/src/main/bin/startup.sh\n@@ -1,5 +1,5 @@\n #!/bin/bash\n-DIR_HOME=(\"/opt/openoffice.org3\" \"/opt/libreoffice\" \"/opt/libreoffice6.1\" \"/opt/libreoffice7.0\" \"/opt/libreoffice7.1\" \"/opt/openoffice4\" \"/usr/lib/openoffice\" \"/usr/lib/libreoffice\")\n+DIR_HOME=(\"/opt/openoffice.org3\" \"/opt/libreoffice\" \"/opt/libreoffice6.1\" \"/opt/libreoffice7.0\" \"/opt/libreoffice7.1\" \"/opt/openoffice4\" \"/usr/lib/openoffice\" \"/usr/lib64/libreoffice\")\n FLAG=\n OFFICE_HOME=\n KKFILEVIEW_BIN_FOLDER=$(cd \"$(dirname \"$0\")\";pwd)\ndiff --git a/server/src/main/config/application.properties b/server/src/main/config/application.properties\nindex fd79f6d..b78e4c2 100644\n--- a/server/src/main/config/application.properties\n+++ b/server/src/main/config/application.properties\n@@ -27,7 +27,7 @@ office.plugin.task.timeout = 5m\n file.dir = ${KK_FILE_DIR:default}\n #openoffice home<E8><B7><AF><E5><BE><84>\n #office.home = C:\\\\Program Files (x86)\\\\OpenOffice 4\n-office.home = ${KK_OFFICE_HOME:default}\n+office.home = /usr/lib64/libreoffice\n```\n\n### mvn构建\n\n```shell\nmvn clean package -DskipTests -Prelease\n```\n\n## 验证\n\n```shell\n#生成对应的\ncd server/target/\ntar -zxvf kkFileView-4.0.0.tar.gz\ncd kkFileView-4.0.0/bin\n./start.sh\n```\n\n","source":"_posts/编译安装/kkFileView-4.0.0安装.md","raw":"---\ntitle: kkFileView-4.0.0编译安装 \ncategories: \n- 编译安装\ntags:\n- kkFileView\n---\n\n**获取源码**\n\n```shell\ngit clone https://gitee.com/kekingcn/file-online-preview.git\ncd file-online-preview/\ngit checkout v4.0.0\n```\n\n## centos 7.6 安装\n\n### 安装依赖\n\n```shell\nyum install git wget vim libreoffice java-11-openjdk maven -y\njava -version\nmvn -v\n#/usr/lib64/libreoffice\n```\n\n### 修改原文档中的配置文件\n\n```shell\ngit diff\ndiff --git a/server/src/main/bin/startup.sh b/server/src/main/bin/startup.sh\nindex cae3d3b..413c957 100644\n--- a/server/src/main/bin/startup.sh\n+++ b/server/src/main/bin/startup.sh\n@@ -1,5 +1,5 @@\n #!/bin/bash\n-DIR_HOME=(\"/opt/openoffice.org3\" \"/opt/libreoffice\" \"/opt/libreoffice6.1\" \"/opt/libreoffice7.0\" \"/opt/libreoffice7.1\" \"/opt/openoffice4\" \"/usr/lib/openoffice\" \"/usr/lib/libreoffice\")\n+DIR_HOME=(\"/opt/openoffice.org3\" \"/opt/libreoffice\" \"/opt/libreoffice6.1\" \"/opt/libreoffice7.0\" \"/opt/libreoffice7.1\" \"/opt/openoffice4\" \"/usr/lib/openoffice\" \"/usr/lib64/libreoffice\")\n FLAG=\n OFFICE_HOME=\n KKFILEVIEW_BIN_FOLDER=$(cd \"$(dirname \"$0\")\";pwd)\ndiff --git a/server/src/main/config/application.properties b/server/src/main/config/application.properties\nindex fd79f6d..b78e4c2 100644\n--- a/server/src/main/config/application.properties\n+++ b/server/src/main/config/application.properties\n@@ -27,7 +27,7 @@ office.plugin.task.timeout = 5m\n file.dir = ${KK_FILE_DIR:default}\n #openoffice home<E8><B7><AF><E5><BE><84>\n #office.home = C:\\\\Program Files (x86)\\\\OpenOffice 4\n-office.home = ${KK_OFFICE_HOME:default}\n+office.home = /usr/lib64/libreoffice\n```\n\n### mvn构建\n\n```shell\nmvn clean package -DskipTests -Prelease\n```\n\n## 验证\n\n```shell\n#生成对应的\ncd server/target/\ntar -zxvf kkFileView-4.0.0.tar.gz\ncd kkFileView-4.0.0/bin\n./start.sh\n```\n\n","slug":"编译安装/kkFileView-4.0.0安装","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:26:34.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfi001mtpdoevhn9oee","content":"<p><strong>获取源码</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://gitee.com/kekingcn/file-online-preview.git<br>cd file-online-preview/<br>git checkout v4.0.0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"centos-7-6-安装\"><a href=\"#centos-7-6-安装\" class=\"headerlink\" title=\"centos 7.6 安装\"></a>centos 7.6 安装</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum install git wget vim libreoffice java-11-openjdk maven -y<br>java -version<br>mvn -v<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/usr/lib64/libreoffice</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修改原文档中的配置文件\"><a href=\"#修改原文档中的配置文件\" class=\"headerlink\" title=\"修改原文档中的配置文件\"></a>修改原文档中的配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git diff<br>diff --git a/server/src/main/bin/startup.sh b/server/src/main/bin/startup.sh<br>index cae3d3b..413c957 100644<br>--- a/server/src/main/bin/startup.sh<br>+++ b/server/src/main/bin/startup.sh<br>@@ -1,5 +1,5 @@<br><span class=\"hljs-meta prompt_\"> #</span><span class=\"language-bash\">!/bin/bash</span><br>-DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib/libreoffice&quot;)<br>+DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib64/libreoffice&quot;)<br> FLAG=<br> OFFICE_HOME=<br> KKFILEVIEW_BIN_FOLDER=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)<br>diff --git a/server/src/main/config/application.properties b/server/src/main/config/application.properties<br>index fd79f6d..b78e4c2 100644<br>--- a/server/src/main/config/application.properties<br>+++ b/server/src/main/config/application.properties<br>@@ -27,7 +27,7 @@ office.plugin.task.timeout = 5m<br> file.dir = $&#123;KK_FILE_DIR:default&#125;<br><span class=\"hljs-meta prompt_\"> #</span><span class=\"language-bash\">openoffice home&lt;E8&gt;&lt;B7&gt;&lt;AF&gt;&lt;E5&gt;&lt;BE&gt;&lt;84&gt;</span><br><span class=\"hljs-meta prompt_\"> #</span><span class=\"language-bash\">office.home = C:\\\\Program Files (x86)\\\\OpenOffice 4</span><br>-office.home = $&#123;KK_OFFICE_HOME:default&#125;<br>+office.home = /usr/lib64/libreoffice<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"mvn构建\"><a href=\"#mvn构建\" class=\"headerlink\" title=\"mvn构建\"></a>mvn构建</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn clean package -DskipTests -Prelease<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">生成对应的</span><br>cd server/target/<br>tar -zxvf kkFileView-4.0.0.tar.gz<br>cd kkFileView-4.0.0/bin<br>./start.sh<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1712,"excerpt":"","more":"<p><strong>获取源码</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://gitee.com/kekingcn/file-online-preview.git<br>cd file-online-preview/<br>git checkout v4.0.0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"centos-7-6-安装\"><a href=\"#centos-7-6-安装\" class=\"headerlink\" title=\"centos 7.6 安装\"></a>centos 7.6 安装</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum install git wget vim libreoffice java-11-openjdk maven -y<br>java -version<br>mvn -v<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/usr/lib64/libreoffice</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修改原文档中的配置文件\"><a href=\"#修改原文档中的配置文件\" class=\"headerlink\" title=\"修改原文档中的配置文件\"></a>修改原文档中的配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git diff<br>diff --git a/server/src/main/bin/startup.sh b/server/src/main/bin/startup.sh<br>index cae3d3b..413c957 100644<br>--- a/server/src/main/bin/startup.sh<br>+++ b/server/src/main/bin/startup.sh<br>@@ -1,5 +1,5 @@<br><span class=\"hljs-meta prompt_\"> #</span><span class=\"language-bash\">!/bin/bash</span><br>-DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib/libreoffice&quot;)<br>+DIR_HOME=(&quot;/opt/openoffice.org3&quot; &quot;/opt/libreoffice&quot; &quot;/opt/libreoffice6.1&quot; &quot;/opt/libreoffice7.0&quot; &quot;/opt/libreoffice7.1&quot; &quot;/opt/openoffice4&quot; &quot;/usr/lib/openoffice&quot; &quot;/usr/lib64/libreoffice&quot;)<br> FLAG=<br> OFFICE_HOME=<br> KKFILEVIEW_BIN_FOLDER=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)<br>diff --git a/server/src/main/config/application.properties b/server/src/main/config/application.properties<br>index fd79f6d..b78e4c2 100644<br>--- a/server/src/main/config/application.properties<br>+++ b/server/src/main/config/application.properties<br>@@ -27,7 +27,7 @@ office.plugin.task.timeout = 5m<br> file.dir = $&#123;KK_FILE_DIR:default&#125;<br><span class=\"hljs-meta prompt_\"> #</span><span class=\"language-bash\">openoffice home&lt;E8&gt;&lt;B7&gt;&lt;AF&gt;&lt;E5&gt;&lt;BE&gt;&lt;84&gt;</span><br><span class=\"hljs-meta prompt_\"> #</span><span class=\"language-bash\">office.home = C:\\\\Program Files (x86)\\\\OpenOffice 4</span><br>-office.home = $&#123;KK_OFFICE_HOME:default&#125;<br>+office.home = /usr/lib64/libreoffice<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"mvn构建\"><a href=\"#mvn构建\" class=\"headerlink\" title=\"mvn构建\"></a>mvn构建</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn clean package -DskipTests -Prelease<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">生成对应的</span><br>cd server/target/<br>tar -zxvf kkFileView-4.0.0.tar.gz<br>cd kkFileView-4.0.0/bin<br>./start.sh<br></code></pre></td></tr></table></figure>\n\n"},{"title":"minio编译失败问题分析&编译安装","_content":"\n\n\n# 问题原因\n\n下载编译minio，编译出现报错\n\n# 问题分析&解决\n\n1. 查看是否go版本较低导致\n\n   可升级go版本，\n\n   注：可以`cat go.mod`查看mod的go版本，可匹配，如果安装的不匹配，git下载之后，需要执行`go mod tidy`根据环境修改mod文件。\n\n   以下为go 1.18安装步骤\n\n   ```shell\n   wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz\n   tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/\n   vim /etc/profile\n   #最后一行写入\n   export PATH=$PATH:/usr/local/go/bin\n   \n   source /etc/profile\n   go env\n   \n   #导入go代理\n   #export GOPROXY=https://goproxy.io,direct\n   export GOPROXY=https://proxy.golang.org,direct\n   ```\n\n2. make过程中出现校验码不同\n\n   ```shell\n   go: downloading github.com/google/pprof v0.0.0-20211214055906-6f57359322fd\n   verifying github.com/go-openapi/spec@v0.20.5: checksum mismatch\n           downloaded: h1:7VP8zufGZEIV+zfSwHGTWgbMINz/WhW3oFsA47Rhjsk=\n           go.sum:     h1:skHa8av4VnAtJU5zyAUXrrdK/NDiVX8lchbG+BfcdrE=\n   \n   SECURITY ERROR\n   This download does NOT match an earlier download recorded in go.sum.\n   The bits may have been replaced on the origin server, or an attacker may\n   have intercepted the download attempt.\n   \n   For more information, see 'go help module-auth'.\n   make: *** [build] Error 1\n   \n   ```\n\n   \n\n   - 在 `go.sum` 文件存在的时候，则会使用 `go.sum` 里面记录的依赖 hash 和实际下载的依赖 hash 进行对比， 如果不匹配，会出现报错；\n   - 如果 `go.sum` 不存在，则使用 `GOSUMDB` （默认是 [sum.golang.org](https://link.juejin.cn/?target=https%3A%2F%2Fsum.golang.org%2F)）对实际下载的依赖 hash 进行检查，如果不匹配，则出现错误；\n\n   解决方案\n\n   - 删除go.sum或者清除缓存,编译，如果编译过程中出现超时，可重复执行该步骤\n\n     ```shell\n     go clean -modcache\n     rm -f go.sum\n     #查看代理设置go env GOPROXY，采用默认的：https://proxy.golang.org,direct，\n     #修改：export GOPROXY=https://proxy.golang.org,direct\n     go mod tidy\n      make\n     ```\n\n   - **如果已经删除go.sum之后，mod的时候报错文件依旧不匹配，可采用该方法** `GOSUMDB`，即 `export GOSUMDB=off`\n\n     *如果设置了 GOSUMDB 为 “off” 或者使用 go get 的时候启用了`-insecure`参数，Go 不会去对下载的依赖包做安全校验，存在一定的安全隐患，不建议*\n\n     ```shell\n     go clean -modcache\n     rm -f go.sum\n      export GOSUMDB=off\n     go mod tidy\n     make\n     ```\n\n   编译成功\n\n# 编译\n\n## MinIO Server 安装\n\n**仅是编译minio,不存在配置及验证，如果验证，可参考[Huawei Kunpeng Innovation Center Flagship Store](https://ic-openlabs.huawei.com/client/#/knowledge/details?id=R1S1584D0021871822019121922381091416527)**\n\n### 安装依赖\n\n```shell\n[root@8154395e1759 /]# yum install vim wget git make -y\n#安装go\n[root@8154395e1759 /]# wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz\n[root@8154395e1759 /]# tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/\n\n#配置环境变量\n[root@8154395e1759 /]# cat /etc/profile | tail -n 2\nunset -f pathmunge\nexport PATH=$PATH:/usr/local/go/bin\n[root@8154395e1759 /]# go version\ngo version go1.18 linux/arm64\n\n#参看go代理的配置\n[root@8154395e1759 /]#  go env GOPROXY\nhttps://proxy.golang.org,direct\n```\n\n### 下载minion\n\n```shell\n[root@8154395e1759 /]#  git clone https://github.com/minio/minio.git\n[root@8154395e1759 /]# cd minio/\n#更新与编译环境对应的依赖\n[root@8154395e1759 minio]# go mod tidy\n```\n\n### 编译\n\n```shell\n[root@8154395e1759 minio]# make\n[root@8154395e1759 minio]# make\nError generating git commit-time:  parsing time \"%cI\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"%cI\" as \"2006\"\nexit status 1\nChecking dependencies\nBuilding minio binary to './minio'\n[root@8154395e1759 minio]# ls -al ./minio\n-rwxr-xr-x 1 root root 119773941 Sep  6 08:02 ./minio\n```\n\n## MinIO Client 安装\n\n### 下载&编译\n\n```shell\n[root@8154395e1759 /]# git clone https://github.com/minio/mc.git\n[root@8154395e1759 /]# cd mc/\n#更新与编译环境对应的依赖\n[root@8154395e1759 mc]# go mod tidy\n[root@8154395e1759 mc]# make\nError generating git commit-time:  parsing time \"%cI\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"%cI\" as \"2006\"\nexit status 1\nChecking dependencies\nBuilding mc binary to './mc'\n[root@8154395e1759 mc]# ls -al ./mc\n-rwxr-xr-x 1 root root 32852718 Sep  6 08:18 ./mc\n\n```","source":"_posts/编译安装/minio编译安装.md","raw":"---\ntitle: minio编译失败问题分析&编译安装\ncategories: \n- 编译安装\ntags:\n- minio\n---\n\n\n\n# 问题原因\n\n下载编译minio，编译出现报错\n\n# 问题分析&解决\n\n1. 查看是否go版本较低导致\n\n   可升级go版本，\n\n   注：可以`cat go.mod`查看mod的go版本，可匹配，如果安装的不匹配，git下载之后，需要执行`go mod tidy`根据环境修改mod文件。\n\n   以下为go 1.18安装步骤\n\n   ```shell\n   wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz\n   tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/\n   vim /etc/profile\n   #最后一行写入\n   export PATH=$PATH:/usr/local/go/bin\n   \n   source /etc/profile\n   go env\n   \n   #导入go代理\n   #export GOPROXY=https://goproxy.io,direct\n   export GOPROXY=https://proxy.golang.org,direct\n   ```\n\n2. make过程中出现校验码不同\n\n   ```shell\n   go: downloading github.com/google/pprof v0.0.0-20211214055906-6f57359322fd\n   verifying github.com/go-openapi/spec@v0.20.5: checksum mismatch\n           downloaded: h1:7VP8zufGZEIV+zfSwHGTWgbMINz/WhW3oFsA47Rhjsk=\n           go.sum:     h1:skHa8av4VnAtJU5zyAUXrrdK/NDiVX8lchbG+BfcdrE=\n   \n   SECURITY ERROR\n   This download does NOT match an earlier download recorded in go.sum.\n   The bits may have been replaced on the origin server, or an attacker may\n   have intercepted the download attempt.\n   \n   For more information, see 'go help module-auth'.\n   make: *** [build] Error 1\n   \n   ```\n\n   \n\n   - 在 `go.sum` 文件存在的时候，则会使用 `go.sum` 里面记录的依赖 hash 和实际下载的依赖 hash 进行对比， 如果不匹配，会出现报错；\n   - 如果 `go.sum` 不存在，则使用 `GOSUMDB` （默认是 [sum.golang.org](https://link.juejin.cn/?target=https%3A%2F%2Fsum.golang.org%2F)）对实际下载的依赖 hash 进行检查，如果不匹配，则出现错误；\n\n   解决方案\n\n   - 删除go.sum或者清除缓存,编译，如果编译过程中出现超时，可重复执行该步骤\n\n     ```shell\n     go clean -modcache\n     rm -f go.sum\n     #查看代理设置go env GOPROXY，采用默认的：https://proxy.golang.org,direct，\n     #修改：export GOPROXY=https://proxy.golang.org,direct\n     go mod tidy\n      make\n     ```\n\n   - **如果已经删除go.sum之后，mod的时候报错文件依旧不匹配，可采用该方法** `GOSUMDB`，即 `export GOSUMDB=off`\n\n     *如果设置了 GOSUMDB 为 “off” 或者使用 go get 的时候启用了`-insecure`参数，Go 不会去对下载的依赖包做安全校验，存在一定的安全隐患，不建议*\n\n     ```shell\n     go clean -modcache\n     rm -f go.sum\n      export GOSUMDB=off\n     go mod tidy\n     make\n     ```\n\n   编译成功\n\n# 编译\n\n## MinIO Server 安装\n\n**仅是编译minio,不存在配置及验证，如果验证，可参考[Huawei Kunpeng Innovation Center Flagship Store](https://ic-openlabs.huawei.com/client/#/knowledge/details?id=R1S1584D0021871822019121922381091416527)**\n\n### 安装依赖\n\n```shell\n[root@8154395e1759 /]# yum install vim wget git make -y\n#安装go\n[root@8154395e1759 /]# wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz\n[root@8154395e1759 /]# tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/\n\n#配置环境变量\n[root@8154395e1759 /]# cat /etc/profile | tail -n 2\nunset -f pathmunge\nexport PATH=$PATH:/usr/local/go/bin\n[root@8154395e1759 /]# go version\ngo version go1.18 linux/arm64\n\n#参看go代理的配置\n[root@8154395e1759 /]#  go env GOPROXY\nhttps://proxy.golang.org,direct\n```\n\n### 下载minion\n\n```shell\n[root@8154395e1759 /]#  git clone https://github.com/minio/minio.git\n[root@8154395e1759 /]# cd minio/\n#更新与编译环境对应的依赖\n[root@8154395e1759 minio]# go mod tidy\n```\n\n### 编译\n\n```shell\n[root@8154395e1759 minio]# make\n[root@8154395e1759 minio]# make\nError generating git commit-time:  parsing time \"%cI\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"%cI\" as \"2006\"\nexit status 1\nChecking dependencies\nBuilding minio binary to './minio'\n[root@8154395e1759 minio]# ls -al ./minio\n-rwxr-xr-x 1 root root 119773941 Sep  6 08:02 ./minio\n```\n\n## MinIO Client 安装\n\n### 下载&编译\n\n```shell\n[root@8154395e1759 /]# git clone https://github.com/minio/mc.git\n[root@8154395e1759 /]# cd mc/\n#更新与编译环境对应的依赖\n[root@8154395e1759 mc]# go mod tidy\n[root@8154395e1759 mc]# make\nError generating git commit-time:  parsing time \"%cI\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"%cI\" as \"2006\"\nexit status 1\nChecking dependencies\nBuilding mc binary to './mc'\n[root@8154395e1759 mc]# ls -al ./mc\n-rwxr-xr-x 1 root root 32852718 Sep  6 08:18 ./mc\n\n```","slug":"编译安装/minio编译安装","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:26:40.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfj001ptpdo8ozr63u8","content":"<h1 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h1><p>下载编译minio，编译出现报错</p>\n<h1 id=\"问题分析-amp-解决\"><a href=\"#问题分析-amp-解决\" class=\"headerlink\" title=\"问题分析&amp;解决\"></a>问题分析&amp;解决</h1><ol>\n<li><p>查看是否go版本较低导致</p>\n<p>可升级go版本，</p>\n<p>注：可以<code>cat go.mod</code>查看mod的go版本，可匹配，如果安装的不匹配，git下载之后，需要执行<code>go mod tidy</code>根据环境修改mod文件。</p>\n<p>以下为go 1.18安装步骤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz<br>tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/<br>vim /etc/profile<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">最后一行写入</span><br>export PATH=$PATH:/usr/local/go/bin<br><br>source /etc/profile<br>go env<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导入go代理</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> GOPROXY=https://goproxy.io,direct</span><br>export GOPROXY=https://proxy.golang.org,direct<br></code></pre></td></tr></table></figure></li>\n<li><p>make过程中出现校验码不同</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go: downloading github.com/google/pprof v0.0.0-20211214055906-6f57359322fd<br>verifying github.com/go-openapi/spec@v0.20.5: checksum mismatch<br>        downloaded: h1:7VP8zufGZEIV+zfSwHGTWgbMINz/WhW3oFsA47Rhjsk=<br>        go.sum:     h1:skHa8av4VnAtJU5zyAUXrrdK/NDiVX8lchbG+BfcdrE=<br><br>SECURITY ERROR<br>This download does NOT match an earlier download recorded in go.sum.<br>The bits may have been replaced on the origin server, or an attacker may<br>have intercepted the download attempt.<br><br>For more information, see &#x27;go help module-auth&#x27;.<br>make: *** [build] Error 1<br><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>在 <code>go.sum</code> 文件存在的时候，则会使用 <code>go.sum</code> 里面记录的依赖 hash 和实际下载的依赖 hash 进行对比， 如果不匹配，会出现报错；</li>\n<li>如果 <code>go.sum</code> 不存在，则使用 <code>GOSUMDB</code> （默认是 <a href=\"https://link.juejin.cn/?target=https://sum.golang.org/\">sum.golang.org</a>）对实际下载的依赖 hash 进行检查，如果不匹配，则出现错误；</li>\n</ul>\n<p>解决方案</p>\n<ul>\n<li><p>删除go.sum或者清除缓存,编译，如果编译过程中出现超时，可重复执行该步骤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go clean -modcache<br>rm -f go.sum<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看代理设置go <span class=\"hljs-built_in\">env</span> GOPROXY，采用默认的：https://proxy.golang.org,direct，</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改：<span class=\"hljs-built_in\">export</span> GOPROXY=https://proxy.golang.org,direct</span><br>go mod tidy<br> make<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>如果已经删除go.sum之后，mod的时候报错文件依旧不匹配，可采用该方法</strong> <code>GOSUMDB</code>，即 <code>export GOSUMDB=off</code></p>\n<p><em>如果设置了 GOSUMDB 为 “off” 或者使用 go get 的时候启用了<code>-insecure</code>参数，Go 不会去对下载的依赖包做安全校验，存在一定的安全隐患，不建议</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go clean -modcache<br>rm -f go.sum<br> export GOSUMDB=off<br>go mod tidy<br>make<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>编译成功</p>\n</li>\n</ol>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h2 id=\"MinIO-Server-安装\"><a href=\"#MinIO-Server-安装\" class=\"headerlink\" title=\"MinIO Server 安装\"></a>MinIO Server 安装</h2><p><strong>仅是编译minio,不存在配置及验证，如果验证，可参考<a href=\"https://ic-openlabs.huawei.com/client/#/knowledge/details?id=R1S1584D0021871822019121922381091416527\">Huawei Kunpeng Innovation Center Flagship Store</a></strong></p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 /]# yum install vim wget git make -y<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装go</span><br>[root@8154395e1759 /]# wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz<br>[root@8154395e1759 /]# tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">配置环境变量</span><br>[root@8154395e1759 /]# cat /etc/profile | tail -n 2<br>unset -f pathmunge<br>export PATH=$PATH:/usr/local/go/bin<br>[root@8154395e1759 /]# go version<br>go version go1.18 linux/arm64<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">参看go代理的配置</span><br>[root@8154395e1759 /]#  go env GOPROXY<br>https://proxy.golang.org,direct<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"下载minion\"><a href=\"#下载minion\" class=\"headerlink\" title=\"下载minion\"></a>下载minion</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 /]#  git clone https://github.com/minio/minio.git<br>[root@8154395e1759 /]# cd minio/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新与编译环境对应的依赖</span><br>[root@8154395e1759 minio]# go mod tidy<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 minio]# make<br>[root@8154395e1759 minio]# make<br>Error generating git commit-time:  parsing time &quot;%cI&quot; as &quot;2006-01-02T15:04:05Z07:00&quot;: cannot parse &quot;%cI&quot; as &quot;2006&quot;<br>exit status 1<br>Checking dependencies<br>Building minio binary to &#x27;./minio&#x27;<br>[root@8154395e1759 minio]# ls -al ./minio<br>-rwxr-xr-x 1 root root 119773941 Sep  6 08:02 ./minio<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"MinIO-Client-安装\"><a href=\"#MinIO-Client-安装\" class=\"headerlink\" title=\"MinIO Client 安装\"></a>MinIO Client 安装</h2><h3 id=\"下载-amp-编译\"><a href=\"#下载-amp-编译\" class=\"headerlink\" title=\"下载&amp;编译\"></a>下载&amp;编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 /]# git clone https://github.com/minio/mc.git<br>[root@8154395e1759 /]# cd mc/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新与编译环境对应的依赖</span><br>[root@8154395e1759 mc]# go mod tidy<br>[root@8154395e1759 mc]# make<br>Error generating git commit-time:  parsing time &quot;%cI&quot; as &quot;2006-01-02T15:04:05Z07:00&quot;: cannot parse &quot;%cI&quot; as &quot;2006&quot;<br>exit status 1<br>Checking dependencies<br>Building mc binary to &#x27;./mc&#x27;<br>[root@8154395e1759 mc]# ls -al ./mc<br>-rwxr-xr-x 1 root root 32852718 Sep  6 08:18 ./mc<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":2996,"excerpt":"","more":"<h1 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h1><p>下载编译minio，编译出现报错</p>\n<h1 id=\"问题分析-amp-解决\"><a href=\"#问题分析-amp-解决\" class=\"headerlink\" title=\"问题分析&amp;解决\"></a>问题分析&amp;解决</h1><ol>\n<li><p>查看是否go版本较低导致</p>\n<p>可升级go版本，</p>\n<p>注：可以<code>cat go.mod</code>查看mod的go版本，可匹配，如果安装的不匹配，git下载之后，需要执行<code>go mod tidy</code>根据环境修改mod文件。</p>\n<p>以下为go 1.18安装步骤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz<br>tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/<br>vim /etc/profile<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">最后一行写入</span><br>export PATH=$PATH:/usr/local/go/bin<br><br>source /etc/profile<br>go env<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导入go代理</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> GOPROXY=https://goproxy.io,direct</span><br>export GOPROXY=https://proxy.golang.org,direct<br></code></pre></td></tr></table></figure></li>\n<li><p>make过程中出现校验码不同</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go: downloading github.com/google/pprof v0.0.0-20211214055906-6f57359322fd<br>verifying github.com/go-openapi/spec@v0.20.5: checksum mismatch<br>        downloaded: h1:7VP8zufGZEIV+zfSwHGTWgbMINz/WhW3oFsA47Rhjsk=<br>        go.sum:     h1:skHa8av4VnAtJU5zyAUXrrdK/NDiVX8lchbG+BfcdrE=<br><br>SECURITY ERROR<br>This download does NOT match an earlier download recorded in go.sum.<br>The bits may have been replaced on the origin server, or an attacker may<br>have intercepted the download attempt.<br><br>For more information, see &#x27;go help module-auth&#x27;.<br>make: *** [build] Error 1<br><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>在 <code>go.sum</code> 文件存在的时候，则会使用 <code>go.sum</code> 里面记录的依赖 hash 和实际下载的依赖 hash 进行对比， 如果不匹配，会出现报错；</li>\n<li>如果 <code>go.sum</code> 不存在，则使用 <code>GOSUMDB</code> （默认是 <a href=\"https://link.juejin.cn/?target=https://sum.golang.org/\">sum.golang.org</a>）对实际下载的依赖 hash 进行检查，如果不匹配，则出现错误；</li>\n</ul>\n<p>解决方案</p>\n<ul>\n<li><p>删除go.sum或者清除缓存,编译，如果编译过程中出现超时，可重复执行该步骤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go clean -modcache<br>rm -f go.sum<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看代理设置go <span class=\"hljs-built_in\">env</span> GOPROXY，采用默认的：https://proxy.golang.org,direct，</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改：<span class=\"hljs-built_in\">export</span> GOPROXY=https://proxy.golang.org,direct</span><br>go mod tidy<br> make<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>如果已经删除go.sum之后，mod的时候报错文件依旧不匹配，可采用该方法</strong> <code>GOSUMDB</code>，即 <code>export GOSUMDB=off</code></p>\n<p><em>如果设置了 GOSUMDB 为 “off” 或者使用 go get 的时候启用了<code>-insecure</code>参数，Go 不会去对下载的依赖包做安全校验，存在一定的安全隐患，不建议</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go clean -modcache<br>rm -f go.sum<br> export GOSUMDB=off<br>go mod tidy<br>make<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>编译成功</p>\n</li>\n</ol>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h2 id=\"MinIO-Server-安装\"><a href=\"#MinIO-Server-安装\" class=\"headerlink\" title=\"MinIO Server 安装\"></a>MinIO Server 安装</h2><p><strong>仅是编译minio,不存在配置及验证，如果验证，可参考<a href=\"https://ic-openlabs.huawei.com/client/#/knowledge/details?id=R1S1584D0021871822019121922381091416527\">Huawei Kunpeng Innovation Center Flagship Store</a></strong></p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 /]# yum install vim wget git make -y<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装go</span><br>[root@8154395e1759 /]# wget https://studygolang.com/dl/golang/go1.18.linux-arm64.tar.gz<br>[root@8154395e1759 /]# tar -zxvf go1.18.linux-arm64.tar.gz  -C /usr/local/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">配置环境变量</span><br>[root@8154395e1759 /]# cat /etc/profile | tail -n 2<br>unset -f pathmunge<br>export PATH=$PATH:/usr/local/go/bin<br>[root@8154395e1759 /]# go version<br>go version go1.18 linux/arm64<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">参看go代理的配置</span><br>[root@8154395e1759 /]#  go env GOPROXY<br>https://proxy.golang.org,direct<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"下载minion\"><a href=\"#下载minion\" class=\"headerlink\" title=\"下载minion\"></a>下载minion</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 /]#  git clone https://github.com/minio/minio.git<br>[root@8154395e1759 /]# cd minio/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新与编译环境对应的依赖</span><br>[root@8154395e1759 minio]# go mod tidy<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 minio]# make<br>[root@8154395e1759 minio]# make<br>Error generating git commit-time:  parsing time &quot;%cI&quot; as &quot;2006-01-02T15:04:05Z07:00&quot;: cannot parse &quot;%cI&quot; as &quot;2006&quot;<br>exit status 1<br>Checking dependencies<br>Building minio binary to &#x27;./minio&#x27;<br>[root@8154395e1759 minio]# ls -al ./minio<br>-rwxr-xr-x 1 root root 119773941 Sep  6 08:02 ./minio<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"MinIO-Client-安装\"><a href=\"#MinIO-Client-安装\" class=\"headerlink\" title=\"MinIO Client 安装\"></a>MinIO Client 安装</h2><h3 id=\"下载-amp-编译\"><a href=\"#下载-amp-编译\" class=\"headerlink\" title=\"下载&amp;编译\"></a>下载&amp;编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@8154395e1759 /]# git clone https://github.com/minio/mc.git<br>[root@8154395e1759 /]# cd mc/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新与编译环境对应的依赖</span><br>[root@8154395e1759 mc]# go mod tidy<br>[root@8154395e1759 mc]# make<br>Error generating git commit-time:  parsing time &quot;%cI&quot; as &quot;2006-01-02T15:04:05Z07:00&quot;: cannot parse &quot;%cI&quot; as &quot;2006&quot;<br>exit status 1<br>Checking dependencies<br>Building mc binary to &#x27;./mc&#x27;<br>[root@8154395e1759 mc]# ls -al ./mc<br>-rwxr-xr-x 1 root root 32852718 Sep  6 08:18 ./mc<br><br></code></pre></td></tr></table></figure>"},{"title":"ubuntu 安装nodejs","_content":"\n### 安装指定版本的nodejs\n\n```shell\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\n```\n\n","source":"_posts/编译安装/ubuntu安装nodejs.md","raw":"---\ntitle: ubuntu 安装nodejs\ncategories: \n- 编译安装\ntags:\n- nodejs\n---\n\n### 安装指定版本的nodejs\n\n```shell\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\n```\n\n","slug":"编译安装/ubuntu安装nodejs","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:28:16.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfk001stpdo7zr08yqg","content":"<h3 id=\"安装指定版本的nodejs\"><a href=\"#安装指定版本的nodejs\" class=\"headerlink\" title=\"安装指定版本的nodejs\"></a>安装指定版本的nodejs</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -<br>sudo apt install nodejs<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":91,"excerpt":"","more":"<h3 id=\"安装指定版本的nodejs\"><a href=\"#安装指定版本的nodejs\" class=\"headerlink\" title=\"安装指定版本的nodejs\"></a>安装指定版本的nodejs</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -<br>sudo apt install nodejs<br></code></pre></td></tr></table></figure>\n\n"},{"title":"ubuntu安装vscode","_content":"### 在ubuntu的软件商城中安装code报错\n\nUnable to install \"Visual Studio Code\": snap \"code\" has \"install-snap\" change in progress；\n\n#### 问题原因&&解决\n\n软件正在安装，所以不需要再次点击\n\n```shell\nubuntu@root:~/Desktop/Doc$ snap changes\nID   Status  Spawn                   Ready                   Summary\n1    Done    2022-02-23              yesterday at 11:37 CST  Initialize system state\n2    Done    yesterday at 11:37 CST  yesterday at 11:37 CST  Initialize device\n3    Done    yesterday at 11:42 CST  yesterday at 11:43 CST  Install \"typora\" snap from \"latest/stable\" channel\n4    Done    yesterday at 14:03 CST  yesterday at 14:12 CST  Auto-refresh 4 snaps\n5    Do      today at 11:06 CST      -                       Install \"code\" snap from \"latest/stable\" channel\n\n```\n\n### 从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode \n\n**ubuntu 添加信任源**\n\n```shell\nubuntu@root:~/Desktop$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\nubuntu@root:~/Desktop$ sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/\n[sudo] password for ubuntu: \nubuntu@root:~/Desktop$ sudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" > /etc/apt/sources.list.d/vscode.list'\nubuntu@root:~/Desktop$ rm -f packages.microsoft.gpg\nubuntu@root:~/Desktop$ sudo apt install apt-transport-https\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  gyp javascript-common libc-ares2 libjs-inherits libjs-is-typedarray libjs-psl libjs-typedarray-to-buffer libpython2-stdlib libpython2.7-minimal libpython2.7-stdlib libssl-dev libuv1-dev\n  python-pkg-resources python2 python2-minimal python2.7 python2.7-minimal\nUse 'sudo apt autoremove' to remove them.\nThe following NEW packages will be installed:\n  apt-transport-https\n0 upgraded, 1 newly installed, 0 to remove and 257 not upgraded.\nNeed to get 1,704 B of archives.\nAfter this operation, 162 kB of additional disk space will be used.\nGet:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]\nFetched 1,704 B in 1s (2,988 B/s)        \nSelecting previously unselected package apt-transport-https.\n(Reading database ... 196975 files and directories currently installed.)\nPreparing to unpack .../apt-transport-https_2.0.9_all.deb ...\nUnpacking apt-transport-https (2.0.9) ...\nSetting up apt-transport-https (2.0.9) ...\nubuntu@root:~/Desktop$ sudo apt update -y\nubuntu@root:~/Desktop$ sudo apt install code -y\n```\n下载之后重新打开，支持中文输入。\n\n\n\n","source":"_posts/编译安装/ubuntu安装vscode.md","raw":"---\ntitle: ubuntu安装vscode\ncategories: \n- 编译安装\ntags:\n- vscode\n---\n### 在ubuntu的软件商城中安装code报错\n\nUnable to install \"Visual Studio Code\": snap \"code\" has \"install-snap\" change in progress；\n\n#### 问题原因&&解决\n\n软件正在安装，所以不需要再次点击\n\n```shell\nubuntu@root:~/Desktop/Doc$ snap changes\nID   Status  Spawn                   Ready                   Summary\n1    Done    2022-02-23              yesterday at 11:37 CST  Initialize system state\n2    Done    yesterday at 11:37 CST  yesterday at 11:37 CST  Initialize device\n3    Done    yesterday at 11:42 CST  yesterday at 11:43 CST  Install \"typora\" snap from \"latest/stable\" channel\n4    Done    yesterday at 14:03 CST  yesterday at 14:12 CST  Auto-refresh 4 snaps\n5    Do      today at 11:06 CST      -                       Install \"code\" snap from \"latest/stable\" channel\n\n```\n\n### 从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode \n\n**ubuntu 添加信任源**\n\n```shell\nubuntu@root:~/Desktop$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\nubuntu@root:~/Desktop$ sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/\n[sudo] password for ubuntu: \nubuntu@root:~/Desktop$ sudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" > /etc/apt/sources.list.d/vscode.list'\nubuntu@root:~/Desktop$ rm -f packages.microsoft.gpg\nubuntu@root:~/Desktop$ sudo apt install apt-transport-https\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  gyp javascript-common libc-ares2 libjs-inherits libjs-is-typedarray libjs-psl libjs-typedarray-to-buffer libpython2-stdlib libpython2.7-minimal libpython2.7-stdlib libssl-dev libuv1-dev\n  python-pkg-resources python2 python2-minimal python2.7 python2.7-minimal\nUse 'sudo apt autoremove' to remove them.\nThe following NEW packages will be installed:\n  apt-transport-https\n0 upgraded, 1 newly installed, 0 to remove and 257 not upgraded.\nNeed to get 1,704 B of archives.\nAfter this operation, 162 kB of additional disk space will be used.\nGet:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]\nFetched 1,704 B in 1s (2,988 B/s)        \nSelecting previously unselected package apt-transport-https.\n(Reading database ... 196975 files and directories currently installed.)\nPreparing to unpack .../apt-transport-https_2.0.9_all.deb ...\nUnpacking apt-transport-https (2.0.9) ...\nSetting up apt-transport-https (2.0.9) ...\nubuntu@root:~/Desktop$ sudo apt update -y\nubuntu@root:~/Desktop$ sudo apt install code -y\n```\n下载之后重新打开，支持中文输入。\n\n\n\n","slug":"编译安装/ubuntu安装vscode","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:28:21.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfv001utpdoebasa49z","content":"<h3 id=\"在ubuntu的软件商城中安装code报错\"><a href=\"#在ubuntu的软件商城中安装code报错\" class=\"headerlink\" title=\"在ubuntu的软件商城中安装code报错\"></a>在ubuntu的软件商城中安装code报错</h3><p>Unable to install “Visual Studio Code”: snap “code” has “install-snap” change in progress；</p>\n<h4 id=\"问题原因-amp-amp-解决\"><a href=\"#问题原因-amp-amp-解决\" class=\"headerlink\" title=\"问题原因&amp;&amp;解决\"></a>问题原因&amp;&amp;解决</h4><p>软件正在安装，所以不需要再次点击</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Doc$ snap changes<br>ID   Status  Spawn                   Ready                   Summary<br>1    Done    2022-02-23              yesterday at 11:37 CST  Initialize system state<br>2    Done    yesterday at 11:37 CST  yesterday at 11:37 CST  Initialize device<br>3    Done    yesterday at 11:42 CST  yesterday at 11:43 CST  Install &quot;typora&quot; snap from &quot;latest/stable&quot; channel<br>4    Done    yesterday at 14:03 CST  yesterday at 14:12 CST  Auto-refresh 4 snaps<br>5    Do      today at 11:06 CST      -                       Install &quot;code&quot; snap from &quot;latest/stable&quot; channel<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode\"><a href=\"#从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode\" class=\"headerlink\" title=\"从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode\"></a>从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode</h3><p><strong>ubuntu 添加信任源</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/<br>[sudo] password for ubuntu: <br>ubuntu@root:~/Desktop$ sudo sh -c &#x27;echo &quot;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;<br>ubuntu@root:~/Desktop$ rm -f packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo apt install apt-transport-https<br>Reading package lists... Done<br>Building dependency tree       <br>Reading state information... Done<br>The following packages were automatically installed and are no longer required:<br>  gyp javascript-common libc-ares2 libjs-inherits libjs-is-typedarray libjs-psl libjs-typedarray-to-buffer libpython2-stdlib libpython2.7-minimal libpython2.7-stdlib libssl-dev libuv1-dev<br>  python-pkg-resources python2 python2-minimal python2.7 python2.7-minimal<br>Use &#x27;sudo apt autoremove&#x27; to remove them.<br>The following NEW packages will be installed:<br>  apt-transport-https<br>0 upgraded, 1 newly installed, 0 to remove and 257 not upgraded.<br>Need to get 1,704 B of archives.<br>After this operation, 162 kB of additional disk space will be used.<br>Get:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]<br>Fetched 1,704 B in 1s (2,988 B/s)        <br>Selecting previously unselected package apt-transport-https.<br>(Reading database ... 196975 files and directories currently installed.)<br>Preparing to unpack .../apt-transport-https_2.0.9_all.deb ...<br>Unpacking apt-transport-https (2.0.9) ...<br>Setting up apt-transport-https (2.0.9) ...<br>ubuntu@root:~/Desktop$ sudo apt update -y<br>ubuntu@root:~/Desktop$ sudo apt install code -y<br></code></pre></td></tr></table></figure>\n<p>下载之后重新打开，支持中文输入。</p>\n","site":{"data":{}},"wordcount":2333,"excerpt":"","more":"<h3 id=\"在ubuntu的软件商城中安装code报错\"><a href=\"#在ubuntu的软件商城中安装code报错\" class=\"headerlink\" title=\"在ubuntu的软件商城中安装code报错\"></a>在ubuntu的软件商城中安装code报错</h3><p>Unable to install “Visual Studio Code”: snap “code” has “install-snap” change in progress；</p>\n<h4 id=\"问题原因-amp-amp-解决\"><a href=\"#问题原因-amp-amp-解决\" class=\"headerlink\" title=\"问题原因&amp;&amp;解决\"></a>问题原因&amp;&amp;解决</h4><p>软件正在安装，所以不需要再次点击</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop/Doc$ snap changes<br>ID   Status  Spawn                   Ready                   Summary<br>1    Done    2022-02-23              yesterday at 11:37 CST  Initialize system state<br>2    Done    yesterday at 11:37 CST  yesterday at 11:37 CST  Initialize device<br>3    Done    yesterday at 11:42 CST  yesterday at 11:43 CST  Install &quot;typora&quot; snap from &quot;latest/stable&quot; channel<br>4    Done    yesterday at 14:03 CST  yesterday at 14:12 CST  Auto-refresh 4 snaps<br>5    Do      today at 11:06 CST      -                       Install &quot;code&quot; snap from &quot;latest/stable&quot; channel<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode\"><a href=\"#从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode\" class=\"headerlink\" title=\"从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode\"></a>从ubuntu软件商店下载的VScode无法输入中文，重新安装VScode</h3><p><strong>ubuntu 添加信任源</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Desktop$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/<br>[sudo] password for ubuntu: <br>ubuntu@root:~/Desktop$ sudo sh -c &#x27;echo &quot;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;<br>ubuntu@root:~/Desktop$ rm -f packages.microsoft.gpg<br>ubuntu@root:~/Desktop$ sudo apt install apt-transport-https<br>Reading package lists... Done<br>Building dependency tree       <br>Reading state information... Done<br>The following packages were automatically installed and are no longer required:<br>  gyp javascript-common libc-ares2 libjs-inherits libjs-is-typedarray libjs-psl libjs-typedarray-to-buffer libpython2-stdlib libpython2.7-minimal libpython2.7-stdlib libssl-dev libuv1-dev<br>  python-pkg-resources python2 python2-minimal python2.7 python2.7-minimal<br>Use &#x27;sudo apt autoremove&#x27; to remove them.<br>The following NEW packages will be installed:<br>  apt-transport-https<br>0 upgraded, 1 newly installed, 0 to remove and 257 not upgraded.<br>Need to get 1,704 B of archives.<br>After this operation, 162 kB of additional disk space will be used.<br>Get:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]<br>Fetched 1,704 B in 1s (2,988 B/s)        <br>Selecting previously unselected package apt-transport-https.<br>(Reading database ... 196975 files and directories currently installed.)<br>Preparing to unpack .../apt-transport-https_2.0.9_all.deb ...<br>Unpacking apt-transport-https (2.0.9) ...<br>Setting up apt-transport-https (2.0.9) ...<br>ubuntu@root:~/Desktop$ sudo apt update -y<br>ubuntu@root:~/Desktop$ sudo apt install code -y<br></code></pre></td></tr></table></figure>\n<p>下载之后重新打开，支持中文输入。</p>\n"},{"title":"linux 常见文本处理命令","_content":"\n## 文本处理\n\n| 类型           | 命令            |\n| -------------- | --------------- |\n| 查看文件       | cat、more、less |\n| 文件摘选       | head、tail      |\n| 提取文件内容   | cut、awk、grep  |\n| 文件排序与比较 | wc、sort、diff  |\n| 文本操作工具   | sed、tr         |\n\n## CUT\n\n文件内容的查看，显示行中的指定部分，删除文件中的指定字段。\n\ncut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。\n\n```shell\nMandatory arguments to long options are mandatory for short options too.\n  -b, --bytes=LIST        select only these bytes\n  -c, --characters=LIST   select only these characters\n  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter\n  -f, --fields=LIST       select only these fields;  also print any line\n                            that contains no delimiter character, unless\n                            the -s option is specified\n  -n                      with -b: don't split multibyte characters\n      --complement        complement the set of selected bytes, characters\n                            or fields\n  -s, --only-delimited    do not print lines not containing delimiters\n      --output-delimiter=STRING  use STRING as the output delimiter\n                            the default is to use the input delimiter\n      --help     display this help and exit\n      --version  output version information and exit\n```\n\n### 实例\n\n```shell\n[root@k8s-node1 localhost]# cat test.txt\nNo Name Mark Percent\n01 tom 69 91\n02 jack 71 87\n03 alex 68 98\n[root@k8s-node1 localhost]# cut -f2 -d\" \" test.txt\nName\ntom\njack\nalex\n[root@k8s-node1 localhost]# cut -f2- -d\" \" test.txt\nName Mark Percent\ntom 69 91\njack 71 87\nalex 68 98\n[root@k8s-node1 localhost]# cut -c 2 test.txt\no\n1\n2\n3\n\n```","source":"_posts/linux/Linux-cut命令.md","raw":"---\ntitle: linux 常见文本处理命令\ncategories: \n- linux\ntags:\n- linux\n---\n\n## 文本处理\n\n| 类型           | 命令            |\n| -------------- | --------------- |\n| 查看文件       | cat、more、less |\n| 文件摘选       | head、tail      |\n| 提取文件内容   | cut、awk、grep  |\n| 文件排序与比较 | wc、sort、diff  |\n| 文本操作工具   | sed、tr         |\n\n## CUT\n\n文件内容的查看，显示行中的指定部分，删除文件中的指定字段。\n\ncut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。\n\n```shell\nMandatory arguments to long options are mandatory for short options too.\n  -b, --bytes=LIST        select only these bytes\n  -c, --characters=LIST   select only these characters\n  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter\n  -f, --fields=LIST       select only these fields;  also print any line\n                            that contains no delimiter character, unless\n                            the -s option is specified\n  -n                      with -b: don't split multibyte characters\n      --complement        complement the set of selected bytes, characters\n                            or fields\n  -s, --only-delimited    do not print lines not containing delimiters\n      --output-delimiter=STRING  use STRING as the output delimiter\n                            the default is to use the input delimiter\n      --help     display this help and exit\n      --version  output version information and exit\n```\n\n### 实例\n\n```shell\n[root@k8s-node1 localhost]# cat test.txt\nNo Name Mark Percent\n01 tom 69 91\n02 jack 71 87\n03 alex 68 98\n[root@k8s-node1 localhost]# cut -f2 -d\" \" test.txt\nName\ntom\njack\nalex\n[root@k8s-node1 localhost]# cut -f2- -d\" \" test.txt\nName Mark Percent\ntom 69 91\njack 71 87\nalex 68 98\n[root@k8s-node1 localhost]# cut -c 2 test.txt\no\n1\n2\n3\n\n```","slug":"linux/Linux-cut命令","published":1,"date":"2022-09-20T01:36:35.224Z","updated":"2022-09-20T01:37:14.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfw001ytpdo1x9b3qfa","content":"<h2 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看文件</td>\n<td>cat、more、less</td>\n</tr>\n<tr>\n<td>文件摘选</td>\n<td>head、tail</td>\n</tr>\n<tr>\n<td>提取文件内容</td>\n<td>cut、awk、grep</td>\n</tr>\n<tr>\n<td>文件排序与比较</td>\n<td>wc、sort、diff</td>\n</tr>\n<tr>\n<td>文本操作工具</td>\n<td>sed、tr</td>\n</tr>\n</tbody></table>\n<h2 id=\"CUT\"><a href=\"#CUT\" class=\"headerlink\" title=\"CUT\"></a>CUT</h2><p>文件内容的查看，显示行中的指定部分，删除文件中的指定字段。</p>\n<p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Mandatory arguments to long options are mandatory for short options too.<br>  -b, --bytes=LIST        select only these bytes<br>  -c, --characters=LIST   select only these characters<br>  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter<br>  -f, --fields=LIST       select only these fields;  also print any line<br>                            that contains no delimiter character, unless<br>                            the -s option is specified<br>  -n                      with -b: don&#x27;t split multibyte characters<br>      --complement        complement the set of selected bytes, characters<br>                            or fields<br>  -s, --only-delimited    do not print lines not containing delimiters<br>      --output-delimiter=STRING  use STRING as the output delimiter<br>                            the default is to use the input delimiter<br>      --help     display this help and exit<br>      --version  output version information and exit<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@k8s-node1 localhost]# cat test.txt<br>No Name Mark Percent<br>01 tom 69 91<br>02 jack 71 87<br>03 alex 68 98<br>[root@k8s-node1 localhost]# cut -f2 -d&quot; &quot; test.txt<br>Name<br>tom<br>jack<br>alex<br>[root@k8s-node1 localhost]# cut -f2- -d&quot; &quot; test.txt<br>Name Mark Percent<br>tom 69 91<br>jack 71 87<br>alex 68 98<br>[root@k8s-node1 localhost]# cut -c 2 test.txt<br>o<br>1<br>2<br>3<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1164,"excerpt":"","more":"<h2 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看文件</td>\n<td>cat、more、less</td>\n</tr>\n<tr>\n<td>文件摘选</td>\n<td>head、tail</td>\n</tr>\n<tr>\n<td>提取文件内容</td>\n<td>cut、awk、grep</td>\n</tr>\n<tr>\n<td>文件排序与比较</td>\n<td>wc、sort、diff</td>\n</tr>\n<tr>\n<td>文本操作工具</td>\n<td>sed、tr</td>\n</tr>\n</tbody></table>\n<h2 id=\"CUT\"><a href=\"#CUT\" class=\"headerlink\" title=\"CUT\"></a>CUT</h2><p>文件内容的查看，显示行中的指定部分，删除文件中的指定字段。</p>\n<p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Mandatory arguments to long options are mandatory for short options too.<br>  -b, --bytes=LIST        select only these bytes<br>  -c, --characters=LIST   select only these characters<br>  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter<br>  -f, --fields=LIST       select only these fields;  also print any line<br>                            that contains no delimiter character, unless<br>                            the -s option is specified<br>  -n                      with -b: don&#x27;t split multibyte characters<br>      --complement        complement the set of selected bytes, characters<br>                            or fields<br>  -s, --only-delimited    do not print lines not containing delimiters<br>      --output-delimiter=STRING  use STRING as the output delimiter<br>                            the default is to use the input delimiter<br>      --help     display this help and exit<br>      --version  output version information and exit<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@k8s-node1 localhost]# cat test.txt<br>No Name Mark Percent<br>01 tom 69 91<br>02 jack 71 87<br>03 alex 68 98<br>[root@k8s-node1 localhost]# cut -f2 -d&quot; &quot; test.txt<br>Name<br>tom<br>jack<br>alex<br>[root@k8s-node1 localhost]# cut -f2- -d&quot; &quot; test.txt<br>Name Mark Percent<br>tom 69 91<br>jack 71 87<br>alex 68 98<br>[root@k8s-node1 localhost]# cut -c 2 test.txt<br>o<br>1<br>2<br>3<br><br></code></pre></td></tr></table></figure>"},{"title":"git相关操作命令","_content":"\n# git remote\n\n使用git remote set-url命令从SSH到HTTPS的远程URL,设置之后，可无需输入密码进行`git push`等操作\n\n```shell\ngit remote set-url origin https://token@github.com/username/repositoryName\n```\n\n验证是否改变\n\n```shell\ngit remote -v\norigin\thttps://token@github.com/username/repositoryName (fetch)\norigin\thttps://token@github.com/username/repositoryName (push)\n#origin\t为远程地址的别名\n```\n\n# .gitignore\n\n配置规则不生效，因为`.gitignore`只能忽略那些原来没有被track的文件，如果文件已经被纳入了版本管理，该文件内容是不生效的。\n\n```shell\ngit rm -r --cached .\ngit add .\ngit commit -m \"update .gitignore\"\n```\n\n`.gitignore`文件内容\n\n```.gitignore\n_config.yml\n.gitignore\n.deploy_git/\n```\n\n","source":"_posts/linux/git相关操作.md","raw":"---\ntitle: git相关操作命令\ncategories: \n- linux\ntags:\n- linux\n---\n\n# git remote\n\n使用git remote set-url命令从SSH到HTTPS的远程URL,设置之后，可无需输入密码进行`git push`等操作\n\n```shell\ngit remote set-url origin https://token@github.com/username/repositoryName\n```\n\n验证是否改变\n\n```shell\ngit remote -v\norigin\thttps://token@github.com/username/repositoryName (fetch)\norigin\thttps://token@github.com/username/repositoryName (push)\n#origin\t为远程地址的别名\n```\n\n# .gitignore\n\n配置规则不生效，因为`.gitignore`只能忽略那些原来没有被track的文件，如果文件已经被纳入了版本管理，该文件内容是不生效的。\n\n```shell\ngit rm -r --cached .\ngit add .\ngit commit -m \"update .gitignore\"\n```\n\n`.gitignore`文件内容\n\n```.gitignore\n_config.yml\n.gitignore\n.deploy_git/\n```\n\n","slug":"linux/git相关操作","published":1,"date":"2022-09-20T06:31:31.238Z","updated":"2022-09-22T02:22:46.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfx001ztpdo74wp6gjn","content":"<h1 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h1><p>使用git remote set-url命令从SSH到HTTPS的远程URL,设置之后，可无需输入密码进行<code>git push</code>等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git remote set-url origin https://token@github.com/username/repositoryName<br></code></pre></td></tr></table></figure>\n\n<p>验证是否改变</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git remote -v<br>origin\thttps://token@github.com/username/repositoryName (fetch)<br>origin\thttps://token@github.com/username/repositoryName (push)<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">origin\t为远程地址的别名</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h1><p>配置规则不生效，因为<code>.gitignore</code>只能忽略那些原来没有被track的文件，如果文件已经被纳入了版本管理，该文件内容是不生效的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git rm -r --cached .<br>git add .<br>git commit -m &quot;update .gitignore&quot;<br></code></pre></td></tr></table></figure>\n\n<p><code>.gitignore</code>文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs .gitignore\">_config.yml<br>.gitignore<br>.deploy_git/<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":489,"excerpt":"","more":"<h1 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h1><p>使用git remote set-url命令从SSH到HTTPS的远程URL,设置之后，可无需输入密码进行<code>git push</code>等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git remote set-url origin https://token@github.com/username/repositoryName<br></code></pre></td></tr></table></figure>\n\n<p>验证是否改变</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git remote -v<br>origin\thttps://token@github.com/username/repositoryName (fetch)<br>origin\thttps://token@github.com/username/repositoryName (push)<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">origin\t为远程地址的别名</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h1><p>配置规则不生效，因为<code>.gitignore</code>只能忽略那些原来没有被track的文件，如果文件已经被纳入了版本管理，该文件内容是不生效的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git rm -r --cached .<br>git add .<br>git commit -m &quot;update .gitignore&quot;<br></code></pre></td></tr></table></figure>\n\n<p><code>.gitignore</code>文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs .gitignore\">_config.yml<br>.gitignore<br>.deploy_git/<br></code></pre></td></tr></table></figure>\n\n"},{"title":"snap和apt","_content":"\n## snap \n\n**软件包和部署系统**。通过该应用程序与系统无关，也就是说可以在任何支持snap的linux发行版上本地运行。\n\n一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。\n\n类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。它们会被安装到单独的目录；各个应用程序之间相互隔离。使用snap有很多好处，首先它解决了软件包的依赖问题；其次，也使应用程序更容易管理。\n\n### 使用\n\n1. `sudo snap list`:查看已下载snap的软件。\n\n   \n\n## apt\n\n软件包管理器，用于在基于 Debian 的系统上安装和删除软件包。APT 使检索、配置、升级、安装和删除包的过程自动化。\n\n- 你希望应用程序由你使用的发行版进行审核。\n- 你担心节省存储空间。APT 安装的应用程序共享它们的依赖项。\n- 你希望应用程序正确集成到GUI 环境中。","source":"_posts/linux/snap和apt.md","raw":"---\ntitle: snap和apt\ncategories: \n- linux\ntags:\n- linux\n---\n\n## snap \n\n**软件包和部署系统**。通过该应用程序与系统无关，也就是说可以在任何支持snap的linux发行版上本地运行。\n\n一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。\n\n类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。它们会被安装到单独的目录；各个应用程序之间相互隔离。使用snap有很多好处，首先它解决了软件包的依赖问题；其次，也使应用程序更容易管理。\n\n### 使用\n\n1. `sudo snap list`:查看已下载snap的软件。\n\n   \n\n## apt\n\n软件包管理器，用于在基于 Debian 的系统上安装和删除软件包。APT 使检索、配置、升级、安装和删除包的过程自动化。\n\n- 你希望应用程序由你使用的发行版进行审核。\n- 你担心节省存储空间。APT 安装的应用程序共享它们的依赖项。\n- 你希望应用程序正确集成到GUI 环境中。","slug":"linux/snap和apt","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T06:18:25.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsfz0023tpdohy7vh59s","content":"<h2 id=\"snap\"><a href=\"#snap\" class=\"headerlink\" title=\"snap\"></a>snap</h2><p><strong>软件包和部署系统</strong>。通过该应用程序与系统无关，也就是说可以在任何支持snap的linux发行版上本地运行。</p>\n<p>一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。</p>\n<p>类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。它们会被安装到单独的目录；各个应用程序之间相互隔离。使用snap有很多好处，首先它解决了软件包的依赖问题；其次，也使应用程序更容易管理。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li><code>sudo snap list</code>:查看已下载snap的软件。</li>\n</ol>\n<h2 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h2><p>软件包管理器，用于在基于 Debian 的系统上安装和删除软件包。APT 使检索、配置、升级、安装和删除包的过程自动化。</p>\n<ul>\n<li>你希望应用程序由你使用的发行版进行审核。</li>\n<li>你担心节省存储空间。APT 安装的应用程序共享它们的依赖项。</li>\n<li>你希望应用程序正确集成到GUI 环境中。</li>\n</ul>\n","site":{"data":{}},"wordcount":457,"excerpt":"","more":"<h2 id=\"snap\"><a href=\"#snap\" class=\"headerlink\" title=\"snap\"></a>snap</h2><p><strong>软件包和部署系统</strong>。通过该应用程序与系统无关，也就是说可以在任何支持snap的linux发行版上本地运行。</p>\n<p>一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。</p>\n<p>类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。它们会被安装到单独的目录；各个应用程序之间相互隔离。使用snap有很多好处，首先它解决了软件包的依赖问题；其次，也使应用程序更容易管理。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li><code>sudo snap list</code>:查看已下载snap的软件。</li>\n</ol>\n<h2 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h2><p>软件包管理器，用于在基于 Debian 的系统上安装和删除软件包。APT 使检索、配置、升级、安装和删除包的过程自动化。</p>\n<ul>\n<li>你希望应用程序由你使用的发行版进行审核。</li>\n<li>你担心节省存储空间。APT 安装的应用程序共享它们的依赖项。</li>\n<li>你希望应用程序正确集成到GUI 环境中。</li>\n</ul>\n"},{"title":"vim的常用操作","_content":"\n\n\n## 相关命令\n\n| 操作            | 解释                           |\n| --------------- | ------------------------------ |\n| vim -M test.log | 以只读的方式打开，不可强制保存 |\n| vim +8 test.log | 编辑打开文档，光标停留的行数   |\n| vim -R test.log | 以只读的方式打开，强制保存     |\n| yy或者y         | 复制一行                       |\n| p               | 光标后一行粘贴                 |\n| dd              | 删除                           |\n| 0               | 行尾                           |\n| $               | 行首                           |\n| :set nu         | 显示行数                       |\n| /字符串+enter   | 查找字符串                     |\n| :set hlsearch   | 查找字符串高亮                 |\n| n               | 查找下一个                     |\n| shift+n         | 查找上一个                     |\n| :1.5s/new/old/g | 替换                           |\n| ctrl+r          | 还原                           |\n| u               | 撤销                           |\n| P               | 光标前一行插入                 |","source":"_posts/linux/vim快捷操作.md","raw":"---\ntitle: vim的常用操作\ncategories: \n- linux\ntags:\n- linux\n---\n\n\n\n## 相关命令\n\n| 操作            | 解释                           |\n| --------------- | ------------------------------ |\n| vim -M test.log | 以只读的方式打开，不可强制保存 |\n| vim +8 test.log | 编辑打开文档，光标停留的行数   |\n| vim -R test.log | 以只读的方式打开，强制保存     |\n| yy或者y         | 复制一行                       |\n| p               | 光标后一行粘贴                 |\n| dd              | 删除                           |\n| 0               | 行尾                           |\n| $               | 行首                           |\n| :set nu         | 显示行数                       |\n| /字符串+enter   | 查找字符串                     |\n| :set hlsearch   | 查找字符串高亮                 |\n| n               | 查找下一个                     |\n| shift+n         | 查找上一个                     |\n| :1.5s/new/old/g | 替换                           |\n| ctrl+r          | 还原                           |\n| u               | 撤销                           |\n| P               | 光标前一行插入                 |","slug":"linux/vim快捷操作","published":1,"date":"2022-09-20T01:35:42.600Z","updated":"2022-09-20T08:26:38.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg00025tpdogh59a9sn","content":"<h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vim -M test.log</td>\n<td>以只读的方式打开，不可强制保存</td>\n</tr>\n<tr>\n<td>vim +8 test.log</td>\n<td>编辑打开文档，光标停留的行数</td>\n</tr>\n<tr>\n<td>vim -R test.log</td>\n<td>以只读的方式打开，强制保存</td>\n</tr>\n<tr>\n<td>yy或者y</td>\n<td>复制一行</td>\n</tr>\n<tr>\n<td>p</td>\n<td>光标后一行粘贴</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>0</td>\n<td>行尾</td>\n</tr>\n<tr>\n<td>$</td>\n<td>行首</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行数</td>\n</tr>\n<tr>\n<td>/字符串+enter</td>\n<td>查找字符串</td>\n</tr>\n<tr>\n<td>:set hlsearch</td>\n<td>查找字符串高亮</td>\n</tr>\n<tr>\n<td>n</td>\n<td>查找下一个</td>\n</tr>\n<tr>\n<td>shift+n</td>\n<td>查找上一个</td>\n</tr>\n<tr>\n<td>:1.5s/new/old/g</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>ctrl+r</td>\n<td>还原</td>\n</tr>\n<tr>\n<td>u</td>\n<td>撤销</td>\n</tr>\n<tr>\n<td>P</td>\n<td>光标前一行插入</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"wordcount":214,"excerpt":"","more":"<h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vim -M test.log</td>\n<td>以只读的方式打开，不可强制保存</td>\n</tr>\n<tr>\n<td>vim +8 test.log</td>\n<td>编辑打开文档，光标停留的行数</td>\n</tr>\n<tr>\n<td>vim -R test.log</td>\n<td>以只读的方式打开，强制保存</td>\n</tr>\n<tr>\n<td>yy或者y</td>\n<td>复制一行</td>\n</tr>\n<tr>\n<td>p</td>\n<td>光标后一行粘贴</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>0</td>\n<td>行尾</td>\n</tr>\n<tr>\n<td>$</td>\n<td>行首</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行数</td>\n</tr>\n<tr>\n<td>/字符串+enter</td>\n<td>查找字符串</td>\n</tr>\n<tr>\n<td>:set hlsearch</td>\n<td>查找字符串高亮</td>\n</tr>\n<tr>\n<td>n</td>\n<td>查找下一个</td>\n</tr>\n<tr>\n<td>shift+n</td>\n<td>查找上一个</td>\n</tr>\n<tr>\n<td>:1.5s/new/old/g</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>ctrl+r</td>\n<td>还原</td>\n</tr>\n<tr>\n<td>u</td>\n<td>撤销</td>\n</tr>\n<tr>\n<td>P</td>\n<td>光标前一行插入</td>\n</tr>\n</tbody></table>\n"},{"title":"wget知识点详解","_content":"\n## wget\n\n\"world wide web\"和\"get\"的结合，目前支持http、https以及ftp这三个TCP/IP协议下载。\n\n### 特点\n\n- 支持递归下载\n- 支持代理服务器\n- 恰当地转换页面中的连接\n- 生成可在本地浏览的页面镜像\n\n### 使用方法\n\n1. `wget`下载单文件\n\n2. `wget -O`：下载并以不同的文件名保存\n\n   将下载连接的文件保存为boost_1_80.tar.gz\n\n   ```shell\n   wget -O boost_1_80.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz\n   ```\n\n3. `wget -c`:断点续传\n\n4. `wget -q `:quiet (no output)——下载内容但不显示任何内容\n\n5. `wget -P`：下载到指定目录\n\n   ```shell\n   wget -P/tmp https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz\n   ```\n\n   \n","source":"_posts/linux/wget知识点详解.md","raw":"---\ntitle: wget知识点详解\ncategories: \n- linux\ntags:\n- linux\n---\n\n## wget\n\n\"world wide web\"和\"get\"的结合，目前支持http、https以及ftp这三个TCP/IP协议下载。\n\n### 特点\n\n- 支持递归下载\n- 支持代理服务器\n- 恰当地转换页面中的连接\n- 生成可在本地浏览的页面镜像\n\n### 使用方法\n\n1. `wget`下载单文件\n\n2. `wget -O`：下载并以不同的文件名保存\n\n   将下载连接的文件保存为boost_1_80.tar.gz\n\n   ```shell\n   wget -O boost_1_80.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz\n   ```\n\n3. `wget -c`:断点续传\n\n4. `wget -q `:quiet (no output)——下载内容但不显示任何内容\n\n5. `wget -P`：下载到指定目录\n\n   ```shell\n   wget -P/tmp https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz\n   ```\n\n   \n","slug":"linux/wget知识点详解","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T06:18:37.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg1002atpdo5ku8faer","content":"<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><p>“world wide web”和”get”的结合，目前支持http、https以及ftp这三个TCP/IP协议下载。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>支持递归下载</li>\n<li>支持代理服务器</li>\n<li>恰当地转换页面中的连接</li>\n<li>生成可在本地浏览的页面镜像</li>\n</ul>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ol>\n<li><p><code>wget</code>下载单文件</p>\n</li>\n<li><p><code>wget -O</code>：下载并以不同的文件名保存</p>\n<p>将下载连接的文件保存为boost_1_80.tar.gz</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget -O boost_1_80.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li>\n<li><p><code>wget -c</code>:断点续传</p>\n</li>\n<li><p><code>wget -q </code>:quiet (no output)——下载内容但不显示任何内容</p>\n</li>\n<li><p><code>wget -P</code>：下载到指定目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget -P/tmp https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":424,"excerpt":"","more":"<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><p>“world wide web”和”get”的结合，目前支持http、https以及ftp这三个TCP/IP协议下载。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>支持递归下载</li>\n<li>支持代理服务器</li>\n<li>恰当地转换页面中的连接</li>\n<li>生成可在本地浏览的页面镜像</li>\n</ul>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ol>\n<li><p><code>wget</code>下载单文件</p>\n</li>\n<li><p><code>wget -O</code>：下载并以不同的文件名保存</p>\n<p>将下载连接的文件保存为boost_1_80.tar.gz</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget -O boost_1_80.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li>\n<li><p><code>wget -c</code>:断点续传</p>\n</li>\n<li><p><code>wget -q </code>:quiet (no output)——下载内容但不显示任何内容</p>\n</li>\n<li><p><code>wget -P</code>：下载到指定目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget -P/tmp https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"修改linux命令提示符","_content":"\n\n\n**通过设置PS1环境变量的值来达到修改linux命令提示符的目的**\n\n## Linux修改命令提示符参数\n\n| 参数 | 描述                                                     |\n| ---- | -------------------------------------------------------- |\n| `\\d` | 代表日期，格式为 weekday month date，例如：”Mon Aug 1”   |\n| `\\H` | 完整的主机名称                                           |\n| `\\h` | 仅取主机的第一个名字                                     |\n| `\\T` | 显示时间为 24 小时格式，如：HH：MM：SS                   |\n| `\\t` | 显示时间为 12 小时格式 , 如：HH：MM：SS                  |\n| `\\A` | 显示时间为 12 小时格式：HH：MM                           |\n| `\\u` | 当前用户的账号名称                                       |\n| `\\v` | BASH 的版本信息                                          |\n| `\\w` | 完整的工作目录名称                                       |\n| `\\W` | 利用 basename 取得工作目录名称，所以只会列出最后一个目录 |\n| `#`  | 下达的第几个命令                                         |\n| `$`  | 提示字符，如果是 root 时，提示符为：# ，普通用户则为：$  |\n\n## 临时修改linux提示符\n\n```shell\n[root@74d785955174 /08:18:59]# PS1=\"[\\u\\w\\t]\\\\$\"\n[root/08:19:16]#PS1=\"[\\u\\w\\v]\\\\$\"\n[root/4.2]#PS1=\"[\\u\\v]\\\\$\"\n[root4.2]#PS1=\"[\\u@\\v]\\\\$\"\n[root@4.2]#PS1=\"[\\u@\\v \\W]\\\\$\"\n```","source":"_posts/linux/修改linux命令提示符.md","raw":"---\ntitle: 修改linux命令提示符\ncategories: \n- linux\ntags:\n- linux\n---\n\n\n\n**通过设置PS1环境变量的值来达到修改linux命令提示符的目的**\n\n## Linux修改命令提示符参数\n\n| 参数 | 描述                                                     |\n| ---- | -------------------------------------------------------- |\n| `\\d` | 代表日期，格式为 weekday month date，例如：”Mon Aug 1”   |\n| `\\H` | 完整的主机名称                                           |\n| `\\h` | 仅取主机的第一个名字                                     |\n| `\\T` | 显示时间为 24 小时格式，如：HH：MM：SS                   |\n| `\\t` | 显示时间为 12 小时格式 , 如：HH：MM：SS                  |\n| `\\A` | 显示时间为 12 小时格式：HH：MM                           |\n| `\\u` | 当前用户的账号名称                                       |\n| `\\v` | BASH 的版本信息                                          |\n| `\\w` | 完整的工作目录名称                                       |\n| `\\W` | 利用 basename 取得工作目录名称，所以只会列出最后一个目录 |\n| `#`  | 下达的第几个命令                                         |\n| `$`  | 提示字符，如果是 root 时，提示符为：# ，普通用户则为：$  |\n\n## 临时修改linux提示符\n\n```shell\n[root@74d785955174 /08:18:59]# PS1=\"[\\u\\w\\t]\\\\$\"\n[root/08:19:16]#PS1=\"[\\u\\w\\v]\\\\$\"\n[root/4.2]#PS1=\"[\\u\\v]\\\\$\"\n[root4.2]#PS1=\"[\\u@\\v]\\\\$\"\n[root@4.2]#PS1=\"[\\u@\\v \\W]\\\\$\"\n```","slug":"linux/修改linux命令提示符","published":1,"date":"2022-09-20T01:38:38.654Z","updated":"2022-09-20T03:24:39.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg1002ctpdob9rqcexp","content":"<p><strong>通过设置PS1环境变量的值来达到修改linux命令提示符的目的</strong></p>\n<h2 id=\"Linux修改命令提示符参数\"><a href=\"#Linux修改命令提示符参数\" class=\"headerlink\" title=\"Linux修改命令提示符参数\"></a>Linux修改命令提示符参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\d</code></td>\n<td>代表日期，格式为 weekday month date，例如：”Mon Aug 1”</td>\n</tr>\n<tr>\n<td><code>\\H</code></td>\n<td>完整的主机名称</td>\n</tr>\n<tr>\n<td><code>\\h</code></td>\n<td>仅取主机的第一个名字</td>\n</tr>\n<tr>\n<td><code>\\T</code></td>\n<td>显示时间为 24 小时格式，如：HH：MM：SS</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>显示时间为 12 小时格式 , 如：HH：MM：SS</td>\n</tr>\n<tr>\n<td><code>\\A</code></td>\n<td>显示时间为 12 小时格式：HH：MM</td>\n</tr>\n<tr>\n<td><code>\\u</code></td>\n<td>当前用户的账号名称</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>BASH 的版本信息</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>完整的工作目录名称</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>利用 basename 取得工作目录名称，所以只会列出最后一个目录</td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td>下达的第几个命令</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>提示字符，如果是 root 时，提示符为：# ，普通用户则为：$</td>\n</tr>\n</tbody></table>\n<h2 id=\"临时修改linux提示符\"><a href=\"#临时修改linux提示符\" class=\"headerlink\" title=\"临时修改linux提示符\"></a>临时修改linux提示符</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@74d785955174 /08:18:59]# PS1=&quot;[\\u\\w\\t]\\\\$&quot;<br>[root/08:19:16]#PS1=&quot;[\\u\\w\\v]\\\\$&quot;<br>[root/4.2]#PS1=&quot;[\\u\\v]\\\\$&quot;<br>[root4.2]#PS1=&quot;[\\u@\\v]\\\\$&quot;<br>[root@4.2]#PS1=&quot;[\\u@\\v \\W]\\\\$&quot;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":508,"excerpt":"","more":"<p><strong>通过设置PS1环境变量的值来达到修改linux命令提示符的目的</strong></p>\n<h2 id=\"Linux修改命令提示符参数\"><a href=\"#Linux修改命令提示符参数\" class=\"headerlink\" title=\"Linux修改命令提示符参数\"></a>Linux修改命令提示符参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\d</code></td>\n<td>代表日期，格式为 weekday month date，例如：”Mon Aug 1”</td>\n</tr>\n<tr>\n<td><code>\\H</code></td>\n<td>完整的主机名称</td>\n</tr>\n<tr>\n<td><code>\\h</code></td>\n<td>仅取主机的第一个名字</td>\n</tr>\n<tr>\n<td><code>\\T</code></td>\n<td>显示时间为 24 小时格式，如：HH：MM：SS</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>显示时间为 12 小时格式 , 如：HH：MM：SS</td>\n</tr>\n<tr>\n<td><code>\\A</code></td>\n<td>显示时间为 12 小时格式：HH：MM</td>\n</tr>\n<tr>\n<td><code>\\u</code></td>\n<td>当前用户的账号名称</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>BASH 的版本信息</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>完整的工作目录名称</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>利用 basename 取得工作目录名称，所以只会列出最后一个目录</td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td>下达的第几个命令</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>提示字符，如果是 root 时，提示符为：# ，普通用户则为：$</td>\n</tr>\n</tbody></table>\n<h2 id=\"临时修改linux提示符\"><a href=\"#临时修改linux提示符\" class=\"headerlink\" title=\"临时修改linux提示符\"></a>临时修改linux提示符</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@74d785955174 /08:18:59]# PS1=&quot;[\\u\\w\\t]\\\\$&quot;<br>[root/08:19:16]#PS1=&quot;[\\u\\w\\v]\\\\$&quot;<br>[root/4.2]#PS1=&quot;[\\u\\v]\\\\$&quot;<br>[root4.2]#PS1=&quot;[\\u@\\v]\\\\$&quot;<br>[root@4.2]#PS1=&quot;[\\u@\\v \\W]\\\\$&quot;<br></code></pre></td></tr></table></figure>"},{"title":"linux物理存储及逻辑卷管理.md","_content":"\n## Linux  查看磁盘信息\n\n### fdisk\n\n传统的LInux硬盘分区工具，不支持大于2TB的分区\n\n1. `fdisk -l`用于查看系统所有磁盘的信息，包括已挂载和未挂载的。\n\n   ```shell\n   [root@localhost ~]# fdisk -l\n   #查询可以识别的硬盘和分区，\n   Disk /dev/sda: 64 GiB, 68719476736 bytes, 134217728 sectors\n   Disk model: VBOX HARDDISK\n   Units: sectors of 1 * 512 = 512 bytes\n   #每个柱面的大小\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   #每个扇区的大小\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   Disklabel type: dos\n   Disk identifier: 0xec53cfb6\n   \n   Device     Boot   Start       End   Sectors Size Id Type\n   /dev/sda1  *       2048   2099199   2097152   1G 83 Linux\n   /dev/sda2       2099200 134217727 132118528  63G 8e Linux LVM\n   \n   \n   Disk /dev/sdb: 5 GiB, 5368709120 bytes, 10485760 sectors\n   Disk model: VBOX HARDDISK\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   \n   Disk /dev/mapper/openeuler-root: 39.66 GiB, 42580574208 bytes, 83165184 sectors\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   \n   Disk /dev/mapper/openeuler-swap: 3.98 GiB, 4269801472 bytes, 8339456 sectors\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   \n   Disk /dev/mapper/openeuler-home: 19.36 GiB, 20791164928 bytes, 40607744 sectors\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   ```\n\n2. 分区操作：\n\n   ![分区操作](物理逻辑卷相关知识/image-20220825165132736.png)\n\n### mkfs\n\nmkfs命令是make filename的缩写，用来在特定的分区建立linux文件系统\n\n磁盘格式化，将分区格式化成不同的文件系统\n\n- 查看支持的文件类型\n\n  ```shell\n  [root@localhost ~]# mkfs\n  mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.ext4    mkfs.minix   mkfs.xfs\n  ```\n\n- 磁盘格式化\n\n  ```shell\n  [root@localhost ~]# mkfs.ext4 /dev/sdb1\n  mke2fs 1.45.6 (20-Mar-2020)\n  Creating filesystem with 1310464 4k blocks and 327680 inodes\n  Filesystem UUID: 24b23662-dd7e-4d2a-8693-cbac942ece08\n  Superblock backups stored on blocks:\n          32768, 98304, 163840, 229376, 294912, 819200, 884736\n  \n  Allocating group tables: done\n  Writing inode tables: done\n  Creating journal (16384 blocks): done\n  Writing superblocks and filesystem accounting information: done\n  ```\n\n### mount\n\n磁盘挂载，想要使用磁盘，需要先建立一个联系，也就是目录。\n\n![磁盘挂载](物理逻辑卷相关知识/image-20220826145753160.png)\n\n### df（disk free）\n\n用来检查Linux服务器的文件系统的磁盘空间占用率——获取硬盘被占用了多少，目前还剩下多少空间信息。\n\n1. `dh -h`查看系统挂载、磁盘空间大小和利用率。\n\n### du（disk uasge)\n\n显示每个文件和目录的磁盘使用空间。\n\n### parted\n\n常用的分区软件，可支持创建2T以上的磁盘分区，相对于fdisk，使用方便、也可动态调整分区大小。\n\n```shell\n[root@localhost dev]# parted -h\n#device:磁盘设备名称。\n#command：没有默认进入交互模式。\nUsage: parted [OPTION]... [DEVICE [COMMAND [PARAMETERS]...]...]\nApply COMMANDs with PARAMETERS to DEVICE.  If no COMMAND(s) are given, run in\ninteractive mode.\n\nOPTIONs:\n  -h, --help                      displays this help message\n  -l, --list                      lists partition layout on all block devices\n  -m, --machine                   displays machine parseable output\n  -s, --script                    never prompts for user intervention\n  -v, --version                   displays the version\n  -a, --align=[none|cyl|min|opt]  alignment for new partitions\n\n[root@localhost dev]# parted -l\nModel: ATA VBOX HARDDISK (scsi)\nDisk /dev/sda: 68.7GB\nSector size (logical/physical): 512B/512B\nPartition Table: msdos\nDisk Flags:\n\nNumber  Start   End     Size    Type     File system  Flags\n 1      1049kB  1075MB  1074MB  primary  ext4         boot\n 2      1075MB  68.7GB  67.6GB  primary               lvm\n[root@localhost ~]# parted /dev/sdb\nGNU Parted 3.3\nUsing /dev/sdb\nWelcome to GNU Parted! Type 'help' to view a list of commands.\n(parted)  mklabel msdos\nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?\nYes/No? yes\n(parted) quit\nInformation: You may need to update /etc/fstab.\n\n```\n\n\n\n## 磁盘分区\n\n磁盘分局将硬盘驱动划分为多个逻辑存储单元，这些成为**分区**。\n\n指的是磁盘分区表。\n\n分区好处：\n\n- 限制应用或用户的可用空间。\n- 允许从同一磁盘不同操作系统的多重启动。\n- 将操作系统和程序文件与用户文件分隔。\n- 创建用于操作系统虚拟内存交换的单独区域。\n- 限制磁盘空间使用情况，以提高诊断工具和备份影像的性能。\n\n### 分区类型\n\n**一个硬盘只有一个扩展分区，除去主分区，其它空间都是分配给扩展分区**\n\n硬盘容量=主分区+扩展分区（各逻辑分区容量和）\n\n- 主分区\n\n  主磁盘分区，不能再活粉其他类型的分区。\n\n- 扩展分区、逻辑分区\n\n  扩展分区不能直接使用，需要划分一个或多个逻辑分区后才能使用。\n\n**分区：**前4个分区用到的是数字1和数字4，逻辑分区从5开始\n\n## 逻辑卷\n\nLVM-逻辑卷管理是linux环境中对磁盘分区进行管理的一种机制，是建立在硬盘和分区之上、文件系统之下的一个逻辑层，可提高磁盘分区管理的灵活性。\n\n### 原理及优点\n\n逻辑卷（lv）是将几个磁盘分区或者块设备（pv可以位于不同的磁盘分区里，大小可以不同）组织起来形成一个大的扩展分区（一个vg卷组至少已包含一个pv）。该扩展分区不能直接用，需要将其划分成逻辑卷才能使用，lv可以格式化不同的文件系统，挂载后直接使用。\n\n- 灵活的容量\n- 可伸缩的存储池\n- 在线数据再分配\n- 方便的设备命名\n- 磁盘条带化\n- 卷镜像和卷快照\n\n![](物理逻辑卷相关知识/image-20220826152857911.png)\n\n### 物理卷\n\n1. 创建物理卷\n\n```shell\n[root@localhost ~]# pvcreate /dev/sdb\nWARNING: dos signature detected on /dev/sdb at offset 510. Wipe it? [y/n]: y\n  Wiping dos signature on /dev/sdb.\n  Physical volume \"/dev/sdb\" successfully created.\n```\n\n2. 查看物理卷 \n\n   ```shell\n   [root@bogon ~]# pvdisplay\n     --- Physical volume ---\n     PV Name               /dev/sda2\n     VG Name               openeuler\n     PV Size               <63.00 GiB / not usable 3.00 MiB\n     Allocatable           yes (but full)\n     PE Size               4.00 MiB\n     Total PE              16127\n     Free PE               0\n     Allocated PE          16127\n     PV UUID               5Fo0gc-r6Rc-r3Mb-szSD-UXYd-Au3u-fnejHG\n   \n     --- Physical volume ---\n     PV Name               /dev/sdb\n     VG Name               openeuler\n     PV Size               5.00 GiB / not usable 4.00 MiB\n     Allocatable           yes\n     PE Size               4.00 MiB\n     Total PE              1279\n     Free PE               767\n     Allocated PE          512\n     PV UUID               HFxCFH-9zVN-bNLe-MvPk-XsR3-WoR1-x0qzGP\n   ```\n\n3. 删除物理卷——pvremove\n\n### 卷组\n\n1. 创建卷组\n\n   openeuler:要创建的卷组名称\n\n   /dev/sdb：要加入到卷组中的物理卷名称\n\n   ```shell\n   [root@bogon ~]# vgcreate openeuler /dev/sdb\n   ```\n\n2. 查看卷组\n\n   ```shell\n   [root@bogon ~]# vgdisplay\n     --- Volume group ---\n     VG Name               openeuler\n     System ID\n     Format                lvm2\n     Metadata Areas        2\n     Metadata Sequence No  6\n     VG Access             read/write\n     VG Status             resizable\n     MAX LV                0\n     Cur LV                3\n     Open LV               3\n     Max PV                0\n     Cur PV                2\n     Act PV                2\n     VG Size               67.99 GiB\n     PE Size               4.00 MiB\n     Total PE              17406\n     Alloc PE / Size       16639 / <65.00 GiB\n     Free  PE / Size       767 / <3.00 GiB\n     VG UUID               TqFQNR-tYQb-Pe44-NlGo-rw7h-wohD-yYEEax\n   ```\n\n3. 扩展卷组\n\n   openeuler:要扩展的卷组的名称\n\n   /dev/sdb：要加入到卷组中的物理卷名称\n\n   ```shell\n    vgextend openeuler /dev/sdb\n   ```\n\n4. 收缩卷组\n\n   openeuler:要收缩的卷组的名称\n\n   /dev/sdb：要收缩到卷组中的物理卷名称\n\n   ```\n   [root@bogon ~]# vgreduce  openeuler /dev/sdb\n   ```\n\n### 逻辑卷\n\n1. 查看卷组中是否存在多余的空间\n\n```shell\n[root@localhost home]# vgs\n  VG        #PV #LV #SN Attr   VSize  VFree\n  openeuler   2   3   0 wz--n- 67.99g <3.00g\n```\n\n2. 扩容&&缩容\n\n   ```shell\n   #调整LVM逻辑卷的大小，可增大和缩小空间，但再调整过程中数据容易丢失。\n   lvresize -L +2048 /dev/openeuler/home\n   #扩展逻辑卷\n   lvextend -L +100M /dev/openeuler/home\n   #调整文件系统大小\n   resize2fs  /dev/openeuler/root\n   ```\n\n   **扩容**\n\n   - 确定是否有vg空间\n   - 使用lvextend扩容\n   - 调整文件系统的大小\n\n   **缩容**\n\n   - 确定缩容后目标的大小。确保有对应目标大小的空间可以容纳\n   - 卸载文件系统\n   - 缩减文件系统\n   - 缩减逻辑卷\n   - 重新挂载使用\n\n3. 查看逻辑卷\n\n   ```shell\n   [root@bogon ~]# lvdisplay /dev/openeuler/home\n     --- Logical volume ---\n     LV Path                /dev/openeuler/home\n     LV Name                home\n     VG Name                openeuler\n     LV UUID                1yCVn0-8tGc-WfaM-ayVk-fyDr-7Zjm-rasO9o\n     LV Write Access        read/write\n     LV Creation host, time localhost, 2022-08-25 11:22:05 +0800\n     LV Status              available\n     # open                 1\n     LV Size                21.36 GiB\n     Current LE             5469\n     Segments               2\n     Allocation             inherit\n     Read ahead sectors     auto\n     - currently set to     8192\n     Block device           253:2\n   ```\n\n   ","source":"_posts/linux/物理逻辑卷相关知识.md","raw":"---\ntitle: linux物理存储及逻辑卷管理.md\ncategories: \n- linux\ntags:\n- linux\n---\n\n## Linux  查看磁盘信息\n\n### fdisk\n\n传统的LInux硬盘分区工具，不支持大于2TB的分区\n\n1. `fdisk -l`用于查看系统所有磁盘的信息，包括已挂载和未挂载的。\n\n   ```shell\n   [root@localhost ~]# fdisk -l\n   #查询可以识别的硬盘和分区，\n   Disk /dev/sda: 64 GiB, 68719476736 bytes, 134217728 sectors\n   Disk model: VBOX HARDDISK\n   Units: sectors of 1 * 512 = 512 bytes\n   #每个柱面的大小\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   #每个扇区的大小\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   Disklabel type: dos\n   Disk identifier: 0xec53cfb6\n   \n   Device     Boot   Start       End   Sectors Size Id Type\n   /dev/sda1  *       2048   2099199   2097152   1G 83 Linux\n   /dev/sda2       2099200 134217727 132118528  63G 8e Linux LVM\n   \n   \n   Disk /dev/sdb: 5 GiB, 5368709120 bytes, 10485760 sectors\n   Disk model: VBOX HARDDISK\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   \n   Disk /dev/mapper/openeuler-root: 39.66 GiB, 42580574208 bytes, 83165184 sectors\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   \n   Disk /dev/mapper/openeuler-swap: 3.98 GiB, 4269801472 bytes, 8339456 sectors\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   \n   Disk /dev/mapper/openeuler-home: 19.36 GiB, 20791164928 bytes, 40607744 sectors\n   Units: sectors of 1 * 512 = 512 bytes\n   Sector size (logical/physical): 512 bytes / 512 bytes\n   I/O size (minimum/optimal): 512 bytes / 512 bytes\n   \n   ```\n\n2. 分区操作：\n\n   ![分区操作](物理逻辑卷相关知识/image-20220825165132736.png)\n\n### mkfs\n\nmkfs命令是make filename的缩写，用来在特定的分区建立linux文件系统\n\n磁盘格式化，将分区格式化成不同的文件系统\n\n- 查看支持的文件类型\n\n  ```shell\n  [root@localhost ~]# mkfs\n  mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.ext4    mkfs.minix   mkfs.xfs\n  ```\n\n- 磁盘格式化\n\n  ```shell\n  [root@localhost ~]# mkfs.ext4 /dev/sdb1\n  mke2fs 1.45.6 (20-Mar-2020)\n  Creating filesystem with 1310464 4k blocks and 327680 inodes\n  Filesystem UUID: 24b23662-dd7e-4d2a-8693-cbac942ece08\n  Superblock backups stored on blocks:\n          32768, 98304, 163840, 229376, 294912, 819200, 884736\n  \n  Allocating group tables: done\n  Writing inode tables: done\n  Creating journal (16384 blocks): done\n  Writing superblocks and filesystem accounting information: done\n  ```\n\n### mount\n\n磁盘挂载，想要使用磁盘，需要先建立一个联系，也就是目录。\n\n![磁盘挂载](物理逻辑卷相关知识/image-20220826145753160.png)\n\n### df（disk free）\n\n用来检查Linux服务器的文件系统的磁盘空间占用率——获取硬盘被占用了多少，目前还剩下多少空间信息。\n\n1. `dh -h`查看系统挂载、磁盘空间大小和利用率。\n\n### du（disk uasge)\n\n显示每个文件和目录的磁盘使用空间。\n\n### parted\n\n常用的分区软件，可支持创建2T以上的磁盘分区，相对于fdisk，使用方便、也可动态调整分区大小。\n\n```shell\n[root@localhost dev]# parted -h\n#device:磁盘设备名称。\n#command：没有默认进入交互模式。\nUsage: parted [OPTION]... [DEVICE [COMMAND [PARAMETERS]...]...]\nApply COMMANDs with PARAMETERS to DEVICE.  If no COMMAND(s) are given, run in\ninteractive mode.\n\nOPTIONs:\n  -h, --help                      displays this help message\n  -l, --list                      lists partition layout on all block devices\n  -m, --machine                   displays machine parseable output\n  -s, --script                    never prompts for user intervention\n  -v, --version                   displays the version\n  -a, --align=[none|cyl|min|opt]  alignment for new partitions\n\n[root@localhost dev]# parted -l\nModel: ATA VBOX HARDDISK (scsi)\nDisk /dev/sda: 68.7GB\nSector size (logical/physical): 512B/512B\nPartition Table: msdos\nDisk Flags:\n\nNumber  Start   End     Size    Type     File system  Flags\n 1      1049kB  1075MB  1074MB  primary  ext4         boot\n 2      1075MB  68.7GB  67.6GB  primary               lvm\n[root@localhost ~]# parted /dev/sdb\nGNU Parted 3.3\nUsing /dev/sdb\nWelcome to GNU Parted! Type 'help' to view a list of commands.\n(parted)  mklabel msdos\nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?\nYes/No? yes\n(parted) quit\nInformation: You may need to update /etc/fstab.\n\n```\n\n\n\n## 磁盘分区\n\n磁盘分局将硬盘驱动划分为多个逻辑存储单元，这些成为**分区**。\n\n指的是磁盘分区表。\n\n分区好处：\n\n- 限制应用或用户的可用空间。\n- 允许从同一磁盘不同操作系统的多重启动。\n- 将操作系统和程序文件与用户文件分隔。\n- 创建用于操作系统虚拟内存交换的单独区域。\n- 限制磁盘空间使用情况，以提高诊断工具和备份影像的性能。\n\n### 分区类型\n\n**一个硬盘只有一个扩展分区，除去主分区，其它空间都是分配给扩展分区**\n\n硬盘容量=主分区+扩展分区（各逻辑分区容量和）\n\n- 主分区\n\n  主磁盘分区，不能再活粉其他类型的分区。\n\n- 扩展分区、逻辑分区\n\n  扩展分区不能直接使用，需要划分一个或多个逻辑分区后才能使用。\n\n**分区：**前4个分区用到的是数字1和数字4，逻辑分区从5开始\n\n## 逻辑卷\n\nLVM-逻辑卷管理是linux环境中对磁盘分区进行管理的一种机制，是建立在硬盘和分区之上、文件系统之下的一个逻辑层，可提高磁盘分区管理的灵活性。\n\n### 原理及优点\n\n逻辑卷（lv）是将几个磁盘分区或者块设备（pv可以位于不同的磁盘分区里，大小可以不同）组织起来形成一个大的扩展分区（一个vg卷组至少已包含一个pv）。该扩展分区不能直接用，需要将其划分成逻辑卷才能使用，lv可以格式化不同的文件系统，挂载后直接使用。\n\n- 灵活的容量\n- 可伸缩的存储池\n- 在线数据再分配\n- 方便的设备命名\n- 磁盘条带化\n- 卷镜像和卷快照\n\n![](物理逻辑卷相关知识/image-20220826152857911.png)\n\n### 物理卷\n\n1. 创建物理卷\n\n```shell\n[root@localhost ~]# pvcreate /dev/sdb\nWARNING: dos signature detected on /dev/sdb at offset 510. Wipe it? [y/n]: y\n  Wiping dos signature on /dev/sdb.\n  Physical volume \"/dev/sdb\" successfully created.\n```\n\n2. 查看物理卷 \n\n   ```shell\n   [root@bogon ~]# pvdisplay\n     --- Physical volume ---\n     PV Name               /dev/sda2\n     VG Name               openeuler\n     PV Size               <63.00 GiB / not usable 3.00 MiB\n     Allocatable           yes (but full)\n     PE Size               4.00 MiB\n     Total PE              16127\n     Free PE               0\n     Allocated PE          16127\n     PV UUID               5Fo0gc-r6Rc-r3Mb-szSD-UXYd-Au3u-fnejHG\n   \n     --- Physical volume ---\n     PV Name               /dev/sdb\n     VG Name               openeuler\n     PV Size               5.00 GiB / not usable 4.00 MiB\n     Allocatable           yes\n     PE Size               4.00 MiB\n     Total PE              1279\n     Free PE               767\n     Allocated PE          512\n     PV UUID               HFxCFH-9zVN-bNLe-MvPk-XsR3-WoR1-x0qzGP\n   ```\n\n3. 删除物理卷——pvremove\n\n### 卷组\n\n1. 创建卷组\n\n   openeuler:要创建的卷组名称\n\n   /dev/sdb：要加入到卷组中的物理卷名称\n\n   ```shell\n   [root@bogon ~]# vgcreate openeuler /dev/sdb\n   ```\n\n2. 查看卷组\n\n   ```shell\n   [root@bogon ~]# vgdisplay\n     --- Volume group ---\n     VG Name               openeuler\n     System ID\n     Format                lvm2\n     Metadata Areas        2\n     Metadata Sequence No  6\n     VG Access             read/write\n     VG Status             resizable\n     MAX LV                0\n     Cur LV                3\n     Open LV               3\n     Max PV                0\n     Cur PV                2\n     Act PV                2\n     VG Size               67.99 GiB\n     PE Size               4.00 MiB\n     Total PE              17406\n     Alloc PE / Size       16639 / <65.00 GiB\n     Free  PE / Size       767 / <3.00 GiB\n     VG UUID               TqFQNR-tYQb-Pe44-NlGo-rw7h-wohD-yYEEax\n   ```\n\n3. 扩展卷组\n\n   openeuler:要扩展的卷组的名称\n\n   /dev/sdb：要加入到卷组中的物理卷名称\n\n   ```shell\n    vgextend openeuler /dev/sdb\n   ```\n\n4. 收缩卷组\n\n   openeuler:要收缩的卷组的名称\n\n   /dev/sdb：要收缩到卷组中的物理卷名称\n\n   ```\n   [root@bogon ~]# vgreduce  openeuler /dev/sdb\n   ```\n\n### 逻辑卷\n\n1. 查看卷组中是否存在多余的空间\n\n```shell\n[root@localhost home]# vgs\n  VG        #PV #LV #SN Attr   VSize  VFree\n  openeuler   2   3   0 wz--n- 67.99g <3.00g\n```\n\n2. 扩容&&缩容\n\n   ```shell\n   #调整LVM逻辑卷的大小，可增大和缩小空间，但再调整过程中数据容易丢失。\n   lvresize -L +2048 /dev/openeuler/home\n   #扩展逻辑卷\n   lvextend -L +100M /dev/openeuler/home\n   #调整文件系统大小\n   resize2fs  /dev/openeuler/root\n   ```\n\n   **扩容**\n\n   - 确定是否有vg空间\n   - 使用lvextend扩容\n   - 调整文件系统的大小\n\n   **缩容**\n\n   - 确定缩容后目标的大小。确保有对应目标大小的空间可以容纳\n   - 卸载文件系统\n   - 缩减文件系统\n   - 缩减逻辑卷\n   - 重新挂载使用\n\n3. 查看逻辑卷\n\n   ```shell\n   [root@bogon ~]# lvdisplay /dev/openeuler/home\n     --- Logical volume ---\n     LV Path                /dev/openeuler/home\n     LV Name                home\n     VG Name                openeuler\n     LV UUID                1yCVn0-8tGc-WfaM-ayVk-fyDr-7Zjm-rasO9o\n     LV Write Access        read/write\n     LV Creation host, time localhost, 2022-08-25 11:22:05 +0800\n     LV Status              available\n     # open                 1\n     LV Size                21.36 GiB\n     Current LE             5469\n     Segments               2\n     Allocation             inherit\n     Read ahead sectors     auto\n     - currently set to     8192\n     Block device           253:2\n   ```\n\n   ","slug":"linux/物理逻辑卷相关知识","published":1,"date":"2022-10-12T02:25:26.278Z","updated":"2022-10-12T02:33:43.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg2002htpdogies3dxq","content":"<h2 id=\"Linux-查看磁盘信息\"><a href=\"#Linux-查看磁盘信息\" class=\"headerlink\" title=\"Linux  查看磁盘信息\"></a>Linux  查看磁盘信息</h2><h3 id=\"fdisk\"><a href=\"#fdisk\" class=\"headerlink\" title=\"fdisk\"></a>fdisk</h3><p>传统的LInux硬盘分区工具，不支持大于2TB的分区</p>\n<ol>\n<li><p><code>fdisk -l</code>用于查看系统所有磁盘的信息，包括已挂载和未挂载的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# fdisk -l<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查询可以识别的硬盘和分区，</span><br>Disk /dev/sda: 64 GiB, 68719476736 bytes, 134217728 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">每个柱面的大小</span><br>Sector size (logical/physical): 512 bytes / 512 bytes<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">每个扇区的大小</span><br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: dos<br>Disk identifier: 0xec53cfb6<br><br>Device     Boot   Start       End   Sectors Size Id Type<br>/dev/sda1  *       2048   2099199   2097152   1G 83 Linux<br>/dev/sda2       2099200 134217727 132118528  63G 8e Linux LVM<br><br><br>Disk /dev/sdb: 5 GiB, 5368709120 bytes, 10485760 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br><br>Disk /dev/mapper/openeuler-root: 39.66 GiB, 42580574208 bytes, 83165184 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br><br>Disk /dev/mapper/openeuler-swap: 3.98 GiB, 4269801472 bytes, 8339456 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br><br>Disk /dev/mapper/openeuler-home: 19.36 GiB, 20791164928 bytes, 40607744 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br></code></pre></td></tr></table></figure></li>\n<li><p>分区操作：</p>\n<p><img src=\"/2022/10/12/linux/%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%E5%8D%B7%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20220825165132736.png\" alt=\"分区操作\"></p>\n</li>\n</ol>\n<h3 id=\"mkfs\"><a href=\"#mkfs\" class=\"headerlink\" title=\"mkfs\"></a>mkfs</h3><p>mkfs命令是make filename的缩写，用来在特定的分区建立linux文件系统</p>\n<p>磁盘格式化，将分区格式化成不同的文件系统</p>\n<ul>\n<li><p>查看支持的文件类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# mkfs<br>mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.ext4    mkfs.minix   mkfs.xfs<br></code></pre></td></tr></table></figure></li>\n<li><p>磁盘格式化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# mkfs.ext4 /dev/sdb1<br>mke2fs 1.45.6 (20-Mar-2020)<br>Creating filesystem with 1310464 4k blocks and 327680 inodes<br>Filesystem UUID: 24b23662-dd7e-4d2a-8693-cbac942ece08<br>Superblock backups stored on blocks:<br>        32768, 98304, 163840, 229376, 294912, 819200, 884736<br><br>Allocating group tables: done<br>Writing inode tables: done<br>Creating journal (16384 blocks): done<br>Writing superblocks and filesystem accounting information: done<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h3><p>磁盘挂载，想要使用磁盘，需要先建立一个联系，也就是目录。</p>\n<p><img src=\"/2022/10/12/linux/%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%E5%8D%B7%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20220826145753160.png\" alt=\"磁盘挂载\"></p>\n<h3 id=\"df（disk-free）\"><a href=\"#df（disk-free）\" class=\"headerlink\" title=\"df（disk free）\"></a>df（disk free）</h3><p>用来检查Linux服务器的文件系统的磁盘空间占用率——获取硬盘被占用了多少，目前还剩下多少空间信息。</p>\n<ol>\n<li><code>dh -h</code>查看系统挂载、磁盘空间大小和利用率。</li>\n</ol>\n<h3 id=\"du（disk-uasge\"><a href=\"#du（disk-uasge\" class=\"headerlink\" title=\"du（disk uasge)\"></a>du（disk uasge)</h3><p>显示每个文件和目录的磁盘使用空间。</p>\n<h3 id=\"parted\"><a href=\"#parted\" class=\"headerlink\" title=\"parted\"></a>parted</h3><p>常用的分区软件，可支持创建2T以上的磁盘分区，相对于fdisk，使用方便、也可动态调整分区大小。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost dev]# parted -h<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">device:磁盘设备名称。</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">command</span>：没有默认进入交互模式。</span><br>Usage: parted [OPTION]... [DEVICE [COMMAND [PARAMETERS]...]...]<br>Apply COMMANDs with PARAMETERS to DEVICE.  If no COMMAND(s) are given, run in<br>interactive mode.<br><br>OPTIONs:<br>  -h, --help                      displays this help message<br>  -l, --list                      lists partition layout on all block devices<br>  -m, --machine                   displays machine parseable output<br>  -s, --script                    never prompts for user intervention<br>  -v, --version                   displays the version<br>  -a, --align=[none|cyl|min|opt]  alignment for new partitions<br><br>[root@localhost dev]# parted -l<br>Model: ATA VBOX HARDDISK (scsi)<br>Disk /dev/sda: 68.7GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: msdos<br>Disk Flags:<br><br>Number  Start   End     Size    Type     File system  Flags<br> 1      1049kB  1075MB  1074MB  primary  ext4         boot<br> 2      1075MB  68.7GB  67.6GB  primary               lvm<br>[root@localhost ~]# parted /dev/sdb<br>GNU Parted 3.3<br>Using /dev/sdb<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted)  mklabel msdos<br>Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?<br>Yes/No? yes<br>(parted) quit<br>Information: You may need to update /etc/fstab.<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h2><p>磁盘分局将硬盘驱动划分为多个逻辑存储单元，这些成为<strong>分区</strong>。</p>\n<p>指的是磁盘分区表。</p>\n<p>分区好处：</p>\n<ul>\n<li>限制应用或用户的可用空间。</li>\n<li>允许从同一磁盘不同操作系统的多重启动。</li>\n<li>将操作系统和程序文件与用户文件分隔。</li>\n<li>创建用于操作系统虚拟内存交换的单独区域。</li>\n<li>限制磁盘空间使用情况，以提高诊断工具和备份影像的性能。</li>\n</ul>\n<h3 id=\"分区类型\"><a href=\"#分区类型\" class=\"headerlink\" title=\"分区类型\"></a>分区类型</h3><p><strong>一个硬盘只有一个扩展分区，除去主分区，其它空间都是分配给扩展分区</strong></p>\n<p>硬盘容量=主分区+扩展分区（各逻辑分区容量和）</p>\n<ul>\n<li><p>主分区</p>\n<p>主磁盘分区，不能再活粉其他类型的分区。</p>\n</li>\n<li><p>扩展分区、逻辑分区</p>\n<p>扩展分区不能直接使用，需要划分一个或多个逻辑分区后才能使用。</p>\n</li>\n</ul>\n<p><strong>分区：</strong>前4个分区用到的是数字1和数字4，逻辑分区从5开始</p>\n<h2 id=\"逻辑卷\"><a href=\"#逻辑卷\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h2><p>LVM-逻辑卷管理是linux环境中对磁盘分区进行管理的一种机制，是建立在硬盘和分区之上、文件系统之下的一个逻辑层，可提高磁盘分区管理的灵活性。</p>\n<h3 id=\"原理及优点\"><a href=\"#原理及优点\" class=\"headerlink\" title=\"原理及优点\"></a>原理及优点</h3><p>逻辑卷（lv）是将几个磁盘分区或者块设备（pv可以位于不同的磁盘分区里，大小可以不同）组织起来形成一个大的扩展分区（一个vg卷组至少已包含一个pv）。该扩展分区不能直接用，需要将其划分成逻辑卷才能使用，lv可以格式化不同的文件系统，挂载后直接使用。</p>\n<ul>\n<li>灵活的容量</li>\n<li>可伸缩的存储池</li>\n<li>在线数据再分配</li>\n<li>方便的设备命名</li>\n<li>磁盘条带化</li>\n<li>卷镜像和卷快照</li>\n</ul>\n<p><img src=\"/2022/10/12/linux/%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%E5%8D%B7%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20220826152857911.png\"></p>\n<h3 id=\"物理卷\"><a href=\"#物理卷\" class=\"headerlink\" title=\"物理卷\"></a>物理卷</h3><ol>\n<li>创建物理卷</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# pvcreate /dev/sdb<br>WARNING: dos signature detected on /dev/sdb at offset 510. Wipe it? [y/n]: y<br>  Wiping dos signature on /dev/sdb.<br>  Physical volume &quot;/dev/sdb&quot; successfully created.<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>查看物理卷 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# pvdisplay<br>  --- Physical volume ---<br>  PV Name               /dev/sda2<br>  VG Name               openeuler<br>  PV Size               &lt;63.00 GiB / not usable 3.00 MiB<br>  Allocatable           yes (but full)<br>  PE Size               4.00 MiB<br>  Total PE              16127<br>  Free PE               0<br>  Allocated PE          16127<br>  PV UUID               5Fo0gc-r6Rc-r3Mb-szSD-UXYd-Au3u-fnejHG<br><br>  --- Physical volume ---<br>  PV Name               /dev/sdb<br>  VG Name               openeuler<br>  PV Size               5.00 GiB / not usable 4.00 MiB<br>  Allocatable           yes<br>  PE Size               4.00 MiB<br>  Total PE              1279<br>  Free PE               767<br>  Allocated PE          512<br>  PV UUID               HFxCFH-9zVN-bNLe-MvPk-XsR3-WoR1-x0qzGP<br></code></pre></td></tr></table></figure></li>\n<li><p>删除物理卷——pvremove</p>\n</li>\n</ol>\n<h3 id=\"卷组\"><a href=\"#卷组\" class=\"headerlink\" title=\"卷组\"></a>卷组</h3><ol>\n<li><p>创建卷组</p>\n<p>openeuler:要创建的卷组名称</p>\n<p>/dev/sdb：要加入到卷组中的物理卷名称</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# vgcreate openeuler /dev/sdb<br></code></pre></td></tr></table></figure></li>\n<li><p>查看卷组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# vgdisplay<br>  --- Volume group ---<br>  VG Name               openeuler<br>  System ID<br>  Format                lvm2<br>  Metadata Areas        2<br>  Metadata Sequence No  6<br>  VG Access             read/write<br>  VG Status             resizable<br>  MAX LV                0<br>  Cur LV                3<br>  Open LV               3<br>  Max PV                0<br>  Cur PV                2<br>  Act PV                2<br>  VG Size               67.99 GiB<br>  PE Size               4.00 MiB<br>  Total PE              17406<br>  Alloc PE / Size       16639 / &lt;65.00 GiB<br>  Free  PE / Size       767 / &lt;3.00 GiB<br>  VG UUID               TqFQNR-tYQb-Pe44-NlGo-rw7h-wohD-yYEEax<br></code></pre></td></tr></table></figure></li>\n<li><p>扩展卷组</p>\n<p>openeuler:要扩展的卷组的名称</p>\n<p>/dev/sdb：要加入到卷组中的物理卷名称</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vgextend openeuler /dev/sdb<br></code></pre></td></tr></table></figure></li>\n<li><p>收缩卷组</p>\n<p>openeuler:要收缩的卷组的名称</p>\n<p>/dev/sdb：要收缩到卷组中的物理卷名称</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">[root<span class=\"hljs-symbol\">@bogon</span> ~]<span class=\"hljs-meta\"># vgreduce  openeuler /dev/sdb</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"逻辑卷-1\"><a href=\"#逻辑卷-1\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h3><ol>\n<li>查看卷组中是否存在多余的空间</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost home]# vgs<br>  VG        #PV #LV #SN Attr   VSize  VFree<br>  openeuler   2   3   0 wz--n- 67.99g &lt;3.00g<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>扩容&amp;&amp;缩容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">调整LVM逻辑卷的大小，可增大和缩小空间，但再调整过程中数据容易丢失。</span><br>lvresize -L +2048 /dev/openeuler/home<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">扩展逻辑卷</span><br>lvextend -L +100M /dev/openeuler/home<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">调整文件系统大小</span><br>resize2fs  /dev/openeuler/root<br></code></pre></td></tr></table></figure>\n\n<p><strong>扩容</strong></p>\n<ul>\n<li>确定是否有vg空间</li>\n<li>使用lvextend扩容</li>\n<li>调整文件系统的大小</li>\n</ul>\n<p><strong>缩容</strong></p>\n<ul>\n<li>确定缩容后目标的大小。确保有对应目标大小的空间可以容纳</li>\n<li>卸载文件系统</li>\n<li>缩减文件系统</li>\n<li>缩减逻辑卷</li>\n<li>重新挂载使用</li>\n</ul>\n</li>\n<li><p>查看逻辑卷</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# lvdisplay /dev/openeuler/home<br>  --- Logical volume ---<br>  LV Path                /dev/openeuler/home<br>  LV Name                home<br>  VG Name                openeuler<br>  LV UUID                1yCVn0-8tGc-WfaM-ayVk-fyDr-7Zjm-rasO9o<br>  LV Write Access        read/write<br>  LV Creation host, time localhost, 2022-08-25 11:22:05 +0800<br>  LV Status              available<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">open                 1</span><br>  LV Size                21.36 GiB<br>  Current LE             5469<br>  Segments               2<br>  Allocation             inherit<br>  Read ahead sectors     auto<br>  - currently set to     8192<br>  Block device           253:2<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":5661,"excerpt":"","more":"<h2 id=\"Linux-查看磁盘信息\"><a href=\"#Linux-查看磁盘信息\" class=\"headerlink\" title=\"Linux  查看磁盘信息\"></a>Linux  查看磁盘信息</h2><h3 id=\"fdisk\"><a href=\"#fdisk\" class=\"headerlink\" title=\"fdisk\"></a>fdisk</h3><p>传统的LInux硬盘分区工具，不支持大于2TB的分区</p>\n<ol>\n<li><p><code>fdisk -l</code>用于查看系统所有磁盘的信息，包括已挂载和未挂载的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# fdisk -l<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查询可以识别的硬盘和分区，</span><br>Disk /dev/sda: 64 GiB, 68719476736 bytes, 134217728 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">每个柱面的大小</span><br>Sector size (logical/physical): 512 bytes / 512 bytes<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">每个扇区的大小</span><br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: dos<br>Disk identifier: 0xec53cfb6<br><br>Device     Boot   Start       End   Sectors Size Id Type<br>/dev/sda1  *       2048   2099199   2097152   1G 83 Linux<br>/dev/sda2       2099200 134217727 132118528  63G 8e Linux LVM<br><br><br>Disk /dev/sdb: 5 GiB, 5368709120 bytes, 10485760 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br><br>Disk /dev/mapper/openeuler-root: 39.66 GiB, 42580574208 bytes, 83165184 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br><br>Disk /dev/mapper/openeuler-swap: 3.98 GiB, 4269801472 bytes, 8339456 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br><br>Disk /dev/mapper/openeuler-home: 19.36 GiB, 20791164928 bytes, 40607744 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><br></code></pre></td></tr></table></figure></li>\n<li><p>分区操作：</p>\n<p><img src=\"/2022/10/12/linux/%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%E5%8D%B7%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20220825165132736.png\" alt=\"分区操作\"></p>\n</li>\n</ol>\n<h3 id=\"mkfs\"><a href=\"#mkfs\" class=\"headerlink\" title=\"mkfs\"></a>mkfs</h3><p>mkfs命令是make filename的缩写，用来在特定的分区建立linux文件系统</p>\n<p>磁盘格式化，将分区格式化成不同的文件系统</p>\n<ul>\n<li><p>查看支持的文件类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# mkfs<br>mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.ext4    mkfs.minix   mkfs.xfs<br></code></pre></td></tr></table></figure></li>\n<li><p>磁盘格式化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# mkfs.ext4 /dev/sdb1<br>mke2fs 1.45.6 (20-Mar-2020)<br>Creating filesystem with 1310464 4k blocks and 327680 inodes<br>Filesystem UUID: 24b23662-dd7e-4d2a-8693-cbac942ece08<br>Superblock backups stored on blocks:<br>        32768, 98304, 163840, 229376, 294912, 819200, 884736<br><br>Allocating group tables: done<br>Writing inode tables: done<br>Creating journal (16384 blocks): done<br>Writing superblocks and filesystem accounting information: done<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h3><p>磁盘挂载，想要使用磁盘，需要先建立一个联系，也就是目录。</p>\n<p><img src=\"/2022/10/12/linux/%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%E5%8D%B7%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20220826145753160.png\" alt=\"磁盘挂载\"></p>\n<h3 id=\"df（disk-free）\"><a href=\"#df（disk-free）\" class=\"headerlink\" title=\"df（disk free）\"></a>df（disk free）</h3><p>用来检查Linux服务器的文件系统的磁盘空间占用率——获取硬盘被占用了多少，目前还剩下多少空间信息。</p>\n<ol>\n<li><code>dh -h</code>查看系统挂载、磁盘空间大小和利用率。</li>\n</ol>\n<h3 id=\"du（disk-uasge\"><a href=\"#du（disk-uasge\" class=\"headerlink\" title=\"du（disk uasge)\"></a>du（disk uasge)</h3><p>显示每个文件和目录的磁盘使用空间。</p>\n<h3 id=\"parted\"><a href=\"#parted\" class=\"headerlink\" title=\"parted\"></a>parted</h3><p>常用的分区软件，可支持创建2T以上的磁盘分区，相对于fdisk，使用方便、也可动态调整分区大小。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost dev]# parted -h<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">device:磁盘设备名称。</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">command</span>：没有默认进入交互模式。</span><br>Usage: parted [OPTION]... [DEVICE [COMMAND [PARAMETERS]...]...]<br>Apply COMMANDs with PARAMETERS to DEVICE.  If no COMMAND(s) are given, run in<br>interactive mode.<br><br>OPTIONs:<br>  -h, --help                      displays this help message<br>  -l, --list                      lists partition layout on all block devices<br>  -m, --machine                   displays machine parseable output<br>  -s, --script                    never prompts for user intervention<br>  -v, --version                   displays the version<br>  -a, --align=[none|cyl|min|opt]  alignment for new partitions<br><br>[root@localhost dev]# parted -l<br>Model: ATA VBOX HARDDISK (scsi)<br>Disk /dev/sda: 68.7GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: msdos<br>Disk Flags:<br><br>Number  Start   End     Size    Type     File system  Flags<br> 1      1049kB  1075MB  1074MB  primary  ext4         boot<br> 2      1075MB  68.7GB  67.6GB  primary               lvm<br>[root@localhost ~]# parted /dev/sdb<br>GNU Parted 3.3<br>Using /dev/sdb<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted)  mklabel msdos<br>Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?<br>Yes/No? yes<br>(parted) quit<br>Information: You may need to update /etc/fstab.<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h2><p>磁盘分局将硬盘驱动划分为多个逻辑存储单元，这些成为<strong>分区</strong>。</p>\n<p>指的是磁盘分区表。</p>\n<p>分区好处：</p>\n<ul>\n<li>限制应用或用户的可用空间。</li>\n<li>允许从同一磁盘不同操作系统的多重启动。</li>\n<li>将操作系统和程序文件与用户文件分隔。</li>\n<li>创建用于操作系统虚拟内存交换的单独区域。</li>\n<li>限制磁盘空间使用情况，以提高诊断工具和备份影像的性能。</li>\n</ul>\n<h3 id=\"分区类型\"><a href=\"#分区类型\" class=\"headerlink\" title=\"分区类型\"></a>分区类型</h3><p><strong>一个硬盘只有一个扩展分区，除去主分区，其它空间都是分配给扩展分区</strong></p>\n<p>硬盘容量=主分区+扩展分区（各逻辑分区容量和）</p>\n<ul>\n<li><p>主分区</p>\n<p>主磁盘分区，不能再活粉其他类型的分区。</p>\n</li>\n<li><p>扩展分区、逻辑分区</p>\n<p>扩展分区不能直接使用，需要划分一个或多个逻辑分区后才能使用。</p>\n</li>\n</ul>\n<p><strong>分区：</strong>前4个分区用到的是数字1和数字4，逻辑分区从5开始</p>\n<h2 id=\"逻辑卷\"><a href=\"#逻辑卷\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h2><p>LVM-逻辑卷管理是linux环境中对磁盘分区进行管理的一种机制，是建立在硬盘和分区之上、文件系统之下的一个逻辑层，可提高磁盘分区管理的灵活性。</p>\n<h3 id=\"原理及优点\"><a href=\"#原理及优点\" class=\"headerlink\" title=\"原理及优点\"></a>原理及优点</h3><p>逻辑卷（lv）是将几个磁盘分区或者块设备（pv可以位于不同的磁盘分区里，大小可以不同）组织起来形成一个大的扩展分区（一个vg卷组至少已包含一个pv）。该扩展分区不能直接用，需要将其划分成逻辑卷才能使用，lv可以格式化不同的文件系统，挂载后直接使用。</p>\n<ul>\n<li>灵活的容量</li>\n<li>可伸缩的存储池</li>\n<li>在线数据再分配</li>\n<li>方便的设备命名</li>\n<li>磁盘条带化</li>\n<li>卷镜像和卷快照</li>\n</ul>\n<p><img src=\"/2022/10/12/linux/%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%E5%8D%B7%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20220826152857911.png\"></p>\n<h3 id=\"物理卷\"><a href=\"#物理卷\" class=\"headerlink\" title=\"物理卷\"></a>物理卷</h3><ol>\n<li>创建物理卷</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost ~]# pvcreate /dev/sdb<br>WARNING: dos signature detected on /dev/sdb at offset 510. Wipe it? [y/n]: y<br>  Wiping dos signature on /dev/sdb.<br>  Physical volume &quot;/dev/sdb&quot; successfully created.<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>查看物理卷 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# pvdisplay<br>  --- Physical volume ---<br>  PV Name               /dev/sda2<br>  VG Name               openeuler<br>  PV Size               &lt;63.00 GiB / not usable 3.00 MiB<br>  Allocatable           yes (but full)<br>  PE Size               4.00 MiB<br>  Total PE              16127<br>  Free PE               0<br>  Allocated PE          16127<br>  PV UUID               5Fo0gc-r6Rc-r3Mb-szSD-UXYd-Au3u-fnejHG<br><br>  --- Physical volume ---<br>  PV Name               /dev/sdb<br>  VG Name               openeuler<br>  PV Size               5.00 GiB / not usable 4.00 MiB<br>  Allocatable           yes<br>  PE Size               4.00 MiB<br>  Total PE              1279<br>  Free PE               767<br>  Allocated PE          512<br>  PV UUID               HFxCFH-9zVN-bNLe-MvPk-XsR3-WoR1-x0qzGP<br></code></pre></td></tr></table></figure></li>\n<li><p>删除物理卷——pvremove</p>\n</li>\n</ol>\n<h3 id=\"卷组\"><a href=\"#卷组\" class=\"headerlink\" title=\"卷组\"></a>卷组</h3><ol>\n<li><p>创建卷组</p>\n<p>openeuler:要创建的卷组名称</p>\n<p>/dev/sdb：要加入到卷组中的物理卷名称</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# vgcreate openeuler /dev/sdb<br></code></pre></td></tr></table></figure></li>\n<li><p>查看卷组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# vgdisplay<br>  --- Volume group ---<br>  VG Name               openeuler<br>  System ID<br>  Format                lvm2<br>  Metadata Areas        2<br>  Metadata Sequence No  6<br>  VG Access             read/write<br>  VG Status             resizable<br>  MAX LV                0<br>  Cur LV                3<br>  Open LV               3<br>  Max PV                0<br>  Cur PV                2<br>  Act PV                2<br>  VG Size               67.99 GiB<br>  PE Size               4.00 MiB<br>  Total PE              17406<br>  Alloc PE / Size       16639 / &lt;65.00 GiB<br>  Free  PE / Size       767 / &lt;3.00 GiB<br>  VG UUID               TqFQNR-tYQb-Pe44-NlGo-rw7h-wohD-yYEEax<br></code></pre></td></tr></table></figure></li>\n<li><p>扩展卷组</p>\n<p>openeuler:要扩展的卷组的名称</p>\n<p>/dev/sdb：要加入到卷组中的物理卷名称</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vgextend openeuler /dev/sdb<br></code></pre></td></tr></table></figure></li>\n<li><p>收缩卷组</p>\n<p>openeuler:要收缩的卷组的名称</p>\n<p>/dev/sdb：要收缩到卷组中的物理卷名称</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">[root<span class=\"hljs-symbol\">@bogon</span> ~]<span class=\"hljs-meta\"># vgreduce  openeuler /dev/sdb</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"逻辑卷-1\"><a href=\"#逻辑卷-1\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h3><ol>\n<li>查看卷组中是否存在多余的空间</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@localhost home]# vgs<br>  VG        #PV #LV #SN Attr   VSize  VFree<br>  openeuler   2   3   0 wz--n- 67.99g &lt;3.00g<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>扩容&amp;&amp;缩容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">调整LVM逻辑卷的大小，可增大和缩小空间，但再调整过程中数据容易丢失。</span><br>lvresize -L +2048 /dev/openeuler/home<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">扩展逻辑卷</span><br>lvextend -L +100M /dev/openeuler/home<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">调整文件系统大小</span><br>resize2fs  /dev/openeuler/root<br></code></pre></td></tr></table></figure>\n\n<p><strong>扩容</strong></p>\n<ul>\n<li>确定是否有vg空间</li>\n<li>使用lvextend扩容</li>\n<li>调整文件系统的大小</li>\n</ul>\n<p><strong>缩容</strong></p>\n<ul>\n<li>确定缩容后目标的大小。确保有对应目标大小的空间可以容纳</li>\n<li>卸载文件系统</li>\n<li>缩减文件系统</li>\n<li>缩减逻辑卷</li>\n<li>重新挂载使用</li>\n</ul>\n</li>\n<li><p>查看逻辑卷</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@bogon ~]# lvdisplay /dev/openeuler/home<br>  --- Logical volume ---<br>  LV Path                /dev/openeuler/home<br>  LV Name                home<br>  VG Name                openeuler<br>  LV UUID                1yCVn0-8tGc-WfaM-ayVk-fyDr-7Zjm-rasO9o<br>  LV Write Access        read/write<br>  LV Creation host, time localhost, 2022-08-25 11:22:05 +0800<br>  LV Status              available<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">open                 1</span><br>  LV Size                21.36 GiB<br>  Current LE             5469<br>  Segments               2<br>  Allocation             inherit<br>  Read ahead sectors     auto<br>  - currently set to     8192<br>  Block device           253:2<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"shell脚本获取habor仓库信息","_content":"\n\n\n## 描述\n\n镜像获取harbor工程中所有的仓库、镜像名称、镜像版本、镜像架构\n\n可作为drone插件使用\n\n## 制作步骤\n\nbuild.sh\n\n```shell\n#!/bin/sh\n\n#镜像清单文件，将获取到的镜像信息存到该文件中\nFile=harbor-`date '+%Y-%m-%d'`.csv\n\n#配置的为drone的变量\nUSER=$PLUGIN_ADMIN\nPASS=$PLUGIN_PASSWORD\nTOU=$PLUGIN_ADDRESS\nHURL=\"https://$TOU/api/v2.0\"\n\n## 获取Harbor中有哪些项目（Project）\nProject_List=$(curl -k  -s -u \"$USER:$PASS\" $HURL/projects | sed 's/,/\\n/g' | grep -w name | awk -F \"\\\"\" '{print $4}')\n\nfor Project in $Project_List;do\n  # 循环获取每个项目下所有的镜像\n# Image_Names=$(curl -k  -s -u \"$USER:$PASS\"  -X GET $HURL/search?q=$Project -H \"Content-Type: application/json\" | python -m json.tool | grep \"repository_name\" | awk -F \"/\" '{print $2}' | awk -F \"\\\"\" '{print $1}')\n Image_Names=$(curl -k  -s -u \"$USER:$PASS\"  -X GET $HURL/search?q=$Project -H \"Content-Type: application/json\" | sed 's/,/\\n/g' | grep \"repository_name\" | awk -F \"\\\"\" '{print $4}' | awk -F \"$Project\" '{$1=\"\";print}' | awk -F \"/\" '{$1=\"\";print}' | awk '$1=$1' | sed 's/ /%252F/g')\n   for Image in $Image_Names;do\n#    echo \"https://$TOU/$Project/$Image\" >> $allImage\n    # 循环获取每个镜像所有的标签（版本）\n    Image_Tags=$(curl -k  -s -u \"$USER:$PASS\" $HURL/projects/$Project/repositories/$Image/artifacts | sed 's/,/\\n/g' | grep name | sed -e 's/.\\{8\\}//' -e 's/\"$//' )\n        for Tag in $Image_Tags;do\n        arch=$(curl -k  -s -u \"$USER:$PASS\" $HURL/projects/$Project/repositories/$Image/artifacts/$Tag  | sed 's/,/\\n/g' | grep architecture | awk -F \"\\\"\" '{print $6}')\n        # 将获取到的镜像完整路径存档到镜像清单文件\n        #echo \"https://$TOU/$Project/$Image:$Tag\" | grep -v Base | grep -v Image | grep -v CentOS >>  $File\n        image=$(echo \"$Image\" | sed 's/%252F/\\//g')\n         echo \"$TOU,$Project,$image,$Tag,$arch,docker pull $TOU/$Project/$image:$Tag\" >>  /opt/$File\n        done\n    done\ndone\nexec \"$@\"\n```\n\nDockerfile\n\n```dockerfile\nFROM alpine:3.14.6\n\nCOPY build.sh /bin/\n\nRUN chmod +x /bin/build.sh\n\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \\\n    apk -Uuv add curl ca-certificates\nENTRYPOINT /bin/build.sh\n\n```\n\n## 使用\n\ndrone\n\n```yaml\nkind: pipeline\ntype: docker\nname: default\n\nplatform:\n    os: linux\n    arch: amd64\n    \nvolumes:\n  - name: harbor\n    host:\n      path: /data/harbor/Doc\nsteps:\n- name: greeting\n  image: IP:8085/image_amd64/harbor_data:v1\n  settings:\n    admin: admin\n    password: Harbor12345\n    address: IP:8085\n  volumes: \n  - name: harbor\n    path: /opt/\n```\n\ndocker 命令行\n\n```shell\ndocker run -it --rm -e PLUGIN_ADMIN=admin -e PLUGIN_PASSWORD=Harbor12345 -e PLUGIN_ADDRESS=IP:8085 -v $PWD:/opt/ IP:8085/image_amd64/harbor_data:v1 sh\n```\n\n## 结果\n\n会在映射目录保存harbor-`date '+%Y-%m-%d'`格式的文件","source":"_posts/CICD/drone/habor-data.md","raw":"---\ntitle: shell脚本获取habor仓库信息\ncategories: \n- [CICD, drone]\ntags:\n- harbor\n- drone\n- docker\n---\n\n\n\n## 描述\n\n镜像获取harbor工程中所有的仓库、镜像名称、镜像版本、镜像架构\n\n可作为drone插件使用\n\n## 制作步骤\n\nbuild.sh\n\n```shell\n#!/bin/sh\n\n#镜像清单文件，将获取到的镜像信息存到该文件中\nFile=harbor-`date '+%Y-%m-%d'`.csv\n\n#配置的为drone的变量\nUSER=$PLUGIN_ADMIN\nPASS=$PLUGIN_PASSWORD\nTOU=$PLUGIN_ADDRESS\nHURL=\"https://$TOU/api/v2.0\"\n\n## 获取Harbor中有哪些项目（Project）\nProject_List=$(curl -k  -s -u \"$USER:$PASS\" $HURL/projects | sed 's/,/\\n/g' | grep -w name | awk -F \"\\\"\" '{print $4}')\n\nfor Project in $Project_List;do\n  # 循环获取每个项目下所有的镜像\n# Image_Names=$(curl -k  -s -u \"$USER:$PASS\"  -X GET $HURL/search?q=$Project -H \"Content-Type: application/json\" | python -m json.tool | grep \"repository_name\" | awk -F \"/\" '{print $2}' | awk -F \"\\\"\" '{print $1}')\n Image_Names=$(curl -k  -s -u \"$USER:$PASS\"  -X GET $HURL/search?q=$Project -H \"Content-Type: application/json\" | sed 's/,/\\n/g' | grep \"repository_name\" | awk -F \"\\\"\" '{print $4}' | awk -F \"$Project\" '{$1=\"\";print}' | awk -F \"/\" '{$1=\"\";print}' | awk '$1=$1' | sed 's/ /%252F/g')\n   for Image in $Image_Names;do\n#    echo \"https://$TOU/$Project/$Image\" >> $allImage\n    # 循环获取每个镜像所有的标签（版本）\n    Image_Tags=$(curl -k  -s -u \"$USER:$PASS\" $HURL/projects/$Project/repositories/$Image/artifacts | sed 's/,/\\n/g' | grep name | sed -e 's/.\\{8\\}//' -e 's/\"$//' )\n        for Tag in $Image_Tags;do\n        arch=$(curl -k  -s -u \"$USER:$PASS\" $HURL/projects/$Project/repositories/$Image/artifacts/$Tag  | sed 's/,/\\n/g' | grep architecture | awk -F \"\\\"\" '{print $6}')\n        # 将获取到的镜像完整路径存档到镜像清单文件\n        #echo \"https://$TOU/$Project/$Image:$Tag\" | grep -v Base | grep -v Image | grep -v CentOS >>  $File\n        image=$(echo \"$Image\" | sed 's/%252F/\\//g')\n         echo \"$TOU,$Project,$image,$Tag,$arch,docker pull $TOU/$Project/$image:$Tag\" >>  /opt/$File\n        done\n    done\ndone\nexec \"$@\"\n```\n\nDockerfile\n\n```dockerfile\nFROM alpine:3.14.6\n\nCOPY build.sh /bin/\n\nRUN chmod +x /bin/build.sh\n\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \\\n    apk -Uuv add curl ca-certificates\nENTRYPOINT /bin/build.sh\n\n```\n\n## 使用\n\ndrone\n\n```yaml\nkind: pipeline\ntype: docker\nname: default\n\nplatform:\n    os: linux\n    arch: amd64\n    \nvolumes:\n  - name: harbor\n    host:\n      path: /data/harbor/Doc\nsteps:\n- name: greeting\n  image: IP:8085/image_amd64/harbor_data:v1\n  settings:\n    admin: admin\n    password: Harbor12345\n    address: IP:8085\n  volumes: \n  - name: harbor\n    path: /opt/\n```\n\ndocker 命令行\n\n```shell\ndocker run -it --rm -e PLUGIN_ADMIN=admin -e PLUGIN_PASSWORD=Harbor12345 -e PLUGIN_ADDRESS=IP:8085 -v $PWD:/opt/ IP:8085/image_amd64/harbor_data:v1 sh\n```\n\n## 结果\n\n会在映射目录保存harbor-`date '+%Y-%m-%d'`格式的文件","slug":"CICD/drone/habor-data","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T07:43:37.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg3002itpdoc28mex1l","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>镜像获取harbor工程中所有的仓库、镜像名称、镜像版本、镜像架构</p>\n<p>可作为drone插件使用</p>\n<h2 id=\"制作步骤\"><a href=\"#制作步骤\" class=\"headerlink\" title=\"制作步骤\"></a>制作步骤</h2><p>build.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">镜像清单文件，将获取到的镜像信息存到该文件中</span><br>File=harbor-`date &#x27;+%Y-%m-%d&#x27;`.csv<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">配置的为drone的变量</span><br>USER=$PLUGIN_ADMIN<br>PASS=$PLUGIN_PASSWORD<br>TOU=$PLUGIN_ADDRESS<br>HURL=&quot;https://$TOU/api/v2.0&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 获取Harbor中有哪些项目（Project）</span></span><br>Project_List=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects | sed &#x27;s/,/\\n/g&#x27; | grep -w name | awk -F &quot;\\&quot;&quot; &#x27;&#123;print $4&#125;&#x27;)<br><br>for Project in $Project_List;do<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">循环获取每个项目下所有的镜像</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Image_Names=$(curl -k  -s -u <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$USER</span>:<span class=\"hljs-variable\">$PASS</span>&quot;</span>  -X GET <span class=\"hljs-variable\">$HURL</span>/search?q=<span class=\"hljs-variable\">$Project</span> -H <span class=\"hljs-string\">&quot;Content-Type: application/json&quot;</span> | python -m json.tool | grep <span class=\"hljs-string\">&quot;repository_name&quot;</span> | awk -F <span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class=\"hljs-string\">&quot;\\&quot;&quot;</span> <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br> Image_Names=$(curl -k  -s -u &quot;$USER:$PASS&quot;  -X GET $HURL/search?q=$Project -H &quot;Content-Type: application/json&quot; | sed &#x27;s/,/\\n/g&#x27; | grep &quot;repository_name&quot; | awk -F &quot;\\&quot;&quot; &#x27;&#123;print $4&#125;&#x27; | awk -F &quot;$Project&quot; &#x27;&#123;$1=&quot;&quot;;print&#125;&#x27; | awk -F &quot;/&quot; &#x27;&#123;$1=&quot;&quot;;print&#125;&#x27; | awk &#x27;$1=$1&#x27; | sed &#x27;s/ /%252F/g&#x27;)<br>   for Image in $Image_Names;do<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;https://<span class=\"hljs-variable\">$TOU</span>/<span class=\"hljs-variable\">$Project</span>/<span class=\"hljs-variable\">$Image</span>&quot;</span> &gt;&gt; <span class=\"hljs-variable\">$allImage</span></span><br>    # 循环获取每个镜像所有的标签（版本）<br>    Image_Tags=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects/$Project/repositories/$Image/artifacts | sed &#x27;s/,/\\n/g&#x27; | grep name | sed -e &#x27;s/.\\&#123;8\\&#125;//&#x27; -e &#x27;s/&quot;$//&#x27; )<br>        for Tag in $Image_Tags;do<br>        arch=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects/$Project/repositories/$Image/artifacts/$Tag  | sed &#x27;s/,/\\n/g&#x27; | grep architecture | awk -F &quot;\\&quot;&quot; &#x27;&#123;print $6&#125;&#x27;)<br>        # 将获取到的镜像完整路径存档到镜像清单文件<br>        #echo &quot;https://$TOU/$Project/$Image:$Tag&quot; | grep -v Base | grep -v Image | grep -v CentOS &gt;&gt;  $File<br>        image=$(echo &quot;$Image&quot; | sed &#x27;s/%252F/\\//g&#x27;)<br>         echo &quot;$TOU,$Project,$image,$Tag,$arch,docker pull $TOU/$Project/$image:$Tag&quot; &gt;&gt;  /opt/$File<br>        done<br>    done<br>done<br>exec &quot;$@&quot;<br></code></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.14</span>.<span class=\"hljs-number\">6</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> build.sh /bin/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x /bin/build.sh</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"hljs-string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"language-bash\">    apk -Uuv add curl ca-certificates</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /bin/build.sh</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>drone</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">pipeline</span><br><span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">docker</span><br><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span><br><br><span class=\"hljs-attr\">platform:</span><br>    <span class=\"hljs-attr\">os:</span> <span class=\"hljs-string\">linux</span><br>    <span class=\"hljs-attr\">arch:</span> <span class=\"hljs-string\">amd64</span><br>    <br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">host:</span><br>      <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/harbor/Doc</span><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">greeting</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/image_amd64/harbor_data:v1</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">admin:</span> <span class=\"hljs-string\">admin</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">Harbor12345</span><br>    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">IP:8085</span><br>  <span class=\"hljs-attr\">volumes:</span> <br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br></code></pre></td></tr></table></figure>\n\n<p>docker 命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -it --rm -e PLUGIN_ADMIN=admin -e PLUGIN_PASSWORD=Harbor12345 -e PLUGIN_ADDRESS=IP:8085 -v $PWD:/opt/ IP:8085/image_amd64/harbor_data:v1 sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>会在映射目录保存harbor-<code>date &#39;+%Y-%m-%d&#39;</code>格式的文件</p>\n","site":{"data":{}},"wordcount":2754,"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>镜像获取harbor工程中所有的仓库、镜像名称、镜像版本、镜像架构</p>\n<p>可作为drone插件使用</p>\n<h2 id=\"制作步骤\"><a href=\"#制作步骤\" class=\"headerlink\" title=\"制作步骤\"></a>制作步骤</h2><p>build.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">镜像清单文件，将获取到的镜像信息存到该文件中</span><br>File=harbor-`date &#x27;+%Y-%m-%d&#x27;`.csv<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">配置的为drone的变量</span><br>USER=$PLUGIN_ADMIN<br>PASS=$PLUGIN_PASSWORD<br>TOU=$PLUGIN_ADDRESS<br>HURL=&quot;https://$TOU/api/v2.0&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 获取Harbor中有哪些项目（Project）</span></span><br>Project_List=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects | sed &#x27;s/,/\\n/g&#x27; | grep -w name | awk -F &quot;\\&quot;&quot; &#x27;&#123;print $4&#125;&#x27;)<br><br>for Project in $Project_List;do<br><span class=\"hljs-meta prompt_\">  # </span><span class=\"language-bash\">循环获取每个项目下所有的镜像</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Image_Names=$(curl -k  -s -u <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$USER</span>:<span class=\"hljs-variable\">$PASS</span>&quot;</span>  -X GET <span class=\"hljs-variable\">$HURL</span>/search?q=<span class=\"hljs-variable\">$Project</span> -H <span class=\"hljs-string\">&quot;Content-Type: application/json&quot;</span> | python -m json.tool | grep <span class=\"hljs-string\">&quot;repository_name&quot;</span> | awk -F <span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class=\"hljs-string\">&quot;\\&quot;&quot;</span> <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br> Image_Names=$(curl -k  -s -u &quot;$USER:$PASS&quot;  -X GET $HURL/search?q=$Project -H &quot;Content-Type: application/json&quot; | sed &#x27;s/,/\\n/g&#x27; | grep &quot;repository_name&quot; | awk -F &quot;\\&quot;&quot; &#x27;&#123;print $4&#125;&#x27; | awk -F &quot;$Project&quot; &#x27;&#123;$1=&quot;&quot;;print&#125;&#x27; | awk -F &quot;/&quot; &#x27;&#123;$1=&quot;&quot;;print&#125;&#x27; | awk &#x27;$1=$1&#x27; | sed &#x27;s/ /%252F/g&#x27;)<br>   for Image in $Image_Names;do<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;https://<span class=\"hljs-variable\">$TOU</span>/<span class=\"hljs-variable\">$Project</span>/<span class=\"hljs-variable\">$Image</span>&quot;</span> &gt;&gt; <span class=\"hljs-variable\">$allImage</span></span><br>    # 循环获取每个镜像所有的标签（版本）<br>    Image_Tags=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects/$Project/repositories/$Image/artifacts | sed &#x27;s/,/\\n/g&#x27; | grep name | sed -e &#x27;s/.\\&#123;8\\&#125;//&#x27; -e &#x27;s/&quot;$//&#x27; )<br>        for Tag in $Image_Tags;do<br>        arch=$(curl -k  -s -u &quot;$USER:$PASS&quot; $HURL/projects/$Project/repositories/$Image/artifacts/$Tag  | sed &#x27;s/,/\\n/g&#x27; | grep architecture | awk -F &quot;\\&quot;&quot; &#x27;&#123;print $6&#125;&#x27;)<br>        # 将获取到的镜像完整路径存档到镜像清单文件<br>        #echo &quot;https://$TOU/$Project/$Image:$Tag&quot; | grep -v Base | grep -v Image | grep -v CentOS &gt;&gt;  $File<br>        image=$(echo &quot;$Image&quot; | sed &#x27;s/%252F/\\//g&#x27;)<br>         echo &quot;$TOU,$Project,$image,$Tag,$arch,docker pull $TOU/$Project/$image:$Tag&quot; &gt;&gt;  /opt/$File<br>        done<br>    done<br>done<br>exec &quot;$@&quot;<br></code></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.14</span>.<span class=\"hljs-number\">6</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> build.sh /bin/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x /bin/build.sh</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"hljs-string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"language-bash\">    apk -Uuv add curl ca-certificates</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /bin/build.sh</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>drone</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">pipeline</span><br><span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">docker</span><br><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span><br><br><span class=\"hljs-attr\">platform:</span><br>    <span class=\"hljs-attr\">os:</span> <span class=\"hljs-string\">linux</span><br>    <span class=\"hljs-attr\">arch:</span> <span class=\"hljs-string\">amd64</span><br>    <br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">host:</span><br>      <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/harbor/Doc</span><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">greeting</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/image_amd64/harbor_data:v1</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">admin:</span> <span class=\"hljs-string\">admin</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">Harbor12345</span><br>    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">IP:8085</span><br>  <span class=\"hljs-attr\">volumes:</span> <br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br></code></pre></td></tr></table></figure>\n\n<p>docker 命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -it --rm -e PLUGIN_ADMIN=admin -e PLUGIN_PASSWORD=Harbor12345 -e PLUGIN_ADDRESS=IP:8085 -v $PWD:/opt/ IP:8085/image_amd64/harbor_data:v1 sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>会在映射目录保存harbor-<code>date &#39;+%Y-%m-%d&#39;</code>格式的文件</p>\n"},{"title":"CSV数据同步pg","_content":"\n\n\n## 描述\n\n更新harbor数据（harbor-`date '+%Y-%m-%d'`.csv）到数据库（pg）。\n\n可作为drone插件（将传入的值作为环境变量获取）使用。\n\n*注：该文档需要固定数据库类型，csv格式等*\n\n## 制作步骤\n\nharbor_flush.py\n\n```python\n# coding:utf-8\nfrom io import StringIO\nimport pandas as pd\nimport psycopg2\nimport datetime\nimport os\n\n\nif __name__ == '__main__':\n#连接数据库，os.getenv获取环境变量\n   conn=psycopg2.connect(database=os.getenv('PLUGIN_DATABASE'),user=os.getenv('PLUGIN_USER'),password=os.getenv('PLUGIN_PASSWORD'),host=os.getenv('PLUGIN_HOST'),port=os.getenv('PLUGIN_PORT'))\n    print(\"Opened database successfully\")\n    cur=conn.cursor()\n    #如果数据库不存在创建数据库\n    cur.execute('''CREATE TABLE if not exists harbor_table (\n        repoaddress VARCHAR(255),\n        storehouse VARCHAR(255),\n        image  VARCHAR(255),\n        version  VARCHAR(255),\n        arch  VARCHAR(255),\n        command  VARCHAR(255)\n        );''')\n\n    print(\"Table created successfully\")\n\n    cur.execute(\"TRUNCATE TABLE harbor_table;\")\n    print(\"Table truncate successfully\")\n    conn.commit()\n    filename='/opt/harbor-'+str(datetime.date.today())+'.csv'\n    f=open(filename,'r',encoding='UTF-8')\n    #同步csv文件\n    try:\n        cur.copy_from(f, 'harbor_table', sep=',', null='')\n        conn.commit()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(\"Error: %s\" % error)\n\n    conn.close()\n```\n\nDockerfile\n\n```dockerfile\nFROM python:3.9-alpine3.13\n#下载依赖\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \\\n    apk add build-base postgresql-dev && \\\n    pip install psycopg2 pandas openpyxl\nCOPY harbor_flush.py ./\n```\n\n## 使用\n\ndrone\n\n```yaml\nkind: pipeline\ntype: docker\nname: default\n\nplatform:\n    os: linux\n    arch: amd64\n    \nvolumes:\n  - name: harbor\n    host:\n      path: /data/harbor/Doc\n#同步数据库\nsteps:\n- name: harbor_database\n  image: IP:8085/image_amd64/harbor_database:v1\n  settings:\n    database: testdb\n    user: postgres\n    password: 123456\n    host: 10.100.93.X\n    port: 10590\n  volumes: \n  - name: harbor\n    path: /opt/\n  commands:\n  - python harbor_flush.py\n```\n\ndocker 命令行\n\n```shell\ndocker run -it --rm -e PLUGIN_DATBASE=testdb -e PLUGIN_USER=postgres -e PLUGIN_PASSWORD=123456 -e PLUGIN_HOST=10.100.93.X -e PLUGIN_PORT=10590 -v $PWD:/opt IP:8085/image_amd64/harbor_database:v1 sh\n```\n\n## 结果\n\n成功写入数据库中\n\n","source":"_posts/CICD/drone/harbor-database.md","raw":"---\ntitle: CSV数据同步pg\ncategories: \n- [CICD, drone]\ntags:\n- harbor\n- drone\n- docker\n---\n\n\n\n## 描述\n\n更新harbor数据（harbor-`date '+%Y-%m-%d'`.csv）到数据库（pg）。\n\n可作为drone插件（将传入的值作为环境变量获取）使用。\n\n*注：该文档需要固定数据库类型，csv格式等*\n\n## 制作步骤\n\nharbor_flush.py\n\n```python\n# coding:utf-8\nfrom io import StringIO\nimport pandas as pd\nimport psycopg2\nimport datetime\nimport os\n\n\nif __name__ == '__main__':\n#连接数据库，os.getenv获取环境变量\n   conn=psycopg2.connect(database=os.getenv('PLUGIN_DATABASE'),user=os.getenv('PLUGIN_USER'),password=os.getenv('PLUGIN_PASSWORD'),host=os.getenv('PLUGIN_HOST'),port=os.getenv('PLUGIN_PORT'))\n    print(\"Opened database successfully\")\n    cur=conn.cursor()\n    #如果数据库不存在创建数据库\n    cur.execute('''CREATE TABLE if not exists harbor_table (\n        repoaddress VARCHAR(255),\n        storehouse VARCHAR(255),\n        image  VARCHAR(255),\n        version  VARCHAR(255),\n        arch  VARCHAR(255),\n        command  VARCHAR(255)\n        );''')\n\n    print(\"Table created successfully\")\n\n    cur.execute(\"TRUNCATE TABLE harbor_table;\")\n    print(\"Table truncate successfully\")\n    conn.commit()\n    filename='/opt/harbor-'+str(datetime.date.today())+'.csv'\n    f=open(filename,'r',encoding='UTF-8')\n    #同步csv文件\n    try:\n        cur.copy_from(f, 'harbor_table', sep=',', null='')\n        conn.commit()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(\"Error: %s\" % error)\n\n    conn.close()\n```\n\nDockerfile\n\n```dockerfile\nFROM python:3.9-alpine3.13\n#下载依赖\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \\\n    apk add build-base postgresql-dev && \\\n    pip install psycopg2 pandas openpyxl\nCOPY harbor_flush.py ./\n```\n\n## 使用\n\ndrone\n\n```yaml\nkind: pipeline\ntype: docker\nname: default\n\nplatform:\n    os: linux\n    arch: amd64\n    \nvolumes:\n  - name: harbor\n    host:\n      path: /data/harbor/Doc\n#同步数据库\nsteps:\n- name: harbor_database\n  image: IP:8085/image_amd64/harbor_database:v1\n  settings:\n    database: testdb\n    user: postgres\n    password: 123456\n    host: 10.100.93.X\n    port: 10590\n  volumes: \n  - name: harbor\n    path: /opt/\n  commands:\n  - python harbor_flush.py\n```\n\ndocker 命令行\n\n```shell\ndocker run -it --rm -e PLUGIN_DATBASE=testdb -e PLUGIN_USER=postgres -e PLUGIN_PASSWORD=123456 -e PLUGIN_HOST=10.100.93.X -e PLUGIN_PORT=10590 -v $PWD:/opt IP:8085/image_amd64/harbor_database:v1 sh\n```\n\n## 结果\n\n成功写入数据库中\n\n","slug":"CICD/drone/harbor-database","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T07:43:42.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg4002ltpdoeqlpelis","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>更新harbor数据（harbor-<code>date &#39;+%Y-%m-%d&#39;</code>.csv）到数据库（pg）。</p>\n<p>可作为drone插件（将传入的值作为环境变量获取）使用。</p>\n<p><em>注：该文档需要固定数据库类型，csv格式等</em></p>\n<h2 id=\"制作步骤\"><a href=\"#制作步骤\" class=\"headerlink\" title=\"制作步骤\"></a>制作步骤</h2><p>harbor_flush.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span><br><span class=\"hljs-keyword\">from</span> io <span class=\"hljs-keyword\">import</span> StringIO<br><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">import</span> psycopg2<br><span class=\"hljs-keyword\">import</span> datetime<br><span class=\"hljs-keyword\">import</span> os<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br><span class=\"hljs-comment\">#连接数据库，os.getenv获取环境变量</span><br>   conn=psycopg2.connect(database=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_DATABASE&#x27;</span>),user=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_USER&#x27;</span>),password=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_PASSWORD&#x27;</span>),host=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_HOST&#x27;</span>),port=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_PORT&#x27;</span>))<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Opened database successfully&quot;</span>)<br>    cur=conn.cursor()<br>    <span class=\"hljs-comment\">#如果数据库不存在创建数据库</span><br>    cur.execute(<span class=\"hljs-string\">&#x27;&#x27;&#x27;CREATE TABLE if not exists harbor_table (</span><br><span class=\"hljs-string\">        repoaddress VARCHAR(255),</span><br><span class=\"hljs-string\">        storehouse VARCHAR(255),</span><br><span class=\"hljs-string\">        image  VARCHAR(255),</span><br><span class=\"hljs-string\">        version  VARCHAR(255),</span><br><span class=\"hljs-string\">        arch  VARCHAR(255),</span><br><span class=\"hljs-string\">        command  VARCHAR(255)</span><br><span class=\"hljs-string\">        );&#x27;&#x27;&#x27;</span>)<br><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Table created successfully&quot;</span>)<br><br>    cur.execute(<span class=\"hljs-string\">&quot;TRUNCATE TABLE harbor_table;&quot;</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Table truncate successfully&quot;</span>)<br>    conn.commit()<br>    filename=<span class=\"hljs-string\">&#x27;/opt/harbor-&#x27;</span>+<span class=\"hljs-built_in\">str</span>(datetime.date.today())+<span class=\"hljs-string\">&#x27;.csv&#x27;</span><br>    f=<span class=\"hljs-built_in\">open</span>(filename,<span class=\"hljs-string\">&#x27;r&#x27;</span>,encoding=<span class=\"hljs-string\">&#x27;UTF-8&#x27;</span>)<br>    <span class=\"hljs-comment\">#同步csv文件</span><br>    <span class=\"hljs-keyword\">try</span>:<br>        cur.copy_from(f, <span class=\"hljs-string\">&#x27;harbor_table&#x27;</span>, sep=<span class=\"hljs-string\">&#x27;,&#x27;</span>, null=<span class=\"hljs-string\">&#x27;&#x27;</span>)<br>        conn.commit()<br>    <span class=\"hljs-keyword\">except</span> (Exception, psycopg2.DatabaseError) <span class=\"hljs-keyword\">as</span> error:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: %s&quot;</span> % error)<br><br>    conn.close()<br></code></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> python:<span class=\"hljs-number\">3.9</span>-alpine3.<span class=\"hljs-number\">13</span><br><span class=\"hljs-comment\">#下载依赖</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"hljs-string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"language-bash\">    apk add build-base postgresql-dev &amp;&amp; \\</span><br><span class=\"language-bash\">    pip install psycopg2 pandas openpyxl</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> harbor_flush.py ./</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>drone</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">pipeline</span><br><span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">docker</span><br><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span><br><br><span class=\"hljs-attr\">platform:</span><br>    <span class=\"hljs-attr\">os:</span> <span class=\"hljs-string\">linux</span><br>    <span class=\"hljs-attr\">arch:</span> <span class=\"hljs-string\">amd64</span><br>    <br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">host:</span><br>      <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/harbor/Doc</span><br><span class=\"hljs-comment\">#同步数据库</span><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor_database</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/image_amd64/harbor_database:v1</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">testdb</span><br>    <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">postgres</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">10.100</span><span class=\"hljs-number\">.93</span><span class=\"hljs-string\">.X</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10590</span><br>  <span class=\"hljs-attr\">volumes:</span> <br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br>  <span class=\"hljs-attr\">commands:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">python</span> <span class=\"hljs-string\">harbor_flush.py</span><br></code></pre></td></tr></table></figure>\n\n<p>docker 命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -it --rm -e PLUGIN_DATBASE=testdb -e PLUGIN_USER=postgres -e PLUGIN_PASSWORD=123456 -e PLUGIN_HOST=10.100.93.X -e PLUGIN_PORT=10590 -v $PWD:/opt IP:8085/image_amd64/harbor_database:v1 sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>成功写入数据库中</p>\n","site":{"data":{}},"wordcount":2148,"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>更新harbor数据（harbor-<code>date &#39;+%Y-%m-%d&#39;</code>.csv）到数据库（pg）。</p>\n<p>可作为drone插件（将传入的值作为环境变量获取）使用。</p>\n<p><em>注：该文档需要固定数据库类型，csv格式等</em></p>\n<h2 id=\"制作步骤\"><a href=\"#制作步骤\" class=\"headerlink\" title=\"制作步骤\"></a>制作步骤</h2><p>harbor_flush.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span><br><span class=\"hljs-keyword\">from</span> io <span class=\"hljs-keyword\">import</span> StringIO<br><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">import</span> psycopg2<br><span class=\"hljs-keyword\">import</span> datetime<br><span class=\"hljs-keyword\">import</span> os<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br><span class=\"hljs-comment\">#连接数据库，os.getenv获取环境变量</span><br>   conn=psycopg2.connect(database=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_DATABASE&#x27;</span>),user=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_USER&#x27;</span>),password=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_PASSWORD&#x27;</span>),host=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_HOST&#x27;</span>),port=os.getenv(<span class=\"hljs-string\">&#x27;PLUGIN_PORT&#x27;</span>))<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Opened database successfully&quot;</span>)<br>    cur=conn.cursor()<br>    <span class=\"hljs-comment\">#如果数据库不存在创建数据库</span><br>    cur.execute(<span class=\"hljs-string\">&#x27;&#x27;&#x27;CREATE TABLE if not exists harbor_table (</span><br><span class=\"hljs-string\">        repoaddress VARCHAR(255),</span><br><span class=\"hljs-string\">        storehouse VARCHAR(255),</span><br><span class=\"hljs-string\">        image  VARCHAR(255),</span><br><span class=\"hljs-string\">        version  VARCHAR(255),</span><br><span class=\"hljs-string\">        arch  VARCHAR(255),</span><br><span class=\"hljs-string\">        command  VARCHAR(255)</span><br><span class=\"hljs-string\">        );&#x27;&#x27;&#x27;</span>)<br><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Table created successfully&quot;</span>)<br><br>    cur.execute(<span class=\"hljs-string\">&quot;TRUNCATE TABLE harbor_table;&quot;</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Table truncate successfully&quot;</span>)<br>    conn.commit()<br>    filename=<span class=\"hljs-string\">&#x27;/opt/harbor-&#x27;</span>+<span class=\"hljs-built_in\">str</span>(datetime.date.today())+<span class=\"hljs-string\">&#x27;.csv&#x27;</span><br>    f=<span class=\"hljs-built_in\">open</span>(filename,<span class=\"hljs-string\">&#x27;r&#x27;</span>,encoding=<span class=\"hljs-string\">&#x27;UTF-8&#x27;</span>)<br>    <span class=\"hljs-comment\">#同步csv文件</span><br>    <span class=\"hljs-keyword\">try</span>:<br>        cur.copy_from(f, <span class=\"hljs-string\">&#x27;harbor_table&#x27;</span>, sep=<span class=\"hljs-string\">&#x27;,&#x27;</span>, null=<span class=\"hljs-string\">&#x27;&#x27;</span>)<br>        conn.commit()<br>    <span class=\"hljs-keyword\">except</span> (Exception, psycopg2.DatabaseError) <span class=\"hljs-keyword\">as</span> error:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: %s&quot;</span> % error)<br><br>    conn.close()<br></code></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> python:<span class=\"hljs-number\">3.9</span>-alpine3.<span class=\"hljs-number\">13</span><br><span class=\"hljs-comment\">#下载依赖</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"hljs-string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"language-bash\">    apk add build-base postgresql-dev &amp;&amp; \\</span><br><span class=\"language-bash\">    pip install psycopg2 pandas openpyxl</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> harbor_flush.py ./</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>drone</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">pipeline</span><br><span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">docker</span><br><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span><br><br><span class=\"hljs-attr\">platform:</span><br>    <span class=\"hljs-attr\">os:</span> <span class=\"hljs-string\">linux</span><br>    <span class=\"hljs-attr\">arch:</span> <span class=\"hljs-string\">amd64</span><br>    <br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">host:</span><br>      <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/harbor/Doc</span><br><span class=\"hljs-comment\">#同步数据库</span><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor_database</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/image_amd64/harbor_database:v1</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">testdb</span><br>    <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">postgres</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">10.100</span><span class=\"hljs-number\">.93</span><span class=\"hljs-string\">.X</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10590</span><br>  <span class=\"hljs-attr\">volumes:</span> <br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br>  <span class=\"hljs-attr\">commands:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">python</span> <span class=\"hljs-string\">harbor_flush.py</span><br></code></pre></td></tr></table></figure>\n\n<p>docker 命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run -it --rm -e PLUGIN_DATBASE=testdb -e PLUGIN_USER=postgres -e PLUGIN_PASSWORD=123456 -e PLUGIN_HOST=10.100.93.X -e PLUGIN_PORT=10590 -v $PWD:/opt IP:8085/image_amd64/harbor_database:v1 sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>成功写入数据库中</p>\n"},{"title":"harbor镜像内容自动化同步metabese","_content":"\n\n\n## 作用\n\n获取harbor中信息，包括仓库、镜像名称、版本、架构等，存储到metabase对应的数据库中。\n\n## Drone自动化工程\n\n```yaml\nkind: pipeline\ntype: docker\nname: default\n\nvolumes:\n- name: harbor\n  host:\n    path: /data/harbor/Doc\n\nsteps:\n- name: greeting\n  image: IP:8085/images/harbor_data:v1\n  settings:\n    admin: admin\n    password: Harbor12345\n    address: IP:8085\n  volumes: \n  - name: harbor\n    path: /opt/\n  \n- name: harbor_table\n  image: IP:8085/images/harbor_database:v1\n  #数据库环境信息\n  settings:\n    database: testdb\n    user: postgres\n    password: 123456\n    host: IP\n    port: 10590\n  volumes:\n  - name: harbor\n    path: /opt/\n  commands:\n  - python /harbor_flush.py\n#私有镜像获取密钥\nimage_pull_secrets:\n- dockerconfigjson\n#选择运行服务器\nnode:\n  foo: bar\n```\n\n## IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式\n\n### IP:8085/images/harbor_data:v1\n\n**作用：**获取私有仓库（harbor）中所有的镜像所属仓库、镜像名称、架构等信息，并保存成.csv的格式（*后续可优化成保存文件格式自选*）\n\n**参数：**\n\nadmin:harbor登录账号\n\npassword：密码\n\naddress：harbor仓库地址\n\n```\nadmin: XXX\npassword: XXX\naddress: XX.XX.XX.XX:8085\n```\n\n**注意**\n\n如果需要获取.csv的文件，需要映射容器内部的opt目录获取。\n\n### IP:8085/images/harbor_database:v1\n\n**作用：**将前者获取到的镜像信息更新至数据库中，该数据库仅为pg数据库（*后续可优化成数据库的选取，类似MySQL、pg等等*）\n\n**参数：**\n\ndatabase:数据库名称\n\nuser:用户名\n\npassword：数据库密码\n\nhost：服务器地址\n\nport：数据库服务器端口\n\n```\n    database: xx\n    user: xx\n    password: xx\n    host: xx\n    port: xx\n```\n\n**注意**\n\n.csv的文件，需要将文件映射容器内部的opt目录进行获取。\n\n## harbor镜像获取设置\n\n密码管理\n\n```\necho -n 'admin:Harbor12345' | base64\n```\n\n镜像管理\n\nname: dockerconfigjson\n\nvalue: \n\n```json\n{\n    \"auths\": {\n        \"XX.XX.XX.XX:8085\": {\n            \"auth\": \"YWRtaW46SGFyYm9yMTIzNDU=\"\n        }\n    }\n}\n```\n\n**作用：**通过该设置获取私有仓库镜像","source":"_posts/CICD/drone/harbor信息同步数据库.md","raw":"---\ntitle: harbor镜像内容自动化同步metabese\ncategories: \n- [CICD, drone]\ntags:\n- harbor\n- drone\n- docker\n---\n\n\n\n## 作用\n\n获取harbor中信息，包括仓库、镜像名称、版本、架构等，存储到metabase对应的数据库中。\n\n## Drone自动化工程\n\n```yaml\nkind: pipeline\ntype: docker\nname: default\n\nvolumes:\n- name: harbor\n  host:\n    path: /data/harbor/Doc\n\nsteps:\n- name: greeting\n  image: IP:8085/images/harbor_data:v1\n  settings:\n    admin: admin\n    password: Harbor12345\n    address: IP:8085\n  volumes: \n  - name: harbor\n    path: /opt/\n  \n- name: harbor_table\n  image: IP:8085/images/harbor_database:v1\n  #数据库环境信息\n  settings:\n    database: testdb\n    user: postgres\n    password: 123456\n    host: IP\n    port: 10590\n  volumes:\n  - name: harbor\n    path: /opt/\n  commands:\n  - python /harbor_flush.py\n#私有镜像获取密钥\nimage_pull_secrets:\n- dockerconfigjson\n#选择运行服务器\nnode:\n  foo: bar\n```\n\n## IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式\n\n### IP:8085/images/harbor_data:v1\n\n**作用：**获取私有仓库（harbor）中所有的镜像所属仓库、镜像名称、架构等信息，并保存成.csv的格式（*后续可优化成保存文件格式自选*）\n\n**参数：**\n\nadmin:harbor登录账号\n\npassword：密码\n\naddress：harbor仓库地址\n\n```\nadmin: XXX\npassword: XXX\naddress: XX.XX.XX.XX:8085\n```\n\n**注意**\n\n如果需要获取.csv的文件，需要映射容器内部的opt目录获取。\n\n### IP:8085/images/harbor_database:v1\n\n**作用：**将前者获取到的镜像信息更新至数据库中，该数据库仅为pg数据库（*后续可优化成数据库的选取，类似MySQL、pg等等*）\n\n**参数：**\n\ndatabase:数据库名称\n\nuser:用户名\n\npassword：数据库密码\n\nhost：服务器地址\n\nport：数据库服务器端口\n\n```\n    database: xx\n    user: xx\n    password: xx\n    host: xx\n    port: xx\n```\n\n**注意**\n\n.csv的文件，需要将文件映射容器内部的opt目录进行获取。\n\n## harbor镜像获取设置\n\n密码管理\n\n```\necho -n 'admin:Harbor12345' | base64\n```\n\n镜像管理\n\nname: dockerconfigjson\n\nvalue: \n\n```json\n{\n    \"auths\": {\n        \"XX.XX.XX.XX:8085\": {\n            \"auth\": \"YWRtaW46SGFyYm9yMTIzNDU=\"\n        }\n    }\n}\n```\n\n**作用：**通过该设置获取私有仓库镜像","slug":"CICD/drone/harbor信息同步数据库","published":1,"date":"2022-09-15T01:21:15.656Z","updated":"2022-09-08T07:34:50.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg5002otpdoht756jog","content":"<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>获取harbor中信息，包括仓库、镜像名称、版本、架构等，存储到metabase对应的数据库中。</p>\n<h2 id=\"Drone自动化工程\"><a href=\"#Drone自动化工程\" class=\"headerlink\" title=\"Drone自动化工程\"></a>Drone自动化工程</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">pipeline</span><br><span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">docker</span><br><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span><br><br><span class=\"hljs-attr\">volumes:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>  <span class=\"hljs-attr\">host:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/harbor/Doc</span><br><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">greeting</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/images/harbor_data:v1</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">admin:</span> <span class=\"hljs-string\">admin</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">Harbor12345</span><br>    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">IP:8085</span><br>  <span class=\"hljs-attr\">volumes:</span> <br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br>  <br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor_table</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/images/harbor_database:v1</span><br>  <span class=\"hljs-comment\">#数据库环境信息</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">testdb</span><br>    <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">postgres</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">IP</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10590</span><br>  <span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br>  <span class=\"hljs-attr\">commands:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">python</span> <span class=\"hljs-string\">/harbor_flush.py</span><br><span class=\"hljs-comment\">#私有镜像获取密钥</span><br><span class=\"hljs-attr\">image_pull_secrets:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dockerconfigjson</span><br><span class=\"hljs-comment\">#选择运行服务器</span><br><span class=\"hljs-attr\">node:</span><br>  <span class=\"hljs-attr\">foo:</span> <span class=\"hljs-string\">bar</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"IP-8085-images-harbor-data-v1、IP-8085-images-harbor-database-v1的使用方式\"><a href=\"#IP-8085-images-harbor-data-v1、IP-8085-images-harbor-database-v1的使用方式\" class=\"headerlink\" title=\"IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式\"></a>IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式</h2><h3 id=\"IP-8085-images-harbor-data-v1\"><a href=\"#IP-8085-images-harbor-data-v1\" class=\"headerlink\" title=\"IP:8085/images/harbor_data:v1\"></a>IP:8085/images/harbor_data:v1</h3><p><strong>作用：</strong>获取私有仓库（harbor）中所有的镜像所属仓库、镜像名称、架构等信息，并保存成.csv的格式（<em>后续可优化成保存文件格式自选</em>）</p>\n<p><strong>参数：</strong></p>\n<p>admin:harbor登录账号</p>\n<p>password：密码</p>\n<p>address：harbor仓库地址</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">admin: XXX<br>password: XXX<br><span class=\"hljs-selector-tag\">address</span>: XX<span class=\"hljs-selector-class\">.XX</span><span class=\"hljs-selector-class\">.XX</span><span class=\"hljs-selector-class\">.XX</span>:<span class=\"hljs-number\">8085</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>如果需要获取.csv的文件，需要映射容器内部的opt目录获取。</p>\n<h3 id=\"IP-8085-images-harbor-database-v1\"><a href=\"#IP-8085-images-harbor-database-v1\" class=\"headerlink\" title=\"IP:8085/images/harbor_database:v1\"></a>IP:8085/images/harbor_database:v1</h3><p><strong>作用：</strong>将前者获取到的镜像信息更新至数据库中，该数据库仅为pg数据库（<em>后续可优化成数据库的选取，类似MySQL、pg等等</em>）</p>\n<p><strong>参数：</strong></p>\n<p>database:数据库名称</p>\n<p>user:用户名</p>\n<p>password：数据库密码</p>\n<p>host：服务器地址</p>\n<p>port：数据库服务器端口</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">database:</span> xx<br><span class=\"hljs-symbol\">user:</span> xx<br><span class=\"hljs-symbol\">password:</span> xx<br><span class=\"hljs-symbol\">host:</span> xx<br><span class=\"hljs-symbol\">port:</span> xx<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>.csv的文件，需要将文件映射容器内部的opt目录进行获取。</p>\n<h2 id=\"harbor镜像获取设置\"><a href=\"#harbor镜像获取设置\" class=\"headerlink\" title=\"harbor镜像获取设置\"></a>harbor镜像获取设置</h2><p>密码管理</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">echo -n &#x27;admin:Harbor<span class=\"hljs-number\">1234</span>5&#x27; <span class=\"hljs-string\">| base64</span><br></code></pre></td></tr></table></figure>\n\n<p>镜像管理</p>\n<p>name: dockerconfigjson</p>\n<p>value: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;auths&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;XX.XX.XX.XX:8085&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-attr\">&quot;auth&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span><br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>作用：</strong>通过该设置获取私有仓库镜像</p>\n","site":{"data":{}},"wordcount":1390,"excerpt":"","more":"<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>获取harbor中信息，包括仓库、镜像名称、版本、架构等，存储到metabase对应的数据库中。</p>\n<h2 id=\"Drone自动化工程\"><a href=\"#Drone自动化工程\" class=\"headerlink\" title=\"Drone自动化工程\"></a>Drone自动化工程</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">pipeline</span><br><span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">docker</span><br><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span><br><br><span class=\"hljs-attr\">volumes:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>  <span class=\"hljs-attr\">host:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/harbor/Doc</span><br><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">greeting</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/images/harbor_data:v1</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">admin:</span> <span class=\"hljs-string\">admin</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">Harbor12345</span><br>    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">IP:8085</span><br>  <span class=\"hljs-attr\">volumes:</span> <br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br>  <br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor_table</span><br>  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">IP:8085/images/harbor_database:v1</span><br>  <span class=\"hljs-comment\">#数据库环境信息</span><br>  <span class=\"hljs-attr\">settings:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">testdb</span><br>    <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">postgres</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">IP</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10590</span><br>  <span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">harbor</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/</span><br>  <span class=\"hljs-attr\">commands:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">python</span> <span class=\"hljs-string\">/harbor_flush.py</span><br><span class=\"hljs-comment\">#私有镜像获取密钥</span><br><span class=\"hljs-attr\">image_pull_secrets:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dockerconfigjson</span><br><span class=\"hljs-comment\">#选择运行服务器</span><br><span class=\"hljs-attr\">node:</span><br>  <span class=\"hljs-attr\">foo:</span> <span class=\"hljs-string\">bar</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"IP-8085-images-harbor-data-v1、IP-8085-images-harbor-database-v1的使用方式\"><a href=\"#IP-8085-images-harbor-data-v1、IP-8085-images-harbor-database-v1的使用方式\" class=\"headerlink\" title=\"IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式\"></a>IP:8085/images/harbor_data:v1、IP:8085/images/harbor_database:v1的使用方式</h2><h3 id=\"IP-8085-images-harbor-data-v1\"><a href=\"#IP-8085-images-harbor-data-v1\" class=\"headerlink\" title=\"IP:8085/images/harbor_data:v1\"></a>IP:8085/images/harbor_data:v1</h3><p><strong>作用：</strong>获取私有仓库（harbor）中所有的镜像所属仓库、镜像名称、架构等信息，并保存成.csv的格式（<em>后续可优化成保存文件格式自选</em>）</p>\n<p><strong>参数：</strong></p>\n<p>admin:harbor登录账号</p>\n<p>password：密码</p>\n<p>address：harbor仓库地址</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">admin: XXX<br>password: XXX<br><span class=\"hljs-selector-tag\">address</span>: XX<span class=\"hljs-selector-class\">.XX</span><span class=\"hljs-selector-class\">.XX</span><span class=\"hljs-selector-class\">.XX</span>:<span class=\"hljs-number\">8085</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>如果需要获取.csv的文件，需要映射容器内部的opt目录获取。</p>\n<h3 id=\"IP-8085-images-harbor-database-v1\"><a href=\"#IP-8085-images-harbor-database-v1\" class=\"headerlink\" title=\"IP:8085/images/harbor_database:v1\"></a>IP:8085/images/harbor_database:v1</h3><p><strong>作用：</strong>将前者获取到的镜像信息更新至数据库中，该数据库仅为pg数据库（<em>后续可优化成数据库的选取，类似MySQL、pg等等</em>）</p>\n<p><strong>参数：</strong></p>\n<p>database:数据库名称</p>\n<p>user:用户名</p>\n<p>password：数据库密码</p>\n<p>host：服务器地址</p>\n<p>port：数据库服务器端口</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">database:</span> xx<br><span class=\"hljs-symbol\">user:</span> xx<br><span class=\"hljs-symbol\">password:</span> xx<br><span class=\"hljs-symbol\">host:</span> xx<br><span class=\"hljs-symbol\">port:</span> xx<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>.csv的文件，需要将文件映射容器内部的opt目录进行获取。</p>\n<h2 id=\"harbor镜像获取设置\"><a href=\"#harbor镜像获取设置\" class=\"headerlink\" title=\"harbor镜像获取设置\"></a>harbor镜像获取设置</h2><p>密码管理</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">echo -n &#x27;admin:Harbor<span class=\"hljs-number\">1234</span>5&#x27; <span class=\"hljs-string\">| base64</span><br></code></pre></td></tr></table></figure>\n\n<p>镜像管理</p>\n<p>name: dockerconfigjson</p>\n<p>value: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;auths&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;XX.XX.XX.XX:8085&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-attr\">&quot;auth&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span><br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>作用：</strong>通过该设置获取私有仓库镜像</p>\n"},{"title":"自定义droe 插件","_content":"\n\n\n# drone插件\n\n**制作原理：**参照变量的方式（PLUGIN_）\n\n制作脚本文件——》封装镜像——》插件完成，编写drone文件验证正确性\n\n插件也仅仅时dockers 容器，也就意味着可以采用任何语言来实现插件。如下是基于bash和go语言构成插件内容.\n\n## 基于bash的插件制作\n\n1. 制作脚本文件\n\n```\n#! /bin/sh\n\ncurl -X ${PLUGIN_METHOD} -d ${PLUGIN_BODY} ${PLUGIN_URL}\n```\n\n1. 制作Dockerfile文件\n\n```\nFROM alpine:3.14.6\n\nCOPY build.sh /bin/\n\nRUN chmod +x /bin/build.sh\n\nRUN apk -Uuv add curl ca-certificates\nENTRYPOINT /bin/build.sh\n```\n\n构建镜像：docker build -t test:v1 .\n\n1. .drone.yml文件\n\n```\nkind: pipeline\ntype: docker\nname: default\n\nsteps:\n- name: greeting\n  image: test:v1\n  settings:\n    url: http://hook.acme.com\n    method: post\n    body: |\n      hello world\n\nnode:\n  foo: bar\n```\n\n## 基于go语言的插件\n\n1. 编写需求对应的go文件\n\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    body := strings.NewReader(\n        os.Getenv(\"PLUGIN_BODY\"),\n    )\n\n    _, err := http.NewRequest(\n        os.Getenv(\"PLUGIN_METHOD\"),\n        os.Getenv(\"PLUGIN_URL\"),\n        body,\n    )\n    if err != nil {\n        os.Exit(1)\n    }\n}\n```\n\ngo build -o wehook","source":"_posts/CICD/drone/自定义drone 插件.md","raw":"---\ntitle: 自定义droe 插件\ncategories: \n- [CICD, drone]\ntags:\n- drone\n- docker\n---\n\n\n\n# drone插件\n\n**制作原理：**参照变量的方式（PLUGIN_）\n\n制作脚本文件——》封装镜像——》插件完成，编写drone文件验证正确性\n\n插件也仅仅时dockers 容器，也就意味着可以采用任何语言来实现插件。如下是基于bash和go语言构成插件内容.\n\n## 基于bash的插件制作\n\n1. 制作脚本文件\n\n```\n#! /bin/sh\n\ncurl -X ${PLUGIN_METHOD} -d ${PLUGIN_BODY} ${PLUGIN_URL}\n```\n\n1. 制作Dockerfile文件\n\n```\nFROM alpine:3.14.6\n\nCOPY build.sh /bin/\n\nRUN chmod +x /bin/build.sh\n\nRUN apk -Uuv add curl ca-certificates\nENTRYPOINT /bin/build.sh\n```\n\n构建镜像：docker build -t test:v1 .\n\n1. .drone.yml文件\n\n```\nkind: pipeline\ntype: docker\nname: default\n\nsteps:\n- name: greeting\n  image: test:v1\n  settings:\n    url: http://hook.acme.com\n    method: post\n    body: |\n      hello world\n\nnode:\n  foo: bar\n```\n\n## 基于go语言的插件\n\n1. 编写需求对应的go文件\n\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    body := strings.NewReader(\n        os.Getenv(\"PLUGIN_BODY\"),\n    )\n\n    _, err := http.NewRequest(\n        os.Getenv(\"PLUGIN_METHOD\"),\n        os.Getenv(\"PLUGIN_URL\"),\n        body,\n    )\n    if err != nil {\n        os.Exit(1)\n    }\n}\n```\n\ngo build -o wehook","slug":"CICD/drone/自定义drone 插件","published":1,"date":"2022-09-15T01:21:15.656Z","updated":"2022-09-08T07:43:47.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg5002stpdo7wxn0hs0","content":"<h1 id=\"drone插件\"><a href=\"#drone插件\" class=\"headerlink\" title=\"drone插件\"></a>drone插件</h1><p><strong>制作原理：</strong>参照变量的方式（PLUGIN_）</p>\n<p>制作脚本文件——》封装镜像——》插件完成，编写drone文件验证正确性</p>\n<p>插件也仅仅时dockers 容器，也就意味着可以采用任何语言来实现插件。如下是基于bash和go语言构成插件内容.</p>\n<h2 id=\"基于bash的插件制作\"><a href=\"#基于bash的插件制作\" class=\"headerlink\" title=\"基于bash的插件制作\"></a>基于bash的插件制作</h2><ol>\n<li>制作脚本文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#! /bin/sh</span><br><br>curl -X <span class=\"hljs-variable\">$&#123;PLUGIN_METHOD&#125;</span> -d <span class=\"hljs-variable\">$&#123;PLUGIN_BODY&#125;</span> <span class=\"hljs-variable\">$&#123;PLUGIN_URL&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>制作Dockerfile文件</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.14</span>.<span class=\"hljs-number\">6</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> build.sh /bin/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x /bin/build.sh</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apk -Uuv add curl ca-certificates</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /bin/build.sh</span><br></code></pre></td></tr></table></figure>\n\n<p>构建镜像：docker build -t test:v1 .</p>\n<ol>\n<li>.drone.yml文件</li>\n</ol>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">kind: pipeline<br><span class=\"hljs-keyword\">type</span>: docker<br>name: <span class=\"hljs-keyword\">default</span><br><br>steps:<br>- name: greeting<br>  image: test:v1<br>  settings:<br>    url: http:<span class=\"hljs-comment\">//hook.acme.com</span><br>    <span class=\"hljs-keyword\">method</span>: post<br>    body: |<br>      hello world<br><br>node:<br>  foo: bar<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"基于go语言的插件\"><a href=\"#基于go语言的插件\" class=\"headerlink\" title=\"基于go语言的插件\"></a>基于go语言的插件</h2><ol>\n<li>编写需求对应的go文件</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">package <span class=\"hljs-selector-tag\">main</span><br><br>import (<br>    <span class=\"hljs-string\">&quot;net/http&quot;</span><br>    <span class=\"hljs-string\">&quot;os&quot;</span><br>    <span class=\"hljs-string\">&quot;strings&quot;</span><br>)<br><br>func <span class=\"hljs-selector-tag\">main</span>() &#123;<br>    <span class=\"hljs-selector-tag\">body</span> := strings<span class=\"hljs-selector-class\">.NewReader</span>(<br>        os<span class=\"hljs-selector-class\">.Getenv</span>(<span class=\"hljs-string\">&quot;PLUGIN_BODY&quot;</span>),<br>    )<br><br>    _, err := http<span class=\"hljs-selector-class\">.NewRequest</span>(<br>        os<span class=\"hljs-selector-class\">.Getenv</span>(<span class=\"hljs-string\">&quot;PLUGIN_METHOD&quot;</span>),<br>        os<span class=\"hljs-selector-class\">.Getenv</span>(<span class=\"hljs-string\">&quot;PLUGIN_URL&quot;</span>),<br>        <span class=\"hljs-selector-tag\">body</span>,<br>    )<br>    <span class=\"hljs-keyword\">if</span> err != nil &#123;<br>        os<span class=\"hljs-selector-class\">.Exit</span>(<span class=\"hljs-number\">1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>go build -o wehook</p>\n","site":{"data":{}},"wordcount":919,"excerpt":"","more":"<h1 id=\"drone插件\"><a href=\"#drone插件\" class=\"headerlink\" title=\"drone插件\"></a>drone插件</h1><p><strong>制作原理：</strong>参照变量的方式（PLUGIN_）</p>\n<p>制作脚本文件——》封装镜像——》插件完成，编写drone文件验证正确性</p>\n<p>插件也仅仅时dockers 容器，也就意味着可以采用任何语言来实现插件。如下是基于bash和go语言构成插件内容.</p>\n<h2 id=\"基于bash的插件制作\"><a href=\"#基于bash的插件制作\" class=\"headerlink\" title=\"基于bash的插件制作\"></a>基于bash的插件制作</h2><ol>\n<li>制作脚本文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#! /bin/sh</span><br><br>curl -X <span class=\"hljs-variable\">$&#123;PLUGIN_METHOD&#125;</span> -d <span class=\"hljs-variable\">$&#123;PLUGIN_BODY&#125;</span> <span class=\"hljs-variable\">$&#123;PLUGIN_URL&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>制作Dockerfile文件</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.14</span>.<span class=\"hljs-number\">6</span><br><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> build.sh /bin/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x /bin/build.sh</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apk -Uuv add curl ca-certificates</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /bin/build.sh</span><br></code></pre></td></tr></table></figure>\n\n<p>构建镜像：docker build -t test:v1 .</p>\n<ol>\n<li>.drone.yml文件</li>\n</ol>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">kind: pipeline<br><span class=\"hljs-keyword\">type</span>: docker<br>name: <span class=\"hljs-keyword\">default</span><br><br>steps:<br>- name: greeting<br>  image: test:v1<br>  settings:<br>    url: http:<span class=\"hljs-comment\">//hook.acme.com</span><br>    <span class=\"hljs-keyword\">method</span>: post<br>    body: |<br>      hello world<br><br>node:<br>  foo: bar<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"基于go语言的插件\"><a href=\"#基于go语言的插件\" class=\"headerlink\" title=\"基于go语言的插件\"></a>基于go语言的插件</h2><ol>\n<li>编写需求对应的go文件</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">package <span class=\"hljs-selector-tag\">main</span><br><br>import (<br>    <span class=\"hljs-string\">&quot;net/http&quot;</span><br>    <span class=\"hljs-string\">&quot;os&quot;</span><br>    <span class=\"hljs-string\">&quot;strings&quot;</span><br>)<br><br>func <span class=\"hljs-selector-tag\">main</span>() &#123;<br>    <span class=\"hljs-selector-tag\">body</span> := strings<span class=\"hljs-selector-class\">.NewReader</span>(<br>        os<span class=\"hljs-selector-class\">.Getenv</span>(<span class=\"hljs-string\">&quot;PLUGIN_BODY&quot;</span>),<br>    )<br><br>    _, err := http<span class=\"hljs-selector-class\">.NewRequest</span>(<br>        os<span class=\"hljs-selector-class\">.Getenv</span>(<span class=\"hljs-string\">&quot;PLUGIN_METHOD&quot;</span>),<br>        os<span class=\"hljs-selector-class\">.Getenv</span>(<span class=\"hljs-string\">&quot;PLUGIN_URL&quot;</span>),<br>        <span class=\"hljs-selector-tag\">body</span>,<br>    )<br>    <span class=\"hljs-keyword\">if</span> err != nil &#123;<br>        os<span class=\"hljs-selector-class\">.Exit</span>(<span class=\"hljs-number\">1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>go build -o wehook</p>\n"},{"title":"time包方法详解","_content":"\n# time.Now\n\n获取当前时间.\n\n# time.Until\n\n保存时间值t，用于评估直到时间t的持续时间\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\t//获取当前时间\n\tt := time.Now()\n\tfmt.Println(\"Duration until t:\", time.Until(t)) //Duration until t: -112ns\n}\n\n```\n\n# time.AfterFunc\n\n用于等待经过的时间，也就是在经历时间之后执行方法。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\twaitchan := make(chan int)\n\ttime.AfterFunc(time.Second*5, func() {\n\t\tfmt.Println(\"AfterFunc excuted\")\n\t\twaitchan <- 1\n\t})\n\t<-waitchan\n}\n```\n\n\n\n","source":"_posts/golang/Golang包/Time.md","raw":"---\ntitle: time包方法详解\ncategories: \n- [golang, Golang包]\n---\n\n# time.Now\n\n获取当前时间.\n\n# time.Until\n\n保存时间值t，用于评估直到时间t的持续时间\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\t//获取当前时间\n\tt := time.Now()\n\tfmt.Println(\"Duration until t:\", time.Until(t)) //Duration until t: -112ns\n}\n\n```\n\n# time.AfterFunc\n\n用于等待经过的时间，也就是在经历时间之后执行方法。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\twaitchan := make(chan int)\n\ttime.AfterFunc(time.Second*5, func() {\n\t\tfmt.Println(\"AfterFunc excuted\")\n\t\twaitchan <- 1\n\t})\n\t<-waitchan\n}\n```\n\n\n\n","slug":"golang/Golang包/Time","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:33:32.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg6002utpdo7b3cdoeu","content":"<h1 id=\"time-Now\"><a href=\"#time-Now\" class=\"headerlink\" title=\"time.Now\"></a>time.Now</h1><p>获取当前时间.</p>\n<h1 id=\"time-Until\"><a href=\"#time-Until\" class=\"headerlink\" title=\"time.Until\"></a>time.Until</h1><p>保存时间值t，用于评估直到时间t的持续时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//获取当前时间</span><br>\tt := time.Now()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Duration until t:&quot;</span>, time.Until(t)) <span class=\"hljs-comment\">//Duration until t: -112ns</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"time-AfterFunc\"><a href=\"#time-AfterFunc\" class=\"headerlink\" title=\"time.AfterFunc\"></a>time.AfterFunc</h1><p>用于等待经过的时间，也就是在经历时间之后执行方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\twaitchan := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">int</span>)<br>\ttime.AfterFunc(time.Second*<span class=\"hljs-number\">5</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;AfterFunc excuted&quot;</span>)<br>\t\twaitchan &lt;- <span class=\"hljs-number\">1</span><br>\t&#125;)<br>\t&lt;-waitchan<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"wordcount":504,"excerpt":"","more":"<h1 id=\"time-Now\"><a href=\"#time-Now\" class=\"headerlink\" title=\"time.Now\"></a>time.Now</h1><p>获取当前时间.</p>\n<h1 id=\"time-Until\"><a href=\"#time-Until\" class=\"headerlink\" title=\"time.Until\"></a>time.Until</h1><p>保存时间值t，用于评估直到时间t的持续时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//获取当前时间</span><br>\tt := time.Now()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Duration until t:&quot;</span>, time.Until(t)) <span class=\"hljs-comment\">//Duration until t: -112ns</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"time-AfterFunc\"><a href=\"#time-AfterFunc\" class=\"headerlink\" title=\"time.AfterFunc\"></a>time.AfterFunc</h1><p>用于等待经过的时间，也就是在经历时间之后执行方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\twaitchan := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">int</span>)<br>\ttime.AfterFunc(time.Second*<span class=\"hljs-number\">5</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;AfterFunc excuted&quot;</span>)<br>\t\twaitchan &lt;- <span class=\"hljs-number\">1</span><br>\t&#125;)<br>\t&lt;-waitchan<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"atomic.Value 类型","_content":"\n","source":"_posts/golang/Golang包/atomic.Value 类型.md","raw":"---\ntitle: atomic.Value 类型\ncategories: \n- [golang, Golang包]\ntags: atomic\n---\n\n","slug":"golang/Golang包/atomic.Value 类型","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-13T03:29:56.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsg9002xtpdo2ommhj79","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"context源码学习","_content":"\ngo:1.18.5\n\n# context包架构布局\n\n| 类型            | 名称   | 作用                                                         |\n| --------------- | ------ | ------------------------------------------------------------ |\n| Context         | 接口   | 定义了 Context 接口的四个方法                                |\n| emptyCtx        | 结构体 | 实现了 Context 接口，它其实是个空的 context                  |\n| CancelFunc      | 函数   | 取消函数                                                     |\n| canceler        | 接口   | context 取消接口，定义了两个方法                             |\n| cancelCtx       | 结构体 | 可以被取消                                                   |\n| timerCtx        | 结构体 | 超时会被取消                                                 |\n| valueCtx        | 结构体 | 可以存储 k-v 对                                              |\n| Background      | 函数   | 返回一个空的 context，常作为根 context                       |\n| TODO            | 函数   | 返回一个空的 context，常用于重构时期，没有合适的 context 可用 |\n| WithCancel      | 函数   | 基于父 context，生成一个可以取消的 context                   |\n| newCancelCtx    | 函数   | 创建一个可取消的 context                                     |\n| propagateCancel | 函数   | 向下传递 context 节点间的取消关系                            |\n| parentCancelCtx | 函数   | 找到第一个可取消的父节点                                     |\n| removeChild     | 函数   | 去掉父节点的孩子节点                                         |\n| init            | 函数   | 包初始化                                                     |\n| WithDeadline    | 函数   | 创建一个有 deadline 的 context                               |\n| WithTimeout     | 函数   | 创建一个有 timeout 的 context                                |\n| WithValue       | 函数   | 创建一个存储 k-v 对的 context                                |\n\n# 源码\n\n## 接口\n\n### **context**\n\n定义4个方法，都是幂等，也就是多次执行返回的结果一致。\n\n```go\ntype Context interface {\n\t// 返回context是否会被取消以及自动取消的时间\n\tDeadline() (deadline time.Time, ok bool)\n\n\t//context被取消或deadline的时候，返回一个关闭的chan\n\tDone() <-chan struct{}\n\n\t//Done之后，返回context的原因\n\tErr() error\n\n\t//获取key对应的alue\n\tValue(key any) any\n}\n\n```\n\n### **canceler**\n\n说明context是可以取消的。\n\n- “取消”操作应该是建议性，而非强制性\n\ncaller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。\n\n- “取消”操作应该可传递\n\n“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，`Done()` 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。\n\n```go\ntype canceler interface {\n\tcancel(removeFromParent bool, err error)\n\tDone() <-chan struct{}\n}\n```\n\n## 结构体\n\n### emptyCtx\n\n它被包装成：\n\n```go\nvar (\n    //BackGround返回一个非空的context，且绝不会被取消，没有值和取消时间。通常用在main函数、初始化和测试中或者作为输入请求的高context\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\n\tbackground = new(emptyCtx)\n    //TODO返回一个非空的context，代码可以使用context。当不清楚采用那种context或者不确定是都有用可以采用TODO，\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\n\ttodo       = new(emptyCtx)\n)\n```\n\nbackground通常用在main函数中，作为context的根节点。\n\n### cancelCtx\n\n可取消的context，他可以确保父被取消的时候，其余的子context也会被取消。\n\n```go\n//\ntype cancelCtx struct {\n\tContext\n\n\tmu       sync.Mutex            // protects following fields\n\tdone     atomic.Value          // of chan struct{}, created lazily, closed by first cancel call\n\tchildren map[canceler]struct{} // set to nil by the first cancel call\n\terr      error                 // set to non-nil by the first cancel call\n}\n```\n\n其中，value、Done、String、Err等均实现了canceler方法。\n\n`Done`方法的实现\n\n```go\nfunc (c *cancelCtx) Done() <-chan struct{} {\n\td := c.done.Load()\n\tif d != nil {\n\t\treturn d.(chan struct{})\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\td = c.done.Load()\n\tif d == nil {\n\t\td = make(chan struct{})\n\t\tc.done.Store(d)\n\t}\n\treturn d.(chan struct{})\n}\n```\n\n函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。\n\n`value`方法实现:返回取消的key值\n\n```go\nfunc (c *cancelCtx) Value(key any) any {\n\tif key == &cancelCtxKey {\n\t\treturn c\n\t}\n\treturn value(c.Context, key)\n}\n```\n\n`cancel`方法实现\n\n关闭所有的channel。\n\n```go\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    //传入err\n\tif err == nil {\n\t\tpanic(\"context: internal error: missing cancel error\")\n\t}\n\tc.mu.Lock()\n    //判断是否已经取消，因为Done之后会返回取消原因，因此采用err的的方法判断是否取消\n\tif c.err != nil {\n\t\tc.mu.Unlock()\n\t\treturn // already canceled\n\t}\n\tc.err = err\n\td, _ := c.done.Load().(chan struct{})\n    //关闭channel，通知其他协程\n\tif d == nil {\n\t\tc.done.Store(closedchan)\n\t} else {\n\t\tclose(d)\n\t}\n    //遍历循环子context关闭\n\tfor child := range c.children {\n\t\t// NOTE: acquiring the child's lock while holding parent's lock.\n\t\tchild.cancel(false, err)\n\t}\n    //子结点置空\n\tc.children = nil\n\tc.mu.Unlock()\n\n    //如果为True，将自己从父节点删除\n\tif removeFromParent {\n\t\tremoveChild(c.Context, c)\n\t}\n}\n```\n\n**创建可取消的cancel方法**\n\n```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n\tif parent == nil {\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n\tc := newCancelCtx(parent)\n    //向上遍历可删除的父节点以及他的子结点进行删除\n    //\n\tpropagateCancel(parent, &c)\n    //返回context和func，其中c.cancel(true, Canceled)已经默认需要将自己从父节点中删除。\n\treturn &c, func() { c.cancel(true, Canceled) }\n}\n\n// newCancelCtx returns an initialized cancelCtx.\nfunc newCancelCtx(parent Context) cancelCtx {\n\treturn cancelCtx{Context: parent}\n}\n```\n\n**在调用方法的时候，默认调用的cancel方法中传入的true，而在在执行该方法的内部循环取消子结点的时候child调用的cancel传入的是false**\n\n1. 可取消的cancel的方法中传入的为true,将child进行删除\n\n   `removeChild`方法\n\n   ```go\n   func removeChild(parent Context, child canceler) {\n   //判断是否有可取消的父节点\n   \tp, ok := parentCancelCtx(parent)\n   \t//不存在，说明父节点已经取消\n   \tif !ok {\n   \t\treturn\n   \t}\n   \tp.mu.Lock()\n   \t//判断child节点是否存在，存在delete\n   \tif p.children != nil {\n   \t\tdelete(p.children, child)\n   \t}\n   \tp.mu.Unlock()\n   }\n   ```\n\n   `parentCancelCtx`方法，查看父节点如何递归遍历删除\n\n   ```go\n   func parentCancelCtx(parent Context) (*cancelCtx, bool) {\n       //done为一个结构体管道\n   \tdone := parent.Done()\n   \tif done == closedchan || done == nil {\n   \t\treturn nil, false\n   \t}\n       //通过value值查找到匹配的parent.Done()\n   \tp, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n   \tif !ok {\n   \t\treturn nil, false\n   \t}\n       //如果没有，*cancelCtx已被包装在一个自定义实现中，提供了一个不同的完成通道，在这种情况下，我们不应该绕过它\n   \tpdone, _ := p.done.Load().(chan struct{})\n   \tif pdone != done {\n   \t\treturn nil, false\n   \t}\n   \treturn p, true\n   }\n   ```\n\n   \n\n例子：\n\nmcCtx，childCtx 和正常的 parentContext不一样，因为它是一个自定义的结构体类型。\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\ntype Mycontext struct {\n\tcontext.Context\n}\n\nfunc main() {\n\tchildCancel := true\n\tparentContext, parentFunc := context.WithCancel(context.Background())\n\tmcCtx := Mycontext{parentContext}\n\n\tchildCtx, childFunc := context.WithCancel(mcCtx)\n\n\tif childCancel {\n\t\tchildFunc()\n\t} else {\n\t\tparentFunc()\n\t}\n\n\tfmt.Println(parentContext) //context.Background.WithCancel\n\tfmt.Println(mcCtx) //{context.Background.WithCancel}\n\tfmt.Println(childCtx) //main.Mycontext.WithCancel\n\n\ttime.Sleep(10 * time.Second)\n\n}\n```\n\n### timerCtx\n\n```go\ntype timerCtx struct {\n    //基于cancelCtx\n\tcancelCtx\n\ttimer *time.Timer // Under cancelCtx.mu.\n    //设置Deadline的时间\n\tdeadline time.Time\n}\n```\n\n实现\n\n```go\nfunc (c *timerCtx) Deadline() (deadline time.Time, ok bool) {\n\treturn c.deadline, true\n}\n\nfunc (c *timerCtx) String() string {\n\treturn contextName(c.cancelCtx.Context) + \".WithDeadline(\" +\n\t\tc.deadline.String() + \" [\" +\n\t\ttime.Until(c.deadline).String() + \"])\"\n}\n//可取消的timeOut\nfunc (c *timerCtx) cancel(removeFromParent bool, err error) {\n    //调用cancelCtx的cancel方法\n\tc.cancelCtx.cancel(false, err)\n\tif removeFromParent {\n\t\t// Remove this timerCtx from its parent cancelCtx's children.\n        //移除子节点\n\t\tremoveChild(c.cancelCtx.Context, c)\n\t}\n\tc.mu.Lock()\n    //判断c的时间，关掉定时器，不会再次取消\n\tif c.timer != nil {\n\t\tc.timer.Stop()\n\t\tc.timer = nil\n\t}\n\tc.mu.Unlock()\n}\n```\n\n创建可取消的time context\n\n```\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n\treturn WithDeadline(parent, time.Now().Add(timeout))\n}\n```\n\n直接调用`WithDeadline`,添加超时时间。\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    //判断父节点是否为空\n\tif parent == nil {\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n    //获取当前parent的时间和结果。如果父节点超时，会自动调用cancel函数。\n\tif cur, ok := parent.Deadline(); ok && cur.Before(d) {\n\t\t// The current deadline is already sooner than the new one.\n\t\treturn WithCancel(parent)\n\t}\n\tc := &timerCtx{\n\t\tcancelCtx: newCancelCtx(parent),\n\t\tdeadline:  d,\n\t}\n    //挂靠父节点\n\tpropagateCancel(parent, c)\n    //获取距离到达dealine的时间\n\tdur := time.Until(d)\n    //超时\n\tif dur <= 0 {\n        //取消并返回\n\t\tc.cancel(true, DeadlineExceeded) // deadline has already passed\n        \n\t\treturn c, func() { c.cancel(false, Canceled) }\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tif c.err == nil {\n        //在到达超时的时间的时候，执行取消命令\n\t\tc.timer = time.AfterFunc(dur, func() {\n\t\t\tc.cancel(true, DeadlineExceeded)\n\t\t})\n\t}\n    //是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型\n    //返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。\n\treturn c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### valueCtx\n\n```go\ntype valueCtx struct {\n\tContext\n\tkey, val any\n}\n```\n\n\n\n## propagateCancel\n\n父节点时取消子节点\n\n```go\n// propagateCancel arranges for child to be canceled when parent is.\nfunc propagateCancel(parent Context, child canceler) {\n    //父节点是空节点\n\tdone := parent.Done()\n\tif done == nil {\n\t\treturn // parent is never canceled\n\t}\n\n\tselect {\n\tcase <-done:\n\t\t// parent is already canceled\n\t\tchild.cancel(false, parent.Err())\n\t\treturn\n\tdefault:\n\t}\n\n    //判断父节点是否可取消\n\tif p, ok := parentCancelCtx(parent); ok {\n\t\tp.mu.Lock()\n        // 父节点已经被取消了，本节点（子节点）也要取消\n\t\tif p.err != nil {\n\t\t\t// parent has already been canceled\n\t\t\tchild.cancel(false, p.err)\n\t\t} else {\n\t\t\tif p.children == nil {\n\t\t\t\tp.children = make(map[canceler]struct{})\n\t\t\t}\t\n            //挂到父节点\n\t\t\tp.children[child] = struct{}{}\n\t\t}\n\t\tp.mu.Unlock()\n\t} else {\n        //没有找到可取消的父节点\n\t\tatomic.AddInt32(&goroutines, +1)\n        //重新启动一个新协程，监控父节点和子节点\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-parent.Done():\n\t\t\t\tchild.cancel(false, parent.Err())\n\t\t\tcase <-child.Done():\n\t\t\t}\n\t\t}()\n\t}\n}\n```\n\n# 使用\n\n## 传递共享数据\n\n通常使用WithValue()的方法共享数据\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tprocess(ctx) //process over. no trace_id\n\n\tctx = context.WithValue(ctx, \"traceId\", \"qwe-2011\")\n\tprocess(ctx)//process over,trace_id=qwe-2011\n\n}\n\nfunc process(ctx context.Context) {\n\ttraceID, ok := ctx.Value(\"traceId\").(string)\n\tif ok {\n\t\tfmt.Printf(\"process over,trace_id=%s\\n\", traceID)\n\t} else {\n\t\tfmt.Printf(\"process over. no trace_id\\n\")\n\t}\n}\n\n```\n\n\n\n## 取消goroutine&防止goroutine泄露\n\n1. 取消goroutine\n\n   ```go\n   package main\n   \n   import (\n   \t\"context\"\n   \t\"fmt\"\n   \t\"time\"\n   )\n   \n   func work1(ctx context.Context) {\n   LABEL:\n   \tfor {\n   \n   \t\tselect {\n   \t\tcase <-ctx.Done():\n   \t\t\tbreak LABEL\n   \t\tdefault:\n   \t\t\tfmt.Println(\"...work1...\")\n   \t\t\ttime.Sleep(time.Second)\n   \t\t}\n   \t}\n   }\n   func work2(ctx context.Context) {\n   LABEL:\n   \tfor {\n   \n   \t\tselect {\n   \t\tcase <-ctx.Done():\n   \t\t\tbreak LABEL\n   \t\tdefault:\n   \t\t\tfmt.Println(\"...work2...\")\n   \t\t\ttime.Sleep(time.Second)\n   \t\t}\n   \t}\n   }\n   func main() {\n   \tctx, cancel := context.WithCancel(context.Background())\n   \tgo work1(ctx)\n   \tgo work2(ctx)\n   \n   \ttime.Sleep(time.Second * 5)\n   \tcancel()\n   \tfmt.Println(\"...cancel...\")\n   \tgo work2(ctx)\n   \tfmt.Println(\"...over...\")\n   \n   }\n   ```\n\n   结果：\n\n   ```shell\n   ubuntu@root:~/go/src/gotest$ go run main.go \n   ...work2...\n   ...work1...\n   ...work1...\n   ...work2...\n   ...work2...\n   ...work1...\n   ...work1...\n   ...work2...\n   ...work2...\n   ...work1...\n   ...cancel...\n   ...over...\n   ```\n\n2. 防止goroutine泄露\n\n   \n\n# 参考连接\n\n[深度解密Go语言之context](https://www.cnblogs.com/qcrao-2018/p/11007503.html)\n","source":"_posts/golang/Golang包/context.md","raw":"---\ntitle: context源码学习\ncategories: \n- [golang, Golang包]\n---\n\ngo:1.18.5\n\n# context包架构布局\n\n| 类型            | 名称   | 作用                                                         |\n| --------------- | ------ | ------------------------------------------------------------ |\n| Context         | 接口   | 定义了 Context 接口的四个方法                                |\n| emptyCtx        | 结构体 | 实现了 Context 接口，它其实是个空的 context                  |\n| CancelFunc      | 函数   | 取消函数                                                     |\n| canceler        | 接口   | context 取消接口，定义了两个方法                             |\n| cancelCtx       | 结构体 | 可以被取消                                                   |\n| timerCtx        | 结构体 | 超时会被取消                                                 |\n| valueCtx        | 结构体 | 可以存储 k-v 对                                              |\n| Background      | 函数   | 返回一个空的 context，常作为根 context                       |\n| TODO            | 函数   | 返回一个空的 context，常用于重构时期，没有合适的 context 可用 |\n| WithCancel      | 函数   | 基于父 context，生成一个可以取消的 context                   |\n| newCancelCtx    | 函数   | 创建一个可取消的 context                                     |\n| propagateCancel | 函数   | 向下传递 context 节点间的取消关系                            |\n| parentCancelCtx | 函数   | 找到第一个可取消的父节点                                     |\n| removeChild     | 函数   | 去掉父节点的孩子节点                                         |\n| init            | 函数   | 包初始化                                                     |\n| WithDeadline    | 函数   | 创建一个有 deadline 的 context                               |\n| WithTimeout     | 函数   | 创建一个有 timeout 的 context                                |\n| WithValue       | 函数   | 创建一个存储 k-v 对的 context                                |\n\n# 源码\n\n## 接口\n\n### **context**\n\n定义4个方法，都是幂等，也就是多次执行返回的结果一致。\n\n```go\ntype Context interface {\n\t// 返回context是否会被取消以及自动取消的时间\n\tDeadline() (deadline time.Time, ok bool)\n\n\t//context被取消或deadline的时候，返回一个关闭的chan\n\tDone() <-chan struct{}\n\n\t//Done之后，返回context的原因\n\tErr() error\n\n\t//获取key对应的alue\n\tValue(key any) any\n}\n\n```\n\n### **canceler**\n\n说明context是可以取消的。\n\n- “取消”操作应该是建议性，而非强制性\n\ncaller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。\n\n- “取消”操作应该可传递\n\n“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，`Done()` 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。\n\n```go\ntype canceler interface {\n\tcancel(removeFromParent bool, err error)\n\tDone() <-chan struct{}\n}\n```\n\n## 结构体\n\n### emptyCtx\n\n它被包装成：\n\n```go\nvar (\n    //BackGround返回一个非空的context，且绝不会被取消，没有值和取消时间。通常用在main函数、初始化和测试中或者作为输入请求的高context\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\n\tbackground = new(emptyCtx)\n    //TODO返回一个非空的context，代码可以使用context。当不清楚采用那种context或者不确定是都有用可以采用TODO，\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\n\ttodo       = new(emptyCtx)\n)\n```\n\nbackground通常用在main函数中，作为context的根节点。\n\n### cancelCtx\n\n可取消的context，他可以确保父被取消的时候，其余的子context也会被取消。\n\n```go\n//\ntype cancelCtx struct {\n\tContext\n\n\tmu       sync.Mutex            // protects following fields\n\tdone     atomic.Value          // of chan struct{}, created lazily, closed by first cancel call\n\tchildren map[canceler]struct{} // set to nil by the first cancel call\n\terr      error                 // set to non-nil by the first cancel call\n}\n```\n\n其中，value、Done、String、Err等均实现了canceler方法。\n\n`Done`方法的实现\n\n```go\nfunc (c *cancelCtx) Done() <-chan struct{} {\n\td := c.done.Load()\n\tif d != nil {\n\t\treturn d.(chan struct{})\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\td = c.done.Load()\n\tif d == nil {\n\t\td = make(chan struct{})\n\t\tc.done.Store(d)\n\t}\n\treturn d.(chan struct{})\n}\n```\n\n函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。\n\n`value`方法实现:返回取消的key值\n\n```go\nfunc (c *cancelCtx) Value(key any) any {\n\tif key == &cancelCtxKey {\n\t\treturn c\n\t}\n\treturn value(c.Context, key)\n}\n```\n\n`cancel`方法实现\n\n关闭所有的channel。\n\n```go\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    //传入err\n\tif err == nil {\n\t\tpanic(\"context: internal error: missing cancel error\")\n\t}\n\tc.mu.Lock()\n    //判断是否已经取消，因为Done之后会返回取消原因，因此采用err的的方法判断是否取消\n\tif c.err != nil {\n\t\tc.mu.Unlock()\n\t\treturn // already canceled\n\t}\n\tc.err = err\n\td, _ := c.done.Load().(chan struct{})\n    //关闭channel，通知其他协程\n\tif d == nil {\n\t\tc.done.Store(closedchan)\n\t} else {\n\t\tclose(d)\n\t}\n    //遍历循环子context关闭\n\tfor child := range c.children {\n\t\t// NOTE: acquiring the child's lock while holding parent's lock.\n\t\tchild.cancel(false, err)\n\t}\n    //子结点置空\n\tc.children = nil\n\tc.mu.Unlock()\n\n    //如果为True，将自己从父节点删除\n\tif removeFromParent {\n\t\tremoveChild(c.Context, c)\n\t}\n}\n```\n\n**创建可取消的cancel方法**\n\n```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n\tif parent == nil {\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n\tc := newCancelCtx(parent)\n    //向上遍历可删除的父节点以及他的子结点进行删除\n    //\n\tpropagateCancel(parent, &c)\n    //返回context和func，其中c.cancel(true, Canceled)已经默认需要将自己从父节点中删除。\n\treturn &c, func() { c.cancel(true, Canceled) }\n}\n\n// newCancelCtx returns an initialized cancelCtx.\nfunc newCancelCtx(parent Context) cancelCtx {\n\treturn cancelCtx{Context: parent}\n}\n```\n\n**在调用方法的时候，默认调用的cancel方法中传入的true，而在在执行该方法的内部循环取消子结点的时候child调用的cancel传入的是false**\n\n1. 可取消的cancel的方法中传入的为true,将child进行删除\n\n   `removeChild`方法\n\n   ```go\n   func removeChild(parent Context, child canceler) {\n   //判断是否有可取消的父节点\n   \tp, ok := parentCancelCtx(parent)\n   \t//不存在，说明父节点已经取消\n   \tif !ok {\n   \t\treturn\n   \t}\n   \tp.mu.Lock()\n   \t//判断child节点是否存在，存在delete\n   \tif p.children != nil {\n   \t\tdelete(p.children, child)\n   \t}\n   \tp.mu.Unlock()\n   }\n   ```\n\n   `parentCancelCtx`方法，查看父节点如何递归遍历删除\n\n   ```go\n   func parentCancelCtx(parent Context) (*cancelCtx, bool) {\n       //done为一个结构体管道\n   \tdone := parent.Done()\n   \tif done == closedchan || done == nil {\n   \t\treturn nil, false\n   \t}\n       //通过value值查找到匹配的parent.Done()\n   \tp, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n   \tif !ok {\n   \t\treturn nil, false\n   \t}\n       //如果没有，*cancelCtx已被包装在一个自定义实现中，提供了一个不同的完成通道，在这种情况下，我们不应该绕过它\n   \tpdone, _ := p.done.Load().(chan struct{})\n   \tif pdone != done {\n   \t\treturn nil, false\n   \t}\n   \treturn p, true\n   }\n   ```\n\n   \n\n例子：\n\nmcCtx，childCtx 和正常的 parentContext不一样，因为它是一个自定义的结构体类型。\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\ntype Mycontext struct {\n\tcontext.Context\n}\n\nfunc main() {\n\tchildCancel := true\n\tparentContext, parentFunc := context.WithCancel(context.Background())\n\tmcCtx := Mycontext{parentContext}\n\n\tchildCtx, childFunc := context.WithCancel(mcCtx)\n\n\tif childCancel {\n\t\tchildFunc()\n\t} else {\n\t\tparentFunc()\n\t}\n\n\tfmt.Println(parentContext) //context.Background.WithCancel\n\tfmt.Println(mcCtx) //{context.Background.WithCancel}\n\tfmt.Println(childCtx) //main.Mycontext.WithCancel\n\n\ttime.Sleep(10 * time.Second)\n\n}\n```\n\n### timerCtx\n\n```go\ntype timerCtx struct {\n    //基于cancelCtx\n\tcancelCtx\n\ttimer *time.Timer // Under cancelCtx.mu.\n    //设置Deadline的时间\n\tdeadline time.Time\n}\n```\n\n实现\n\n```go\nfunc (c *timerCtx) Deadline() (deadline time.Time, ok bool) {\n\treturn c.deadline, true\n}\n\nfunc (c *timerCtx) String() string {\n\treturn contextName(c.cancelCtx.Context) + \".WithDeadline(\" +\n\t\tc.deadline.String() + \" [\" +\n\t\ttime.Until(c.deadline).String() + \"])\"\n}\n//可取消的timeOut\nfunc (c *timerCtx) cancel(removeFromParent bool, err error) {\n    //调用cancelCtx的cancel方法\n\tc.cancelCtx.cancel(false, err)\n\tif removeFromParent {\n\t\t// Remove this timerCtx from its parent cancelCtx's children.\n        //移除子节点\n\t\tremoveChild(c.cancelCtx.Context, c)\n\t}\n\tc.mu.Lock()\n    //判断c的时间，关掉定时器，不会再次取消\n\tif c.timer != nil {\n\t\tc.timer.Stop()\n\t\tc.timer = nil\n\t}\n\tc.mu.Unlock()\n}\n```\n\n创建可取消的time context\n\n```\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n\treturn WithDeadline(parent, time.Now().Add(timeout))\n}\n```\n\n直接调用`WithDeadline`,添加超时时间。\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    //判断父节点是否为空\n\tif parent == nil {\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n    //获取当前parent的时间和结果。如果父节点超时，会自动调用cancel函数。\n\tif cur, ok := parent.Deadline(); ok && cur.Before(d) {\n\t\t// The current deadline is already sooner than the new one.\n\t\treturn WithCancel(parent)\n\t}\n\tc := &timerCtx{\n\t\tcancelCtx: newCancelCtx(parent),\n\t\tdeadline:  d,\n\t}\n    //挂靠父节点\n\tpropagateCancel(parent, c)\n    //获取距离到达dealine的时间\n\tdur := time.Until(d)\n    //超时\n\tif dur <= 0 {\n        //取消并返回\n\t\tc.cancel(true, DeadlineExceeded) // deadline has already passed\n        \n\t\treturn c, func() { c.cancel(false, Canceled) }\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tif c.err == nil {\n        //在到达超时的时间的时候，执行取消命令\n\t\tc.timer = time.AfterFunc(dur, func() {\n\t\t\tc.cancel(true, DeadlineExceeded)\n\t\t})\n\t}\n    //是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型\n    //返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。\n\treturn c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### valueCtx\n\n```go\ntype valueCtx struct {\n\tContext\n\tkey, val any\n}\n```\n\n\n\n## propagateCancel\n\n父节点时取消子节点\n\n```go\n// propagateCancel arranges for child to be canceled when parent is.\nfunc propagateCancel(parent Context, child canceler) {\n    //父节点是空节点\n\tdone := parent.Done()\n\tif done == nil {\n\t\treturn // parent is never canceled\n\t}\n\n\tselect {\n\tcase <-done:\n\t\t// parent is already canceled\n\t\tchild.cancel(false, parent.Err())\n\t\treturn\n\tdefault:\n\t}\n\n    //判断父节点是否可取消\n\tif p, ok := parentCancelCtx(parent); ok {\n\t\tp.mu.Lock()\n        // 父节点已经被取消了，本节点（子节点）也要取消\n\t\tif p.err != nil {\n\t\t\t// parent has already been canceled\n\t\t\tchild.cancel(false, p.err)\n\t\t} else {\n\t\t\tif p.children == nil {\n\t\t\t\tp.children = make(map[canceler]struct{})\n\t\t\t}\t\n            //挂到父节点\n\t\t\tp.children[child] = struct{}{}\n\t\t}\n\t\tp.mu.Unlock()\n\t} else {\n        //没有找到可取消的父节点\n\t\tatomic.AddInt32(&goroutines, +1)\n        //重新启动一个新协程，监控父节点和子节点\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-parent.Done():\n\t\t\t\tchild.cancel(false, parent.Err())\n\t\t\tcase <-child.Done():\n\t\t\t}\n\t\t}()\n\t}\n}\n```\n\n# 使用\n\n## 传递共享数据\n\n通常使用WithValue()的方法共享数据\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tprocess(ctx) //process over. no trace_id\n\n\tctx = context.WithValue(ctx, \"traceId\", \"qwe-2011\")\n\tprocess(ctx)//process over,trace_id=qwe-2011\n\n}\n\nfunc process(ctx context.Context) {\n\ttraceID, ok := ctx.Value(\"traceId\").(string)\n\tif ok {\n\t\tfmt.Printf(\"process over,trace_id=%s\\n\", traceID)\n\t} else {\n\t\tfmt.Printf(\"process over. no trace_id\\n\")\n\t}\n}\n\n```\n\n\n\n## 取消goroutine&防止goroutine泄露\n\n1. 取消goroutine\n\n   ```go\n   package main\n   \n   import (\n   \t\"context\"\n   \t\"fmt\"\n   \t\"time\"\n   )\n   \n   func work1(ctx context.Context) {\n   LABEL:\n   \tfor {\n   \n   \t\tselect {\n   \t\tcase <-ctx.Done():\n   \t\t\tbreak LABEL\n   \t\tdefault:\n   \t\t\tfmt.Println(\"...work1...\")\n   \t\t\ttime.Sleep(time.Second)\n   \t\t}\n   \t}\n   }\n   func work2(ctx context.Context) {\n   LABEL:\n   \tfor {\n   \n   \t\tselect {\n   \t\tcase <-ctx.Done():\n   \t\t\tbreak LABEL\n   \t\tdefault:\n   \t\t\tfmt.Println(\"...work2...\")\n   \t\t\ttime.Sleep(time.Second)\n   \t\t}\n   \t}\n   }\n   func main() {\n   \tctx, cancel := context.WithCancel(context.Background())\n   \tgo work1(ctx)\n   \tgo work2(ctx)\n   \n   \ttime.Sleep(time.Second * 5)\n   \tcancel()\n   \tfmt.Println(\"...cancel...\")\n   \tgo work2(ctx)\n   \tfmt.Println(\"...over...\")\n   \n   }\n   ```\n\n   结果：\n\n   ```shell\n   ubuntu@root:~/go/src/gotest$ go run main.go \n   ...work2...\n   ...work1...\n   ...work1...\n   ...work2...\n   ...work2...\n   ...work1...\n   ...work1...\n   ...work2...\n   ...work2...\n   ...work1...\n   ...cancel...\n   ...over...\n   ```\n\n2. 防止goroutine泄露\n\n   \n\n# 参考连接\n\n[深度解密Go语言之context](https://www.cnblogs.com/qcrao-2018/p/11007503.html)\n","slug":"golang/Golang包/context","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:29:32.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsga002ztpdoh3l15w5k","content":"<p>go:1.18.5</p>\n<h1 id=\"context包架构布局\"><a href=\"#context包架构布局\" class=\"headerlink\" title=\"context包架构布局\"></a>context包架构布局</h1><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Context</td>\n<td>接口</td>\n<td>定义了 Context 接口的四个方法</td>\n</tr>\n<tr>\n<td>emptyCtx</td>\n<td>结构体</td>\n<td>实现了 Context 接口，它其实是个空的 context</td>\n</tr>\n<tr>\n<td>CancelFunc</td>\n<td>函数</td>\n<td>取消函数</td>\n</tr>\n<tr>\n<td>canceler</td>\n<td>接口</td>\n<td>context 取消接口，定义了两个方法</td>\n</tr>\n<tr>\n<td>cancelCtx</td>\n<td>结构体</td>\n<td>可以被取消</td>\n</tr>\n<tr>\n<td>timerCtx</td>\n<td>结构体</td>\n<td>超时会被取消</td>\n</tr>\n<tr>\n<td>valueCtx</td>\n<td>结构体</td>\n<td>可以存储 k-v 对</td>\n</tr>\n<tr>\n<td>Background</td>\n<td>函数</td>\n<td>返回一个空的 context，常作为根 context</td>\n</tr>\n<tr>\n<td>TODO</td>\n<td>函数</td>\n<td>返回一个空的 context，常用于重构时期，没有合适的 context 可用</td>\n</tr>\n<tr>\n<td>WithCancel</td>\n<td>函数</td>\n<td>基于父 context，生成一个可以取消的 context</td>\n</tr>\n<tr>\n<td>newCancelCtx</td>\n<td>函数</td>\n<td>创建一个可取消的 context</td>\n</tr>\n<tr>\n<td>propagateCancel</td>\n<td>函数</td>\n<td>向下传递 context 节点间的取消关系</td>\n</tr>\n<tr>\n<td>parentCancelCtx</td>\n<td>函数</td>\n<td>找到第一个可取消的父节点</td>\n</tr>\n<tr>\n<td>removeChild</td>\n<td>函数</td>\n<td>去掉父节点的孩子节点</td>\n</tr>\n<tr>\n<td>init</td>\n<td>函数</td>\n<td>包初始化</td>\n</tr>\n<tr>\n<td>WithDeadline</td>\n<td>函数</td>\n<td>创建一个有 deadline 的 context</td>\n</tr>\n<tr>\n<td>WithTimeout</td>\n<td>函数</td>\n<td>创建一个有 timeout 的 context</td>\n</tr>\n<tr>\n<td>WithValue</td>\n<td>函数</td>\n<td>创建一个存储 k-v 对的 context</td>\n</tr>\n</tbody></table>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a><strong>context</strong></h3><p>定义4个方法，都是幂等，也就是多次执行返回的结果一致。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Context <span class=\"hljs-keyword\">interface</span> &#123;<br>\t<span class=\"hljs-comment\">// 返回context是否会被取消以及自动取消的时间</span><br>\tDeadline() (deadline time.Time, ok <span class=\"hljs-type\">bool</span>)<br><br>\t<span class=\"hljs-comment\">//context被取消或deadline的时候，返回一个关闭的chan</span><br>\tDone() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br>\t<span class=\"hljs-comment\">//Done之后，返回context的原因</span><br>\tErr() <span class=\"hljs-type\">error</span><br><br>\t<span class=\"hljs-comment\">//获取key对应的alue</span><br>\tValue(key any) any<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"canceler\"><a href=\"#canceler\" class=\"headerlink\" title=\"canceler\"></a><strong>canceler</strong></h3><p>说明context是可以取消的。</p>\n<ul>\n<li>“取消”操作应该是建议性，而非强制性</li>\n</ul>\n<p>caller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。</p>\n<ul>\n<li>“取消”操作应该可传递</li>\n</ul>\n<p>“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，<code>Done()</code> 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> canceler <span class=\"hljs-keyword\">interface</span> &#123;<br>\tcancel(removeFromParent <span class=\"hljs-type\">bool</span>, err <span class=\"hljs-type\">error</span>)<br>\tDone() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h3 id=\"emptyCtx\"><a href=\"#emptyCtx\" class=\"headerlink\" title=\"emptyCtx\"></a>emptyCtx</h3><p>它被包装成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> (<br>    <span class=\"hljs-comment\">//BackGround返回一个非空的context，且绝不会被取消，没有值和取消时间。通常用在main函数、初始化和测试中或者作为输入请求的高context</span><br><span class=\"hljs-comment\">// Background returns a non-nil, empty Context. It is never canceled, has no</span><br><span class=\"hljs-comment\">// values, and has no deadline. It is typically used by the main function,</span><br><span class=\"hljs-comment\">// initialization, and tests, and as the top-level Context for incoming</span><br><span class=\"hljs-comment\">// requests.</span><br>\tbackground = <span class=\"hljs-built_in\">new</span>(emptyCtx)<br>    <span class=\"hljs-comment\">//TODO返回一个非空的context，代码可以使用context。当不清楚采用那种context或者不确定是都有用可以采用TODO，</span><br><span class=\"hljs-comment\">// TODO returns a non-nil, empty Context. Code should use context.TODO when</span><br><span class=\"hljs-comment\">// it&#x27;s unclear which Context to use or it is not yet available (because the</span><br><span class=\"hljs-comment\">// surrounding function has not yet been extended to accept a Context</span><br><span class=\"hljs-comment\">// parameter).</span><br>\ttodo       = <span class=\"hljs-built_in\">new</span>(emptyCtx)<br>)<br></code></pre></td></tr></table></figure>\n\n<p>background通常用在main函数中，作为context的根节点。</p>\n<h3 id=\"cancelCtx\"><a href=\"#cancelCtx\" class=\"headerlink\" title=\"cancelCtx\"></a>cancelCtx</h3><p>可取消的context，他可以确保父被取消的时候，其余的子context也会被取消。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//</span><br><span class=\"hljs-keyword\">type</span> cancelCtx <span class=\"hljs-keyword\">struct</span> &#123;<br>\tContext<br><br>\tmu       sync.Mutex            <span class=\"hljs-comment\">// protects following fields</span><br>\tdone     atomic.Value          <span class=\"hljs-comment\">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span><br>\tchildren <span class=\"hljs-keyword\">map</span>[canceler]<span class=\"hljs-keyword\">struct</span>&#123;&#125; <span class=\"hljs-comment\">// set to nil by the first cancel call</span><br>\terr      <span class=\"hljs-type\">error</span>                 <span class=\"hljs-comment\">// set to non-nil by the first cancel call</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中，value、Done、String、Err等均实现了canceler方法。</p>\n<p><code>Done</code>方法的实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *cancelCtx)</span></span> Done() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125; &#123;<br>\td := c.done.Load()<br>\t<span class=\"hljs-keyword\">if</span> d != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> d.(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t&#125;<br>\tc.mu.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> c.mu.Unlock()<br>\td = c.done.Load()<br>\t<span class=\"hljs-keyword\">if</span> d == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\td = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t\tc.done.Store(d)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> d.(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。</p>\n<p><code>value</code>方法实现:返回取消的key值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *cancelCtx)</span></span> Value(key any) any &#123;<br>\t<span class=\"hljs-keyword\">if</span> key == &amp;cancelCtxKey &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> c<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> value(c.Context, key)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>cancel</code>方法实现</p>\n<p>关闭所有的channel。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *cancelCtx)</span></span> cancel(removeFromParent <span class=\"hljs-type\">bool</span>, err <span class=\"hljs-type\">error</span>) &#123;<br>    <span class=\"hljs-comment\">//传入err</span><br>\t<span class=\"hljs-keyword\">if</span> err == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;context: internal error: missing cancel error&quot;</span>)<br>\t&#125;<br>\tc.mu.Lock()<br>    <span class=\"hljs-comment\">//判断是否已经取消，因为Done之后会返回取消原因，因此采用err的的方法判断是否取消</span><br>\t<span class=\"hljs-keyword\">if</span> c.err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.mu.Unlock()<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// already canceled</span><br>\t&#125;<br>\tc.err = err<br>\td, _ := c.done.Load().(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>    <span class=\"hljs-comment\">//关闭channel，通知其他协程</span><br>\t<span class=\"hljs-keyword\">if</span> d == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.done.Store(closedchan)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-built_in\">close</span>(d)<br>\t&#125;<br>    <span class=\"hljs-comment\">//遍历循环子context关闭</span><br>\t<span class=\"hljs-keyword\">for</span> child := <span class=\"hljs-keyword\">range</span> c.children &#123;<br>\t\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, err)<br>\t&#125;<br>    <span class=\"hljs-comment\">//子结点置空</span><br>\tc.children = <span class=\"hljs-literal\">nil</span><br>\tc.mu.Unlock()<br><br>    <span class=\"hljs-comment\">//如果为True，将自己从父节点删除</span><br>\t<span class=\"hljs-keyword\">if</span> removeFromParent &#123;<br>\t\tremoveChild(c.Context, c)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>创建可取消的cancel方法</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">WithCancel</span><span class=\"hljs-params\">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;<br>\t<span class=\"hljs-keyword\">if</span> parent == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;cannot create context from nil parent&quot;</span>)<br>\t&#125;<br>\tc := newCancelCtx(parent)<br>    <span class=\"hljs-comment\">//向上遍历可删除的父节点以及他的子结点进行删除</span><br>    <span class=\"hljs-comment\">//</span><br>\tpropagateCancel(parent, &amp;c)<br>    <span class=\"hljs-comment\">//返回context和func，其中c.cancel(true, Canceled)已经默认需要将自己从父节点中删除。</span><br>\t<span class=\"hljs-keyword\">return</span> &amp;c, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; c.cancel(<span class=\"hljs-literal\">true</span>, Canceled) &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// newCancelCtx returns an initialized cancelCtx.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newCancelCtx</span><span class=\"hljs-params\">(parent Context)</span></span> cancelCtx &#123;<br>\t<span class=\"hljs-keyword\">return</span> cancelCtx&#123;Context: parent&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>在调用方法的时候，默认调用的cancel方法中传入的true，而在在执行该方法的内部循环取消子结点的时候child调用的cancel传入的是false</strong></p>\n<ol>\n<li><p>可取消的cancel的方法中传入的为true,将child进行删除</p>\n<p><code>removeChild</code>方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeChild</span><span class=\"hljs-params\">(parent Context, child canceler)</span></span> &#123;<br><span class=\"hljs-comment\">//判断是否有可取消的父节点</span><br>\tp, ok := parentCancelCtx(parent)<br>\t<span class=\"hljs-comment\">//不存在，说明父节点已经取消</span><br>\t<span class=\"hljs-keyword\">if</span> !ok &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tp.mu.Lock()<br>\t<span class=\"hljs-comment\">//判断child节点是否存在，存在delete</span><br>\t<span class=\"hljs-keyword\">if</span> p.children != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">delete</span>(p.children, child)<br>\t&#125;<br>\tp.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>parentCancelCtx</code>方法，查看父节点如何递归遍历删除</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">parentCancelCtx</span><span class=\"hljs-params\">(parent Context)</span></span> (*cancelCtx, <span class=\"hljs-type\">bool</span>) &#123;<br>    <span class=\"hljs-comment\">//done为一个结构体管道</span><br>\tdone := parent.Done()<br>\t<span class=\"hljs-keyword\">if</span> done == closedchan || done == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>    <span class=\"hljs-comment\">//通过value值查找到匹配的parent.Done()</span><br>\tp, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)<br>\t<span class=\"hljs-keyword\">if</span> !ok &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>    <span class=\"hljs-comment\">//如果没有，*cancelCtx已被包装在一个自定义实现中，提供了一个不同的完成通道，在这种情况下，我们不应该绕过它</span><br>\tpdone, _ := p.done.Load().(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t<span class=\"hljs-keyword\">if</span> pdone != done &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> p, <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>例子：</p>\n<p>mcCtx，childCtx 和正常的 parentContext不一样，因为它是一个自定义的结构体类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Mycontext <span class=\"hljs-keyword\">struct</span> &#123;<br>\tcontext.Context<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tchildCancel := <span class=\"hljs-literal\">true</span><br>\tparentContext, parentFunc := context.WithCancel(context.Background())<br>\tmcCtx := Mycontext&#123;parentContext&#125;<br><br>\tchildCtx, childFunc := context.WithCancel(mcCtx)<br><br>\t<span class=\"hljs-keyword\">if</span> childCancel &#123;<br>\t\tchildFunc()<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tparentFunc()<br>\t&#125;<br><br>\tfmt.Println(parentContext) <span class=\"hljs-comment\">//context.Background.WithCancel</span><br>\tfmt.Println(mcCtx) <span class=\"hljs-comment\">//&#123;context.Background.WithCancel&#125;</span><br>\tfmt.Println(childCtx) <span class=\"hljs-comment\">//main.Mycontext.WithCancel</span><br><br>\ttime.Sleep(<span class=\"hljs-number\">10</span> * time.Second)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"timerCtx\"><a href=\"#timerCtx\" class=\"headerlink\" title=\"timerCtx\"></a>timerCtx</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> timerCtx <span class=\"hljs-keyword\">struct</span> &#123;<br>    <span class=\"hljs-comment\">//基于cancelCtx</span><br>\tcancelCtx<br>\ttimer *time.Timer <span class=\"hljs-comment\">// Under cancelCtx.mu.</span><br>    <span class=\"hljs-comment\">//设置Deadline的时间</span><br>\tdeadline time.Time<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *timerCtx)</span></span> Deadline() (deadline time.Time, ok <span class=\"hljs-type\">bool</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> c.deadline, <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *timerCtx)</span></span> String() <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> contextName(c.cancelCtx.Context) + <span class=\"hljs-string\">&quot;.WithDeadline(&quot;</span> +<br>\t\tc.deadline.String() + <span class=\"hljs-string\">&quot; [&quot;</span> +<br>\t\ttime.Until(c.deadline).String() + <span class=\"hljs-string\">&quot;])&quot;</span><br>&#125;<br><span class=\"hljs-comment\">//可取消的timeOut</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *timerCtx)</span></span> cancel(removeFromParent <span class=\"hljs-type\">bool</span>, err <span class=\"hljs-type\">error</span>) &#123;<br>    <span class=\"hljs-comment\">//调用cancelCtx的cancel方法</span><br>\tc.cancelCtx.cancel(<span class=\"hljs-literal\">false</span>, err)<br>\t<span class=\"hljs-keyword\">if</span> removeFromParent &#123;<br>\t\t<span class=\"hljs-comment\">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>        <span class=\"hljs-comment\">//移除子节点</span><br>\t\tremoveChild(c.cancelCtx.Context, c)<br>\t&#125;<br>\tc.mu.Lock()<br>    <span class=\"hljs-comment\">//判断c的时间，关掉定时器，不会再次取消</span><br>\t<span class=\"hljs-keyword\">if</span> c.timer != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.timer.Stop()<br>\t\tc.timer = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\tc.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>创建可取消的time context</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">func <span class=\"hljs-constructor\">WithTimeout(<span class=\"hljs-params\">parent</span> Context, <span class=\"hljs-params\">timeout</span> <span class=\"hljs-params\">time</span>.Duration)</span> (Context, CancelFunc) &#123;<br>\treturn <span class=\"hljs-constructor\">WithDeadline(<span class=\"hljs-params\">parent</span>, <span class=\"hljs-params\">time</span>.Now()</span>.<span class=\"hljs-constructor\">Add(<span class=\"hljs-params\">timeout</span>)</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>直接调用<code>WithDeadline</code>,添加超时时间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">WithDeadline</span><span class=\"hljs-params\">(parent Context, d time.Time)</span></span> (Context, CancelFunc) &#123;<br>    <span class=\"hljs-comment\">//判断父节点是否为空</span><br>\t<span class=\"hljs-keyword\">if</span> parent == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;cannot create context from nil parent&quot;</span>)<br>\t&#125;<br>    <span class=\"hljs-comment\">//获取当前parent的时间和结果。如果父节点超时，会自动调用cancel函数。</span><br>\t<span class=\"hljs-keyword\">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br>\t\t<span class=\"hljs-comment\">// The current deadline is already sooner than the new one.</span><br>\t\t<span class=\"hljs-keyword\">return</span> WithCancel(parent)<br>\t&#125;<br>\tc := &amp;timerCtx&#123;<br>\t\tcancelCtx: newCancelCtx(parent),<br>\t\tdeadline:  d,<br>\t&#125;<br>    <span class=\"hljs-comment\">//挂靠父节点</span><br>\tpropagateCancel(parent, c)<br>    <span class=\"hljs-comment\">//获取距离到达dealine的时间</span><br>\tdur := time.Until(d)<br>    <span class=\"hljs-comment\">//超时</span><br>\t<span class=\"hljs-keyword\">if</span> dur &lt;= <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-comment\">//取消并返回</span><br>\t\tc.cancel(<span class=\"hljs-literal\">true</span>, DeadlineExceeded) <span class=\"hljs-comment\">// deadline has already passed</span><br>        <br>\t\t<span class=\"hljs-keyword\">return</span> c, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; c.cancel(<span class=\"hljs-literal\">false</span>, Canceled) &#125;<br>\t&#125;<br>\tc.mu.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> c.mu.Unlock()<br>\t<span class=\"hljs-keyword\">if</span> c.err == <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-comment\">//在到达超时的时间的时候，执行取消命令</span><br>\t\tc.timer = time.AfterFunc(dur, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\tc.cancel(<span class=\"hljs-literal\">true</span>, DeadlineExceeded)<br>\t\t&#125;)<br>\t&#125;<br>    <span class=\"hljs-comment\">//是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型</span><br>    <span class=\"hljs-comment\">//返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。</span><br>\t<span class=\"hljs-keyword\">return</span> c, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; c.cancel(<span class=\"hljs-literal\">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"valueCtx\"><a href=\"#valueCtx\" class=\"headerlink\" title=\"valueCtx\"></a>valueCtx</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> valueCtx <span class=\"hljs-keyword\">struct</span> &#123;<br>\tContext<br>\tkey, val any<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"propagateCancel\"><a href=\"#propagateCancel\" class=\"headerlink\" title=\"propagateCancel\"></a>propagateCancel</h2><p>父节点时取消子节点</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// propagateCancel arranges for child to be canceled when parent is.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">propagateCancel</span><span class=\"hljs-params\">(parent Context, child canceler)</span></span> &#123;<br>    <span class=\"hljs-comment\">//父节点是空节点</span><br>\tdone := parent.Done()<br>\t<span class=\"hljs-keyword\">if</span> done == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// parent is never canceled</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t<span class=\"hljs-keyword\">case</span> &lt;-done:<br>\t\t<span class=\"hljs-comment\">// parent is already canceled</span><br>\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, parent.Err())<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t<span class=\"hljs-keyword\">default</span>:<br>\t&#125;<br><br>    <span class=\"hljs-comment\">//判断父节点是否可取消</span><br>\t<span class=\"hljs-keyword\">if</span> p, ok := parentCancelCtx(parent); ok &#123;<br>\t\tp.mu.Lock()<br>        <span class=\"hljs-comment\">// 父节点已经被取消了，本节点（子节点）也要取消</span><br>\t\t<span class=\"hljs-keyword\">if</span> p.err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// parent has already been canceled</span><br>\t\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, p.err)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> p.children == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tp.children = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[canceler]<span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t\t\t&#125;\t<br>            <span class=\"hljs-comment\">//挂到父节点</span><br>\t\t\tp.children[child] = <span class=\"hljs-keyword\">struct</span>&#123;&#125;&#123;&#125;<br>\t\t&#125;<br>\t\tp.mu.Unlock()<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">//没有找到可取消的父节点</span><br>\t\tatomic.AddInt32(&amp;goroutines, +<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-comment\">//重新启动一个新协程，监控父节点和子节点</span><br>\t\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">case</span> &lt;-parent.Done():<br>\t\t\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, parent.Err())<br>\t\t\t<span class=\"hljs-keyword\">case</span> &lt;-child.Done():<br>\t\t\t&#125;<br>\t\t&#125;()<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"传递共享数据\"><a href=\"#传递共享数据\" class=\"headerlink\" title=\"传递共享数据\"></a>传递共享数据</h2><p>通常使用WithValue()的方法共享数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx := context.Background()<br>\tprocess(ctx) <span class=\"hljs-comment\">//process over. no trace_id</span><br><br>\tctx = context.WithValue(ctx, <span class=\"hljs-string\">&quot;traceId&quot;</span>, <span class=\"hljs-string\">&quot;qwe-2011&quot;</span>)<br>\tprocess(ctx)<span class=\"hljs-comment\">//process over,trace_id=qwe-2011</span><br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>\ttraceID, ok := ctx.Value(<span class=\"hljs-string\">&quot;traceId&quot;</span>).(<span class=\"hljs-type\">string</span>)<br>\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;process over,trace_id=%s\\n&quot;</span>, traceID)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;process over. no trace_id\\n&quot;</span>)<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"取消goroutine-amp-防止goroutine泄露\"><a href=\"#取消goroutine-amp-防止goroutine泄露\" class=\"headerlink\" title=\"取消goroutine&amp;防止goroutine泄露\"></a>取消goroutine&amp;防止goroutine泄露</h2><ol>\n<li><p>取消goroutine</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">work1</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...work1...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">work2</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...work2...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx, cancel := context.WithCancel(context.Background())<br>\t<span class=\"hljs-keyword\">go</span> work1(ctx)<br>\t<span class=\"hljs-keyword\">go</span> work2(ctx)<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\tcancel()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...cancel...&quot;</span>)<br>\t<span class=\"hljs-keyword\">go</span> work2(ctx)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest$ go run main.go <br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...cancel...<br>...over...<br></code></pre></td></tr></table></figure></li>\n<li><p>防止goroutine泄露</p>\n</li>\n</ol>\n<h1 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h1><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/11007503.html\">深度解密Go语言之context</a></p>\n","site":{"data":{}},"wordcount":10097,"excerpt":"","more":"<p>go:1.18.5</p>\n<h1 id=\"context包架构布局\"><a href=\"#context包架构布局\" class=\"headerlink\" title=\"context包架构布局\"></a>context包架构布局</h1><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Context</td>\n<td>接口</td>\n<td>定义了 Context 接口的四个方法</td>\n</tr>\n<tr>\n<td>emptyCtx</td>\n<td>结构体</td>\n<td>实现了 Context 接口，它其实是个空的 context</td>\n</tr>\n<tr>\n<td>CancelFunc</td>\n<td>函数</td>\n<td>取消函数</td>\n</tr>\n<tr>\n<td>canceler</td>\n<td>接口</td>\n<td>context 取消接口，定义了两个方法</td>\n</tr>\n<tr>\n<td>cancelCtx</td>\n<td>结构体</td>\n<td>可以被取消</td>\n</tr>\n<tr>\n<td>timerCtx</td>\n<td>结构体</td>\n<td>超时会被取消</td>\n</tr>\n<tr>\n<td>valueCtx</td>\n<td>结构体</td>\n<td>可以存储 k-v 对</td>\n</tr>\n<tr>\n<td>Background</td>\n<td>函数</td>\n<td>返回一个空的 context，常作为根 context</td>\n</tr>\n<tr>\n<td>TODO</td>\n<td>函数</td>\n<td>返回一个空的 context，常用于重构时期，没有合适的 context 可用</td>\n</tr>\n<tr>\n<td>WithCancel</td>\n<td>函数</td>\n<td>基于父 context，生成一个可以取消的 context</td>\n</tr>\n<tr>\n<td>newCancelCtx</td>\n<td>函数</td>\n<td>创建一个可取消的 context</td>\n</tr>\n<tr>\n<td>propagateCancel</td>\n<td>函数</td>\n<td>向下传递 context 节点间的取消关系</td>\n</tr>\n<tr>\n<td>parentCancelCtx</td>\n<td>函数</td>\n<td>找到第一个可取消的父节点</td>\n</tr>\n<tr>\n<td>removeChild</td>\n<td>函数</td>\n<td>去掉父节点的孩子节点</td>\n</tr>\n<tr>\n<td>init</td>\n<td>函数</td>\n<td>包初始化</td>\n</tr>\n<tr>\n<td>WithDeadline</td>\n<td>函数</td>\n<td>创建一个有 deadline 的 context</td>\n</tr>\n<tr>\n<td>WithTimeout</td>\n<td>函数</td>\n<td>创建一个有 timeout 的 context</td>\n</tr>\n<tr>\n<td>WithValue</td>\n<td>函数</td>\n<td>创建一个存储 k-v 对的 context</td>\n</tr>\n</tbody></table>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a><strong>context</strong></h3><p>定义4个方法，都是幂等，也就是多次执行返回的结果一致。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Context <span class=\"hljs-keyword\">interface</span> &#123;<br>\t<span class=\"hljs-comment\">// 返回context是否会被取消以及自动取消的时间</span><br>\tDeadline() (deadline time.Time, ok <span class=\"hljs-type\">bool</span>)<br><br>\t<span class=\"hljs-comment\">//context被取消或deadline的时候，返回一个关闭的chan</span><br>\tDone() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br>\t<span class=\"hljs-comment\">//Done之后，返回context的原因</span><br>\tErr() <span class=\"hljs-type\">error</span><br><br>\t<span class=\"hljs-comment\">//获取key对应的alue</span><br>\tValue(key any) any<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"canceler\"><a href=\"#canceler\" class=\"headerlink\" title=\"canceler\"></a><strong>canceler</strong></h3><p>说明context是可以取消的。</p>\n<ul>\n<li>“取消”操作应该是建议性，而非强制性</li>\n</ul>\n<p>caller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。</p>\n<ul>\n<li>“取消”操作应该可传递</li>\n</ul>\n<p>“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，<code>Done()</code> 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> canceler <span class=\"hljs-keyword\">interface</span> &#123;<br>\tcancel(removeFromParent <span class=\"hljs-type\">bool</span>, err <span class=\"hljs-type\">error</span>)<br>\tDone() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h3 id=\"emptyCtx\"><a href=\"#emptyCtx\" class=\"headerlink\" title=\"emptyCtx\"></a>emptyCtx</h3><p>它被包装成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> (<br>    <span class=\"hljs-comment\">//BackGround返回一个非空的context，且绝不会被取消，没有值和取消时间。通常用在main函数、初始化和测试中或者作为输入请求的高context</span><br><span class=\"hljs-comment\">// Background returns a non-nil, empty Context. It is never canceled, has no</span><br><span class=\"hljs-comment\">// values, and has no deadline. It is typically used by the main function,</span><br><span class=\"hljs-comment\">// initialization, and tests, and as the top-level Context for incoming</span><br><span class=\"hljs-comment\">// requests.</span><br>\tbackground = <span class=\"hljs-built_in\">new</span>(emptyCtx)<br>    <span class=\"hljs-comment\">//TODO返回一个非空的context，代码可以使用context。当不清楚采用那种context或者不确定是都有用可以采用TODO，</span><br><span class=\"hljs-comment\">// TODO returns a non-nil, empty Context. Code should use context.TODO when</span><br><span class=\"hljs-comment\">// it&#x27;s unclear which Context to use or it is not yet available (because the</span><br><span class=\"hljs-comment\">// surrounding function has not yet been extended to accept a Context</span><br><span class=\"hljs-comment\">// parameter).</span><br>\ttodo       = <span class=\"hljs-built_in\">new</span>(emptyCtx)<br>)<br></code></pre></td></tr></table></figure>\n\n<p>background通常用在main函数中，作为context的根节点。</p>\n<h3 id=\"cancelCtx\"><a href=\"#cancelCtx\" class=\"headerlink\" title=\"cancelCtx\"></a>cancelCtx</h3><p>可取消的context，他可以确保父被取消的时候，其余的子context也会被取消。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//</span><br><span class=\"hljs-keyword\">type</span> cancelCtx <span class=\"hljs-keyword\">struct</span> &#123;<br>\tContext<br><br>\tmu       sync.Mutex            <span class=\"hljs-comment\">// protects following fields</span><br>\tdone     atomic.Value          <span class=\"hljs-comment\">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span><br>\tchildren <span class=\"hljs-keyword\">map</span>[canceler]<span class=\"hljs-keyword\">struct</span>&#123;&#125; <span class=\"hljs-comment\">// set to nil by the first cancel call</span><br>\terr      <span class=\"hljs-type\">error</span>                 <span class=\"hljs-comment\">// set to non-nil by the first cancel call</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中，value、Done、String、Err等均实现了canceler方法。</p>\n<p><code>Done</code>方法的实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *cancelCtx)</span></span> Done() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125; &#123;<br>\td := c.done.Load()<br>\t<span class=\"hljs-keyword\">if</span> d != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> d.(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t&#125;<br>\tc.mu.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> c.mu.Unlock()<br>\td = c.done.Load()<br>\t<span class=\"hljs-keyword\">if</span> d == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\td = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t\tc.done.Store(d)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> d.(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。</p>\n<p><code>value</code>方法实现:返回取消的key值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *cancelCtx)</span></span> Value(key any) any &#123;<br>\t<span class=\"hljs-keyword\">if</span> key == &amp;cancelCtxKey &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> c<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> value(c.Context, key)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>cancel</code>方法实现</p>\n<p>关闭所有的channel。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *cancelCtx)</span></span> cancel(removeFromParent <span class=\"hljs-type\">bool</span>, err <span class=\"hljs-type\">error</span>) &#123;<br>    <span class=\"hljs-comment\">//传入err</span><br>\t<span class=\"hljs-keyword\">if</span> err == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;context: internal error: missing cancel error&quot;</span>)<br>\t&#125;<br>\tc.mu.Lock()<br>    <span class=\"hljs-comment\">//判断是否已经取消，因为Done之后会返回取消原因，因此采用err的的方法判断是否取消</span><br>\t<span class=\"hljs-keyword\">if</span> c.err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.mu.Unlock()<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// already canceled</span><br>\t&#125;<br>\tc.err = err<br>\td, _ := c.done.Load().(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>    <span class=\"hljs-comment\">//关闭channel，通知其他协程</span><br>\t<span class=\"hljs-keyword\">if</span> d == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.done.Store(closedchan)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-built_in\">close</span>(d)<br>\t&#125;<br>    <span class=\"hljs-comment\">//遍历循环子context关闭</span><br>\t<span class=\"hljs-keyword\">for</span> child := <span class=\"hljs-keyword\">range</span> c.children &#123;<br>\t\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, err)<br>\t&#125;<br>    <span class=\"hljs-comment\">//子结点置空</span><br>\tc.children = <span class=\"hljs-literal\">nil</span><br>\tc.mu.Unlock()<br><br>    <span class=\"hljs-comment\">//如果为True，将自己从父节点删除</span><br>\t<span class=\"hljs-keyword\">if</span> removeFromParent &#123;<br>\t\tremoveChild(c.Context, c)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>创建可取消的cancel方法</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">WithCancel</span><span class=\"hljs-params\">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;<br>\t<span class=\"hljs-keyword\">if</span> parent == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;cannot create context from nil parent&quot;</span>)<br>\t&#125;<br>\tc := newCancelCtx(parent)<br>    <span class=\"hljs-comment\">//向上遍历可删除的父节点以及他的子结点进行删除</span><br>    <span class=\"hljs-comment\">//</span><br>\tpropagateCancel(parent, &amp;c)<br>    <span class=\"hljs-comment\">//返回context和func，其中c.cancel(true, Canceled)已经默认需要将自己从父节点中删除。</span><br>\t<span class=\"hljs-keyword\">return</span> &amp;c, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; c.cancel(<span class=\"hljs-literal\">true</span>, Canceled) &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// newCancelCtx returns an initialized cancelCtx.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newCancelCtx</span><span class=\"hljs-params\">(parent Context)</span></span> cancelCtx &#123;<br>\t<span class=\"hljs-keyword\">return</span> cancelCtx&#123;Context: parent&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>在调用方法的时候，默认调用的cancel方法中传入的true，而在在执行该方法的内部循环取消子结点的时候child调用的cancel传入的是false</strong></p>\n<ol>\n<li><p>可取消的cancel的方法中传入的为true,将child进行删除</p>\n<p><code>removeChild</code>方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeChild</span><span class=\"hljs-params\">(parent Context, child canceler)</span></span> &#123;<br><span class=\"hljs-comment\">//判断是否有可取消的父节点</span><br>\tp, ok := parentCancelCtx(parent)<br>\t<span class=\"hljs-comment\">//不存在，说明父节点已经取消</span><br>\t<span class=\"hljs-keyword\">if</span> !ok &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tp.mu.Lock()<br>\t<span class=\"hljs-comment\">//判断child节点是否存在，存在delete</span><br>\t<span class=\"hljs-keyword\">if</span> p.children != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">delete</span>(p.children, child)<br>\t&#125;<br>\tp.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>parentCancelCtx</code>方法，查看父节点如何递归遍历删除</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">parentCancelCtx</span><span class=\"hljs-params\">(parent Context)</span></span> (*cancelCtx, <span class=\"hljs-type\">bool</span>) &#123;<br>    <span class=\"hljs-comment\">//done为一个结构体管道</span><br>\tdone := parent.Done()<br>\t<span class=\"hljs-keyword\">if</span> done == closedchan || done == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>    <span class=\"hljs-comment\">//通过value值查找到匹配的parent.Done()</span><br>\tp, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)<br>\t<span class=\"hljs-keyword\">if</span> !ok &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>    <span class=\"hljs-comment\">//如果没有，*cancelCtx已被包装在一个自定义实现中，提供了一个不同的完成通道，在这种情况下，我们不应该绕过它</span><br>\tpdone, _ := p.done.Load().(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t<span class=\"hljs-keyword\">if</span> pdone != done &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> p, <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>例子：</p>\n<p>mcCtx，childCtx 和正常的 parentContext不一样，因为它是一个自定义的结构体类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Mycontext <span class=\"hljs-keyword\">struct</span> &#123;<br>\tcontext.Context<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tchildCancel := <span class=\"hljs-literal\">true</span><br>\tparentContext, parentFunc := context.WithCancel(context.Background())<br>\tmcCtx := Mycontext&#123;parentContext&#125;<br><br>\tchildCtx, childFunc := context.WithCancel(mcCtx)<br><br>\t<span class=\"hljs-keyword\">if</span> childCancel &#123;<br>\t\tchildFunc()<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tparentFunc()<br>\t&#125;<br><br>\tfmt.Println(parentContext) <span class=\"hljs-comment\">//context.Background.WithCancel</span><br>\tfmt.Println(mcCtx) <span class=\"hljs-comment\">//&#123;context.Background.WithCancel&#125;</span><br>\tfmt.Println(childCtx) <span class=\"hljs-comment\">//main.Mycontext.WithCancel</span><br><br>\ttime.Sleep(<span class=\"hljs-number\">10</span> * time.Second)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"timerCtx\"><a href=\"#timerCtx\" class=\"headerlink\" title=\"timerCtx\"></a>timerCtx</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> timerCtx <span class=\"hljs-keyword\">struct</span> &#123;<br>    <span class=\"hljs-comment\">//基于cancelCtx</span><br>\tcancelCtx<br>\ttimer *time.Timer <span class=\"hljs-comment\">// Under cancelCtx.mu.</span><br>    <span class=\"hljs-comment\">//设置Deadline的时间</span><br>\tdeadline time.Time<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *timerCtx)</span></span> Deadline() (deadline time.Time, ok <span class=\"hljs-type\">bool</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> c.deadline, <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *timerCtx)</span></span> String() <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> contextName(c.cancelCtx.Context) + <span class=\"hljs-string\">&quot;.WithDeadline(&quot;</span> +<br>\t\tc.deadline.String() + <span class=\"hljs-string\">&quot; [&quot;</span> +<br>\t\ttime.Until(c.deadline).String() + <span class=\"hljs-string\">&quot;])&quot;</span><br>&#125;<br><span class=\"hljs-comment\">//可取消的timeOut</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *timerCtx)</span></span> cancel(removeFromParent <span class=\"hljs-type\">bool</span>, err <span class=\"hljs-type\">error</span>) &#123;<br>    <span class=\"hljs-comment\">//调用cancelCtx的cancel方法</span><br>\tc.cancelCtx.cancel(<span class=\"hljs-literal\">false</span>, err)<br>\t<span class=\"hljs-keyword\">if</span> removeFromParent &#123;<br>\t\t<span class=\"hljs-comment\">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>        <span class=\"hljs-comment\">//移除子节点</span><br>\t\tremoveChild(c.cancelCtx.Context, c)<br>\t&#125;<br>\tc.mu.Lock()<br>    <span class=\"hljs-comment\">//判断c的时间，关掉定时器，不会再次取消</span><br>\t<span class=\"hljs-keyword\">if</span> c.timer != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.timer.Stop()<br>\t\tc.timer = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\tc.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>创建可取消的time context</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">func <span class=\"hljs-constructor\">WithTimeout(<span class=\"hljs-params\">parent</span> Context, <span class=\"hljs-params\">timeout</span> <span class=\"hljs-params\">time</span>.Duration)</span> (Context, CancelFunc) &#123;<br>\treturn <span class=\"hljs-constructor\">WithDeadline(<span class=\"hljs-params\">parent</span>, <span class=\"hljs-params\">time</span>.Now()</span>.<span class=\"hljs-constructor\">Add(<span class=\"hljs-params\">timeout</span>)</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>直接调用<code>WithDeadline</code>,添加超时时间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">WithDeadline</span><span class=\"hljs-params\">(parent Context, d time.Time)</span></span> (Context, CancelFunc) &#123;<br>    <span class=\"hljs-comment\">//判断父节点是否为空</span><br>\t<span class=\"hljs-keyword\">if</span> parent == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;cannot create context from nil parent&quot;</span>)<br>\t&#125;<br>    <span class=\"hljs-comment\">//获取当前parent的时间和结果。如果父节点超时，会自动调用cancel函数。</span><br>\t<span class=\"hljs-keyword\">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br>\t\t<span class=\"hljs-comment\">// The current deadline is already sooner than the new one.</span><br>\t\t<span class=\"hljs-keyword\">return</span> WithCancel(parent)<br>\t&#125;<br>\tc := &amp;timerCtx&#123;<br>\t\tcancelCtx: newCancelCtx(parent),<br>\t\tdeadline:  d,<br>\t&#125;<br>    <span class=\"hljs-comment\">//挂靠父节点</span><br>\tpropagateCancel(parent, c)<br>    <span class=\"hljs-comment\">//获取距离到达dealine的时间</span><br>\tdur := time.Until(d)<br>    <span class=\"hljs-comment\">//超时</span><br>\t<span class=\"hljs-keyword\">if</span> dur &lt;= <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-comment\">//取消并返回</span><br>\t\tc.cancel(<span class=\"hljs-literal\">true</span>, DeadlineExceeded) <span class=\"hljs-comment\">// deadline has already passed</span><br>        <br>\t\t<span class=\"hljs-keyword\">return</span> c, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; c.cancel(<span class=\"hljs-literal\">false</span>, Canceled) &#125;<br>\t&#125;<br>\tc.mu.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> c.mu.Unlock()<br>\t<span class=\"hljs-keyword\">if</span> c.err == <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-comment\">//在到达超时的时间的时候，执行取消命令</span><br>\t\tc.timer = time.AfterFunc(dur, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\tc.cancel(<span class=\"hljs-literal\">true</span>, DeadlineExceeded)<br>\t\t&#125;)<br>\t&#125;<br>    <span class=\"hljs-comment\">//是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型</span><br>    <span class=\"hljs-comment\">//返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。</span><br>\t<span class=\"hljs-keyword\">return</span> c, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123; c.cancel(<span class=\"hljs-literal\">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"valueCtx\"><a href=\"#valueCtx\" class=\"headerlink\" title=\"valueCtx\"></a>valueCtx</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> valueCtx <span class=\"hljs-keyword\">struct</span> &#123;<br>\tContext<br>\tkey, val any<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"propagateCancel\"><a href=\"#propagateCancel\" class=\"headerlink\" title=\"propagateCancel\"></a>propagateCancel</h2><p>父节点时取消子节点</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// propagateCancel arranges for child to be canceled when parent is.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">propagateCancel</span><span class=\"hljs-params\">(parent Context, child canceler)</span></span> &#123;<br>    <span class=\"hljs-comment\">//父节点是空节点</span><br>\tdone := parent.Done()<br>\t<span class=\"hljs-keyword\">if</span> done == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// parent is never canceled</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t<span class=\"hljs-keyword\">case</span> &lt;-done:<br>\t\t<span class=\"hljs-comment\">// parent is already canceled</span><br>\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, parent.Err())<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t<span class=\"hljs-keyword\">default</span>:<br>\t&#125;<br><br>    <span class=\"hljs-comment\">//判断父节点是否可取消</span><br>\t<span class=\"hljs-keyword\">if</span> p, ok := parentCancelCtx(parent); ok &#123;<br>\t\tp.mu.Lock()<br>        <span class=\"hljs-comment\">// 父节点已经被取消了，本节点（子节点）也要取消</span><br>\t\t<span class=\"hljs-keyword\">if</span> p.err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// parent has already been canceled</span><br>\t\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, p.err)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> p.children == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tp.children = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[canceler]<span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t\t\t&#125;\t<br>            <span class=\"hljs-comment\">//挂到父节点</span><br>\t\t\tp.children[child] = <span class=\"hljs-keyword\">struct</span>&#123;&#125;&#123;&#125;<br>\t\t&#125;<br>\t\tp.mu.Unlock()<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">//没有找到可取消的父节点</span><br>\t\tatomic.AddInt32(&amp;goroutines, +<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-comment\">//重新启动一个新协程，监控父节点和子节点</span><br>\t\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">case</span> &lt;-parent.Done():<br>\t\t\t\tchild.cancel(<span class=\"hljs-literal\">false</span>, parent.Err())<br>\t\t\t<span class=\"hljs-keyword\">case</span> &lt;-child.Done():<br>\t\t\t&#125;<br>\t\t&#125;()<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"传递共享数据\"><a href=\"#传递共享数据\" class=\"headerlink\" title=\"传递共享数据\"></a>传递共享数据</h2><p>通常使用WithValue()的方法共享数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx := context.Background()<br>\tprocess(ctx) <span class=\"hljs-comment\">//process over. no trace_id</span><br><br>\tctx = context.WithValue(ctx, <span class=\"hljs-string\">&quot;traceId&quot;</span>, <span class=\"hljs-string\">&quot;qwe-2011&quot;</span>)<br>\tprocess(ctx)<span class=\"hljs-comment\">//process over,trace_id=qwe-2011</span><br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>\ttraceID, ok := ctx.Value(<span class=\"hljs-string\">&quot;traceId&quot;</span>).(<span class=\"hljs-type\">string</span>)<br>\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;process over,trace_id=%s\\n&quot;</span>, traceID)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;process over. no trace_id\\n&quot;</span>)<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"取消goroutine-amp-防止goroutine泄露\"><a href=\"#取消goroutine-amp-防止goroutine泄露\" class=\"headerlink\" title=\"取消goroutine&amp;防止goroutine泄露\"></a>取消goroutine&amp;防止goroutine泄露</h2><ol>\n<li><p>取消goroutine</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">work1</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...work1...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">work2</span><span class=\"hljs-params\">(ctx context.Context)</span></span> &#123;<br>LABEL:<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br><br>\t\t<span class=\"hljs-keyword\">select</span> &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():<br>\t\t\t<span class=\"hljs-keyword\">break</span> LABEL<br>\t\t<span class=\"hljs-keyword\">default</span>:<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;...work2...&quot;</span>)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tctx, cancel := context.WithCancel(context.Background())<br>\t<span class=\"hljs-keyword\">go</span> work1(ctx)<br>\t<span class=\"hljs-keyword\">go</span> work2(ctx)<br><br>\ttime.Sleep(time.Second * <span class=\"hljs-number\">5</span>)<br>\tcancel()<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...cancel...&quot;</span>)<br>\t<span class=\"hljs-keyword\">go</span> work2(ctx)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;...over...&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest$ go run main.go <br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...work1...<br>...work2...<br>...work2...<br>...work1...<br>...cancel...<br>...over...<br></code></pre></td></tr></table></figure></li>\n<li><p>防止goroutine泄露</p>\n</li>\n</ol>\n<h1 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h1><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/11007503.html\">深度解密Go语言之context</a></p>\n"},{"title":"sync.Once 源码","_content":"\n# 概念\n\nGo 标准库提供的使函数只执行一次的实现，常应用于单例模式。\n\n# 原理\n\n保证变量仅被初始化一次，线程安全，支持并发。\n\n# 源码\n\n因为源码很少，所以就直接全部复制上来了。\n\n```go\n\npackage sync\n\nimport (\n\t\"sync/atomic\"\n)\n\ntype Once struct {\n    //标记是否完成初始化\n\tdone uint32\n    //互斥锁\n\tm    Mutex\n}\n// f 是对象初始化函数\nfunc (o *Once) Do(f func()) {\n\tif atomic.LoadUint32(&o.done) == 0 {\n\t\t// Outlined slow-path to allow inlining of the fast-path.\n\t\to.doSlow(f)\n\t}\n}\n\nfunc (o *Once) doSlow(f func()) {\n\to.m.Lock()\n\tdefer o.m.Unlock()\n\tif o.done == 0 {\n\t\tdefer atomic.StoreUint32(&o.done, 1)\n\t\tf()\n\t}\n}\n\n```\n\n","source":"_posts/golang/Golang包/sync.Once.md","raw":"---\ntitle: sync.Once 源码\ncategories: \n- [golang, Golang包]\ntags: sync\n---\n\n# 概念\n\nGo 标准库提供的使函数只执行一次的实现，常应用于单例模式。\n\n# 原理\n\n保证变量仅被初始化一次，线程安全，支持并发。\n\n# 源码\n\n因为源码很少，所以就直接全部复制上来了。\n\n```go\n\npackage sync\n\nimport (\n\t\"sync/atomic\"\n)\n\ntype Once struct {\n    //标记是否完成初始化\n\tdone uint32\n    //互斥锁\n\tm    Mutex\n}\n// f 是对象初始化函数\nfunc (o *Once) Do(f func()) {\n\tif atomic.LoadUint32(&o.done) == 0 {\n\t\t// Outlined slow-path to allow inlining of the fast-path.\n\t\to.doSlow(f)\n\t}\n}\n\nfunc (o *Once) doSlow(f func()) {\n\to.m.Lock()\n\tdefer o.m.Unlock()\n\tif o.done == 0 {\n\t\tdefer atomic.StoreUint32(&o.done, 1)\n\t\tf()\n\t}\n}\n\n```\n\n","slug":"golang/Golang包/sync.Once","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-09T03:24:25.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgb0033tpdo2aalbe2r","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>Go 标准库提供的使函数只执行一次的实现，常应用于单例模式。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>保证变量仅被初始化一次，线程安全，支持并发。</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>因为源码很少，所以就直接全部复制上来了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">package</span> sync<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;sync/atomic&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Once <span class=\"hljs-keyword\">struct</span> &#123;<br>    <span class=\"hljs-comment\">//标记是否完成初始化</span><br>\tdone <span class=\"hljs-type\">uint32</span><br>    <span class=\"hljs-comment\">//互斥锁</span><br>\tm    Mutex<br>&#125;<br><span class=\"hljs-comment\">// f 是对象初始化函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(o *Once)</span></span> Do(f <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> atomic.LoadUint32(&amp;o.done) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Outlined slow-path to allow inlining of the fast-path.</span><br>\t\to.doSlow(f)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(o *Once)</span></span> doSlow(f <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span>) &#123;<br>\to.m.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> o.m.Unlock()<br>\t<span class=\"hljs-keyword\">if</span> o.done == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">defer</span> atomic.StoreUint32(&amp;o.done, <span class=\"hljs-number\">1</span>)<br>\t\tf()<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":511,"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>Go 标准库提供的使函数只执行一次的实现，常应用于单例模式。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>保证变量仅被初始化一次，线程安全，支持并发。</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>因为源码很少，所以就直接全部复制上来了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">package</span> sync<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;sync/atomic&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Once <span class=\"hljs-keyword\">struct</span> &#123;<br>    <span class=\"hljs-comment\">//标记是否完成初始化</span><br>\tdone <span class=\"hljs-type\">uint32</span><br>    <span class=\"hljs-comment\">//互斥锁</span><br>\tm    Mutex<br>&#125;<br><span class=\"hljs-comment\">// f 是对象初始化函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(o *Once)</span></span> Do(f <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> atomic.LoadUint32(&amp;o.done) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Outlined slow-path to allow inlining of the fast-path.</span><br>\t\to.doSlow(f)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(o *Once)</span></span> doSlow(f <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span>) &#123;<br>\to.m.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> o.m.Unlock()<br>\t<span class=\"hljs-keyword\">if</span> o.done == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">defer</span> atomic.StoreUint32(&amp;o.done, <span class=\"hljs-number\">1</span>)<br>\t\tf()<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"互斥锁-sync.Mutex","_content":"\n# 概念\n\ngo语言中的一种互斥锁，保证同步的一种工具。\n\n实现协程对互斥资源的访问，其中，`Lock()`用于争夺锁资源，`Unlock()`用于释放锁资源并唤醒等待队列中的协程。在正常的使用情况下（如代码所示），只有进入临界区的协程会执行`Unlock()`。因此，**同一时刻只有一个协程可以执行`Unlock()`方法**。\n\n# 作用\n\n- 避免多个线程在同一个时刻操作同一数据块。\n- 协调多个线程，避免在同一时刻执行同一个代码块\n\n# 用法\n\n```go\nvar mu sync.Mutex\nmu.Lock() // 加锁\n// 执行业务逻辑\nmu.Unlock() // 释放锁\n```\n\n# 原理\n\n## 数据结构\n\n```go\n//结构体\ntype Mutex struct {\n    //互斥锁\n\tstate int32\n\tsema  uint32\n}\n//常量\nconst (\n\tmutexLocked = 1 << iota // mutex is locked\n\tmutexWoken\n\tmutexStarving\n\tmutexWaiterShift = iota\n\n\tstarvationThresholdNs = 1e6\n)\n```\n\n**状态二进制表示**\n\n| 字段             | 十进制 | 二进制 | 名称     |\n| ---------------- | ------ | ------ | -------- |\n| mutexLocked      | 1      | 0001   | 加锁     |\n| mutexUnLocked    | 0      | 0000   | 未加锁   |\n| mutexWoken       | 2      | 0010   | 唤醒     |\n| mutexStarving    | 4      | 0100   | 饥饿     |\n| mutexWaiterShift | 3      | 0011   | 代表位移 |\n\n\n\n## 接口\n\n```\ntype Locker interface {\n\tLock()\n\tUnlock()\n}\n```\n\n### Lock\n\n1. 单协程获取锁，通过CAS把state状态从0设置成1，加锁成功后返回\n\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n    //CSA判断锁的状态，如果执行CAS把互斥锁状态从0设置成1，则加锁成功，返回\n\tif atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) {\n        //race检测\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// 存在多个线程，设置失败之后，表示存在冲突，执行该方式\n\tm.lockSlow()\n}\n```\n\n### lockSlow\n\n```go\nfunc (m *Mutex) lockSlow() {\n\tvar waitStartTime int64\n    //饥饿状态\n\tstarving := false\n    //唤醒状态\n\tawoke := false\n    //循环次数\n\titer := 0\n    //当前锁的状态\n\told := m.state\n    //循环\n\tfor {\n\t\t// Don't spin in starvation mode, ownership is handed off to waiters\n\t\t// so we won't be able to acquire the mutex anyway.\n        //不要在饥饿模式下旋转，所有权将移交给服务员，所以我门不再获得锁\n        //判断old&(0001|0100)==0001——》old&0101是否等于0001，则old只能为0001（加锁）等，不可能是被唤醒或者饥饿状态\n\t\tif old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) {\n\t\t\t// Active spinning makes sense.\n\t\t\t// Try to set mutexWoken flag to inform Unlock\n\t\t\t// to not wake other blocked goroutines.\n            //将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了\n\t\t\tif !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 &&\n\t\t\t\tatomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) {\n\t\t\t\tawoke = true\n\t\t\t}\n            //自主旋转\n\t\t\truntime_doSpin()\n\t\t\titer++\n            //更新锁的状态\n\t\t\told = m.state\n\t\t\tcontinue\n\t\t}\n        \n          // 到了这一步， state的状态可能是：\n          // 1. 锁还没有被释放，锁处于正常状态\n          // 2. 锁还没有被释放， 锁处于饥饿状态\n          // 3. 锁已经被释放， 锁处于正常状态\n          // 4. 锁已经被释放， 锁处于饥饿状态\n          //\n\t\tnew := old\n\t\t// Don't try to acquire starving mutex, new arriving goroutines must queue.\n        //获取不是饥饿锁状态，新到达的协程在队列中\n        //old&0100==0000\n\t\tif old&mutexStarving == 0 {\n\t\t\tnew |= mutexLocked\n\t\t}\n\t\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\t\tnew += 1 << mutexWaiterShift\n\t\t}\n\t\t// The current goroutine switches mutex to starvation mode.\n\t\t// But if the mutex is currently unlocked, don't do the switch.\n\t\t// Unlock expects that starving mutex has waiters, which will not\n\t\t// be true in this case.\n\t\tif starving && old&mutexLocked != 0 {\n\t\t\tnew |= mutexStarving\n\t\t}\n\t\tif awoke {\n\t\t\t// The goroutine has been woken from sleep,\n\t\t\t// so we need to reset the flag in either case.\n\t\t\tif new&mutexWoken == 0 {\n\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t}\n\t\t\tnew &^= mutexWoken\n\t\t}\n\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n\t\t\tif old&(mutexLocked|mutexStarving) == 0 {\n\t\t\t\tbreak // locked the mutex with CAS\n\t\t\t}\n\t\t\t// If we were already waiting before, queue at the front of the queue.\n\t\t\tqueueLifo := waitStartTime != 0\n\t\t\tif waitStartTime == 0 {\n\t\t\t\twaitStartTime = runtime_nanotime()\n\t\t\t}\n\t\t\truntime_SemacquireMutex(&m.sema, queueLifo, 1)\n\t\t\tstarving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs\n\t\t\told = m.state\n\t\t\tif old&mutexStarving != 0 {\n\t\t\t\t// If this goroutine was woken and mutex is in starvation mode,\n\t\t\t\t// ownership was handed off to us but mutex is in somewhat\n\t\t\t\t// inconsistent state: mutexLocked is not set and we are still\n\t\t\t\t// accounted as waiter. Fix that.\n\t\t\t\tif old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {\n\t\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t\t}\n\t\t\t\tdelta := int32(mutexLocked - 1<<mutexWaiterShift)\n\t\t\t\tif !starving || old>>mutexWaiterShift == 1 {\n\t\t\t\t\t// Exit starvation mode.\n\t\t\t\t\t// Critical to do it here and consider wait time.\n\t\t\t\t\t// Starvation mode is so inefficient, that two goroutines\n\t\t\t\t\t// can go lock-step infinitely once they switch mutex\n\t\t\t\t\t// to starvation mode.\n\t\t\t\t\tdelta -= mutexStarving\n\t\t\t\t}\n\t\t\t\tatomic.AddInt32(&m.state, delta)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tawoke = true\n\t\t\titer = 0\n\t\t} else {\n\t\t\told = m.state\n\t\t}\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n}\n\n// Unlock unlocks m.\n// It is a run-time error if m is not locked on entry to Unlock.\n//\n// A locked Mutex is not associated with a particular goroutine.\n// It is allowed for one goroutine to lock a Mutex and then\n// arrange for another goroutine to unlock it.\nfunc (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(&m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}\n\n\n```\n\n\n\n### Unlock\n\n```go\nfunc (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(&m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}\n\nfunc (m *Mutex) unlockSlow(new int32) {\n\tif (new+mutexLocked)&mutexLocked == 0 {\n\t\tthrow(\"sync: unlock of unlocked mutex\")\n\t}\n\tif new&mutexStarving == 0 {\n\t\told := new\n\t\tfor {\n\t\t\t\n\t\t\tif old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Grab the right to wake someone.\n\t\t\tnew = (old - 1<<mutexWaiterShift) | mutexWoken\n\t\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n\t\t\t\truntime_Semrelease(&m.sema, false, 1)\n\t\t\t\treturn\n\t\t\t}\n\t\t\told = m.state\n\t\t}\n\t} else {\n\t\truntime_Semrelease(&m.sema, true, 1)\n\t}\n}\n\n```\n\n### unlockSlow\n\n```go\nfunc (m *Mutex) unlockSlow(new int32) {\n\tif (new+mutexLocked)&mutexLocked == 0 {\n\t\tthrow(\"sync: unlock of unlocked mutex\")\n\t}\n\tif new&mutexStarving == 0 {\n\t\told := new\n\t\tfor {\n\t\t\t// If there are no waiters or a goroutine has already\n\t\t\t// been woken or grabbed the lock, no need to wake anyone.\n\t\t\t// In starvation mode ownership is directly handed off from unlocking\n\t\t\t// goroutine to the next waiter. We are not part of this chain,\n\t\t\t// since we did not observe mutexStarving when we unlocked the mutex above.\n\t\t\t// So get off the way.\n\t\t\tif old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Grab the right to wake someone.\n\t\t\tnew = (old - 1<<mutexWaiterShift) | mutexWoken\n\t\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n\t\t\t\truntime_Semrelease(&m.sema, false, 1)\n\t\t\t\treturn\n\t\t\t}\n\t\t\told = m.state\n\t\t}\n\t} else {\n\t\t// Starving mode: handoff mutex ownership to the next waiter, and yield\n\t\t// our time slice so that the next waiter can start to run immediately.\n\t\t// Note: mutexLocked is not set, the waiter will set it after wakeup.\n\t\t// But mutex is still considered locked if mutexStarving is set,\n\t\t// so new coming goroutines won't acquire it.\n\t\truntime_Semrelease(&m.sema, true, 1)\n\t}\n}\n```\n\n\n\n### TryLock\n\n```go\nfunc (m *Mutex) TryLock() bool {\n\told := m.state\n\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\treturn false\n\t}\n\n\t// There may be a goroutine waiting for the mutex, but we are\n\t// running now and can try to grab the mutex before that\n\t// goroutine wakes up.\n\tif !atomic.CompareAndSwapInt32(&m.state, old, old|mutexLocked) {\n\t\treturn false\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n\treturn true\n}\n```\n\n\n\n# 参考链接\n\n[[Go并发] - Mutex源码解析  ](https://juejin.cn/post/6958979192574705701)          \n","source":"_posts/golang/Golang包/互斥锁-sync.Mutex.md","raw":"---\ntitle: 互斥锁-sync.Mutex\ncategories: \n- [golang, Golang包]\ntags: sync\n---\n\n# 概念\n\ngo语言中的一种互斥锁，保证同步的一种工具。\n\n实现协程对互斥资源的访问，其中，`Lock()`用于争夺锁资源，`Unlock()`用于释放锁资源并唤醒等待队列中的协程。在正常的使用情况下（如代码所示），只有进入临界区的协程会执行`Unlock()`。因此，**同一时刻只有一个协程可以执行`Unlock()`方法**。\n\n# 作用\n\n- 避免多个线程在同一个时刻操作同一数据块。\n- 协调多个线程，避免在同一时刻执行同一个代码块\n\n# 用法\n\n```go\nvar mu sync.Mutex\nmu.Lock() // 加锁\n// 执行业务逻辑\nmu.Unlock() // 释放锁\n```\n\n# 原理\n\n## 数据结构\n\n```go\n//结构体\ntype Mutex struct {\n    //互斥锁\n\tstate int32\n\tsema  uint32\n}\n//常量\nconst (\n\tmutexLocked = 1 << iota // mutex is locked\n\tmutexWoken\n\tmutexStarving\n\tmutexWaiterShift = iota\n\n\tstarvationThresholdNs = 1e6\n)\n```\n\n**状态二进制表示**\n\n| 字段             | 十进制 | 二进制 | 名称     |\n| ---------------- | ------ | ------ | -------- |\n| mutexLocked      | 1      | 0001   | 加锁     |\n| mutexUnLocked    | 0      | 0000   | 未加锁   |\n| mutexWoken       | 2      | 0010   | 唤醒     |\n| mutexStarving    | 4      | 0100   | 饥饿     |\n| mutexWaiterShift | 3      | 0011   | 代表位移 |\n\n\n\n## 接口\n\n```\ntype Locker interface {\n\tLock()\n\tUnlock()\n}\n```\n\n### Lock\n\n1. 单协程获取锁，通过CAS把state状态从0设置成1，加锁成功后返回\n\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n    //CSA判断锁的状态，如果执行CAS把互斥锁状态从0设置成1，则加锁成功，返回\n\tif atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) {\n        //race检测\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// 存在多个线程，设置失败之后，表示存在冲突，执行该方式\n\tm.lockSlow()\n}\n```\n\n### lockSlow\n\n```go\nfunc (m *Mutex) lockSlow() {\n\tvar waitStartTime int64\n    //饥饿状态\n\tstarving := false\n    //唤醒状态\n\tawoke := false\n    //循环次数\n\titer := 0\n    //当前锁的状态\n\told := m.state\n    //循环\n\tfor {\n\t\t// Don't spin in starvation mode, ownership is handed off to waiters\n\t\t// so we won't be able to acquire the mutex anyway.\n        //不要在饥饿模式下旋转，所有权将移交给服务员，所以我门不再获得锁\n        //判断old&(0001|0100)==0001——》old&0101是否等于0001，则old只能为0001（加锁）等，不可能是被唤醒或者饥饿状态\n\t\tif old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) {\n\t\t\t// Active spinning makes sense.\n\t\t\t// Try to set mutexWoken flag to inform Unlock\n\t\t\t// to not wake other blocked goroutines.\n            //将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了\n\t\t\tif !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 &&\n\t\t\t\tatomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) {\n\t\t\t\tawoke = true\n\t\t\t}\n            //自主旋转\n\t\t\truntime_doSpin()\n\t\t\titer++\n            //更新锁的状态\n\t\t\told = m.state\n\t\t\tcontinue\n\t\t}\n        \n          // 到了这一步， state的状态可能是：\n          // 1. 锁还没有被释放，锁处于正常状态\n          // 2. 锁还没有被释放， 锁处于饥饿状态\n          // 3. 锁已经被释放， 锁处于正常状态\n          // 4. 锁已经被释放， 锁处于饥饿状态\n          //\n\t\tnew := old\n\t\t// Don't try to acquire starving mutex, new arriving goroutines must queue.\n        //获取不是饥饿锁状态，新到达的协程在队列中\n        //old&0100==0000\n\t\tif old&mutexStarving == 0 {\n\t\t\tnew |= mutexLocked\n\t\t}\n\t\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\t\tnew += 1 << mutexWaiterShift\n\t\t}\n\t\t// The current goroutine switches mutex to starvation mode.\n\t\t// But if the mutex is currently unlocked, don't do the switch.\n\t\t// Unlock expects that starving mutex has waiters, which will not\n\t\t// be true in this case.\n\t\tif starving && old&mutexLocked != 0 {\n\t\t\tnew |= mutexStarving\n\t\t}\n\t\tif awoke {\n\t\t\t// The goroutine has been woken from sleep,\n\t\t\t// so we need to reset the flag in either case.\n\t\t\tif new&mutexWoken == 0 {\n\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t}\n\t\t\tnew &^= mutexWoken\n\t\t}\n\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n\t\t\tif old&(mutexLocked|mutexStarving) == 0 {\n\t\t\t\tbreak // locked the mutex with CAS\n\t\t\t}\n\t\t\t// If we were already waiting before, queue at the front of the queue.\n\t\t\tqueueLifo := waitStartTime != 0\n\t\t\tif waitStartTime == 0 {\n\t\t\t\twaitStartTime = runtime_nanotime()\n\t\t\t}\n\t\t\truntime_SemacquireMutex(&m.sema, queueLifo, 1)\n\t\t\tstarving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs\n\t\t\told = m.state\n\t\t\tif old&mutexStarving != 0 {\n\t\t\t\t// If this goroutine was woken and mutex is in starvation mode,\n\t\t\t\t// ownership was handed off to us but mutex is in somewhat\n\t\t\t\t// inconsistent state: mutexLocked is not set and we are still\n\t\t\t\t// accounted as waiter. Fix that.\n\t\t\t\tif old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {\n\t\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t\t}\n\t\t\t\tdelta := int32(mutexLocked - 1<<mutexWaiterShift)\n\t\t\t\tif !starving || old>>mutexWaiterShift == 1 {\n\t\t\t\t\t// Exit starvation mode.\n\t\t\t\t\t// Critical to do it here and consider wait time.\n\t\t\t\t\t// Starvation mode is so inefficient, that two goroutines\n\t\t\t\t\t// can go lock-step infinitely once they switch mutex\n\t\t\t\t\t// to starvation mode.\n\t\t\t\t\tdelta -= mutexStarving\n\t\t\t\t}\n\t\t\t\tatomic.AddInt32(&m.state, delta)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tawoke = true\n\t\t\titer = 0\n\t\t} else {\n\t\t\told = m.state\n\t\t}\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n}\n\n// Unlock unlocks m.\n// It is a run-time error if m is not locked on entry to Unlock.\n//\n// A locked Mutex is not associated with a particular goroutine.\n// It is allowed for one goroutine to lock a Mutex and then\n// arrange for another goroutine to unlock it.\nfunc (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(&m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}\n\n\n```\n\n\n\n### Unlock\n\n```go\nfunc (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(&m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}\n\nfunc (m *Mutex) unlockSlow(new int32) {\n\tif (new+mutexLocked)&mutexLocked == 0 {\n\t\tthrow(\"sync: unlock of unlocked mutex\")\n\t}\n\tif new&mutexStarving == 0 {\n\t\told := new\n\t\tfor {\n\t\t\t\n\t\t\tif old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Grab the right to wake someone.\n\t\t\tnew = (old - 1<<mutexWaiterShift) | mutexWoken\n\t\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n\t\t\t\truntime_Semrelease(&m.sema, false, 1)\n\t\t\t\treturn\n\t\t\t}\n\t\t\told = m.state\n\t\t}\n\t} else {\n\t\truntime_Semrelease(&m.sema, true, 1)\n\t}\n}\n\n```\n\n### unlockSlow\n\n```go\nfunc (m *Mutex) unlockSlow(new int32) {\n\tif (new+mutexLocked)&mutexLocked == 0 {\n\t\tthrow(\"sync: unlock of unlocked mutex\")\n\t}\n\tif new&mutexStarving == 0 {\n\t\told := new\n\t\tfor {\n\t\t\t// If there are no waiters or a goroutine has already\n\t\t\t// been woken or grabbed the lock, no need to wake anyone.\n\t\t\t// In starvation mode ownership is directly handed off from unlocking\n\t\t\t// goroutine to the next waiter. We are not part of this chain,\n\t\t\t// since we did not observe mutexStarving when we unlocked the mutex above.\n\t\t\t// So get off the way.\n\t\t\tif old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Grab the right to wake someone.\n\t\t\tnew = (old - 1<<mutexWaiterShift) | mutexWoken\n\t\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n\t\t\t\truntime_Semrelease(&m.sema, false, 1)\n\t\t\t\treturn\n\t\t\t}\n\t\t\told = m.state\n\t\t}\n\t} else {\n\t\t// Starving mode: handoff mutex ownership to the next waiter, and yield\n\t\t// our time slice so that the next waiter can start to run immediately.\n\t\t// Note: mutexLocked is not set, the waiter will set it after wakeup.\n\t\t// But mutex is still considered locked if mutexStarving is set,\n\t\t// so new coming goroutines won't acquire it.\n\t\truntime_Semrelease(&m.sema, true, 1)\n\t}\n}\n```\n\n\n\n### TryLock\n\n```go\nfunc (m *Mutex) TryLock() bool {\n\told := m.state\n\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\treturn false\n\t}\n\n\t// There may be a goroutine waiting for the mutex, but we are\n\t// running now and can try to grab the mutex before that\n\t// goroutine wakes up.\n\tif !atomic.CompareAndSwapInt32(&m.state, old, old|mutexLocked) {\n\t\treturn false\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n\treturn true\n}\n```\n\n\n\n# 参考链接\n\n[[Go并发] - Mutex源码解析  ](https://juejin.cn/post/6958979192574705701)          \n","slug":"golang/Golang包/互斥锁-sync.Mutex","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-14T01:48:59.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgc0036tpdo9bgp8d86","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>go语言中的一种互斥锁，保证同步的一种工具。</p>\n<p>实现协程对互斥资源的访问，其中，<code>Lock()</code>用于争夺锁资源，<code>Unlock()</code>用于释放锁资源并唤醒等待队列中的协程。在正常的使用情况下（如代码所示），只有进入临界区的协程会执行<code>Unlock()</code>。因此，<strong>同一时刻只有一个协程可以执行<code>Unlock()</code>方法</strong>。</p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><ul>\n<li>避免多个线程在同一个时刻操作同一数据块。</li>\n<li>协调多个线程，避免在同一时刻执行同一个代码块</li>\n</ul>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br>mu.Lock() <span class=\"hljs-comment\">// 加锁</span><br><span class=\"hljs-comment\">// 执行业务逻辑</span><br>mu.Unlock() <span class=\"hljs-comment\">// 释放锁</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">type</span> Mutex <span class=\"hljs-keyword\">struct</span> &#123;<br>    <span class=\"hljs-comment\">//互斥锁</span><br>\tstate <span class=\"hljs-type\">int32</span><br>\tsema  <span class=\"hljs-type\">uint32</span><br>&#125;<br><span class=\"hljs-comment\">//常量</span><br><span class=\"hljs-keyword\">const</span> (<br>\tmutexLocked = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// mutex is locked</span><br>\tmutexWoken<br>\tmutexStarving<br>\tmutexWaiterShift = <span class=\"hljs-literal\">iota</span><br><br>\tstarvationThresholdNs = <span class=\"hljs-number\">1e6</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>状态二进制表示</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>十进制</th>\n<th>二进制</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mutexLocked</td>\n<td>1</td>\n<td>0001</td>\n<td>加锁</td>\n</tr>\n<tr>\n<td>mutexUnLocked</td>\n<td>0</td>\n<td>0000</td>\n<td>未加锁</td>\n</tr>\n<tr>\n<td>mutexWoken</td>\n<td>2</td>\n<td>0010</td>\n<td>唤醒</td>\n</tr>\n<tr>\n<td>mutexStarving</td>\n<td>4</td>\n<td>0100</td>\n<td>饥饿</td>\n</tr>\n<tr>\n<td>mutexWaiterShift</td>\n<td>3</td>\n<td>0011</td>\n<td>代表位移</td>\n</tr>\n</tbody></table>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Locker</span> interface &#123;<br>\t<span class=\"hljs-type\">Lock</span>()<br>\t<span class=\"hljs-type\">Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><ol>\n<li>单协程获取锁，通过CAS把state状态从0设置成1，加锁成功后返回</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> Lock() &#123;<br>\t<span class=\"hljs-comment\">// Fast path: grab unlocked mutex.</span><br>    <span class=\"hljs-comment\">//CSA判断锁的状态，如果执行CAS把互斥锁状态从0设置成1，则加锁成功，返回</span><br>\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class=\"hljs-number\">0</span>, mutexLocked) &#123;<br>        <span class=\"hljs-comment\">//race检测</span><br>\t\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\t\trace.Acquire(unsafe.Pointer(m))<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 存在多个线程，设置失败之后，表示存在冲突，执行该方式</span><br>\tm.lockSlow()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lockSlow\"><a href=\"#lockSlow\" class=\"headerlink\" title=\"lockSlow\"></a>lockSlow</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> lockSlow() &#123;<br>\t<span class=\"hljs-keyword\">var</span> waitStartTime <span class=\"hljs-type\">int64</span><br>    <span class=\"hljs-comment\">//饥饿状态</span><br>\tstarving := <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\">//唤醒状态</span><br>\tawoke := <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\">//循环次数</span><br>\titer := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-comment\">//当前锁的状态</span><br>\told := m.state<br>    <span class=\"hljs-comment\">//循环</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span><br>\t\t<span class=\"hljs-comment\">// so we won&#x27;t be able to acquire the mutex anyway.</span><br>        <span class=\"hljs-comment\">//不要在饥饿模式下旋转，所有权将移交给服务员，所以我门不再获得锁</span><br>        <span class=\"hljs-comment\">//判断old&amp;(0001|0100)==0001——》old&amp;0101是否等于0001，则old只能为0001（加锁）等，不可能是被唤醒或者饥饿状态</span><br>\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;<br>\t\t\t<span class=\"hljs-comment\">// Active spinning makes sense.</span><br>\t\t\t<span class=\"hljs-comment\">// Try to set mutexWoken flag to inform Unlock</span><br>\t\t\t<span class=\"hljs-comment\">// to not wake other blocked goroutines.</span><br>            <span class=\"hljs-comment\">//将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class=\"hljs-number\">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class=\"hljs-number\">0</span> &amp;&amp;<br>\t\t\t\tatomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;<br>\t\t\t\tawoke = <span class=\"hljs-literal\">true</span><br>\t\t\t&#125;<br>            <span class=\"hljs-comment\">//自主旋转</span><br>\t\t\truntime_doSpin()<br>\t\t\titer++<br>            <span class=\"hljs-comment\">//更新锁的状态</span><br>\t\t\told = m.state<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>        <br>          <span class=\"hljs-comment\">// 到了这一步， state的状态可能是：</span><br>          <span class=\"hljs-comment\">// 1. 锁还没有被释放，锁处于正常状态</span><br>          <span class=\"hljs-comment\">// 2. 锁还没有被释放， 锁处于饥饿状态</span><br>          <span class=\"hljs-comment\">// 3. 锁已经被释放， 锁处于正常状态</span><br>          <span class=\"hljs-comment\">// 4. 锁已经被释放， 锁处于饥饿状态</span><br>          <span class=\"hljs-comment\">//</span><br>\t\t<span class=\"hljs-built_in\">new</span> := old<br>\t\t<span class=\"hljs-comment\">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span><br>        <span class=\"hljs-comment\">//获取不是饥饿锁状态，新到达的协程在队列中</span><br>        <span class=\"hljs-comment\">//old&amp;0100==0000</span><br>\t\t<span class=\"hljs-keyword\">if</span> old&amp;mutexStarving == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">new</span> |= mutexLocked<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">new</span> += <span class=\"hljs-number\">1</span> &lt;&lt; mutexWaiterShift<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// The current goroutine switches mutex to starvation mode.</span><br>\t\t<span class=\"hljs-comment\">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span><br>\t\t<span class=\"hljs-comment\">// Unlock expects that starving mutex has waiters, which will not</span><br>\t\t<span class=\"hljs-comment\">// be true in this case.</span><br>\t\t<span class=\"hljs-keyword\">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">new</span> |= mutexStarving<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> awoke &#123;<br>\t\t\t<span class=\"hljs-comment\">// The goroutine has been woken from sleep,</span><br>\t\t\t<span class=\"hljs-comment\">// so we need to reset the flag in either case.</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span>&amp;mutexWoken == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tthrow(<span class=\"hljs-string\">&quot;sync: inconsistent mutex state&quot;</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-built_in\">new</span> &amp;^= mutexWoken<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"hljs-built_in\">new</span>) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span> <span class=\"hljs-comment\">// locked the mutex with CAS</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// If we were already waiting before, queue at the front of the queue.</span><br>\t\t\tqueueLifo := waitStartTime != <span class=\"hljs-number\">0</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> waitStartTime == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\twaitStartTime = runtime_nanotime()<br>\t\t\t&#125;<br>\t\t\truntime_SemacquireMutex(&amp;m.sema, queueLifo, <span class=\"hljs-number\">1</span>)<br>\t\t\tstarving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs<br>\t\t\told = m.state<br>\t\t\t<span class=\"hljs-keyword\">if</span> old&amp;mutexStarving != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// If this goroutine was woken and mutex is in starvation mode,</span><br>\t\t\t\t<span class=\"hljs-comment\">// ownership was handed off to us but mutex is in somewhat</span><br>\t\t\t\t<span class=\"hljs-comment\">// inconsistent state: mutexLocked is not set and we are still</span><br>\t\t\t\t<span class=\"hljs-comment\">// accounted as waiter. Fix that.</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexWoken) != <span class=\"hljs-number\">0</span> || old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\tthrow(<span class=\"hljs-string\">&quot;sync: inconsistent mutex state&quot;</span>)<br>\t\t\t\t&#125;<br>\t\t\t\tdelta := <span class=\"hljs-type\">int32</span>(mutexLocked - <span class=\"hljs-number\">1</span>&lt;&lt;mutexWaiterShift)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">// Exit starvation mode.</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// Critical to do it here and consider wait time.</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// Starvation mode is so inefficient, that two goroutines</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// can go lock-step infinitely once they switch mutex</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// to starvation mode.</span><br>\t\t\t\t\tdelta -= mutexStarving<br>\t\t\t\t&#125;<br>\t\t\t\tatomic.AddInt32(&amp;m.state, delta)<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t\tawoke = <span class=\"hljs-literal\">true</span><br>\t\t\titer = <span class=\"hljs-number\">0</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\told = m.state<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\trace.Acquire(unsafe.Pointer(m))<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// Unlock unlocks m.</span><br><span class=\"hljs-comment\">// It is a run-time error if m is not locked on entry to Unlock.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// A locked Mutex is not associated with a particular goroutine.</span><br><span class=\"hljs-comment\">// It is allowed for one goroutine to lock a Mutex and then</span><br><span class=\"hljs-comment\">// arrange for another goroutine to unlock it.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> Unlock() &#123;<br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\t_ = m.state<br>\t\trace.Release(unsafe.Pointer(m))<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Fast path: drop lock bit.</span><br>\t<span class=\"hljs-built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span> != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Outlined slow path to allow inlining the fast path.</span><br>\t\t<span class=\"hljs-comment\">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>\t\tm.unlockSlow(<span class=\"hljs-built_in\">new</span>)<br>\t&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Unlock\"><a href=\"#Unlock\" class=\"headerlink\" title=\"Unlock\"></a>Unlock</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> Unlock() &#123;<br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\t_ = m.state<br>\t\trace.Release(unsafe.Pointer(m))<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Fast path: drop lock bit.</span><br>\t<span class=\"hljs-built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span> != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Outlined slow path to allow inlining the fast path.</span><br>\t\t<span class=\"hljs-comment\">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>\t\tm.unlockSlow(<span class=\"hljs-built_in\">new</span>)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> unlockSlow(<span class=\"hljs-built_in\">new</span> <span class=\"hljs-type\">int32</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"hljs-number\">0</span> &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span>&amp;mutexStarving == <span class=\"hljs-number\">0</span> &#123;<br>\t\told := <span class=\"hljs-built_in\">new</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<br>\t\t\t<span class=\"hljs-keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// Grab the right to wake someone.</span><br>\t\t\t<span class=\"hljs-built_in\">new</span> = (old - <span class=\"hljs-number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br>\t\t\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"hljs-built_in\">new</span>) &#123;<br>\t\t\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\told = m.state<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">1</span>)<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"unlockSlow\"><a href=\"#unlockSlow\" class=\"headerlink\" title=\"unlockSlow\"></a>unlockSlow</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> unlockSlow(<span class=\"hljs-built_in\">new</span> <span class=\"hljs-type\">int32</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"hljs-number\">0</span> &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span>&amp;mutexStarving == <span class=\"hljs-number\">0</span> &#123;<br>\t\told := <span class=\"hljs-built_in\">new</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// If there are no waiters or a goroutine has already</span><br>\t\t\t<span class=\"hljs-comment\">// been woken or grabbed the lock, no need to wake anyone.</span><br>\t\t\t<span class=\"hljs-comment\">// In starvation mode ownership is directly handed off from unlocking</span><br>\t\t\t<span class=\"hljs-comment\">// goroutine to the next waiter. We are not part of this chain,</span><br>\t\t\t<span class=\"hljs-comment\">// since we did not observe mutexStarving when we unlocked the mutex above.</span><br>\t\t\t<span class=\"hljs-comment\">// So get off the way.</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// Grab the right to wake someone.</span><br>\t\t\t<span class=\"hljs-built_in\">new</span> = (old - <span class=\"hljs-number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br>\t\t\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"hljs-built_in\">new</span>) &#123;<br>\t\t\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\told = m.state<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Starving mode: handoff mutex ownership to the next waiter, and yield</span><br>\t\t<span class=\"hljs-comment\">// our time slice so that the next waiter can start to run immediately.</span><br>\t\t<span class=\"hljs-comment\">// Note: mutexLocked is not set, the waiter will set it after wakeup.</span><br>\t\t<span class=\"hljs-comment\">// But mutex is still considered locked if mutexStarving is set,</span><br>\t\t<span class=\"hljs-comment\">// so new coming goroutines won&#x27;t acquire it.</span><br>\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">1</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TryLock\"><a href=\"#TryLock\" class=\"headerlink\" title=\"TryLock\"></a>TryLock</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> TryLock() <span class=\"hljs-type\">bool</span> &#123;<br>\told := m.state<br>\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// There may be a goroutine waiting for the mutex, but we are</span><br>\t<span class=\"hljs-comment\">// running now and can try to grab the mutex before that</span><br>\t<span class=\"hljs-comment\">// goroutine wakes up.</span><br>\t<span class=\"hljs-keyword\">if</span> !atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexLocked) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\trace.Acquire(unsafe.Pointer(m))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://juejin.cn/post/6958979192574705701\">[Go并发] - Mutex源码解析  </a>          </p>\n","site":{"data":{}},"wordcount":7170,"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>go语言中的一种互斥锁，保证同步的一种工具。</p>\n<p>实现协程对互斥资源的访问，其中，<code>Lock()</code>用于争夺锁资源，<code>Unlock()</code>用于释放锁资源并唤醒等待队列中的协程。在正常的使用情况下（如代码所示），只有进入临界区的协程会执行<code>Unlock()</code>。因此，<strong>同一时刻只有一个协程可以执行<code>Unlock()</code>方法</strong>。</p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><ul>\n<li>避免多个线程在同一个时刻操作同一数据块。</li>\n<li>协调多个线程，避免在同一时刻执行同一个代码块</li>\n</ul>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br>mu.Lock() <span class=\"hljs-comment\">// 加锁</span><br><span class=\"hljs-comment\">// 执行业务逻辑</span><br>mu.Unlock() <span class=\"hljs-comment\">// 释放锁</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">type</span> Mutex <span class=\"hljs-keyword\">struct</span> &#123;<br>    <span class=\"hljs-comment\">//互斥锁</span><br>\tstate <span class=\"hljs-type\">int32</span><br>\tsema  <span class=\"hljs-type\">uint32</span><br>&#125;<br><span class=\"hljs-comment\">//常量</span><br><span class=\"hljs-keyword\">const</span> (<br>\tmutexLocked = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// mutex is locked</span><br>\tmutexWoken<br>\tmutexStarving<br>\tmutexWaiterShift = <span class=\"hljs-literal\">iota</span><br><br>\tstarvationThresholdNs = <span class=\"hljs-number\">1e6</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>状态二进制表示</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>十进制</th>\n<th>二进制</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mutexLocked</td>\n<td>1</td>\n<td>0001</td>\n<td>加锁</td>\n</tr>\n<tr>\n<td>mutexUnLocked</td>\n<td>0</td>\n<td>0000</td>\n<td>未加锁</td>\n</tr>\n<tr>\n<td>mutexWoken</td>\n<td>2</td>\n<td>0010</td>\n<td>唤醒</td>\n</tr>\n<tr>\n<td>mutexStarving</td>\n<td>4</td>\n<td>0100</td>\n<td>饥饿</td>\n</tr>\n<tr>\n<td>mutexWaiterShift</td>\n<td>3</td>\n<td>0011</td>\n<td>代表位移</td>\n</tr>\n</tbody></table>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Locker</span> interface &#123;<br>\t<span class=\"hljs-type\">Lock</span>()<br>\t<span class=\"hljs-type\">Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><ol>\n<li>单协程获取锁，通过CAS把state状态从0设置成1，加锁成功后返回</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> Lock() &#123;<br>\t<span class=\"hljs-comment\">// Fast path: grab unlocked mutex.</span><br>    <span class=\"hljs-comment\">//CSA判断锁的状态，如果执行CAS把互斥锁状态从0设置成1，则加锁成功，返回</span><br>\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class=\"hljs-number\">0</span>, mutexLocked) &#123;<br>        <span class=\"hljs-comment\">//race检测</span><br>\t\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\t\trace.Acquire(unsafe.Pointer(m))<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 存在多个线程，设置失败之后，表示存在冲突，执行该方式</span><br>\tm.lockSlow()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lockSlow\"><a href=\"#lockSlow\" class=\"headerlink\" title=\"lockSlow\"></a>lockSlow</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> lockSlow() &#123;<br>\t<span class=\"hljs-keyword\">var</span> waitStartTime <span class=\"hljs-type\">int64</span><br>    <span class=\"hljs-comment\">//饥饿状态</span><br>\tstarving := <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\">//唤醒状态</span><br>\tawoke := <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\">//循环次数</span><br>\titer := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-comment\">//当前锁的状态</span><br>\told := m.state<br>    <span class=\"hljs-comment\">//循环</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span><br>\t\t<span class=\"hljs-comment\">// so we won&#x27;t be able to acquire the mutex anyway.</span><br>        <span class=\"hljs-comment\">//不要在饥饿模式下旋转，所有权将移交给服务员，所以我门不再获得锁</span><br>        <span class=\"hljs-comment\">//判断old&amp;(0001|0100)==0001——》old&amp;0101是否等于0001，则old只能为0001（加锁）等，不可能是被唤醒或者饥饿状态</span><br>\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;<br>\t\t\t<span class=\"hljs-comment\">// Active spinning makes sense.</span><br>\t\t\t<span class=\"hljs-comment\">// Try to set mutexWoken flag to inform Unlock</span><br>\t\t\t<span class=\"hljs-comment\">// to not wake other blocked goroutines.</span><br>            <span class=\"hljs-comment\">//将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class=\"hljs-number\">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class=\"hljs-number\">0</span> &amp;&amp;<br>\t\t\t\tatomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;<br>\t\t\t\tawoke = <span class=\"hljs-literal\">true</span><br>\t\t\t&#125;<br>            <span class=\"hljs-comment\">//自主旋转</span><br>\t\t\truntime_doSpin()<br>\t\t\titer++<br>            <span class=\"hljs-comment\">//更新锁的状态</span><br>\t\t\told = m.state<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>        <br>          <span class=\"hljs-comment\">// 到了这一步， state的状态可能是：</span><br>          <span class=\"hljs-comment\">// 1. 锁还没有被释放，锁处于正常状态</span><br>          <span class=\"hljs-comment\">// 2. 锁还没有被释放， 锁处于饥饿状态</span><br>          <span class=\"hljs-comment\">// 3. 锁已经被释放， 锁处于正常状态</span><br>          <span class=\"hljs-comment\">// 4. 锁已经被释放， 锁处于饥饿状态</span><br>          <span class=\"hljs-comment\">//</span><br>\t\t<span class=\"hljs-built_in\">new</span> := old<br>\t\t<span class=\"hljs-comment\">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span><br>        <span class=\"hljs-comment\">//获取不是饥饿锁状态，新到达的协程在队列中</span><br>        <span class=\"hljs-comment\">//old&amp;0100==0000</span><br>\t\t<span class=\"hljs-keyword\">if</span> old&amp;mutexStarving == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">new</span> |= mutexLocked<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">new</span> += <span class=\"hljs-number\">1</span> &lt;&lt; mutexWaiterShift<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// The current goroutine switches mutex to starvation mode.</span><br>\t\t<span class=\"hljs-comment\">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span><br>\t\t<span class=\"hljs-comment\">// Unlock expects that starving mutex has waiters, which will not</span><br>\t\t<span class=\"hljs-comment\">// be true in this case.</span><br>\t\t<span class=\"hljs-keyword\">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">new</span> |= mutexStarving<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> awoke &#123;<br>\t\t\t<span class=\"hljs-comment\">// The goroutine has been woken from sleep,</span><br>\t\t\t<span class=\"hljs-comment\">// so we need to reset the flag in either case.</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span>&amp;mutexWoken == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tthrow(<span class=\"hljs-string\">&quot;sync: inconsistent mutex state&quot;</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-built_in\">new</span> &amp;^= mutexWoken<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"hljs-built_in\">new</span>) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span> <span class=\"hljs-comment\">// locked the mutex with CAS</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// If we were already waiting before, queue at the front of the queue.</span><br>\t\t\tqueueLifo := waitStartTime != <span class=\"hljs-number\">0</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> waitStartTime == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\twaitStartTime = runtime_nanotime()<br>\t\t\t&#125;<br>\t\t\truntime_SemacquireMutex(&amp;m.sema, queueLifo, <span class=\"hljs-number\">1</span>)<br>\t\t\tstarving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs<br>\t\t\told = m.state<br>\t\t\t<span class=\"hljs-keyword\">if</span> old&amp;mutexStarving != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// If this goroutine was woken and mutex is in starvation mode,</span><br>\t\t\t\t<span class=\"hljs-comment\">// ownership was handed off to us but mutex is in somewhat</span><br>\t\t\t\t<span class=\"hljs-comment\">// inconsistent state: mutexLocked is not set and we are still</span><br>\t\t\t\t<span class=\"hljs-comment\">// accounted as waiter. Fix that.</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexWoken) != <span class=\"hljs-number\">0</span> || old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\tthrow(<span class=\"hljs-string\">&quot;sync: inconsistent mutex state&quot;</span>)<br>\t\t\t\t&#125;<br>\t\t\t\tdelta := <span class=\"hljs-type\">int32</span>(mutexLocked - <span class=\"hljs-number\">1</span>&lt;&lt;mutexWaiterShift)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">// Exit starvation mode.</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// Critical to do it here and consider wait time.</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// Starvation mode is so inefficient, that two goroutines</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// can go lock-step infinitely once they switch mutex</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// to starvation mode.</span><br>\t\t\t\t\tdelta -= mutexStarving<br>\t\t\t\t&#125;<br>\t\t\t\tatomic.AddInt32(&amp;m.state, delta)<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t\tawoke = <span class=\"hljs-literal\">true</span><br>\t\t\titer = <span class=\"hljs-number\">0</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\told = m.state<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\trace.Acquire(unsafe.Pointer(m))<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// Unlock unlocks m.</span><br><span class=\"hljs-comment\">// It is a run-time error if m is not locked on entry to Unlock.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// A locked Mutex is not associated with a particular goroutine.</span><br><span class=\"hljs-comment\">// It is allowed for one goroutine to lock a Mutex and then</span><br><span class=\"hljs-comment\">// arrange for another goroutine to unlock it.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> Unlock() &#123;<br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\t_ = m.state<br>\t\trace.Release(unsafe.Pointer(m))<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Fast path: drop lock bit.</span><br>\t<span class=\"hljs-built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span> != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Outlined slow path to allow inlining the fast path.</span><br>\t\t<span class=\"hljs-comment\">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>\t\tm.unlockSlow(<span class=\"hljs-built_in\">new</span>)<br>\t&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Unlock\"><a href=\"#Unlock\" class=\"headerlink\" title=\"Unlock\"></a>Unlock</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> Unlock() &#123;<br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\t_ = m.state<br>\t\trace.Release(unsafe.Pointer(m))<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Fast path: drop lock bit.</span><br>\t<span class=\"hljs-built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span> != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Outlined slow path to allow inlining the fast path.</span><br>\t\t<span class=\"hljs-comment\">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>\t\tm.unlockSlow(<span class=\"hljs-built_in\">new</span>)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> unlockSlow(<span class=\"hljs-built_in\">new</span> <span class=\"hljs-type\">int32</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"hljs-number\">0</span> &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span>&amp;mutexStarving == <span class=\"hljs-number\">0</span> &#123;<br>\t\told := <span class=\"hljs-built_in\">new</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<br>\t\t\t<span class=\"hljs-keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// Grab the right to wake someone.</span><br>\t\t\t<span class=\"hljs-built_in\">new</span> = (old - <span class=\"hljs-number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br>\t\t\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"hljs-built_in\">new</span>) &#123;<br>\t\t\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\told = m.state<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">1</span>)<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"unlockSlow\"><a href=\"#unlockSlow\" class=\"headerlink\" title=\"unlockSlow\"></a>unlockSlow</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> unlockSlow(<span class=\"hljs-built_in\">new</span> <span class=\"hljs-type\">int32</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"hljs-number\">0</span> &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">new</span>&amp;mutexStarving == <span class=\"hljs-number\">0</span> &#123;<br>\t\told := <span class=\"hljs-built_in\">new</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// If there are no waiters or a goroutine has already</span><br>\t\t\t<span class=\"hljs-comment\">// been woken or grabbed the lock, no need to wake anyone.</span><br>\t\t\t<span class=\"hljs-comment\">// In starvation mode ownership is directly handed off from unlocking</span><br>\t\t\t<span class=\"hljs-comment\">// goroutine to the next waiter. We are not part of this chain,</span><br>\t\t\t<span class=\"hljs-comment\">// since we did not observe mutexStarving when we unlocked the mutex above.</span><br>\t\t\t<span class=\"hljs-comment\">// So get off the way.</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"hljs-number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// Grab the right to wake someone.</span><br>\t\t\t<span class=\"hljs-built_in\">new</span> = (old - <span class=\"hljs-number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br>\t\t\t<span class=\"hljs-keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"hljs-built_in\">new</span>) &#123;<br>\t\t\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\told = m.state<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Starving mode: handoff mutex ownership to the next waiter, and yield</span><br>\t\t<span class=\"hljs-comment\">// our time slice so that the next waiter can start to run immediately.</span><br>\t\t<span class=\"hljs-comment\">// Note: mutexLocked is not set, the waiter will set it after wakeup.</span><br>\t\t<span class=\"hljs-comment\">// But mutex is still considered locked if mutexStarving is set,</span><br>\t\t<span class=\"hljs-comment\">// so new coming goroutines won&#x27;t acquire it.</span><br>\t\truntime_Semrelease(&amp;m.sema, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">1</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TryLock\"><a href=\"#TryLock\" class=\"headerlink\" title=\"TryLock\"></a>TryLock</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Mutex)</span></span> TryLock() <span class=\"hljs-type\">bool</span> &#123;<br>\told := m.state<br>\t<span class=\"hljs-keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// There may be a goroutine waiting for the mutex, but we are</span><br>\t<span class=\"hljs-comment\">// running now and can try to grab the mutex before that</span><br>\t<span class=\"hljs-comment\">// goroutine wakes up.</span><br>\t<span class=\"hljs-keyword\">if</span> !atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexLocked) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> race.Enabled &#123;<br>\t\trace.Acquire(unsafe.Pointer(m))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://juejin.cn/post/6958979192574705701\">[Go并发] - Mutex源码解析  </a>          </p>\n"},{"title":"(一) redis go学习——基础操作","_content":"\n\n\n# 概念\n\n### 优点\n\n- 性能高\n- 数据类型丰富\n- 原子\n- 丰富的特性\n\n\n\n# 连接\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-redis/redis\"\n)\n\nfunc main() {\n\tfmt.Println(\"Testing Golang Redis\")\n\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr:     \"172.17.0.4:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t})\n\n\tpong, err := client.Ping().Result()\n\tfmt.Println(pong, err)\n\n}\n\n```\n\n# 键值操作\n\n## GET&SET\n\n```go\n\terr = client.Set(\"name\", \"zhang\", 0).Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar val string\n\tval, err = client.Get(\"name\").Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"name的值为:\", val)\n```\n\n","source":"_posts/golang/Redis-go内容学习/redis.md","raw":"---\ntitle: (一) redis go学习——基础操作\ncategories: \n- [golang, redis-go学习]\ntags:\n- redis\n---\n\n\n\n# 概念\n\n### 优点\n\n- 性能高\n- 数据类型丰富\n- 原子\n- 丰富的特性\n\n\n\n# 连接\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-redis/redis\"\n)\n\nfunc main() {\n\tfmt.Println(\"Testing Golang Redis\")\n\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr:     \"172.17.0.4:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t})\n\n\tpong, err := client.Ping().Result()\n\tfmt.Println(pong, err)\n\n}\n\n```\n\n# 键值操作\n\n## GET&SET\n\n```go\n\terr = client.Set(\"name\", \"zhang\", 0).Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar val string\n\tval, err = client.Get(\"name\").Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"name的值为:\", val)\n```\n\n","slug":"golang/Redis-go内容学习/redis","published":1,"date":"2022-10-14T02:57:20.052Z","updated":"2022-10-14T06:42:06.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgd0039tpdodbe1fhru","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>性能高</li>\n<li>数据类型丰富</li>\n<li>原子</li>\n<li>丰富的特性</li>\n</ul>\n<h1 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/go-redis/redis&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Testing Golang Redis&quot;</span>)<br><br>\tclient := redis.NewClient(&amp;redis.Options&#123;<br>\t\tAddr:     <span class=\"hljs-string\">&quot;172.17.0.4:6379&quot;</span>,<br>\t\tPassword: <span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\tDB:       <span class=\"hljs-number\">0</span>,<br>\t&#125;)<br><br>\tpong, err := client.Ping().Result()<br>\tfmt.Println(pong, err)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"键值操作\"><a href=\"#键值操作\" class=\"headerlink\" title=\"键值操作\"></a>键值操作</h1><h2 id=\"GET-amp-SET\"><a href=\"#GET-amp-SET\" class=\"headerlink\" title=\"GET&amp;SET\"></a>GET&amp;SET</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = client.Set(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;zhang&quot;</span>, <span class=\"hljs-number\">0</span>).Err()<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br><span class=\"hljs-keyword\">var</span> val <span class=\"hljs-type\">string</span><br>val, err = client.Get(<span class=\"hljs-string\">&quot;name&quot;</span>).Result()<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br>fmt.Println(<span class=\"hljs-string\">&quot;name的值为:&quot;</span>, val)<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":603,"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>性能高</li>\n<li>数据类型丰富</li>\n<li>原子</li>\n<li>丰富的特性</li>\n</ul>\n<h1 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/go-redis/redis&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Testing Golang Redis&quot;</span>)<br><br>\tclient := redis.NewClient(&amp;redis.Options&#123;<br>\t\tAddr:     <span class=\"hljs-string\">&quot;172.17.0.4:6379&quot;</span>,<br>\t\tPassword: <span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\tDB:       <span class=\"hljs-number\">0</span>,<br>\t&#125;)<br><br>\tpong, err := client.Ping().Result()<br>\tfmt.Println(pong, err)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"键值操作\"><a href=\"#键值操作\" class=\"headerlink\" title=\"键值操作\"></a>键值操作</h1><h2 id=\"GET-amp-SET\"><a href=\"#GET-amp-SET\" class=\"headerlink\" title=\"GET&amp;SET\"></a>GET&amp;SET</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = client.Set(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;zhang&quot;</span>, <span class=\"hljs-number\">0</span>).Err()<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br><span class=\"hljs-keyword\">var</span> val <span class=\"hljs-type\">string</span><br>val, err = client.Get(<span class=\"hljs-string\">&quot;name&quot;</span>).Result()<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br>fmt.Println(<span class=\"hljs-string\">&quot;name的值为:&quot;</span>, val)<br></code></pre></td></tr></table></figure>\n\n"},{"title":"(一) redis","_content":"\nredis key是进制安全的，这也就是说可以使用任意的二进制队列作为键值。\n\n- 键值不建议过长，例如1024字节的键值就是不可取的，不仅是因为内存，也是因为在取值对比键值的时候的消耗。\n- 键值太短也不太建议。\n\n# 数据类型\n\n## 字符类型——strings\n\n字符作为最常见的类型，它也是极其有用的，例如抓取页面或者html框架内容等。\n\n采用`SET`、`GET`命令来设置键值内容，值的最大不得超过与512MB。\n\n```shell\n127.0.0.1:6379> set name zhangsan\nOK\n127.0.0.1:6379> get name\n\"zhangsan\"\n127.0.0.1:6379>\n```\n\nincr可以将字符串值转换为interge，并逐步递增。\n\n`MSET`、`MGET`可以设置多组和获取多组的键值内容。\n\n```shell\n127.0.0.1:6379> mset a 10 b 20 c 30\nOK\n127.0.0.1:6379> mget a b c\n1) \"10\"\n2) \"20\"\n3) \"30\"\n127.0.0.1:6379> incr a\n(integer) 11\n127.0.0.1:6379> mget a b c\n1) \"11\"\n2) \"20\"\n3) \"30\"\n\n```\n\n## 判断字符是否存在或是否插入成功\n\n```shell\n127.0.0.1:6379> set mykey hello\nOK\n#查看键值类型\n127.0.0.1:6379> type mykey\nstring\n#判断键是否成功，存在返回1，不存在返回0\n127.0.0.1:6379> EXISTS mykey\n(integer) 1\n127.0.0.1:6379> del mykey\n(integer) 1\n127.0.0.1:6379> EXISTS mykey\n(integer) 0\n\n\n```\n\n## 设置过期时间\n\n```shell\n127.0.0.1:6379> set key somvalue\nOK\n#设置过期时间为5秒\n127.0.0.1:6379> EXPIRE key 5\n(integer) 1\n127.0.0.1:6379> get key\n\"somvalue\"\n127.0.0.1:6379> get key\n(nil)\n#查看具体过期的时间倒计时时间\n127.0.0.1:6379> ttl key\n(integer) -2\n```\n\n","source":"_posts/golang/Redis-go内容学习/redis基础内容.md","raw":"---\ntitle: (一) redis\ncategories: \n- [golang, redis]\ntags:\n- redis\n---\n\nredis key是进制安全的，这也就是说可以使用任意的二进制队列作为键值。\n\n- 键值不建议过长，例如1024字节的键值就是不可取的，不仅是因为内存，也是因为在取值对比键值的时候的消耗。\n- 键值太短也不太建议。\n\n# 数据类型\n\n## 字符类型——strings\n\n字符作为最常见的类型，它也是极其有用的，例如抓取页面或者html框架内容等。\n\n采用`SET`、`GET`命令来设置键值内容，值的最大不得超过与512MB。\n\n```shell\n127.0.0.1:6379> set name zhangsan\nOK\n127.0.0.1:6379> get name\n\"zhangsan\"\n127.0.0.1:6379>\n```\n\nincr可以将字符串值转换为interge，并逐步递增。\n\n`MSET`、`MGET`可以设置多组和获取多组的键值内容。\n\n```shell\n127.0.0.1:6379> mset a 10 b 20 c 30\nOK\n127.0.0.1:6379> mget a b c\n1) \"10\"\n2) \"20\"\n3) \"30\"\n127.0.0.1:6379> incr a\n(integer) 11\n127.0.0.1:6379> mget a b c\n1) \"11\"\n2) \"20\"\n3) \"30\"\n\n```\n\n## 判断字符是否存在或是否插入成功\n\n```shell\n127.0.0.1:6379> set mykey hello\nOK\n#查看键值类型\n127.0.0.1:6379> type mykey\nstring\n#判断键是否成功，存在返回1，不存在返回0\n127.0.0.1:6379> EXISTS mykey\n(integer) 1\n127.0.0.1:6379> del mykey\n(integer) 1\n127.0.0.1:6379> EXISTS mykey\n(integer) 0\n\n\n```\n\n## 设置过期时间\n\n```shell\n127.0.0.1:6379> set key somvalue\nOK\n#设置过期时间为5秒\n127.0.0.1:6379> EXPIRE key 5\n(integer) 1\n127.0.0.1:6379> get key\n\"somvalue\"\n127.0.0.1:6379> get key\n(nil)\n#查看具体过期的时间倒计时时间\n127.0.0.1:6379> ttl key\n(integer) -2\n```\n\n","slug":"golang/Redis-go内容学习/redis基础内容","published":1,"date":"2022-10-14T06:44:44.631Z","updated":"2022-10-14T07:56:09.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsge003btpdodbqvh1e6","content":"<p>redis key是进制安全的，这也就是说可以使用任意的二进制队列作为键值。</p>\n<ul>\n<li>键值不建议过长，例如1024字节的键值就是不可取的，不仅是因为内存，也是因为在取值对比键值的时候的消耗。</li>\n<li>键值太短也不太建议。</li>\n</ul>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"字符类型——strings\"><a href=\"#字符类型——strings\" class=\"headerlink\" title=\"字符类型——strings\"></a>字符类型——strings</h2><p>字符作为最常见的类型，它也是极其有用的，例如抓取页面或者html框架内容等。</p>\n<p>采用<code>SET</code>、<code>GET</code>命令来设置键值内容，值的最大不得超过与512MB。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; set name zhangsan<br>OK<br>127.0.0.1:6379&gt; get name<br>&quot;zhangsan&quot;<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure>\n\n<p>incr可以将字符串值转换为interge，并逐步递增。</p>\n<p><code>MSET</code>、<code>MGET</code>可以设置多组和获取多组的键值内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; mset a 10 b 20 c 30<br>OK<br>127.0.0.1:6379&gt; mget a b c<br>1) &quot;10&quot;<br>2) &quot;20&quot;<br>3) &quot;30&quot;<br>127.0.0.1:6379&gt; incr a<br>(integer) 11<br>127.0.0.1:6379&gt; mget a b c<br>1) &quot;11&quot;<br>2) &quot;20&quot;<br>3) &quot;30&quot;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"判断字符是否存在或是否插入成功\"><a href=\"#判断字符是否存在或是否插入成功\" class=\"headerlink\" title=\"判断字符是否存在或是否插入成功\"></a>判断字符是否存在或是否插入成功</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; set mykey hello<br>OK<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看键值类型</span><br>127.0.0.1:6379&gt; type mykey<br>string<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">判断键是否成功，存在返回1，不存在返回0</span><br>127.0.0.1:6379&gt; EXISTS mykey<br>(integer) 1<br>127.0.0.1:6379&gt; del mykey<br>(integer) 1<br>127.0.0.1:6379&gt; EXISTS mykey<br>(integer) 0<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"设置过期时间\"><a href=\"#设置过期时间\" class=\"headerlink\" title=\"设置过期时间\"></a>设置过期时间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; set key somvalue<br>OK<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置过期时间为5秒</span><br>127.0.0.1:6379&gt; EXPIRE key 5<br>(integer) 1<br>127.0.0.1:6379&gt; get key<br>&quot;somvalue&quot;<br>127.0.0.1:6379&gt; get key<br>(nil)<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看具体过期的时间倒计时时间</span><br>127.0.0.1:6379&gt; ttl key<br>(integer) -2<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1043,"excerpt":"","more":"<p>redis key是进制安全的，这也就是说可以使用任意的二进制队列作为键值。</p>\n<ul>\n<li>键值不建议过长，例如1024字节的键值就是不可取的，不仅是因为内存，也是因为在取值对比键值的时候的消耗。</li>\n<li>键值太短也不太建议。</li>\n</ul>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"字符类型——strings\"><a href=\"#字符类型——strings\" class=\"headerlink\" title=\"字符类型——strings\"></a>字符类型——strings</h2><p>字符作为最常见的类型，它也是极其有用的，例如抓取页面或者html框架内容等。</p>\n<p>采用<code>SET</code>、<code>GET</code>命令来设置键值内容，值的最大不得超过与512MB。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; set name zhangsan<br>OK<br>127.0.0.1:6379&gt; get name<br>&quot;zhangsan&quot;<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure>\n\n<p>incr可以将字符串值转换为interge，并逐步递增。</p>\n<p><code>MSET</code>、<code>MGET</code>可以设置多组和获取多组的键值内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; mset a 10 b 20 c 30<br>OK<br>127.0.0.1:6379&gt; mget a b c<br>1) &quot;10&quot;<br>2) &quot;20&quot;<br>3) &quot;30&quot;<br>127.0.0.1:6379&gt; incr a<br>(integer) 11<br>127.0.0.1:6379&gt; mget a b c<br>1) &quot;11&quot;<br>2) &quot;20&quot;<br>3) &quot;30&quot;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"判断字符是否存在或是否插入成功\"><a href=\"#判断字符是否存在或是否插入成功\" class=\"headerlink\" title=\"判断字符是否存在或是否插入成功\"></a>判断字符是否存在或是否插入成功</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; set mykey hello<br>OK<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看键值类型</span><br>127.0.0.1:6379&gt; type mykey<br>string<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">判断键是否成功，存在返回1，不存在返回0</span><br>127.0.0.1:6379&gt; EXISTS mykey<br>(integer) 1<br>127.0.0.1:6379&gt; del mykey<br>(integer) 1<br>127.0.0.1:6379&gt; EXISTS mykey<br>(integer) 0<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"设置过期时间\"><a href=\"#设置过期时间\" class=\"headerlink\" title=\"设置过期时间\"></a>设置过期时间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">127.0.0.1:6379&gt; set key somvalue<br>OK<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置过期时间为5秒</span><br>127.0.0.1:6379&gt; EXPIRE key 5<br>(integer) 1<br>127.0.0.1:6379&gt; get key<br>&quot;somvalue&quot;<br>127.0.0.1:6379&gt; get key<br>(nil)<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看具体过期的时间倒计时时间</span><br>127.0.0.1:6379&gt; ttl key<br>(integer) -2<br></code></pre></td></tr></table></figure>\n\n"},{"title":"(一) RabbitMQ go教程——Hello World","_content":"\n使用GO RabbitMQ client\n\n在该示例中，会分别写一个生产者一个消费者，其中生产者发送简单的消息，消费者获取信息并打印。\n\n![python-one](Hello-world/python-one.png)\n\n# send.go\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//作为发送者，需要声明队列：向队列中推送消息\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n    //设置context包，context:可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\t//定义的队列是幂等的，消息内容是byte数组\n\tbody := \"Hello World\"\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"\",\n\t\tq.Name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\"[x] Sent %s\\n\", body)\n}\n\n```\n\n# receive.go\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//声明队列，先于发布者开始消费者，需要确保队列在消费的时候是存在的\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\t//var forever chan struct{}\n\tforever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n\n\n# 运行\n\n```shell\nubuntu@root:~/go/src/gotest/send$  go run send.go\n2022/09/20 15:28:31 [x] Sent Hello World\nubuntu@root:~/go/src/gotest/recevice$  go run receive.go\n2022/09/20 15:28:18  [*] Waiting for messages. To exit press CTRL+C\n2022/09/20 15:28:31 Receiced a message: Hello World\npanic: Receiced a message: Hello World\n......\n```\n\n消费者将打印通过RabbitMQ从发布者那里得到的消息。使用者将持续运行，等待消息（使用Ctrl-C停止它），因此请尝试从另一个终端运行发布者。\n\n如果要检查队列，可以使用`rabbitmqctl list_queues`\n\n查看[第二节](http://jane-lucky.github.io/2022/09/20/golang/RabbitMQ-go教程/Hello-world/)创建简单的工作队列\n","source":"_posts/golang/RabbitMQ-go教程/Hello-world.md","raw":"---\ntitle: (一) RabbitMQ go教程——Hello World\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n使用GO RabbitMQ client\n\n在该示例中，会分别写一个生产者一个消费者，其中生产者发送简单的消息，消费者获取信息并打印。\n\n![python-one](Hello-world/python-one.png)\n\n# send.go\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//作为发送者，需要声明队列：向队列中推送消息\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n    //设置context包，context:可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\t//定义的队列是幂等的，消息内容是byte数组\n\tbody := \"Hello World\"\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"\",\n\t\tq.Name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\"[x] Sent %s\\n\", body)\n}\n\n```\n\n# receive.go\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//声明队列，先于发布者开始消费者，需要确保队列在消费的时候是存在的\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\t//var forever chan struct{}\n\tforever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n\n\n# 运行\n\n```shell\nubuntu@root:~/go/src/gotest/send$  go run send.go\n2022/09/20 15:28:31 [x] Sent Hello World\nubuntu@root:~/go/src/gotest/recevice$  go run receive.go\n2022/09/20 15:28:18  [*] Waiting for messages. To exit press CTRL+C\n2022/09/20 15:28:31 Receiced a message: Hello World\npanic: Receiced a message: Hello World\n......\n```\n\n消费者将打印通过RabbitMQ从发布者那里得到的消息。使用者将持续运行，等待消息（使用Ctrl-C停止它），因此请尝试从另一个终端运行发布者。\n\n如果要检查队列，可以使用`rabbitmqctl list_queues`\n\n查看[第二节](http://jane-lucky.github.io/2022/09/20/golang/RabbitMQ-go教程/Hello-world/)创建简单的工作队列\n","slug":"golang/RabbitMQ-go教程/Hello-world","published":1,"date":"2022-09-20T07:31:15.283Z","updated":"2022-09-21T02:02:30.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgf003etpdo74lqge5b","content":"<p>使用GO RabbitMQ client</p>\n<p>在该示例中，会分别写一个生产者一个消费者，其中生产者发送简单的消息，消费者获取信息并打印。</p>\n<p><img src=\"/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/python-one.png\" alt=\"python-one\"></p>\n<h1 id=\"send-go\"><a href=\"#send-go\" class=\"headerlink\" title=\"send.go\"></a>send.go</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//作为发送者，需要声明队列：向队列中推送消息</span><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;hello&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>    <span class=\"hljs-comment\">//设置context包，context:可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\t<span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := <span class=\"hljs-string\">&quot;Hello World&quot;</span><br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\tq.Name,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType: <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tBody:        []<span class=\"hljs-type\">byte</span>(body),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Sent %s\\n&quot;</span>, body)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"receive-go\"><a href=\"#receive-go\" class=\"headerlink\" title=\"receive.go\"></a>receive.go</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//声明队列，先于发布者开始消费者，需要确保队列在消费的时候是存在的</span><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;hello&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//var forever chan struct&#123;&#125;</span><br>\tforever := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">bool</span>)<br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest/send$  go run send.go<br>2022/09/20 15:28:31 [x] Sent Hello World<br>ubuntu@root:~/go/src/gotest/recevice$  go run receive.go<br>2022/09/20 15:28:18  [*] Waiting for messages. To exit press CTRL+C<br>2022/09/20 15:28:31 Receiced a message: Hello World<br>panic: Receiced a message: Hello World<br>......<br></code></pre></td></tr></table></figure>\n\n<p>消费者将打印通过RabbitMQ从发布者那里得到的消息。使用者将持续运行，等待消息（使用Ctrl-C停止它），因此请尝试从另一个终端运行发布者。</p>\n<p>如果要检查队列，可以使用<code>rabbitmqctl list_queues</code></p>\n<p>查看<a href=\"http://jane-lucky.github.io/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/\">第二节</a>创建简单的工作队列</p>\n","site":{"data":{}},"wordcount":2800,"excerpt":"","more":"<p>使用GO RabbitMQ client</p>\n<p>在该示例中，会分别写一个生产者一个消费者，其中生产者发送简单的消息，消费者获取信息并打印。</p>\n<p><img src=\"/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/python-one.png\" alt=\"python-one\"></p>\n<h1 id=\"send-go\"><a href=\"#send-go\" class=\"headerlink\" title=\"send.go\"></a>send.go</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//作为发送者，需要声明队列：向队列中推送消息</span><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;hello&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>    <span class=\"hljs-comment\">//设置context包，context:可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\t<span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := <span class=\"hljs-string\">&quot;Hello World&quot;</span><br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\tq.Name,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType: <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tBody:        []<span class=\"hljs-type\">byte</span>(body),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Sent %s\\n&quot;</span>, body)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"receive-go\"><a href=\"#receive-go\" class=\"headerlink\" title=\"receive.go\"></a>receive.go</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//声明队列，先于发布者开始消费者，需要确保队列在消费的时候是存在的</span><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;hello&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//var forever chan struct&#123;&#125;</span><br>\tforever := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">bool</span>)<br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest/send$  go run send.go<br>2022/09/20 15:28:31 [x] Sent Hello World<br>ubuntu@root:~/go/src/gotest/recevice$  go run receive.go<br>2022/09/20 15:28:18  [*] Waiting for messages. To exit press CTRL+C<br>2022/09/20 15:28:31 Receiced a message: Hello World<br>panic: Receiced a message: Hello World<br>......<br></code></pre></td></tr></table></figure>\n\n<p>消费者将打印通过RabbitMQ从发布者那里得到的消息。使用者将持续运行，等待消息（使用Ctrl-C停止它），因此请尝试从另一个终端运行发布者。</p>\n<p>如果要检查队列，可以使用<code>rabbitmqctl list_queues</code></p>\n<p>查看<a href=\"http://jane-lucky.github.io/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/Hello-world/\">第二节</a>创建简单的工作队列</p>\n"},{"title":"(六) RabbitMQ go教程——远程过程调用（RPC）","_content":"\n在之前的学习中，有学习如何使用工作队列在多个 工人中使用时间消耗任务。\n\n但如果我们需要在远程电脑上运行一个函数同时等待结果，这就是另外一种方式，通常成为该方式为远程过程调用。\n\n使用RabbitMQ构建RPC系统：一个客户端和一个可伸缩（scalable）的RPC服务端,由于我们没有任何值得分发的耗时任务，我们将创建一个返回斐波那契数列的虚拟的RPC服务\n\n*尽管RPC在电脑中是一个十分常见的模型，但它十分重要。当程序员不知道函数调用是本地函数调用还是慢速 RPC 时，就会出现问题。像这样的混乱会导致不可预测的系统，并增加调试不必要的复杂性。滥用RPC可能会导致无法维护的意大利面条式代码而不是简化软件*\n\n# 回调队列\n\n在rabbitMQ上使用RPC是很简单的，客户端传递一个请求消息，服务端回复一个响应消息。为了可以接收到响应我们需要在请求中携带一个回调队列。\n\n```go\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // noWait\n  nil,   // arguments\n)\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nerr = ch.PublishWithContext(ctx,\n  \"\",          // exchange\n  \"rpc_queue\", // routing key\n  false,       // mandatory\n  false,       // immediate\n  amqp.Publishing{\n    ContentType:   \"text/plain\",\n    CorrelationId: corrId,\n    ReplyTo:       q.Name,\n    Body:          []byte(strconv.Itoa(n)),\n})\n```\n\n`CorrelationId`关联Id：在该队列中收到响应后，尚不清楚响应属于哪个请求。这个时候就该使用`correlation_id`这个属性了。针对每个请求我们将为其设置一个唯一值。随后，当我们在回调队列中收到消息时，我们将查看该属性，并基于这个属性将响应与请求进行匹配。如果我们看到未知的`correlation_id`值，则可以放心地丢弃该消息——它不属于我们的请求。\n\n# 代码\n\n`send.go`\n\n服务器代码非常简单：\n\n- 与往常一样，我们首先建立连接，通道并声明队列。\n- 我们可能要运行多个服务器进程。为了将负载平均分配给多个服务器，我们需要在通道上设置`prefetch`设置。\n- 我们使用`Channel.Consume`获取去队列，我们从队列中接收消息。然后，我们进入goroutine进行工作，并将响应发送回去。\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc randomString(l int) string {\n\tbytes := make([]byte, l)\n\tfor i := 0; i < l; i++ {\n\t\tbytes[i] = byte(randInt(65, 90))\n\t}\n\treturn string(bytes)\n}\nfunc randInt(min int, max int) int {\n\treturn min + rand.Intn(max-min)\n}\nfunc fibonacciRPC(n int) (res int, err error) {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"\",\n\t\tfalse,\n\t\tfalse,\n\t\ttrue,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tfailOnError(err, \"Faild to declare a queue\")\n\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tcorrId := randomString(32)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"\",          // exchange\n\t\t\"rpc_queue\", // routing key\n\t\tfalse,       // mandatory\n\t\tfalse,       // immediate\n\t\tamqp.Publishing{\n\t\t\tContentType:   \"text/plain\",\n\t\t\tCorrelationId: corrId,\n\t\t\tReplyTo:       q.Name,\n\t\t\tBody:          []byte(strconv.Itoa(n)),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\n\tfor d := range msgs {\n\t\tif corrId == d.CorrelationId {\n\t\t\tres, err = strconv.Atoi(string(d.Body))\n\t\t\tfailOnError(err, \"Failed to convert body to integer\")\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn\n}\nfunc main() {\n\trand.Seed(time.Now().UTC().UnixNano())\n\tn := bodyFrom(os.Args)\n\tlog.Printf(\"[x] Requesting fib(%d)\", n)\n\tres, err := fibonacciRPC(n)\n\tfailOnError(err, \"Failed to handle RPC request\")\n\n\tlog.Printf(\" [.] Got %d\", res)\n\n}\n\nfunc bodyFrom(args []string) int {\n\tvar s string\n\tif len(args) < 2 || os.Args[1] == \"\" {\n\t\ts = \"30\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\tn, err := strconv.Atoi(s)\n\tfailOnError(err, \"Failed to convert arg to integer\")\n\treturn n\n}\n\n```\n\n`receive.go`\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"strconv\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc fib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 1\n\t} else {\n\t\treturn fib(n-2) + fib(n-1)\n\t}\n}\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"rpc_queue\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\terr = ch.Qos(\n\t\t1,\n\t\t0,\n\t\tfalse,\n\t)\n\n\tfailOnError(err, \"Failed to set QoS\")\n\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\t//false,\n\t\tfalse, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\t\tdefer cancel()\n\t\tfor d := range msgs {\n\t\t\tn, err := strconv.Atoi(string(d.Body))\n\t\t\tfailOnError(err, \"Failed to convert body to integer\")\n\n\t\t\tlog.Printf(\"[.] fib*(%d)\", n)\n\t\t\tresponse := fib(n)\n\n\t\t\terr = ch.PublishWithContext(ctx,\n\t\t\t\t\"\",\n\t\t\t\td.ReplyTo,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tamqp.Publishing{\n\t\t\t\t\tContentType:   \"text/plain\",\n\t\t\t\t\tCorrelationId: d.CorrelationId,\n\t\t\t\t\tBody:          []byte(strconv.Itoa(response)),\n\t\t\t\t})\n\t\t\tfailOnError(err, \"Faild to publish a message\")\n\t\t\td.Ack(false)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Awaiting RPC requests\")\n\t<-forever\n}\n\n```\n\n## 运行结果\n\n```shell\nubuntu@root:~/go/src/gotest/send$ go run send.go \n2022/09/29 14:47:36 [x] Requesting fib(30)\n2022/09/29 14:47:36  [.] Got 832040\nubuntu@root:~/go/src/gotest/send$ go run send.go 3\n2022/09/29 14:47:46 [x] Requesting fib(3)\n2022/09/29 14:47:46  [.] Got 2\nubuntu@root:~/go/src/gotest/send$ go run send.go 5\n2022/09/29 14:47:54 [x] Requesting fib(5)\n2022/09/29 14:47:54  [.] Got 5\n\nubuntu@root:~/go/src/gotest/recevice$ go run receive.go \n2022/09/29 14:44:22  [*] Awaiting RPC requests\n2022/09/29 14:47:36 [.] fib*(30)\n2022/09/29 14:47:46 [.] fib*(3)\n2022/09/29 14:47:54 [.] fib*(5)\n```\n\n这里介绍的设计不是RPC服务的唯一可能的实现，但是它具有一些重要的优点：\n\n- 如果RPC服务器太慢，则可以通过运行另一台RPC服务器来进行扩展。尝试在新控制台中运行另一个`rpc_server.go`。\n- 在客户端，RPC只需要发送和接收一条消息。结果，RPC客户端只需要一个网络往返就可以处理单个RPC请求。\n\n我们的代码仍然非常简单，并且不会尝试解决更复杂（但很重要）的问题，例如：\n\n- 如果没有服务器在运行，客户端应如何反应？\n- 客户端是否应该为RPC设置某种超时时间？\n- 如果服务器发生故障并引发异常，是否应该将其转发给客户端？\n- 在处理之前防止无效的传入消息（例如检查边界，类型）。\n","source":"_posts/golang/RabbitMQ-go教程/RPC.md","raw":"---\ntitle: (六) RabbitMQ go教程——远程过程调用（RPC）\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n---\n\n在之前的学习中，有学习如何使用工作队列在多个 工人中使用时间消耗任务。\n\n但如果我们需要在远程电脑上运行一个函数同时等待结果，这就是另外一种方式，通常成为该方式为远程过程调用。\n\n使用RabbitMQ构建RPC系统：一个客户端和一个可伸缩（scalable）的RPC服务端,由于我们没有任何值得分发的耗时任务，我们将创建一个返回斐波那契数列的虚拟的RPC服务\n\n*尽管RPC在电脑中是一个十分常见的模型，但它十分重要。当程序员不知道函数调用是本地函数调用还是慢速 RPC 时，就会出现问题。像这样的混乱会导致不可预测的系统，并增加调试不必要的复杂性。滥用RPC可能会导致无法维护的意大利面条式代码而不是简化软件*\n\n# 回调队列\n\n在rabbitMQ上使用RPC是很简单的，客户端传递一个请求消息，服务端回复一个响应消息。为了可以接收到响应我们需要在请求中携带一个回调队列。\n\n```go\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // noWait\n  nil,   // arguments\n)\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nerr = ch.PublishWithContext(ctx,\n  \"\",          // exchange\n  \"rpc_queue\", // routing key\n  false,       // mandatory\n  false,       // immediate\n  amqp.Publishing{\n    ContentType:   \"text/plain\",\n    CorrelationId: corrId,\n    ReplyTo:       q.Name,\n    Body:          []byte(strconv.Itoa(n)),\n})\n```\n\n`CorrelationId`关联Id：在该队列中收到响应后，尚不清楚响应属于哪个请求。这个时候就该使用`correlation_id`这个属性了。针对每个请求我们将为其设置一个唯一值。随后，当我们在回调队列中收到消息时，我们将查看该属性，并基于这个属性将响应与请求进行匹配。如果我们看到未知的`correlation_id`值，则可以放心地丢弃该消息——它不属于我们的请求。\n\n# 代码\n\n`send.go`\n\n服务器代码非常简单：\n\n- 与往常一样，我们首先建立连接，通道并声明队列。\n- 我们可能要运行多个服务器进程。为了将负载平均分配给多个服务器，我们需要在通道上设置`prefetch`设置。\n- 我们使用`Channel.Consume`获取去队列，我们从队列中接收消息。然后，我们进入goroutine进行工作，并将响应发送回去。\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc randomString(l int) string {\n\tbytes := make([]byte, l)\n\tfor i := 0; i < l; i++ {\n\t\tbytes[i] = byte(randInt(65, 90))\n\t}\n\treturn string(bytes)\n}\nfunc randInt(min int, max int) int {\n\treturn min + rand.Intn(max-min)\n}\nfunc fibonacciRPC(n int) (res int, err error) {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"\",\n\t\tfalse,\n\t\tfalse,\n\t\ttrue,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tfailOnError(err, \"Faild to declare a queue\")\n\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tcorrId := randomString(32)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"\",          // exchange\n\t\t\"rpc_queue\", // routing key\n\t\tfalse,       // mandatory\n\t\tfalse,       // immediate\n\t\tamqp.Publishing{\n\t\t\tContentType:   \"text/plain\",\n\t\t\tCorrelationId: corrId,\n\t\t\tReplyTo:       q.Name,\n\t\t\tBody:          []byte(strconv.Itoa(n)),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\n\tfor d := range msgs {\n\t\tif corrId == d.CorrelationId {\n\t\t\tres, err = strconv.Atoi(string(d.Body))\n\t\t\tfailOnError(err, \"Failed to convert body to integer\")\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn\n}\nfunc main() {\n\trand.Seed(time.Now().UTC().UnixNano())\n\tn := bodyFrom(os.Args)\n\tlog.Printf(\"[x] Requesting fib(%d)\", n)\n\tres, err := fibonacciRPC(n)\n\tfailOnError(err, \"Failed to handle RPC request\")\n\n\tlog.Printf(\" [.] Got %d\", res)\n\n}\n\nfunc bodyFrom(args []string) int {\n\tvar s string\n\tif len(args) < 2 || os.Args[1] == \"\" {\n\t\ts = \"30\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\tn, err := strconv.Atoi(s)\n\tfailOnError(err, \"Failed to convert arg to integer\")\n\treturn n\n}\n\n```\n\n`receive.go`\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"strconv\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc fib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 1\n\t} else {\n\t\treturn fib(n-2) + fib(n-1)\n\t}\n}\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"rpc_queue\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\terr = ch.Qos(\n\t\t1,\n\t\t0,\n\t\tfalse,\n\t)\n\n\tfailOnError(err, \"Failed to set QoS\")\n\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\t//false,\n\t\tfalse, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\t\tdefer cancel()\n\t\tfor d := range msgs {\n\t\t\tn, err := strconv.Atoi(string(d.Body))\n\t\t\tfailOnError(err, \"Failed to convert body to integer\")\n\n\t\t\tlog.Printf(\"[.] fib*(%d)\", n)\n\t\t\tresponse := fib(n)\n\n\t\t\terr = ch.PublishWithContext(ctx,\n\t\t\t\t\"\",\n\t\t\t\td.ReplyTo,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tamqp.Publishing{\n\t\t\t\t\tContentType:   \"text/plain\",\n\t\t\t\t\tCorrelationId: d.CorrelationId,\n\t\t\t\t\tBody:          []byte(strconv.Itoa(response)),\n\t\t\t\t})\n\t\t\tfailOnError(err, \"Faild to publish a message\")\n\t\t\td.Ack(false)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Awaiting RPC requests\")\n\t<-forever\n}\n\n```\n\n## 运行结果\n\n```shell\nubuntu@root:~/go/src/gotest/send$ go run send.go \n2022/09/29 14:47:36 [x] Requesting fib(30)\n2022/09/29 14:47:36  [.] Got 832040\nubuntu@root:~/go/src/gotest/send$ go run send.go 3\n2022/09/29 14:47:46 [x] Requesting fib(3)\n2022/09/29 14:47:46  [.] Got 2\nubuntu@root:~/go/src/gotest/send$ go run send.go 5\n2022/09/29 14:47:54 [x] Requesting fib(5)\n2022/09/29 14:47:54  [.] Got 5\n\nubuntu@root:~/go/src/gotest/recevice$ go run receive.go \n2022/09/29 14:44:22  [*] Awaiting RPC requests\n2022/09/29 14:47:36 [.] fib*(30)\n2022/09/29 14:47:46 [.] fib*(3)\n2022/09/29 14:47:54 [.] fib*(5)\n```\n\n这里介绍的设计不是RPC服务的唯一可能的实现，但是它具有一些重要的优点：\n\n- 如果RPC服务器太慢，则可以通过运行另一台RPC服务器来进行扩展。尝试在新控制台中运行另一个`rpc_server.go`。\n- 在客户端，RPC只需要发送和接收一条消息。结果，RPC客户端只需要一个网络往返就可以处理单个RPC请求。\n\n我们的代码仍然非常简单，并且不会尝试解决更复杂（但很重要）的问题，例如：\n\n- 如果没有服务器在运行，客户端应如何反应？\n- 客户端是否应该为RPC设置某种超时时间？\n- 如果服务器发生故障并引发异常，是否应该将其转发给客户端？\n- 在处理之前防止无效的传入消息（例如检查边界，类型）。\n","slug":"golang/RabbitMQ-go教程/RPC","published":1,"date":"2022-09-28T01:25:55.266Z","updated":"2022-09-29T07:04:17.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgg003itpdo3x5mfphc","content":"<p>在之前的学习中，有学习如何使用工作队列在多个 工人中使用时间消耗任务。</p>\n<p>但如果我们需要在远程电脑上运行一个函数同时等待结果，这就是另外一种方式，通常成为该方式为远程过程调用。</p>\n<p>使用RabbitMQ构建RPC系统：一个客户端和一个可伸缩（scalable）的RPC服务端,由于我们没有任何值得分发的耗时任务，我们将创建一个返回斐波那契数列的虚拟的RPC服务</p>\n<p><em>尽管RPC在电脑中是一个十分常见的模型，但它十分重要。当程序员不知道函数调用是本地函数调用还是慢速 RPC 时，就会出现问题。像这样的混乱会导致不可预测的系统，并增加调试不必要的复杂性。滥用RPC可能会导致无法维护的意大利面条式代码而不是简化软件</em></p>\n<h1 id=\"回调队列\"><a href=\"#回调队列\" class=\"headerlink\" title=\"回调队列\"></a>回调队列</h1><p>在rabbitMQ上使用RPC是很简单的，客户端传递一个请求消息，服务端回复一个响应消息。为了可以接收到响应我们需要在请求中携带一个回调队列。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">q, err := ch.QueueDeclare(<br>  <span class=\"hljs-string\">&quot;&quot;</span>,    <span class=\"hljs-comment\">// name</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// durable</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// delete when unused</span><br>  <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// exclusive</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// noWait</span><br>  <span class=\"hljs-literal\">nil</span>,   <span class=\"hljs-comment\">// arguments</span><br>)<br><br>ctx, cancel := context.WithTimeout(context.Background(), <span class=\"hljs-number\">5</span>*time.Second)<br><span class=\"hljs-keyword\">defer</span> cancel()<br><br>err = ch.PublishWithContext(ctx,<br>  <span class=\"hljs-string\">&quot;&quot;</span>,          <span class=\"hljs-comment\">// exchange</span><br>  <span class=\"hljs-string\">&quot;rpc_queue&quot;</span>, <span class=\"hljs-comment\">// routing key</span><br>  <span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// mandatory</span><br>  <span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// immediate</span><br>  amqp.Publishing&#123;<br>    ContentType:   <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>    CorrelationId: corrId,<br>    ReplyTo:       q.Name,<br>    Body:          []<span class=\"hljs-type\">byte</span>(strconv.Itoa(n)),<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><code>CorrelationId</code>关联Id：在该队列中收到响应后，尚不清楚响应属于哪个请求。这个时候就该使用<code>correlation_id</code>这个属性了。针对每个请求我们将为其设置一个唯一值。随后，当我们在回调队列中收到消息时，我们将查看该属性，并基于这个属性将响应与请求进行匹配。如果我们看到未知的<code>correlation_id</code>值，则可以放心地丢弃该消息——它不属于我们的请求。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p><code>send.go</code></p>\n<p>服务器代码非常简单：</p>\n<ul>\n<li>与往常一样，我们首先建立连接，通道并声明队列。</li>\n<li>我们可能要运行多个服务器进程。为了将负载平均分配给多个服务器，我们需要在通道上设置<code>prefetch</code>设置。</li>\n<li>我们使用<code>Channel.Consume</code>获取去队列，我们从队列中接收消息。然后，我们进入goroutine进行工作，并将响应发送回去。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//</span><br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">randomString</span><span class=\"hljs-params\">(l <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\tbytes := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">byte</span>, l)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; l; i++ &#123;<br>\t\tbytes[i] = <span class=\"hljs-type\">byte</span>(randInt(<span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">90</span>))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(bytes)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">randInt</span><span class=\"hljs-params\">(min <span class=\"hljs-type\">int</span>, max <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> min + rand.Intn(max-min)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fibonacciRPC</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> (res <span class=\"hljs-type\">int</span>, err <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Faild to declare a queue&quot;</span>)<br><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\tcorrId := randomString(<span class=\"hljs-number\">32</span>)<br>\tctx, cancel := context.WithTimeout(context.Background(), <span class=\"hljs-number\">5</span>*time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,          <span class=\"hljs-comment\">// exchange</span><br>\t\t<span class=\"hljs-string\">&quot;rpc_queue&quot;</span>, <span class=\"hljs-comment\">// routing key</span><br>\t\t<span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// mandatory</span><br>\t\t<span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// immediate</span><br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType:   <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tCorrelationId: corrId,<br>\t\t\tReplyTo:       q.Name,<br>\t\t\tBody:          []<span class=\"hljs-type\">byte</span>(strconv.Itoa(n)),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> corrId == d.CorrelationId &#123;<br>\t\t\tres, err = strconv.Atoi(<span class=\"hljs-type\">string</span>(d.Body))<br>\t\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to convert body to integer&quot;</span>)<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\trand.Seed(time.Now().UTC().UnixNano())<br>\tn := bodyFrom(os.Args)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Requesting fib(%d)&quot;</span>, n)<br>\tres, err := fibonacciRPC(n)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to handle RPC request&quot;</span>)<br><br>\tlog.Printf(<span class=\"hljs-string\">&quot; [.] Got %d&quot;</span>, res)<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span> || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;30&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\tn, err := strconv.Atoi(s)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to convert arg to integer&quot;</span>)<br>\t<span class=\"hljs-keyword\">return</span> n<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>receive.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> fib(n<span class=\"hljs-number\">-2</span>) + fib(n<span class=\"hljs-number\">-1</span>)<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;rpc_queue&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\terr = ch.Qos(<br>\t\t<span class=\"hljs-number\">1</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t)<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to set QoS&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-comment\">//false,</span><br>\t\t<span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//ack</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\t<span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tn, err := strconv.Atoi(<span class=\"hljs-type\">string</span>(d.Body))<br>\t\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to convert body to integer&quot;</span>)<br><br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;[.] fib*(%d)&quot;</span>, n)<br>\t\t\tresponse := fib(n)<br><br>\t\t\terr = ch.PublishWithContext(ctx,<br>\t\t\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t\t\td.ReplyTo,<br>\t\t\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t\t\tamqp.Publishing&#123;<br>\t\t\t\t\tContentType:   <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\t\t\tCorrelationId: d.CorrelationId,<br>\t\t\t\t\tBody:          []<span class=\"hljs-type\">byte</span>(strconv.Itoa(response)),<br>\t\t\t\t&#125;)<br>\t\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Faild to publish a message&quot;</span>)<br>\t\t\td.Ack(<span class=\"hljs-literal\">false</span>)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Awaiting RPC requests&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest/send$ go run send.go <br>2022/09/29 14:47:36 [x] Requesting fib(30)<br>2022/09/29 14:47:36  [.] Got 832040<br>ubuntu@root:~/go/src/gotest/send$ go run send.go 3<br>2022/09/29 14:47:46 [x] Requesting fib(3)<br>2022/09/29 14:47:46  [.] Got 2<br>ubuntu@root:~/go/src/gotest/send$ go run send.go 5<br>2022/09/29 14:47:54 [x] Requesting fib(5)<br>2022/09/29 14:47:54  [.] Got 5<br><br>ubuntu@root:~/go/src/gotest/recevice$ go run receive.go <br>2022/09/29 14:44:22  [*] Awaiting RPC requests<br>2022/09/29 14:47:36 [.] fib*(30)<br>2022/09/29 14:47:46 [.] fib*(3)<br>2022/09/29 14:47:54 [.] fib*(5)<br></code></pre></td></tr></table></figure>\n\n<p>这里介绍的设计不是RPC服务的唯一可能的实现，但是它具有一些重要的优点：</p>\n<ul>\n<li>如果RPC服务器太慢，则可以通过运行另一台RPC服务器来进行扩展。尝试在新控制台中运行另一个<code>rpc_server.go</code>。</li>\n<li>在客户端，RPC只需要发送和接收一条消息。结果，RPC客户端只需要一个网络往返就可以处理单个RPC请求。</li>\n</ul>\n<p>我们的代码仍然非常简单，并且不会尝试解决更复杂（但很重要）的问题，例如：</p>\n<ul>\n<li>如果没有服务器在运行，客户端应如何反应？</li>\n<li>客户端是否应该为RPC设置某种超时时间？</li>\n<li>如果服务器发生故障并引发异常，是否应该将其转发给客户端？</li>\n<li>在处理之前防止无效的传入消息（例如检查边界，类型）。</li>\n</ul>\n","site":{"data":{}},"wordcount":6214,"excerpt":"","more":"<p>在之前的学习中，有学习如何使用工作队列在多个 工人中使用时间消耗任务。</p>\n<p>但如果我们需要在远程电脑上运行一个函数同时等待结果，这就是另外一种方式，通常成为该方式为远程过程调用。</p>\n<p>使用RabbitMQ构建RPC系统：一个客户端和一个可伸缩（scalable）的RPC服务端,由于我们没有任何值得分发的耗时任务，我们将创建一个返回斐波那契数列的虚拟的RPC服务</p>\n<p><em>尽管RPC在电脑中是一个十分常见的模型，但它十分重要。当程序员不知道函数调用是本地函数调用还是慢速 RPC 时，就会出现问题。像这样的混乱会导致不可预测的系统，并增加调试不必要的复杂性。滥用RPC可能会导致无法维护的意大利面条式代码而不是简化软件</em></p>\n<h1 id=\"回调队列\"><a href=\"#回调队列\" class=\"headerlink\" title=\"回调队列\"></a>回调队列</h1><p>在rabbitMQ上使用RPC是很简单的，客户端传递一个请求消息，服务端回复一个响应消息。为了可以接收到响应我们需要在请求中携带一个回调队列。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">q, err := ch.QueueDeclare(<br>  <span class=\"hljs-string\">&quot;&quot;</span>,    <span class=\"hljs-comment\">// name</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// durable</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// delete when unused</span><br>  <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// exclusive</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// noWait</span><br>  <span class=\"hljs-literal\">nil</span>,   <span class=\"hljs-comment\">// arguments</span><br>)<br><br>ctx, cancel := context.WithTimeout(context.Background(), <span class=\"hljs-number\">5</span>*time.Second)<br><span class=\"hljs-keyword\">defer</span> cancel()<br><br>err = ch.PublishWithContext(ctx,<br>  <span class=\"hljs-string\">&quot;&quot;</span>,          <span class=\"hljs-comment\">// exchange</span><br>  <span class=\"hljs-string\">&quot;rpc_queue&quot;</span>, <span class=\"hljs-comment\">// routing key</span><br>  <span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// mandatory</span><br>  <span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// immediate</span><br>  amqp.Publishing&#123;<br>    ContentType:   <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>    CorrelationId: corrId,<br>    ReplyTo:       q.Name,<br>    Body:          []<span class=\"hljs-type\">byte</span>(strconv.Itoa(n)),<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><code>CorrelationId</code>关联Id：在该队列中收到响应后，尚不清楚响应属于哪个请求。这个时候就该使用<code>correlation_id</code>这个属性了。针对每个请求我们将为其设置一个唯一值。随后，当我们在回调队列中收到消息时，我们将查看该属性，并基于这个属性将响应与请求进行匹配。如果我们看到未知的<code>correlation_id</code>值，则可以放心地丢弃该消息——它不属于我们的请求。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p><code>send.go</code></p>\n<p>服务器代码非常简单：</p>\n<ul>\n<li>与往常一样，我们首先建立连接，通道并声明队列。</li>\n<li>我们可能要运行多个服务器进程。为了将负载平均分配给多个服务器，我们需要在通道上设置<code>prefetch</code>设置。</li>\n<li>我们使用<code>Channel.Consume</code>获取去队列，我们从队列中接收消息。然后，我们进入goroutine进行工作，并将响应发送回去。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//</span><br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">randomString</span><span class=\"hljs-params\">(l <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\tbytes := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">byte</span>, l)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; l; i++ &#123;<br>\t\tbytes[i] = <span class=\"hljs-type\">byte</span>(randInt(<span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">90</span>))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(bytes)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">randInt</span><span class=\"hljs-params\">(min <span class=\"hljs-type\">int</span>, max <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> min + rand.Intn(max-min)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fibonacciRPC</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> (res <span class=\"hljs-type\">int</span>, err <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Faild to declare a queue&quot;</span>)<br><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\tcorrId := randomString(<span class=\"hljs-number\">32</span>)<br>\tctx, cancel := context.WithTimeout(context.Background(), <span class=\"hljs-number\">5</span>*time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,          <span class=\"hljs-comment\">// exchange</span><br>\t\t<span class=\"hljs-string\">&quot;rpc_queue&quot;</span>, <span class=\"hljs-comment\">// routing key</span><br>\t\t<span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// mandatory</span><br>\t\t<span class=\"hljs-literal\">false</span>,       <span class=\"hljs-comment\">// immediate</span><br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType:   <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tCorrelationId: corrId,<br>\t\t\tReplyTo:       q.Name,<br>\t\t\tBody:          []<span class=\"hljs-type\">byte</span>(strconv.Itoa(n)),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> corrId == d.CorrelationId &#123;<br>\t\t\tres, err = strconv.Atoi(<span class=\"hljs-type\">string</span>(d.Body))<br>\t\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to convert body to integer&quot;</span>)<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\trand.Seed(time.Now().UTC().UnixNano())<br>\tn := bodyFrom(os.Args)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Requesting fib(%d)&quot;</span>, n)<br>\tres, err := fibonacciRPC(n)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to handle RPC request&quot;</span>)<br><br>\tlog.Printf(<span class=\"hljs-string\">&quot; [.] Got %d&quot;</span>, res)<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span> || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;30&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\tn, err := strconv.Atoi(s)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to convert arg to integer&quot;</span>)<br>\t<span class=\"hljs-keyword\">return</span> n<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>receive.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> fib(n<span class=\"hljs-number\">-2</span>) + fib(n<span class=\"hljs-number\">-1</span>)<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;rpc_queue&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\terr = ch.Qos(<br>\t\t<span class=\"hljs-number\">1</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t)<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to set QoS&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-comment\">//false,</span><br>\t\t<span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//ack</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\t<span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tn, err := strconv.Atoi(<span class=\"hljs-type\">string</span>(d.Body))<br>\t\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to convert body to integer&quot;</span>)<br><br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;[.] fib*(%d)&quot;</span>, n)<br>\t\t\tresponse := fib(n)<br><br>\t\t\terr = ch.PublishWithContext(ctx,<br>\t\t\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t\t\td.ReplyTo,<br>\t\t\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t\t\tamqp.Publishing&#123;<br>\t\t\t\t\tContentType:   <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\t\t\tCorrelationId: d.CorrelationId,<br>\t\t\t\t\tBody:          []<span class=\"hljs-type\">byte</span>(strconv.Itoa(response)),<br>\t\t\t\t&#125;)<br>\t\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Faild to publish a message&quot;</span>)<br>\t\t\td.Ack(<span class=\"hljs-literal\">false</span>)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Awaiting RPC requests&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest/send$ go run send.go <br>2022/09/29 14:47:36 [x] Requesting fib(30)<br>2022/09/29 14:47:36  [.] Got 832040<br>ubuntu@root:~/go/src/gotest/send$ go run send.go 3<br>2022/09/29 14:47:46 [x] Requesting fib(3)<br>2022/09/29 14:47:46  [.] Got 2<br>ubuntu@root:~/go/src/gotest/send$ go run send.go 5<br>2022/09/29 14:47:54 [x] Requesting fib(5)<br>2022/09/29 14:47:54  [.] Got 5<br><br>ubuntu@root:~/go/src/gotest/recevice$ go run receive.go <br>2022/09/29 14:44:22  [*] Awaiting RPC requests<br>2022/09/29 14:47:36 [.] fib*(30)<br>2022/09/29 14:47:46 [.] fib*(3)<br>2022/09/29 14:47:54 [.] fib*(5)<br></code></pre></td></tr></table></figure>\n\n<p>这里介绍的设计不是RPC服务的唯一可能的实现，但是它具有一些重要的优点：</p>\n<ul>\n<li>如果RPC服务器太慢，则可以通过运行另一台RPC服务器来进行扩展。尝试在新控制台中运行另一个<code>rpc_server.go</code>。</li>\n<li>在客户端，RPC只需要发送和接收一条消息。结果，RPC客户端只需要一个网络往返就可以处理单个RPC请求。</li>\n</ul>\n<p>我们的代码仍然非常简单，并且不会尝试解决更复杂（但很重要）的问题，例如：</p>\n<ul>\n<li>如果没有服务器在运行，客户端应如何反应？</li>\n<li>客户端是否应该为RPC设置某种超时时间？</li>\n<li>如果服务器发生故障并引发异常，是否应该将其转发给客户端？</li>\n<li>在处理之前防止无效的传入消息（例如检查边界，类型）。</li>\n</ul>\n"},{"title":"Go 第三方库之 amqp","_content":"\n\n\n# 创建队列——QueueDeclare\n\n\n\n## channel.queueDeclare()方法\n\n```go\nfunc (*amqp.Channel).QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error)\n\nfunc (ch *Channel) QueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args Table) (Queue, error) {\n\tif err := args.Validate(); err != nil {\n\t\treturn Queue{}, err\n\t}\n\n\treq := &queueDeclare{\n\t\tQueue:      name,\n\t\tPassive:    false,\n\t\tDurable:    durable,\n\t\tAutoDelete: autoDelete,\n\t\tExclusive:  exclusive,\n\t\tNoWait:     noWait,\n\t\tArguments:  args,\n\t}\n\tres := &queueDeclareOk{}\n\n\tif err := ch.call(req, res); err != nil {\n\t\treturn Queue{}, err\n\t}\n\n\tif req.wait() {\n\t\treturn Queue{\n\t\t\tName:      res.Queue,\n\t\t\tMessages:  int(res.MessageCount),\n\t\t\tConsumers: int(res.ConsumerCount),\n\t\t}, nil\n\t}\n\n\treturn Queue{Name: name}, nil\n}\n```\n\n## 参数解析\n\n**name string:**队列的名称，也可以是空的，如果为空的话，系统内部会自动生成一个名称。\n\n**durable bool:**是否持久化\n\n持久化表示数据队列的持久化设置；\n\n- `true`:rabbitMQ重启之后队列信息不会丢失，重启之后会读取数据库。\n- `false`：队列存放在内存中。\n\n**autoDelete bool:**是否自动删除\n\n当为`true`的时候。当所有的消费者都与该队列断开连接的时候，该队列会自动进行删除。\n\n**exclusive bool:**是否排外\n\n如果一个队列声明为排他队列，那么仅对首次声明的连接可见，其余连接不可见。\n\n基于连接可见，同个连接的不同管道是可以同时访问同一连接创建的排他队列的\n\n**noWait bool:**\n\n**args amqp.Table:**\n\n# 连接-connection\n\n```shell\namqp.Dial(\"amqp://guest:guest@172.17.0.2:5672\"）\n```\n\n# 管道创建-Channel\n\n# 消息投递（1）-PublishWithContext\n\n```go\nChannel.PublishWithContext(ctx context.Context, exchange, key string, mandatory, immediate bool, msg Publishing)\n```\n\n# 绑定——bind\n\n## 交换器绑定——ExchangeBind\n\n```go\nfunc (ch *Channel) ExchangeBind(destination, key, source string, noWait bool, args Table) error \n```\n\n生产者发送消息至交换器(source)中，交换器source根据路由键找到与其匹配得另一个destination中，进而存储在destination绑定得队列queue中。\n\n## 队列绑定——QueueBind\n\n```go\nfunc (ch *Channel) QueueBind(name, key, exchange string, noWait bool, args Table) error\n```\n\n交换器类型是fanout, 不用指定路由键, 消息会发送到与此交换器绑定的所有队列\n","source":"_posts/golang/RabbitMQ-go教程/channel.queueDeclare()方法参数解析.md","raw":"---\ntitle: Go 第三方库之 amqp\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n\n\n# 创建队列——QueueDeclare\n\n\n\n## channel.queueDeclare()方法\n\n```go\nfunc (*amqp.Channel).QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error)\n\nfunc (ch *Channel) QueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args Table) (Queue, error) {\n\tif err := args.Validate(); err != nil {\n\t\treturn Queue{}, err\n\t}\n\n\treq := &queueDeclare{\n\t\tQueue:      name,\n\t\tPassive:    false,\n\t\tDurable:    durable,\n\t\tAutoDelete: autoDelete,\n\t\tExclusive:  exclusive,\n\t\tNoWait:     noWait,\n\t\tArguments:  args,\n\t}\n\tres := &queueDeclareOk{}\n\n\tif err := ch.call(req, res); err != nil {\n\t\treturn Queue{}, err\n\t}\n\n\tif req.wait() {\n\t\treturn Queue{\n\t\t\tName:      res.Queue,\n\t\t\tMessages:  int(res.MessageCount),\n\t\t\tConsumers: int(res.ConsumerCount),\n\t\t}, nil\n\t}\n\n\treturn Queue{Name: name}, nil\n}\n```\n\n## 参数解析\n\n**name string:**队列的名称，也可以是空的，如果为空的话，系统内部会自动生成一个名称。\n\n**durable bool:**是否持久化\n\n持久化表示数据队列的持久化设置；\n\n- `true`:rabbitMQ重启之后队列信息不会丢失，重启之后会读取数据库。\n- `false`：队列存放在内存中。\n\n**autoDelete bool:**是否自动删除\n\n当为`true`的时候。当所有的消费者都与该队列断开连接的时候，该队列会自动进行删除。\n\n**exclusive bool:**是否排外\n\n如果一个队列声明为排他队列，那么仅对首次声明的连接可见，其余连接不可见。\n\n基于连接可见，同个连接的不同管道是可以同时访问同一连接创建的排他队列的\n\n**noWait bool:**\n\n**args amqp.Table:**\n\n# 连接-connection\n\n```shell\namqp.Dial(\"amqp://guest:guest@172.17.0.2:5672\"）\n```\n\n# 管道创建-Channel\n\n# 消息投递（1）-PublishWithContext\n\n```go\nChannel.PublishWithContext(ctx context.Context, exchange, key string, mandatory, immediate bool, msg Publishing)\n```\n\n# 绑定——bind\n\n## 交换器绑定——ExchangeBind\n\n```go\nfunc (ch *Channel) ExchangeBind(destination, key, source string, noWait bool, args Table) error \n```\n\n生产者发送消息至交换器(source)中，交换器source根据路由键找到与其匹配得另一个destination中，进而存储在destination绑定得队列queue中。\n\n## 队列绑定——QueueBind\n\n```go\nfunc (ch *Channel) QueueBind(name, key, exchange string, noWait bool, args Table) error\n```\n\n交换器类型是fanout, 不用指定路由键, 消息会发送到与此交换器绑定的所有队列\n","slug":"golang/RabbitMQ-go教程/channel.queueDeclare()方法参数解析","published":1,"date":"2022-09-29T07:31:56.832Z","updated":"2022-10-11T07:27:38.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgi003ktpdodkc0ftzd","content":"<h1 id=\"创建队列——QueueDeclare\"><a href=\"#创建队列——QueueDeclare\" class=\"headerlink\" title=\"创建队列——QueueDeclare\"></a>创建队列——QueueDeclare</h1><h2 id=\"channel-queueDeclare-方法\"><a href=\"#channel-queueDeclare-方法\" class=\"headerlink\" title=\"channel.queueDeclare()方法\"></a>channel.queueDeclare()方法</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(*amqp.Channel)</span></span>.QueueDeclare(name <span class=\"hljs-type\">string</span>, durable <span class=\"hljs-type\">bool</span>, autoDelete <span class=\"hljs-type\">bool</span>, exclusive <span class=\"hljs-type\">bool</span>, noWait <span class=\"hljs-type\">bool</span>, args amqp.Table) (amqp.Queue, <span class=\"hljs-type\">error</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ch *Channel)</span></span> QueueDeclare(name <span class=\"hljs-type\">string</span>, durable, autoDelete, exclusive, noWait <span class=\"hljs-type\">bool</span>, args Table) (Queue, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> err := args.Validate(); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> Queue&#123;&#125;, err<br>\t&#125;<br><br>\treq := &amp;queueDeclare&#123;<br>\t\tQueue:      name,<br>\t\tPassive:    <span class=\"hljs-literal\">false</span>,<br>\t\tDurable:    durable,<br>\t\tAutoDelete: autoDelete,<br>\t\tExclusive:  exclusive,<br>\t\tNoWait:     noWait,<br>\t\tArguments:  args,<br>\t&#125;<br>\tres := &amp;queueDeclareOk&#123;&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> err := ch.call(req, res); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> Queue&#123;&#125;, err<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> req.wait() &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> Queue&#123;<br>\t\t\tName:      res.Queue,<br>\t\t\tMessages:  <span class=\"hljs-type\">int</span>(res.MessageCount),<br>\t\t\tConsumers: <span class=\"hljs-type\">int</span>(res.ConsumerCount),<br>\t\t&#125;, <span class=\"hljs-literal\">nil</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> Queue&#123;Name: name&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h2><p>**name string:**队列的名称，也可以是空的，如果为空的话，系统内部会自动生成一个名称。</p>\n<p>**durable bool:**是否持久化</p>\n<p>持久化表示数据队列的持久化设置；</p>\n<ul>\n<li><code>true</code>:rabbitMQ重启之后队列信息不会丢失，重启之后会读取数据库。</li>\n<li><code>false</code>：队列存放在内存中。</li>\n</ul>\n<p>**autoDelete bool:**是否自动删除</p>\n<p>当为<code>true</code>的时候。当所有的消费者都与该队列断开连接的时候，该队列会自动进行删除。</p>\n<p>**exclusive bool:**是否排外</p>\n<p>如果一个队列声明为排他队列，那么仅对首次声明的连接可见，其余连接不可见。</p>\n<p>基于连接可见，同个连接的不同管道是可以同时访问同一连接创建的排他队列的</p>\n<p><strong>noWait bool:</strong></p>\n<p><strong>args amqp.Table:</strong></p>\n<h1 id=\"连接-connection\"><a href=\"#连接-connection\" class=\"headerlink\" title=\"连接-connection\"></a>连接-connection</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">amqp.Dial(&quot;amqp://guest:guest@172.17.0.2:5672&quot;）<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"管道创建-Channel\"><a href=\"#管道创建-Channel\" class=\"headerlink\" title=\"管道创建-Channel\"></a>管道创建-Channel</h1><h1 id=\"消息投递（1）-PublishWithContext\"><a href=\"#消息投递（1）-PublishWithContext\" class=\"headerlink\" title=\"消息投递（1）-PublishWithContext\"></a>消息投递（1）-PublishWithContext</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">Channel.PublishWithContext(ctx context.Context, exchange, key <span class=\"hljs-type\">string</span>, mandatory, immediate <span class=\"hljs-type\">bool</span>, msg Publishing)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"绑定——bind\"><a href=\"#绑定——bind\" class=\"headerlink\" title=\"绑定——bind\"></a>绑定——bind</h1><h2 id=\"交换器绑定——ExchangeBind\"><a href=\"#交换器绑定——ExchangeBind\" class=\"headerlink\" title=\"交换器绑定——ExchangeBind\"></a>交换器绑定——ExchangeBind</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ch *Channel)</span></span> ExchangeBind(destination, key, source <span class=\"hljs-type\">string</span>, noWait <span class=\"hljs-type\">bool</span>, args Table) <span class=\"hljs-type\">error</span> <br></code></pre></td></tr></table></figure>\n\n<p>生产者发送消息至交换器(source)中，交换器source根据路由键找到与其匹配得另一个destination中，进而存储在destination绑定得队列queue中。</p>\n<h2 id=\"队列绑定——QueueBind\"><a href=\"#队列绑定——QueueBind\" class=\"headerlink\" title=\"队列绑定——QueueBind\"></a>队列绑定——QueueBind</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ch *Channel)</span></span> QueueBind(name, key, exchange <span class=\"hljs-type\">string</span>, noWait <span class=\"hljs-type\">bool</span>, args Table) <span class=\"hljs-type\">error</span><br></code></pre></td></tr></table></figure>\n\n<p>交换器类型是fanout, 不用指定路由键, 消息会发送到与此交换器绑定的所有队列</p>\n","site":{"data":{}},"wordcount":1699,"excerpt":"","more":"<h1 id=\"创建队列——QueueDeclare\"><a href=\"#创建队列——QueueDeclare\" class=\"headerlink\" title=\"创建队列——QueueDeclare\"></a>创建队列——QueueDeclare</h1><h2 id=\"channel-queueDeclare-方法\"><a href=\"#channel-queueDeclare-方法\" class=\"headerlink\" title=\"channel.queueDeclare()方法\"></a>channel.queueDeclare()方法</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(*amqp.Channel)</span></span>.QueueDeclare(name <span class=\"hljs-type\">string</span>, durable <span class=\"hljs-type\">bool</span>, autoDelete <span class=\"hljs-type\">bool</span>, exclusive <span class=\"hljs-type\">bool</span>, noWait <span class=\"hljs-type\">bool</span>, args amqp.Table) (amqp.Queue, <span class=\"hljs-type\">error</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ch *Channel)</span></span> QueueDeclare(name <span class=\"hljs-type\">string</span>, durable, autoDelete, exclusive, noWait <span class=\"hljs-type\">bool</span>, args Table) (Queue, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> err := args.Validate(); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> Queue&#123;&#125;, err<br>\t&#125;<br><br>\treq := &amp;queueDeclare&#123;<br>\t\tQueue:      name,<br>\t\tPassive:    <span class=\"hljs-literal\">false</span>,<br>\t\tDurable:    durable,<br>\t\tAutoDelete: autoDelete,<br>\t\tExclusive:  exclusive,<br>\t\tNoWait:     noWait,<br>\t\tArguments:  args,<br>\t&#125;<br>\tres := &amp;queueDeclareOk&#123;&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> err := ch.call(req, res); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> Queue&#123;&#125;, err<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> req.wait() &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> Queue&#123;<br>\t\t\tName:      res.Queue,<br>\t\t\tMessages:  <span class=\"hljs-type\">int</span>(res.MessageCount),<br>\t\t\tConsumers: <span class=\"hljs-type\">int</span>(res.ConsumerCount),<br>\t\t&#125;, <span class=\"hljs-literal\">nil</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> Queue&#123;Name: name&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h2><p>**name string:**队列的名称，也可以是空的，如果为空的话，系统内部会自动生成一个名称。</p>\n<p>**durable bool:**是否持久化</p>\n<p>持久化表示数据队列的持久化设置；</p>\n<ul>\n<li><code>true</code>:rabbitMQ重启之后队列信息不会丢失，重启之后会读取数据库。</li>\n<li><code>false</code>：队列存放在内存中。</li>\n</ul>\n<p>**autoDelete bool:**是否自动删除</p>\n<p>当为<code>true</code>的时候。当所有的消费者都与该队列断开连接的时候，该队列会自动进行删除。</p>\n<p>**exclusive bool:**是否排外</p>\n<p>如果一个队列声明为排他队列，那么仅对首次声明的连接可见，其余连接不可见。</p>\n<p>基于连接可见，同个连接的不同管道是可以同时访问同一连接创建的排他队列的</p>\n<p><strong>noWait bool:</strong></p>\n<p><strong>args amqp.Table:</strong></p>\n<h1 id=\"连接-connection\"><a href=\"#连接-connection\" class=\"headerlink\" title=\"连接-connection\"></a>连接-connection</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">amqp.Dial(&quot;amqp://guest:guest@172.17.0.2:5672&quot;）<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"管道创建-Channel\"><a href=\"#管道创建-Channel\" class=\"headerlink\" title=\"管道创建-Channel\"></a>管道创建-Channel</h1><h1 id=\"消息投递（1）-PublishWithContext\"><a href=\"#消息投递（1）-PublishWithContext\" class=\"headerlink\" title=\"消息投递（1）-PublishWithContext\"></a>消息投递（1）-PublishWithContext</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">Channel.PublishWithContext(ctx context.Context, exchange, key <span class=\"hljs-type\">string</span>, mandatory, immediate <span class=\"hljs-type\">bool</span>, msg Publishing)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"绑定——bind\"><a href=\"#绑定——bind\" class=\"headerlink\" title=\"绑定——bind\"></a>绑定——bind</h1><h2 id=\"交换器绑定——ExchangeBind\"><a href=\"#交换器绑定——ExchangeBind\" class=\"headerlink\" title=\"交换器绑定——ExchangeBind\"></a>交换器绑定——ExchangeBind</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ch *Channel)</span></span> ExchangeBind(destination, key, source <span class=\"hljs-type\">string</span>, noWait <span class=\"hljs-type\">bool</span>, args Table) <span class=\"hljs-type\">error</span> <br></code></pre></td></tr></table></figure>\n\n<p>生产者发送消息至交换器(source)中，交换器source根据路由键找到与其匹配得另一个destination中，进而存储在destination绑定得队列queue中。</p>\n<h2 id=\"队列绑定——QueueBind\"><a href=\"#队列绑定——QueueBind\" class=\"headerlink\" title=\"队列绑定——QueueBind\"></a>队列绑定——QueueBind</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ch *Channel)</span></span> QueueBind(name, key, exchange <span class=\"hljs-type\">string</span>, noWait <span class=\"hljs-type\">bool</span>, args Table) <span class=\"hljs-type\">error</span><br></code></pre></td></tr></table></figure>\n\n<p>交换器类型是fanout, 不用指定路由键, 消息会发送到与此交换器绑定的所有队列</p>\n"},{"title":"(三) RabbitMQ go教程——发布/订阅（publish/subscribe）","_content":"\n在之前的文章中，我们创建一个工作队列，假设在一个工作队列中每一个task都均由一个工人传输。\n\n在本节中，将一条消息传输给多个消费者，该模式称为**发布/订阅（publish/subscribe）**\n\n为了说明该模式，会创建一个日志系统：由两个程序组成（一个负责发出日志信息，另一个接收并打印）。\n\n在日志系统中，每一个程序运行的接收副本都会得到消息。通过该方法我们可以运行一个接收者并将日志保存到磁盘，与此同时我门也可以运行另一个接收者同时看见该日志。\n\n发布的日志信息将会对所有的接收者查看。\n\n\n\n在之前的文章中，是直接通过队列传递的消息，接下来介绍在rabbit中的**消息模型**\n\n消息模型的核心是生产者从来不直接向队列中发送任何消息，事实上，几乎所有的生产者都不知道消息会被传递到队列中。生产者会将消息发送至转换体中，它是一个十分简单的内容——一边接从所有的生产者中接收到消息，以便将消息推送到队列中。转换者必须明确的知道如何处理接收的消息。\n\n![exchanges](publish/exchanges.png)\n\n转换的变量主要有`direct`、`topic`、`headers`、`fanout`\n\n```go\nerr = ch.ExchangeDeclare(\n  \"logs\",   // name\n  \"fanout\", // type\n  true,     // durable\n  false,    // auto-deleted\n  false,    // internal\n  false,    // no-wait\n  nil,      // arguments\n)\n```\n\n\n\n`fanout`是比较简单，从名字可以看出来，它仅是向它知道的队列去广播所有接收的消息。\n\n# 临时队列\n\n之前使用特殊名字的队列（hello），能够命名队列是很重要的——我门需要给工人指向相同的队列，在生产者和消费者之间分享队列名称是极其重要的。\n\n但是对本次的日志来说并不，我们需要监听到所有的日志信息，而不仅是其中一个，我们也只对当前流动的消息感兴趣，而不是对旧消息感兴趣。\n\n- 无论什么时候当我们连接rabbit的时候，都需要一个干净的、空的队列，为此我们随机创建一个队列名称或者让服务器随机为我们选择一个队列名称。\n- 当不再连接的时候需要立即删除该队列。\n\n在amqp中，当声明一个空字符串的队列时，会随机生成一个队列名称，定义执行状态为true，当关闭连接的时候，该队列会被删除。\n\n```go\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // no-wait\n  nil,   // arguments\n)\n```\n\n# 绑定\n\n![bindings](publish/bindings.png)\n\n定义了一个`fanout`的转换体和队列，现在需要告诉转换体发送消息到队列中，该操作成为**绑定**\n\n```go\nerr = ch.QueueBind(\n  q.Name, // queue name\n  \"\",     // routing key\n  \"logs\", // exchange\n  false,\n  nil,\n)\n```\n\n现在日志就被追加到队列中\n\n# 完整代码\n\n`receive.go`\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs\",   //name\n\t\t\"fanout\", //type\n\t\ttrue,     //durable\n\t\tfalse,    //auto-delete\n\t\tfalse,    //internal\n\t\tfalse,    //no-wait\n\t\tnil,      //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\tq, err := ch.QueueDeclare(\n\t\t\"\",\n\t\tfalse,\n\t\tfalse,\n\t\ttrue,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\t//绑定\n\terr = ch.QueueBind(\n\t\tq.Name,\n\t\t\"\",\n\t\t\"logs\",\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tfailOnError(err, \"Failed to bind queue\")\n\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\t//false,\n\t\ttrue, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n`send.go`\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//作为发送者，需要声明一个转换体\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs\",   //name\n\t\t\"fanout\", //type\n\t\ttrue,     //durable\n\t\tfalse,    //auto-delete\n\t\tfalse,    //internal\n\t\tfalse,    //no-wait\n\t\tnil,      //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\t//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\t//定义的队列是幂等的，消息内容是byte数组\n\tbody := bodyFrom(os.Args)\n\t//body := \"Hello World\"\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"logs\", //exchange\n\t\t\" \",    //routing key\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\"[x] Sent %s\\n\", body)\n}\n\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"Hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n\n```\n\n\n\n![runResult](publish/runResult.png)\n\n```shell\nroot@2f82bf702d30:/# rabbitmqctl list_exchanges\nListing exchanges for vhost / ...\nname\ttype\namq.topic\ttopic\nlogs\tfanout\namq.match\theaders\namq.direct\tdirect\namq.headers\theaders\n\tdirect\namq.fanout\tfanout\namq.rabbitmq.trace\ttopic\nroot@2f82bf702d30:/# rabbitmqctl list_bindings\nListing bindings for vhost /...\nsource_name\tsource_kind\tdestination_name\tdestination_kind\trouting_key\targuments\n\texchange\thello\tqueue\thello\t[]\n\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\tamq.gen-qoEkayPewVkEKGRdmcKKtw\t[]\nlogs\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\t\t[]\n\n```\n\n","source":"_posts/golang/RabbitMQ-go教程/publish.md","raw":"---\ntitle: (三) RabbitMQ go教程——发布/订阅（publish/subscribe）\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n在之前的文章中，我们创建一个工作队列，假设在一个工作队列中每一个task都均由一个工人传输。\n\n在本节中，将一条消息传输给多个消费者，该模式称为**发布/订阅（publish/subscribe）**\n\n为了说明该模式，会创建一个日志系统：由两个程序组成（一个负责发出日志信息，另一个接收并打印）。\n\n在日志系统中，每一个程序运行的接收副本都会得到消息。通过该方法我们可以运行一个接收者并将日志保存到磁盘，与此同时我门也可以运行另一个接收者同时看见该日志。\n\n发布的日志信息将会对所有的接收者查看。\n\n\n\n在之前的文章中，是直接通过队列传递的消息，接下来介绍在rabbit中的**消息模型**\n\n消息模型的核心是生产者从来不直接向队列中发送任何消息，事实上，几乎所有的生产者都不知道消息会被传递到队列中。生产者会将消息发送至转换体中，它是一个十分简单的内容——一边接从所有的生产者中接收到消息，以便将消息推送到队列中。转换者必须明确的知道如何处理接收的消息。\n\n![exchanges](publish/exchanges.png)\n\n转换的变量主要有`direct`、`topic`、`headers`、`fanout`\n\n```go\nerr = ch.ExchangeDeclare(\n  \"logs\",   // name\n  \"fanout\", // type\n  true,     // durable\n  false,    // auto-deleted\n  false,    // internal\n  false,    // no-wait\n  nil,      // arguments\n)\n```\n\n\n\n`fanout`是比较简单，从名字可以看出来，它仅是向它知道的队列去广播所有接收的消息。\n\n# 临时队列\n\n之前使用特殊名字的队列（hello），能够命名队列是很重要的——我门需要给工人指向相同的队列，在生产者和消费者之间分享队列名称是极其重要的。\n\n但是对本次的日志来说并不，我们需要监听到所有的日志信息，而不仅是其中一个，我们也只对当前流动的消息感兴趣，而不是对旧消息感兴趣。\n\n- 无论什么时候当我们连接rabbit的时候，都需要一个干净的、空的队列，为此我们随机创建一个队列名称或者让服务器随机为我们选择一个队列名称。\n- 当不再连接的时候需要立即删除该队列。\n\n在amqp中，当声明一个空字符串的队列时，会随机生成一个队列名称，定义执行状态为true，当关闭连接的时候，该队列会被删除。\n\n```go\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // no-wait\n  nil,   // arguments\n)\n```\n\n# 绑定\n\n![bindings](publish/bindings.png)\n\n定义了一个`fanout`的转换体和队列，现在需要告诉转换体发送消息到队列中，该操作成为**绑定**\n\n```go\nerr = ch.QueueBind(\n  q.Name, // queue name\n  \"\",     // routing key\n  \"logs\", // exchange\n  false,\n  nil,\n)\n```\n\n现在日志就被追加到队列中\n\n# 完整代码\n\n`receive.go`\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs\",   //name\n\t\t\"fanout\", //type\n\t\ttrue,     //durable\n\t\tfalse,    //auto-delete\n\t\tfalse,    //internal\n\t\tfalse,    //no-wait\n\t\tnil,      //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\tq, err := ch.QueueDeclare(\n\t\t\"\",\n\t\tfalse,\n\t\tfalse,\n\t\ttrue,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\t//绑定\n\terr = ch.QueueBind(\n\t\tq.Name,\n\t\t\"\",\n\t\t\"logs\",\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tfailOnError(err, \"Failed to bind queue\")\n\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\t//false,\n\t\ttrue, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n`send.go`\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//作为发送者，需要声明一个转换体\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs\",   //name\n\t\t\"fanout\", //type\n\t\ttrue,     //durable\n\t\tfalse,    //auto-delete\n\t\tfalse,    //internal\n\t\tfalse,    //no-wait\n\t\tnil,      //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\t//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\t//定义的队列是幂等的，消息内容是byte数组\n\tbody := bodyFrom(os.Args)\n\t//body := \"Hello World\"\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"logs\", //exchange\n\t\t\" \",    //routing key\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\"[x] Sent %s\\n\", body)\n}\n\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"Hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n\n```\n\n\n\n![runResult](publish/runResult.png)\n\n```shell\nroot@2f82bf702d30:/# rabbitmqctl list_exchanges\nListing exchanges for vhost / ...\nname\ttype\namq.topic\ttopic\nlogs\tfanout\namq.match\theaders\namq.direct\tdirect\namq.headers\theaders\n\tdirect\namq.fanout\tfanout\namq.rabbitmq.trace\ttopic\nroot@2f82bf702d30:/# rabbitmqctl list_bindings\nListing bindings for vhost /...\nsource_name\tsource_kind\tdestination_name\tdestination_kind\trouting_key\targuments\n\texchange\thello\tqueue\thello\t[]\n\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\tamq.gen-qoEkayPewVkEKGRdmcKKtw\t[]\nlogs\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\t\t[]\n\n```\n\n","slug":"golang/RabbitMQ-go教程/publish","published":1,"date":"2022-09-22T02:30:21.641Z","updated":"2022-09-22T07:02:49.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgj003ptpdoevk5e3ka","content":"<p>在之前的文章中，我们创建一个工作队列，假设在一个工作队列中每一个task都均由一个工人传输。</p>\n<p>在本节中，将一条消息传输给多个消费者，该模式称为<strong>发布/订阅（publish/subscribe）</strong></p>\n<p>为了说明该模式，会创建一个日志系统：由两个程序组成（一个负责发出日志信息，另一个接收并打印）。</p>\n<p>在日志系统中，每一个程序运行的接收副本都会得到消息。通过该方法我们可以运行一个接收者并将日志保存到磁盘，与此同时我门也可以运行另一个接收者同时看见该日志。</p>\n<p>发布的日志信息将会对所有的接收者查看。</p>\n<p>在之前的文章中，是直接通过队列传递的消息，接下来介绍在rabbit中的<strong>消息模型</strong></p>\n<p>消息模型的核心是生产者从来不直接向队列中发送任何消息，事实上，几乎所有的生产者都不知道消息会被传递到队列中。生产者会将消息发送至转换体中，它是一个十分简单的内容——一边接从所有的生产者中接收到消息，以便将消息推送到队列中。转换者必须明确的知道如何处理接收的消息。</p>\n<p><img src=\"/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/exchanges.png\" alt=\"exchanges\"></p>\n<p>转换的变量主要有<code>direct</code>、<code>topic</code>、<code>headers</code>、<code>fanout</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.ExchangeDeclare(<br>  <span class=\"hljs-string\">&quot;logs&quot;</span>,   <span class=\"hljs-comment\">// name</span><br>  <span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-comment\">// type</span><br>  <span class=\"hljs-literal\">true</span>,     <span class=\"hljs-comment\">// durable</span><br>  <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// auto-deleted</span><br>  <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// internal</span><br>  <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// no-wait</span><br>  <span class=\"hljs-literal\">nil</span>,      <span class=\"hljs-comment\">// arguments</span><br>)<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>fanout</code>是比较简单，从名字可以看出来，它仅是向它知道的队列去广播所有接收的消息。</p>\n<h1 id=\"临时队列\"><a href=\"#临时队列\" class=\"headerlink\" title=\"临时队列\"></a>临时队列</h1><p>之前使用特殊名字的队列（hello），能够命名队列是很重要的——我门需要给工人指向相同的队列，在生产者和消费者之间分享队列名称是极其重要的。</p>\n<p>但是对本次的日志来说并不，我们需要监听到所有的日志信息，而不仅是其中一个，我们也只对当前流动的消息感兴趣，而不是对旧消息感兴趣。</p>\n<ul>\n<li>无论什么时候当我们连接rabbit的时候，都需要一个干净的、空的队列，为此我们随机创建一个队列名称或者让服务器随机为我们选择一个队列名称。</li>\n<li>当不再连接的时候需要立即删除该队列。</li>\n</ul>\n<p>在amqp中，当声明一个空字符串的队列时，会随机生成一个队列名称，定义执行状态为true，当关闭连接的时候，该队列会被删除。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">q, err := ch.QueueDeclare(<br>  <span class=\"hljs-string\">&quot;&quot;</span>,    <span class=\"hljs-comment\">// name</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// durable</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// delete when unused</span><br>  <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// exclusive</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// no-wait</span><br>  <span class=\"hljs-literal\">nil</span>,   <span class=\"hljs-comment\">// arguments</span><br>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h1><p><img src=\"/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/bindings.png\" alt=\"bindings\"></p>\n<p>定义了一个<code>fanout</code>的转换体和队列，现在需要告诉转换体发送消息到队列中，该操作成为<strong>绑定</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.QueueBind(<br>  q.Name, <span class=\"hljs-comment\">// queue name</span><br>  <span class=\"hljs-string\">&quot;&quot;</span>,     <span class=\"hljs-comment\">// routing key</span><br>  <span class=\"hljs-string\">&quot;logs&quot;</span>, <span class=\"hljs-comment\">// exchange</span><br>  <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-literal\">nil</span>,<br>)<br></code></pre></td></tr></table></figure>\n\n<p>现在日志就被追加到队列中</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><p><code>receive.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>,   <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,     <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,      <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//绑定</span><br>\terr = ch.QueueBind(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to bind queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-comment\">//false,</span><br>\t\t<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//ack</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\t<span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>send.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//作为发送者，需要声明一个转换体</span><br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>,   <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,     <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,      <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\t<span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := bodyFrom(os.Args)<br>\t<span class=\"hljs-comment\">//body := &quot;Hello World&quot;</span><br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>, <span class=\"hljs-comment\">//exchange</span><br>\t\t<span class=\"hljs-string\">&quot; &quot;</span>,    <span class=\"hljs-comment\">//routing key</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType: <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tBody:        []<span class=\"hljs-type\">byte</span>(body),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Sent %s\\n&quot;</span>, body)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;Hello&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/runResult.png\" alt=\"runResult\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@2f82bf702d30:/# rabbitmqctl list_exchanges<br>Listing exchanges for vhost / ...<br>name\ttype<br>amq.topic\ttopic<br>logs\tfanout<br>amq.match\theaders<br>amq.direct\tdirect<br>amq.headers\theaders<br>\tdirect<br>amq.fanout\tfanout<br>amq.rabbitmq.trace\ttopic<br>root@2f82bf702d30:/# rabbitmqctl list_bindings<br>Listing bindings for vhost /...<br>source_name\tsource_kind\tdestination_name\tdestination_kind\trouting_key\targuments<br>\texchange\thello\tqueue\thello\t[]<br>\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\tamq.gen-qoEkayPewVkEKGRdmcKKtw\t[]<br>logs\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\t\t[]<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":4785,"excerpt":"","more":"<p>在之前的文章中，我们创建一个工作队列，假设在一个工作队列中每一个task都均由一个工人传输。</p>\n<p>在本节中，将一条消息传输给多个消费者，该模式称为<strong>发布/订阅（publish/subscribe）</strong></p>\n<p>为了说明该模式，会创建一个日志系统：由两个程序组成（一个负责发出日志信息，另一个接收并打印）。</p>\n<p>在日志系统中，每一个程序运行的接收副本都会得到消息。通过该方法我们可以运行一个接收者并将日志保存到磁盘，与此同时我门也可以运行另一个接收者同时看见该日志。</p>\n<p>发布的日志信息将会对所有的接收者查看。</p>\n<p>在之前的文章中，是直接通过队列传递的消息，接下来介绍在rabbit中的<strong>消息模型</strong></p>\n<p>消息模型的核心是生产者从来不直接向队列中发送任何消息，事实上，几乎所有的生产者都不知道消息会被传递到队列中。生产者会将消息发送至转换体中，它是一个十分简单的内容——一边接从所有的生产者中接收到消息，以便将消息推送到队列中。转换者必须明确的知道如何处理接收的消息。</p>\n<p><img src=\"/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/exchanges.png\" alt=\"exchanges\"></p>\n<p>转换的变量主要有<code>direct</code>、<code>topic</code>、<code>headers</code>、<code>fanout</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.ExchangeDeclare(<br>  <span class=\"hljs-string\">&quot;logs&quot;</span>,   <span class=\"hljs-comment\">// name</span><br>  <span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-comment\">// type</span><br>  <span class=\"hljs-literal\">true</span>,     <span class=\"hljs-comment\">// durable</span><br>  <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// auto-deleted</span><br>  <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// internal</span><br>  <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// no-wait</span><br>  <span class=\"hljs-literal\">nil</span>,      <span class=\"hljs-comment\">// arguments</span><br>)<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>fanout</code>是比较简单，从名字可以看出来，它仅是向它知道的队列去广播所有接收的消息。</p>\n<h1 id=\"临时队列\"><a href=\"#临时队列\" class=\"headerlink\" title=\"临时队列\"></a>临时队列</h1><p>之前使用特殊名字的队列（hello），能够命名队列是很重要的——我门需要给工人指向相同的队列，在生产者和消费者之间分享队列名称是极其重要的。</p>\n<p>但是对本次的日志来说并不，我们需要监听到所有的日志信息，而不仅是其中一个，我们也只对当前流动的消息感兴趣，而不是对旧消息感兴趣。</p>\n<ul>\n<li>无论什么时候当我们连接rabbit的时候，都需要一个干净的、空的队列，为此我们随机创建一个队列名称或者让服务器随机为我们选择一个队列名称。</li>\n<li>当不再连接的时候需要立即删除该队列。</li>\n</ul>\n<p>在amqp中，当声明一个空字符串的队列时，会随机生成一个队列名称，定义执行状态为true，当关闭连接的时候，该队列会被删除。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">q, err := ch.QueueDeclare(<br>  <span class=\"hljs-string\">&quot;&quot;</span>,    <span class=\"hljs-comment\">// name</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// durable</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// delete when unused</span><br>  <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// exclusive</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// no-wait</span><br>  <span class=\"hljs-literal\">nil</span>,   <span class=\"hljs-comment\">// arguments</span><br>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h1><p><img src=\"/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/bindings.png\" alt=\"bindings\"></p>\n<p>定义了一个<code>fanout</code>的转换体和队列，现在需要告诉转换体发送消息到队列中，该操作成为<strong>绑定</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.QueueBind(<br>  q.Name, <span class=\"hljs-comment\">// queue name</span><br>  <span class=\"hljs-string\">&quot;&quot;</span>,     <span class=\"hljs-comment\">// routing key</span><br>  <span class=\"hljs-string\">&quot;logs&quot;</span>, <span class=\"hljs-comment\">// exchange</span><br>  <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-literal\">nil</span>,<br>)<br></code></pre></td></tr></table></figure>\n\n<p>现在日志就被追加到队列中</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><p><code>receive.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>,   <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,     <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,      <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//绑定</span><br>\terr = ch.QueueBind(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to bind queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-comment\">//false,</span><br>\t\t<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//ack</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\t<span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>send.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//作为发送者，需要声明一个转换体</span><br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>,   <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,     <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,      <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\t<span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := bodyFrom(os.Args)<br>\t<span class=\"hljs-comment\">//body := &quot;Hello World&quot;</span><br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;logs&quot;</span>, <span class=\"hljs-comment\">//exchange</span><br>\t\t<span class=\"hljs-string\">&quot; &quot;</span>,    <span class=\"hljs-comment\">//routing key</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType: <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tBody:        []<span class=\"hljs-type\">byte</span>(body),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Sent %s\\n&quot;</span>, body)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;Hello&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2022/09/22/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/publish/runResult.png\" alt=\"runResult\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@2f82bf702d30:/# rabbitmqctl list_exchanges<br>Listing exchanges for vhost / ...<br>name\ttype<br>amq.topic\ttopic<br>logs\tfanout<br>amq.match\theaders<br>amq.direct\tdirect<br>amq.headers\theaders<br>\tdirect<br>amq.fanout\tfanout<br>amq.rabbitmq.trace\ttopic<br>root@2f82bf702d30:/# rabbitmqctl list_bindings<br>Listing bindings for vhost /...<br>source_name\tsource_kind\tdestination_name\tdestination_kind\trouting_key\targuments<br>\texchange\thello\tqueue\thello\t[]<br>\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\tamq.gen-qoEkayPewVkEKGRdmcKKtw\t[]<br>logs\texchange\tamq.gen-qoEkayPewVkEKGRdmcKKtw\tqueue\t\t[]<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"RabbitMQ服务搭建","_content":"\n# 概念\n\nRabbitMQ是一个消息代理，它接收和发送消息。可以认为是一个邮局：当你把你想要邮寄的邮件放进一个邮箱时，你可以确定邮差会将邮件送到收件人那。\n\n与邮局不同的，RabbitMQ接收、存储和转发二进制数据块——消息。\n\n## 术语\n\n**生产者**意味着发送，发送消息的程序就是生产者。\n\n**队列**一个较大的缓冲队列，生产者可以发送消息，消费者可以从里面获取消息。\n\n**消费者**是一个主要等待接受消息的程序\n\n# 镜像获取\n\n获取RabbitMQ 管理端镜像\n\n```\nsudo docker rabbitmq:3.9.22-management\nsudo docker run -itd --name rabbitmq -p 15672:15672 rabbitmq:3.9.22-management\n```\n\n\n\n\n\n","source":"_posts/golang/RabbitMQ-go教程/rabbitMQ服务搭建.md","raw":"---\ntitle: RabbitMQ服务搭建\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n# 概念\n\nRabbitMQ是一个消息代理，它接收和发送消息。可以认为是一个邮局：当你把你想要邮寄的邮件放进一个邮箱时，你可以确定邮差会将邮件送到收件人那。\n\n与邮局不同的，RabbitMQ接收、存储和转发二进制数据块——消息。\n\n## 术语\n\n**生产者**意味着发送，发送消息的程序就是生产者。\n\n**队列**一个较大的缓冲队列，生产者可以发送消息，消费者可以从里面获取消息。\n\n**消费者**是一个主要等待接受消息的程序\n\n# 镜像获取\n\n获取RabbitMQ 管理端镜像\n\n```\nsudo docker rabbitmq:3.9.22-management\nsudo docker run -itd --name rabbitmq -p 15672:15672 rabbitmq:3.9.22-management\n```\n\n\n\n\n\n","slug":"golang/RabbitMQ-go教程/rabbitMQ服务搭建","published":1,"date":"2022-09-20T07:37:35.179Z","updated":"2022-09-20T08:06:25.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgk003rtpdobat845gs","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>RabbitMQ是一个消息代理，它接收和发送消息。可以认为是一个邮局：当你把你想要邮寄的邮件放进一个邮箱时，你可以确定邮差会将邮件送到收件人那。</p>\n<p>与邮局不同的，RabbitMQ接收、存储和转发二进制数据块——消息。</p>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p><strong>生产者</strong>意味着发送，发送消息的程序就是生产者。</p>\n<p><strong>队列</strong>一个较大的缓冲队列，生产者可以发送消息，消费者可以从里面获取消息。</p>\n<p><strong>消费者</strong>是一个主要等待接受消息的程序</p>\n<h1 id=\"镜像获取\"><a href=\"#镜像获取\" class=\"headerlink\" title=\"镜像获取\"></a>镜像获取</h1><p>获取RabbitMQ 管理端镜像</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">sudo</span> docker rabbitmq:<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">22</span>-management<br><span class=\"hljs-attribute\">sudo</span> docker run -itd --name rabbitmq -p <span class=\"hljs-number\">15672</span>:<span class=\"hljs-number\">15672</span> rabbitmq:<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">22</span>-management<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"wordcount":311,"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>RabbitMQ是一个消息代理，它接收和发送消息。可以认为是一个邮局：当你把你想要邮寄的邮件放进一个邮箱时，你可以确定邮差会将邮件送到收件人那。</p>\n<p>与邮局不同的，RabbitMQ接收、存储和转发二进制数据块——消息。</p>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p><strong>生产者</strong>意味着发送，发送消息的程序就是生产者。</p>\n<p><strong>队列</strong>一个较大的缓冲队列，生产者可以发送消息，消费者可以从里面获取消息。</p>\n<p><strong>消费者</strong>是一个主要等待接受消息的程序</p>\n<h1 id=\"镜像获取\"><a href=\"#镜像获取\" class=\"headerlink\" title=\"镜像获取\"></a>镜像获取</h1><p>获取RabbitMQ 管理端镜像</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">sudo</span> docker rabbitmq:<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">22</span>-management<br><span class=\"hljs-attribute\">sudo</span> docker run -itd --name rabbitmq -p <span class=\"hljs-number\">15672</span>:<span class=\"hljs-number\">15672</span> rabbitmq:<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">22</span>-management<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"(五) RabbitMQ go教程——主题（topics）","_content":"\n\n\n上一个教程中，采用`direct`替换了`fanout`，获得了定向的日志传输和展现，但`direct`也是存在局限的：它不能基于多个条件进行路由。\n\n\n\n在日志系统中，我们不仅仅是想获取定义严格的日志内容，而是任何资源发送的日志内容。为了实现这样的日志系统，将采用`topic`类型的转换器。\n\n# Topic exchange\n\n消息通过`topic`不会有随意的routing_key——它必须是一组内容像是来限制`dots`。内容为任意但要区别其他。例如：“stock.usd.nyse”、\"nyse.vmw\"、“quick.orange.rabbit”,最大为225bytes。\n\n\n\n绑定的key也应该是同样的形式，`topic`和`direct`、`fanout`是存在相同的特征的，不同的只是匹配模式不同\n\n![python-five](主题topic/python-five.png)\n\n`topic`通过配置字符串的方式来进行消息队列的传输，\n\n如果接收的字符为`#`，则表示接收所有的信息，与`fanout`相同，如果接收中存在`*`，则与`direct`相同\n\n其中运行代码和第四节相同，仅改变交换类型\n\n- \\* (star) can substitute for exactly one word.\n- \\# (hash) can substitute for zero or more words.\n\n# 运行结果\n\n```shell\ngo run receive.go \"#\"\ngo run receive.go \"kern.*\"\ngo run receive.go \"*.critical\"\ngo run receive.go \"kern.*\" \"*.critical\"\ngo run send.go \"kern.critical\" \"A critical kernel error\"\n```\n\n","source":"_posts/golang/RabbitMQ-go教程/主题topic.md","raw":"---\ntitle: (五) RabbitMQ go教程——主题（topics）\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n\n\n上一个教程中，采用`direct`替换了`fanout`，获得了定向的日志传输和展现，但`direct`也是存在局限的：它不能基于多个条件进行路由。\n\n\n\n在日志系统中，我们不仅仅是想获取定义严格的日志内容，而是任何资源发送的日志内容。为了实现这样的日志系统，将采用`topic`类型的转换器。\n\n# Topic exchange\n\n消息通过`topic`不会有随意的routing_key——它必须是一组内容像是来限制`dots`。内容为任意但要区别其他。例如：“stock.usd.nyse”、\"nyse.vmw\"、“quick.orange.rabbit”,最大为225bytes。\n\n\n\n绑定的key也应该是同样的形式，`topic`和`direct`、`fanout`是存在相同的特征的，不同的只是匹配模式不同\n\n![python-five](主题topic/python-five.png)\n\n`topic`通过配置字符串的方式来进行消息队列的传输，\n\n如果接收的字符为`#`，则表示接收所有的信息，与`fanout`相同，如果接收中存在`*`，则与`direct`相同\n\n其中运行代码和第四节相同，仅改变交换类型\n\n- \\* (star) can substitute for exactly one word.\n- \\# (hash) can substitute for zero or more words.\n\n# 运行结果\n\n```shell\ngo run receive.go \"#\"\ngo run receive.go \"kern.*\"\ngo run receive.go \"*.critical\"\ngo run receive.go \"kern.*\" \"*.critical\"\ngo run send.go \"kern.critical\" \"A critical kernel error\"\n```\n\n","slug":"golang/RabbitMQ-go教程/主题topic","published":1,"date":"2022-09-27T02:28:22.426Z","updated":"2022-09-28T01:26:21.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgl003wtpdoh2dlhv5j","content":"<p>上一个教程中，采用<code>direct</code>替换了<code>fanout</code>，获得了定向的日志传输和展现，但<code>direct</code>也是存在局限的：它不能基于多个条件进行路由。</p>\n<p>在日志系统中，我们不仅仅是想获取定义严格的日志内容，而是任何资源发送的日志内容。为了实现这样的日志系统，将采用<code>topic</code>类型的转换器。</p>\n<h1 id=\"Topic-exchange\"><a href=\"#Topic-exchange\" class=\"headerlink\" title=\"Topic exchange\"></a>Topic exchange</h1><p>消息通过<code>topic</code>不会有随意的routing_key——它必须是一组内容像是来限制<code>dots</code>。内容为任意但要区别其他。例如：“stock.usd.nyse”、”nyse.vmw”、“quick.orange.rabbit”,最大为225bytes。</p>\n<p>绑定的key也应该是同样的形式，<code>topic</code>和<code>direct</code>、<code>fanout</code>是存在相同的特征的，不同的只是匹配模式不同</p>\n<p><img src=\"/2022/09/27/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98topic/python-five.png\" alt=\"python-five\"></p>\n<p><code>topic</code>通过配置字符串的方式来进行消息队列的传输，</p>\n<p>如果接收的字符为<code>#</code>，则表示接收所有的信息，与<code>fanout</code>相同，如果接收中存在<code>*</code>，则与<code>direct</code>相同</p>\n<p>其中运行代码和第四节相同，仅改变交换类型</p>\n<ul>\n<li>* (star) can substitute for exactly one word.</li>\n<li># (hash) can substitute for zero or more words.</li>\n</ul>\n<h1 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go run receive.go &quot;#&quot;<br>go run receive.go &quot;kern.*&quot;<br>go run receive.go &quot;*.critical&quot;<br>go run receive.go &quot;kern.*&quot; &quot;*.critical&quot;<br>go run send.go &quot;kern.critical&quot; &quot;A critical kernel error&quot;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":731,"excerpt":"","more":"<p>上一个教程中，采用<code>direct</code>替换了<code>fanout</code>，获得了定向的日志传输和展现，但<code>direct</code>也是存在局限的：它不能基于多个条件进行路由。</p>\n<p>在日志系统中，我们不仅仅是想获取定义严格的日志内容，而是任何资源发送的日志内容。为了实现这样的日志系统，将采用<code>topic</code>类型的转换器。</p>\n<h1 id=\"Topic-exchange\"><a href=\"#Topic-exchange\" class=\"headerlink\" title=\"Topic exchange\"></a>Topic exchange</h1><p>消息通过<code>topic</code>不会有随意的routing_key——它必须是一组内容像是来限制<code>dots</code>。内容为任意但要区别其他。例如：“stock.usd.nyse”、”nyse.vmw”、“quick.orange.rabbit”,最大为225bytes。</p>\n<p>绑定的key也应该是同样的形式，<code>topic</code>和<code>direct</code>、<code>fanout</code>是存在相同的特征的，不同的只是匹配模式不同</p>\n<p><img src=\"/2022/09/27/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98topic/python-five.png\" alt=\"python-five\"></p>\n<p><code>topic</code>通过配置字符串的方式来进行消息队列的传输，</p>\n<p>如果接收的字符为<code>#</code>，则表示接收所有的信息，与<code>fanout</code>相同，如果接收中存在<code>*</code>，则与<code>direct</code>相同</p>\n<p>其中运行代码和第四节相同，仅改变交换类型</p>\n<ul>\n<li>* (star) can substitute for exactly one word.</li>\n<li># (hash) can substitute for zero or more words.</li>\n</ul>\n<h1 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go run receive.go &quot;#&quot;<br>go run receive.go &quot;kern.*&quot;<br>go run receive.go &quot;*.critical&quot;<br>go run receive.go &quot;kern.*&quot; &quot;*.critical&quot;<br>go run send.go &quot;kern.critical&quot; &quot;A critical kernel error&quot;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"(二) RabbitMQ go教程——工作队列（work queues）","_content":"\n\n\n本节会创建一个`work queue`,它将在多个工作中分发耗时消费任务。\n\n`work queue`的核心避免快速处理资源密集的任务，必须等待来完成，相反是在完成之后进行调度。封装一个任务作为消息发送给一个队列，一个在后台运行的任务程序将会弹出并处理执行该任务。当有很多works的时候将会在它们之间进行共享。\n\n本节内容在web服务中是极其有用的，可以在一个短的http请求中处理一个完整的任务（例如注册时发送邮件或短信验证码等场景）。\n\n本节代码基于前一节进行改动，只展示改动部分：借助`time.Sleep`函数模拟一些比较耗时的任务——将一些包含`.`的字符串封装成消息发送，有一个`.`就表示需要耗费1秒钟的工作。\n\n# 一\n\n默认情况下，rabbitMQ会给每一个消费者发送每一条消息，平均每一个消费者均会得到相同数量的信息。以下方法称为循环：生产者发送消息的时候，存在多个消费者的时候，消费者依次获取信息。\n\n**Round-robin**的优点是可较容易的并行化，如果工作积压，可以增加多个工人，轻松完成\n\n## send.go\n\n```go\n//定义的队列是幂等的，消息内容是byte数组\n\tbody := bodyFrom(os.Args)\n\t//body := \"Hello World\"\n\n```\n\n添加bodyFrom方法，读取命令行参数信息\n\n```go\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"Hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n```\n\n## receive.go\n\n```go\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t\tdotCount := bytes.Count(d.Body, []byte(\".\"))\n\t\t\tt := time.Duration(dotCount)\n\t\t\ttime.Sleep(time.Second * t) //模拟耗时任务\n\t\t\tlog.Printf(\"Done\")\n\t\t}\n\t}()\n```\n\n## 运行\n\n```shell\ngo run send.go First message.\ngo run send.go Second message..\ngo run send.go Third message...\ngo run send.go Fourth message....\ngo run send.go Fifth message.....\n```\n\n![1663727458340](工作队列/1663727458340.png)\n\n# 二\n\n在上述模拟程序中，如果一个消费者执行了一个较长的任务的时候宕机，我们可能会觉得在接收消息的时候可能会出现消息丢失的情况，但实际上情况并没有想象的那么糟糕。并没有丢失任何一个任务消息，其他运行的接受者会接替已经死亡的这个节点，确保接收信息的准确性。\n\n原因是RabbitMQ提供`ack`确认机制，接受者会提供一个确认信号返回给rabbitmq告知信息已经被取出。\n\n```go\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name, //queue\n\t\t\"\", //consumer\n\t\ttrue, //ack\n\t\tfalse,//exclusive\n\t\tfalse,//no-local\n\t\tfalse,//no-wait\n\t\tnil,//args\n\t)\n```\n\n如果消费者消失（chan关闭，连接关闭或者TCP连接丢失）没有发送ack，rabbitMQ会认为该信息并没有被完整接收，将会返回到队列中。与此同时如果存在其他的消费者的话，会快速传递给其他消费值。\n\n设置ack为false进行手动确认\n\n```go\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\tfalse,\n\t\t//true, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t\tdotCount := bytes.Count(d.Body, []byte(\".\"))\n\t\t\tt := time.Duration(dotCount)\n\t\t\ttime.Sleep(time.Second * t)\n\t\t\tlog.Printf(\"Done\")\n\t\t\td.Ack(false)\n\t\t}\n\t}()\n```\n\n# 公平分发\n\n如果存在调度的不公平性，例如：存在两个任务，但在任务分发的时候，存在奇数任务重，偶数轻，如果依旧按照上述的分配方式，会出现资源闲置的问题。\n\n**解决：**可以将预取计数设置为1（目的是告诉不要向一个work发出多个消息——在处理并确认前一条消息的之前，不要重复发送）。\n\n```go\nerr = ch.Qos(\n  1,     // prefetch count\n  0,     // prefetch size\n  false, // global\n)\n```\n","source":"_posts/golang/RabbitMQ-go教程/工作队列.md","raw":"---\ntitle: (二) RabbitMQ go教程——工作队列（work queues）\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n\n\n本节会创建一个`work queue`,它将在多个工作中分发耗时消费任务。\n\n`work queue`的核心避免快速处理资源密集的任务，必须等待来完成，相反是在完成之后进行调度。封装一个任务作为消息发送给一个队列，一个在后台运行的任务程序将会弹出并处理执行该任务。当有很多works的时候将会在它们之间进行共享。\n\n本节内容在web服务中是极其有用的，可以在一个短的http请求中处理一个完整的任务（例如注册时发送邮件或短信验证码等场景）。\n\n本节代码基于前一节进行改动，只展示改动部分：借助`time.Sleep`函数模拟一些比较耗时的任务——将一些包含`.`的字符串封装成消息发送，有一个`.`就表示需要耗费1秒钟的工作。\n\n# 一\n\n默认情况下，rabbitMQ会给每一个消费者发送每一条消息，平均每一个消费者均会得到相同数量的信息。以下方法称为循环：生产者发送消息的时候，存在多个消费者的时候，消费者依次获取信息。\n\n**Round-robin**的优点是可较容易的并行化，如果工作积压，可以增加多个工人，轻松完成\n\n## send.go\n\n```go\n//定义的队列是幂等的，消息内容是byte数组\n\tbody := bodyFrom(os.Args)\n\t//body := \"Hello World\"\n\n```\n\n添加bodyFrom方法，读取命令行参数信息\n\n```go\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"Hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n```\n\n## receive.go\n\n```go\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t\tdotCount := bytes.Count(d.Body, []byte(\".\"))\n\t\t\tt := time.Duration(dotCount)\n\t\t\ttime.Sleep(time.Second * t) //模拟耗时任务\n\t\t\tlog.Printf(\"Done\")\n\t\t}\n\t}()\n```\n\n## 运行\n\n```shell\ngo run send.go First message.\ngo run send.go Second message..\ngo run send.go Third message...\ngo run send.go Fourth message....\ngo run send.go Fifth message.....\n```\n\n![1663727458340](工作队列/1663727458340.png)\n\n# 二\n\n在上述模拟程序中，如果一个消费者执行了一个较长的任务的时候宕机，我们可能会觉得在接收消息的时候可能会出现消息丢失的情况，但实际上情况并没有想象的那么糟糕。并没有丢失任何一个任务消息，其他运行的接受者会接替已经死亡的这个节点，确保接收信息的准确性。\n\n原因是RabbitMQ提供`ack`确认机制，接受者会提供一个确认信号返回给rabbitmq告知信息已经被取出。\n\n```go\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name, //queue\n\t\t\"\", //consumer\n\t\ttrue, //ack\n\t\tfalse,//exclusive\n\t\tfalse,//no-local\n\t\tfalse,//no-wait\n\t\tnil,//args\n\t)\n```\n\n如果消费者消失（chan关闭，连接关闭或者TCP连接丢失）没有发送ack，rabbitMQ会认为该信息并没有被完整接收，将会返回到队列中。与此同时如果存在其他的消费者的话，会快速传递给其他消费值。\n\n设置ack为false进行手动确认\n\n```go\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\tfalse,\n\t\t//true, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t\tdotCount := bytes.Count(d.Body, []byte(\".\"))\n\t\t\tt := time.Duration(dotCount)\n\t\t\ttime.Sleep(time.Second * t)\n\t\t\tlog.Printf(\"Done\")\n\t\t\td.Ack(false)\n\t\t}\n\t}()\n```\n\n# 公平分发\n\n如果存在调度的不公平性，例如：存在两个任务，但在任务分发的时候，存在奇数任务重，偶数轻，如果依旧按照上述的分配方式，会出现资源闲置的问题。\n\n**解决：**可以将预取计数设置为1（目的是告诉不要向一个work发出多个消息——在处理并确认前一条消息的之前，不要重复发送）。\n\n```go\nerr = ch.Qos(\n  1,     // prefetch count\n  0,     // prefetch size\n  false, // global\n)\n```\n","slug":"golang/RabbitMQ-go教程/工作队列","published":1,"date":"2022-09-20T08:23:10.642Z","updated":"2022-09-22T02:47:10.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgm003ytpdo63pkd018","content":"<p>本节会创建一个<code>work queue</code>,它将在多个工作中分发耗时消费任务。</p>\n<p><code>work queue</code>的核心避免快速处理资源密集的任务，必须等待来完成，相反是在完成之后进行调度。封装一个任务作为消息发送给一个队列，一个在后台运行的任务程序将会弹出并处理执行该任务。当有很多works的时候将会在它们之间进行共享。</p>\n<p>本节内容在web服务中是极其有用的，可以在一个短的http请求中处理一个完整的任务（例如注册时发送邮件或短信验证码等场景）。</p>\n<p>本节代码基于前一节进行改动，只展示改动部分：借助<code>time.Sleep</code>函数模拟一些比较耗时的任务——将一些包含<code>.</code>的字符串封装成消息发送，有一个<code>.</code>就表示需要耗费1秒钟的工作。</p>\n<h1 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h1><p>默认情况下，rabbitMQ会给每一个消费者发送每一条消息，平均每一个消费者均会得到相同数量的信息。以下方法称为循环：生产者发送消息的时候，存在多个消费者的时候，消费者依次获取信息。</p>\n<p><strong>Round-robin</strong>的优点是可较容易的并行化，如果工作积压，可以增加多个工人，轻松完成</p>\n<h2 id=\"send-go\"><a href=\"#send-go\" class=\"headerlink\" title=\"send.go\"></a>send.go</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := bodyFrom(os.Args)<br>\t<span class=\"hljs-comment\">//body := &quot;Hello World&quot;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>添加bodyFrom方法，读取命令行参数信息</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;Hello&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"receive-go\"><a href=\"#receive-go\" class=\"headerlink\" title=\"receive.go\"></a>receive.go</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\tdotCount := bytes.Count(d.Body, []<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">&quot;.&quot;</span>))<br>\t\tt := time.Duration(dotCount)<br>\t\ttime.Sleep(time.Second * t) <span class=\"hljs-comment\">//模拟耗时任务</span><br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Done&quot;</span>)<br>\t&#125;<br>&#125;()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go run send.go First message.<br>go run send.go Second message..<br>go run send.go Third message...<br>go run send.go Fourth message....<br>go run send.go Fifth message.....<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/1663727458340.png\" alt=\"1663727458340\"></p>\n<h1 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h1><p>在上述模拟程序中，如果一个消费者执行了一个较长的任务的时候宕机，我们可能会觉得在接收消息的时候可能会出现消息丢失的情况，但实际上情况并没有想象的那么糟糕。并没有丢失任何一个任务消息，其他运行的接受者会接替已经死亡的这个节点，确保接收信息的准确性。</p>\n<p>原因是RabbitMQ提供<code>ack</code>确认机制，接受者会提供一个确认信号返回给rabbitmq告知信息已经被取出。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>\tq.Name, <span class=\"hljs-comment\">//queue</span><br>\t<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">//consumer</span><br>\t<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//ack</span><br>\t<span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//exclusive</span><br>\t<span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//no-local</span><br>\t<span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//no-wait</span><br>\t<span class=\"hljs-literal\">nil</span>,<span class=\"hljs-comment\">//args</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p>如果消费者消失（chan关闭，连接关闭或者TCP连接丢失）没有发送ack，rabbitMQ会认为该信息并没有被完整接收，将会返回到队列中。与此同时如果存在其他的消费者的话，会快速传递给其他消费值。</p>\n<p>设置ack为false进行手动确认</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">msgs, err := ch.Consume(<br>\tq.Name,<br>\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-comment\">//true, //ack</span><br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-literal\">nil</span>,<br>)<br>failOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br><span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\tdotCount := bytes.Count(d.Body, []<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">&quot;.&quot;</span>))<br>\t\tt := time.Duration(dotCount)<br>\t\ttime.Sleep(time.Second * t)<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Done&quot;</span>)<br>\t\td.Ack(<span class=\"hljs-literal\">false</span>)<br>\t&#125;<br>&#125;()<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"公平分发\"><a href=\"#公平分发\" class=\"headerlink\" title=\"公平分发\"></a>公平分发</h1><p>如果存在调度的不公平性，例如：存在两个任务，但在任务分发的时候，存在奇数任务重，偶数轻，如果依旧按照上述的分配方式，会出现资源闲置的问题。</p>\n<p><strong>解决：</strong>可以将预取计数设置为1（目的是告诉不要向一个work发出多个消息——在处理并确认前一条消息的之前，不要重复发送）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.Qos(<br>  <span class=\"hljs-number\">1</span>,     <span class=\"hljs-comment\">// prefetch count</span><br>  <span class=\"hljs-number\">0</span>,     <span class=\"hljs-comment\">// prefetch size</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// global</span><br>)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2272,"excerpt":"","more":"<p>本节会创建一个<code>work queue</code>,它将在多个工作中分发耗时消费任务。</p>\n<p><code>work queue</code>的核心避免快速处理资源密集的任务，必须等待来完成，相反是在完成之后进行调度。封装一个任务作为消息发送给一个队列，一个在后台运行的任务程序将会弹出并处理执行该任务。当有很多works的时候将会在它们之间进行共享。</p>\n<p>本节内容在web服务中是极其有用的，可以在一个短的http请求中处理一个完整的任务（例如注册时发送邮件或短信验证码等场景）。</p>\n<p>本节代码基于前一节进行改动，只展示改动部分：借助<code>time.Sleep</code>函数模拟一些比较耗时的任务——将一些包含<code>.</code>的字符串封装成消息发送，有一个<code>.</code>就表示需要耗费1秒钟的工作。</p>\n<h1 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h1><p>默认情况下，rabbitMQ会给每一个消费者发送每一条消息，平均每一个消费者均会得到相同数量的信息。以下方法称为循环：生产者发送消息的时候，存在多个消费者的时候，消费者依次获取信息。</p>\n<p><strong>Round-robin</strong>的优点是可较容易的并行化，如果工作积压，可以增加多个工人，轻松完成</p>\n<h2 id=\"send-go\"><a href=\"#send-go\" class=\"headerlink\" title=\"send.go\"></a>send.go</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := bodyFrom(os.Args)<br>\t<span class=\"hljs-comment\">//body := &quot;Hello World&quot;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>添加bodyFrom方法，读取命令行参数信息</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;Hello&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"receive-go\"><a href=\"#receive-go\" class=\"headerlink\" title=\"receive.go\"></a>receive.go</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\tdotCount := bytes.Count(d.Body, []<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">&quot;.&quot;</span>))<br>\t\tt := time.Duration(dotCount)<br>\t\ttime.Sleep(time.Second * t) <span class=\"hljs-comment\">//模拟耗时任务</span><br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Done&quot;</span>)<br>\t&#125;<br>&#125;()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">go run send.go First message.<br>go run send.go Second message..<br>go run send.go Third message...<br>go run send.go Fourth message....<br>go run send.go Fifth message.....<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/20/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/1663727458340.png\" alt=\"1663727458340\"></p>\n<h1 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h1><p>在上述模拟程序中，如果一个消费者执行了一个较长的任务的时候宕机，我们可能会觉得在接收消息的时候可能会出现消息丢失的情况，但实际上情况并没有想象的那么糟糕。并没有丢失任何一个任务消息，其他运行的接受者会接替已经死亡的这个节点，确保接收信息的准确性。</p>\n<p>原因是RabbitMQ提供<code>ack</code>确认机制，接受者会提供一个确认信号返回给rabbitmq告知信息已经被取出。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>msgs, err := ch.Consume(<br>\tq.Name, <span class=\"hljs-comment\">//queue</span><br>\t<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">//consumer</span><br>\t<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//ack</span><br>\t<span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//exclusive</span><br>\t<span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//no-local</span><br>\t<span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//no-wait</span><br>\t<span class=\"hljs-literal\">nil</span>,<span class=\"hljs-comment\">//args</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p>如果消费者消失（chan关闭，连接关闭或者TCP连接丢失）没有发送ack，rabbitMQ会认为该信息并没有被完整接收，将会返回到队列中。与此同时如果存在其他的消费者的话，会快速传递给其他消费值。</p>\n<p>设置ack为false进行手动确认</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">msgs, err := ch.Consume(<br>\tq.Name,<br>\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-comment\">//true, //ack</span><br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-literal\">false</span>,<br>\t<span class=\"hljs-literal\">nil</span>,<br>)<br>failOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br><span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\tdotCount := bytes.Count(d.Body, []<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">&quot;.&quot;</span>))<br>\t\tt := time.Duration(dotCount)<br>\t\ttime.Sleep(time.Second * t)<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Done&quot;</span>)<br>\t\td.Ack(<span class=\"hljs-literal\">false</span>)<br>\t&#125;<br>&#125;()<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"公平分发\"><a href=\"#公平分发\" class=\"headerlink\" title=\"公平分发\"></a>公平分发</h1><p>如果存在调度的不公平性，例如：存在两个任务，但在任务分发的时候，存在奇数任务重，偶数轻，如果依旧按照上述的分配方式，会出现资源闲置的问题。</p>\n<p><strong>解决：</strong>可以将预取计数设置为1（目的是告诉不要向一个work发出多个消息——在处理并确认前一条消息的之前，不要重复发送）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.Qos(<br>  <span class=\"hljs-number\">1</span>,     <span class=\"hljs-comment\">// prefetch count</span><br>  <span class=\"hljs-number\">0</span>,     <span class=\"hljs-comment\">// prefetch size</span><br>  <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// global</span><br>)<br></code></pre></td></tr></table></figure>\n"},{"title":"(五) RabbitMQ go教程——路由（routing）","_content":"\n\n\n在之前的教程中，我们创建了一个小型的日志系统，可以给多个消费者广播一条消息。\n\n本节可以消息发送到目标指定的接收者，比如说：对于日志系统来说，一般会存在这几类日志类型：errror、info、warning等，而我们可能仅对于error类型的错误需要存入磁盘中，其余的日志内容只需要打印出来就可以。\n\n我们之前的有创建队列的绑定，该绑定与转换的格式相关，之前采用`fanout`类型的exchange，表示无差距的向队列传输消息。\n\n绑定也可以通过routing ley来进行指定,具有选择的进行消息的传输\n\n```go\nerr = ch.QueueBind(\n  q.Name,    // queue name\n  \"black\",   // routing key\n  \"logs\",    // exchange\n  false,\n  nil)\n```\n\n绑定密钥的含义取决于交换器的类型，之前使用的`fanout`只是忽略了这个值。\n\n# direct 交换器\n\n我们扩展之前的类型，希望将不同类型的消息进行不同方式的处理。采用`direct`的方式：消息进入`binding key` 和`routing key`完全匹配的队列中。\n\n## `send.go`\n\n创建一个交换器\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//作为发送者，需要声明一个转换体\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs_direct\", //name\n\t\t\"direct\",      //type\n\t\ttrue,          //durable\n\t\tfalse,         //auto-delete\n\t\tfalse,         //internal\n\t\tfalse,         //no-wait\n\t\tnil,           //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\t//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\t//定义的队列是幂等的，消息内容是byte数组\n\tbody := bodyFrom(os.Args)\n\t//body := \"Hello World\"\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"logs_direct\",         //exchange\n\t\tseverityFrom(os.Args), //routing key\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\"[x] Sent %s\\n\", body)\n}\n\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"Hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n\nfunc severityFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || (os.Args[1] == \"\") {\n\t\ts = \"info\"\n\t} else {\n\t\ts = os.Args[1]\n\t}\n\treturn s\n}\n\n```\n\n## `recivce.go`\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs_direct\", //name\n\t\t\"direct\",      //type\n\t\ttrue,          //durable\n\t\tfalse,         //auto-delete\n\t\tfalse,         //internal\n\t\tfalse,         //no-wait\n\t\tnil,           //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\tq, err := ch.QueueDeclare(\n\t\t\"\",\n\t\tfalse,\n\t\tfalse,\n\t\ttrue,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\tif len(os.Args) < 2 {\n\t\tlog.Printf(\"Usage: %s [info] [waring] [error]\", os.Args[0])\n\t\tos.Exit(0)\n\t}\n\n\tfor _, s := range os.Args[1:] {\n\t\tlog.Printf(\"Binding queue %s to exchange %s with routing key %s\",\n\t\t\tq.Name, \"logs_direct\", s)\n\t\terr = ch.QueueBind(\n\t\t\tq.Name,        // queue name\n\t\t\ts,             // routing key\n\t\t\t\"logs_direct\", // exchange\n\t\t\tfalse,\n\t\t\tnil)\n\t\tfailOnError(err, \"Failed to bind a queue\")\n\t}\n\n\tfailOnError(err, \"Failed to bind queue\")\n\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\t//false,\n\t\ttrue, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n## 运行结果\n\n```shell\nubuntu@root:~/go/src/gotest/recevice$ go run receive.go info warning error\n\nubuntu@root:~/go/src/gotest/recevice$ go run receive.go  warning error > logs_from_rabbit.log\n\nubuntu@root:~/go/src/gotest/send$ go run send.go error\n2022/09/26 16:00:56 [x] Sent error\nubuntu@root:~/go/src/gotest/send$ go run send.go info\n2022/09/26 16:03:08 [x] Sent info\nubuntu@root:~/go/src/gotest/send$ go run send.go warning\n2022/09/26 16:03:17 [x] Sent warning\nubuntu@root:~/go/src/gotest/send$ go run send.go error\n\n```\n\n![runtime](路由/runtime.png)\n","source":"_posts/golang/RabbitMQ-go教程/路由.md","raw":"---\ntitle: (五) RabbitMQ go教程——路由（routing）\ncategories: \n- [golang, RabbitMQ-go教程]\ntags:\n- RabbitMQ\n\n---\n\n\n\n在之前的教程中，我们创建了一个小型的日志系统，可以给多个消费者广播一条消息。\n\n本节可以消息发送到目标指定的接收者，比如说：对于日志系统来说，一般会存在这几类日志类型：errror、info、warning等，而我们可能仅对于error类型的错误需要存入磁盘中，其余的日志内容只需要打印出来就可以。\n\n我们之前的有创建队列的绑定，该绑定与转换的格式相关，之前采用`fanout`类型的exchange，表示无差距的向队列传输消息。\n\n绑定也可以通过routing ley来进行指定,具有选择的进行消息的传输\n\n```go\nerr = ch.QueueBind(\n  q.Name,    // queue name\n  \"black\",   // routing key\n  \"logs\",    // exchange\n  false,\n  nil)\n```\n\n绑定密钥的含义取决于交换器的类型，之前使用的`fanout`只是忽略了这个值。\n\n# direct 交换器\n\n我们扩展之前的类型，希望将不同类型的消息进行不同方式的处理。采用`direct`的方式：消息进入`binding key` 和`routing key`完全匹配的队列中。\n\n## `send.go`\n\n创建一个交换器\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\n//\n\n//定义一个helper函数来接受处理错误\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\t//作为发送者，需要声明一个转换体\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs_direct\", //name\n\t\t\"direct\",      //type\n\t\ttrue,          //durable\n\t\tfalse,         //auto-delete\n\t\tfalse,         //internal\n\t\tfalse,         //no-wait\n\t\tnil,           //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\t//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\t//定义的队列是幂等的，消息内容是byte数组\n\tbody := bodyFrom(os.Args)\n\t//body := \"Hello World\"\n\n\terr = ch.PublishWithContext(ctx,\n\t\t\"logs_direct\",         //exchange\n\t\tseverityFrom(os.Args), //routing key\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\"[x] Sent %s\\n\", body)\n}\n\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"Hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n\nfunc severityFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || (os.Args[1] == \"\") {\n\t\ts = \"info\"\n\t} else {\n\t\ts = os.Args[1]\n\t}\n\treturn s\n}\n\n```\n\n## `recivce.go`\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Panicf(\"%s:%s\", err, msg)\n\t}\n}\n\nfunc main() {\n\t//连接rabbitMQ服务端\n\tconn, err := amqp.Dial(\"amqp://guest:guest@172.17.0.2:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\t//创建管道\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\terr = ch.ExchangeDeclare(\n\t\t\"logs_direct\", //name\n\t\t\"direct\",      //type\n\t\ttrue,          //durable\n\t\tfalse,         //auto-delete\n\t\tfalse,         //internal\n\t\tfalse,         //no-wait\n\t\tnil,           //arguments\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\tq, err := ch.QueueDeclare(\n\t\t\"\",\n\t\tfalse,\n\t\tfalse,\n\t\ttrue,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"failed to declare a queue\")\n\n\tif len(os.Args) < 2 {\n\t\tlog.Printf(\"Usage: %s [info] [waring] [error]\", os.Args[0])\n\t\tos.Exit(0)\n\t}\n\n\tfor _, s := range os.Args[1:] {\n\t\tlog.Printf(\"Binding queue %s to exchange %s with routing key %s\",\n\t\t\tq.Name, \"logs_direct\", s)\n\t\terr = ch.QueueBind(\n\t\t\tq.Name,        // queue name\n\t\t\ts,             // routing key\n\t\t\t\"logs_direct\", // exchange\n\t\t\tfalse,\n\t\t\tnil)\n\t\tfailOnError(err, \"Failed to bind a queue\")\n\t}\n\n\tfailOnError(err, \"Failed to bind queue\")\n\n\t//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息\n\tmsgs, err := ch.Consume(\n\t\tq.Name,\n\t\t\"\",\n\t\t//false,\n\t\ttrue, //ack\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\n\tvar forever chan struct{}\n\t//forever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n## 运行结果\n\n```shell\nubuntu@root:~/go/src/gotest/recevice$ go run receive.go info warning error\n\nubuntu@root:~/go/src/gotest/recevice$ go run receive.go  warning error > logs_from_rabbit.log\n\nubuntu@root:~/go/src/gotest/send$ go run send.go error\n2022/09/26 16:00:56 [x] Sent error\nubuntu@root:~/go/src/gotest/send$ go run send.go info\n2022/09/26 16:03:08 [x] Sent info\nubuntu@root:~/go/src/gotest/send$ go run send.go warning\n2022/09/26 16:03:17 [x] Sent warning\nubuntu@root:~/go/src/gotest/send$ go run send.go error\n\n```\n\n![runtime](路由/runtime.png)\n","slug":"golang/RabbitMQ-go教程/路由","published":1,"date":"2022-09-26T06:35:49.289Z","updated":"2022-09-28T01:25:50.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgn0042tpdogczo8e4r","content":"<p>在之前的教程中，我们创建了一个小型的日志系统，可以给多个消费者广播一条消息。</p>\n<p>本节可以消息发送到目标指定的接收者，比如说：对于日志系统来说，一般会存在这几类日志类型：errror、info、warning等，而我们可能仅对于error类型的错误需要存入磁盘中，其余的日志内容只需要打印出来就可以。</p>\n<p>我们之前的有创建队列的绑定，该绑定与转换的格式相关，之前采用<code>fanout</code>类型的exchange，表示无差距的向队列传输消息。</p>\n<p>绑定也可以通过routing ley来进行指定,具有选择的进行消息的传输</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.QueueBind(<br>  q.Name,    <span class=\"hljs-comment\">// queue name</span><br>  <span class=\"hljs-string\">&quot;black&quot;</span>,   <span class=\"hljs-comment\">// routing key</span><br>  <span class=\"hljs-string\">&quot;logs&quot;</span>,    <span class=\"hljs-comment\">// exchange</span><br>  <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-literal\">nil</span>)<br></code></pre></td></tr></table></figure>\n\n<p>绑定密钥的含义取决于交换器的类型，之前使用的<code>fanout</code>只是忽略了这个值。</p>\n<h1 id=\"direct-交换器\"><a href=\"#direct-交换器\" class=\"headerlink\" title=\"direct 交换器\"></a>direct 交换器</h1><p>我们扩展之前的类型，希望将不同类型的消息进行不同方式的处理。采用<code>direct</code>的方式：消息进入<code>binding key</code> 和<code>routing key</code>完全匹配的队列中。</p>\n<h2 id=\"send-go\"><a href=\"#send-go\" class=\"headerlink\" title=\"send.go\"></a><code>send.go</code></h2><p>创建一个交换器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//</span><br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//作为发送者，需要声明一个转换体</span><br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>, <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;direct&quot;</span>,      <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,          <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,           <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\t<span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := bodyFrom(os.Args)<br>\t<span class=\"hljs-comment\">//body := &quot;Hello World&quot;</span><br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>,         <span class=\"hljs-comment\">//exchange</span><br>\t\tseverityFrom(os.Args), <span class=\"hljs-comment\">//routing key</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType: <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tBody:        []<span class=\"hljs-type\">byte</span>(body),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Sent %s\\n&quot;</span>, body)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;Hello&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">severityFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || (os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;info&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = os.Args[<span class=\"hljs-number\">1</span>]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"recivce-go\"><a href=\"#recivce-go\" class=\"headerlink\" title=\"recivce.go\"></a><code>recivce.go</code></h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>, <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;direct&quot;</span>,      <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,          <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,           <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(os.Args) &lt; <span class=\"hljs-number\">2</span> &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Usage: %s [info] [waring] [error]&quot;</span>, os.Args[<span class=\"hljs-number\">0</span>])<br>\t\tos.Exit(<span class=\"hljs-number\">0</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, s := <span class=\"hljs-keyword\">range</span> os.Args[<span class=\"hljs-number\">1</span>:] &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Binding queue %s to exchange %s with routing key %s&quot;</span>,<br>\t\t\tq.Name, <span class=\"hljs-string\">&quot;logs_direct&quot;</span>, s)<br>\t\terr = ch.QueueBind(<br>\t\t\tq.Name,        <span class=\"hljs-comment\">// queue name</span><br>\t\t\ts,             <span class=\"hljs-comment\">// routing key</span><br>\t\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>, <span class=\"hljs-comment\">// exchange</span><br>\t\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t\t<span class=\"hljs-literal\">nil</span>)<br>\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to bind a queue&quot;</span>)<br>\t&#125;<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to bind queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-comment\">//false,</span><br>\t\t<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//ack</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\t<span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest/recevice$ go run receive.go info warning error<br><br>ubuntu@root:~/go/src/gotest/recevice$ go run receive.go  warning error &gt; logs_from_rabbit.log<br><br>ubuntu@root:~/go/src/gotest/send$ go run send.go error<br>2022/09/26 16:00:56 [x] Sent error<br>ubuntu@root:~/go/src/gotest/send$ go run send.go info<br>2022/09/26 16:03:08 [x] Sent info<br>ubuntu@root:~/go/src/gotest/send$ go run send.go warning<br>2022/09/26 16:03:17 [x] Sent warning<br>ubuntu@root:~/go/src/gotest/send$ go run send.go error<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/26/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E8%B7%AF%E7%94%B1/runtime.png\" alt=\"runtime\"></p>\n","site":{"data":{}},"wordcount":4545,"excerpt":"","more":"<p>在之前的教程中，我们创建了一个小型的日志系统，可以给多个消费者广播一条消息。</p>\n<p>本节可以消息发送到目标指定的接收者，比如说：对于日志系统来说，一般会存在这几类日志类型：errror、info、warning等，而我们可能仅对于error类型的错误需要存入磁盘中，其余的日志内容只需要打印出来就可以。</p>\n<p>我们之前的有创建队列的绑定，该绑定与转换的格式相关，之前采用<code>fanout</code>类型的exchange，表示无差距的向队列传输消息。</p>\n<p>绑定也可以通过routing ley来进行指定,具有选择的进行消息的传输</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">err = ch.QueueBind(<br>  q.Name,    <span class=\"hljs-comment\">// queue name</span><br>  <span class=\"hljs-string\">&quot;black&quot;</span>,   <span class=\"hljs-comment\">// routing key</span><br>  <span class=\"hljs-string\">&quot;logs&quot;</span>,    <span class=\"hljs-comment\">// exchange</span><br>  <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-literal\">nil</span>)<br></code></pre></td></tr></table></figure>\n\n<p>绑定密钥的含义取决于交换器的类型，之前使用的<code>fanout</code>只是忽略了这个值。</p>\n<h1 id=\"direct-交换器\"><a href=\"#direct-交换器\" class=\"headerlink\" title=\"direct 交换器\"></a>direct 交换器</h1><p>我们扩展之前的类型，希望将不同类型的消息进行不同方式的处理。采用<code>direct</code>的方式：消息进入<code>binding key</code> 和<code>routing key</code>完全匹配的队列中。</p>\n<h2 id=\"send-go\"><a href=\"#send-go\" class=\"headerlink\" title=\"send.go\"></a><code>send.go</code></h2><p>创建一个交换器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-comment\">//</span><br><br><span class=\"hljs-comment\">//定义一个helper函数来接受处理错误</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, msg, err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\t<span class=\"hljs-comment\">//作为发送者，需要声明一个转换体</span><br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>, <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;direct&quot;</span>,      <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,          <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,           <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//设置context包，可以轻松地将请求范围的值、取消信号和截止日期跨 API 边界传递给处理请求所涉及的所有 goroutine</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class=\"hljs-number\">5</span>)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br><br>\t<span class=\"hljs-comment\">//定义的队列是幂等的，消息内容是byte数组</span><br>\tbody := bodyFrom(os.Args)<br>\t<span class=\"hljs-comment\">//body := &quot;Hello World&quot;</span><br><br>\terr = ch.PublishWithContext(ctx,<br>\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>,         <span class=\"hljs-comment\">//exchange</span><br>\t\tseverityFrom(os.Args), <span class=\"hljs-comment\">//routing key</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\tamqp.Publishing&#123;<br>\t\t\tContentType: <span class=\"hljs-string\">&quot;text/plain&quot;</span>,<br>\t\t\tBody:        []<span class=\"hljs-type\">byte</span>(body),<br>\t\t&#125;)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to publish a message&quot;</span>)<br>\tlog.Printf(<span class=\"hljs-string\">&quot;[x] Sent %s\\n&quot;</span>, body)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bodyFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;Hello&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = strings.Join(args[<span class=\"hljs-number\">1</span>:], <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">severityFrom</span><span class=\"hljs-params\">(args []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(args) &lt; <span class=\"hljs-number\">2</span>) || (os.Args[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>\t\ts = <span class=\"hljs-string\">&quot;info&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\ts = os.Args[<span class=\"hljs-number\">1</span>]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"recivce-go\"><a href=\"#recivce-go\" class=\"headerlink\" title=\"recivce.go\"></a><code>recivce.go</code></h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br><br>\tamqp <span class=\"hljs-string\">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failOnError</span><span class=\"hljs-params\">(err <span class=\"hljs-type\">error</span>, msg <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Panicf(<span class=\"hljs-string\">&quot;%s:%s&quot;</span>, err, msg)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">//连接rabbitMQ服务端</span><br>\tconn, err := amqp.Dial(<span class=\"hljs-string\">&quot;amqp://guest:guest@172.17.0.2:5672/&quot;</span>)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to connect to RabbitMQ&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br><br>\t<span class=\"hljs-comment\">//创建管道</span><br>\tch, err := conn.Channel()<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to open a channel&quot;</span>)<br>\t<span class=\"hljs-keyword\">defer</span> ch.Close()<br><br>\terr = ch.ExchangeDeclare(<br>\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>, <span class=\"hljs-comment\">//name</span><br>\t\t<span class=\"hljs-string\">&quot;direct&quot;</span>,      <span class=\"hljs-comment\">//type</span><br>\t\t<span class=\"hljs-literal\">true</span>,          <span class=\"hljs-comment\">//durable</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//auto-delete</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//internal</span><br>\t\t<span class=\"hljs-literal\">false</span>,         <span class=\"hljs-comment\">//no-wait</span><br>\t\t<span class=\"hljs-literal\">nil</span>,           <span class=\"hljs-comment\">//arguments</span><br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\tq, err := ch.QueueDeclare(<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">true</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;failed to declare a queue&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(os.Args) &lt; <span class=\"hljs-number\">2</span> &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Usage: %s [info] [waring] [error]&quot;</span>, os.Args[<span class=\"hljs-number\">0</span>])<br>\t\tos.Exit(<span class=\"hljs-number\">0</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, s := <span class=\"hljs-keyword\">range</span> os.Args[<span class=\"hljs-number\">1</span>:] &#123;<br>\t\tlog.Printf(<span class=\"hljs-string\">&quot;Binding queue %s to exchange %s with routing key %s&quot;</span>,<br>\t\t\tq.Name, <span class=\"hljs-string\">&quot;logs_direct&quot;</span>, s)<br>\t\terr = ch.QueueBind(<br>\t\t\tq.Name,        <span class=\"hljs-comment\">// queue name</span><br>\t\t\ts,             <span class=\"hljs-comment\">// routing key</span><br>\t\t\t<span class=\"hljs-string\">&quot;logs_direct&quot;</span>, <span class=\"hljs-comment\">// exchange</span><br>\t\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t\t<span class=\"hljs-literal\">nil</span>)<br>\t\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to bind a queue&quot;</span>)<br>\t&#125;<br><br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to bind queue&quot;</span>)<br><br>\t<span class=\"hljs-comment\">//将告诉服务段请在队列中传输消息，我们将在管道中读取到该消息</span><br>\tmsgs, err := ch.Consume(<br>\t\tq.Name,<br>\t\t<span class=\"hljs-string\">&quot;&quot;</span>,<br>\t\t<span class=\"hljs-comment\">//false,</span><br>\t\t<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//ack</span><br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">false</span>,<br>\t\t<span class=\"hljs-literal\">nil</span>,<br>\t)<br>\tfailOnError(err, <span class=\"hljs-string\">&quot;Failed to register a consumer&quot;</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> forever <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\t<span class=\"hljs-comment\">//forever := make(chan bool)</span><br><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">range</span> msgs &#123;<br>\t\t\tlog.Printf(<span class=\"hljs-string\">&quot;Received a message: %s&quot;</span>, d.Body)<br>\t\t&#125;<br>\t&#125;()<br>\tlog.Printf(<span class=\"hljs-string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)<br>\t&lt;-forever<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/go/src/gotest/recevice$ go run receive.go info warning error<br><br>ubuntu@root:~/go/src/gotest/recevice$ go run receive.go  warning error &gt; logs_from_rabbit.log<br><br>ubuntu@root:~/go/src/gotest/send$ go run send.go error<br>2022/09/26 16:00:56 [x] Sent error<br>ubuntu@root:~/go/src/gotest/send$ go run send.go info<br>2022/09/26 16:03:08 [x] Sent info<br>ubuntu@root:~/go/src/gotest/send$ go run send.go warning<br>2022/09/26 16:03:17 [x] Sent warning<br>ubuntu@root:~/go/src/gotest/send$ go run send.go error<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/26/golang/RabbitMQ-go%E6%95%99%E7%A8%8B/%E8%B7%AF%E7%94%B1/runtime.png\" alt=\"runtime\"></p>\n"},{"title":"上传文件&&Template","_content":"\n## HTML模板\n\n```go\n\tr.LoadHTMLGlob(\"templates/*\")\n\tstu1 := &Student{Name: \"Geektutu\", Age: 20}\n\tstu2 := &Student{Name: \"Jack\", Age: 22}\n\tr.GET(\"/arr\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"arr.tmpl\", gin.H{\n\t\t\t\"title\":  \"World\",\n\t\t\t\"stuArr\": [2]*Student{stu1, stu2},\n\t\t})\n\t})\n```\n\n```\n<!-- templates/arr.tmpl -->\n<html>\n<body>\n    <p>hello, {{.title}}</p>\n    {{range $index, $ele := .stuArr }}\n    <p>{{ $index }}: {{ $ele.Name }} is {{ $ele.Age }} years old</p>\n    {{ end }}\n</body>\n</html>\n```\n\n结果：\n\n```shell\nubuntu@root:~/Pictures$ curl http://localhost:8080/arr\n\n<html>\n<body>\n    <p>hello, World</p>\n    \n    <p>0: Geektutu is 20 years old</p>\n    \n    <p>1: Jack is 22 years old</p>\n    \n</body>\n\n```\n\n\n\n## 文件上传\n\n### 单文件上传\n\n```go\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"upload\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"请求失败\")\n\t\t}\n\n\t\tfilename := file.Filename\n\t\tfmt.Println(\"文件名:\", filename)\n\n\t\t//保存到本地服务器\n\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"保存失败 Error:%s\", err.Error())\n\t\t}\n\t\tc.String(http.StatusOK, \"上传成功\")\n\t})\n```\n\n测试： \n\ncurl -X POST http://localhost:8080/upload -F \"upload=@文件目录地址\" -H \"Content-Type: multipart/form-data\"\n上传成功\n\n### 多文件上传\n\n```go\n\tr.POST(\"/uploads\", func(c *gin.Context) {\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"请求失败\")\n\t\t}\n\t\tfiles := form.File[\"uploads[]\"]\n\n\t\tfor _, file := range files {\n\t\t\tfmt.Println(\"文件名：\", file)\n\t\t\tif err := c.SaveUploadedFile(file, file.Filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"保存失败 Error:%s\", err.Error())\n\t\t\t}\n\t\t}\n\t\tc.String(http.StatusOK, \"上传成功\")\n\n\t})\n```\n\n测试：\n\n```shell\nubuntu@root:~/Pictures$ curl -X POST http://localhost:8080/uploads -F \"upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-07.png\"  -F \"upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-38.png\" -H \"Content-Type: multipart/form-data\"\n上传成功\n```\n\n","source":"_posts/golang/gin框架/上传文件&Template.md","raw":"---\ntitle: 上传文件&&Template\ncategories: \n- [golang, gin框架]\n---\n\n## HTML模板\n\n```go\n\tr.LoadHTMLGlob(\"templates/*\")\n\tstu1 := &Student{Name: \"Geektutu\", Age: 20}\n\tstu2 := &Student{Name: \"Jack\", Age: 22}\n\tr.GET(\"/arr\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"arr.tmpl\", gin.H{\n\t\t\t\"title\":  \"World\",\n\t\t\t\"stuArr\": [2]*Student{stu1, stu2},\n\t\t})\n\t})\n```\n\n```\n<!-- templates/arr.tmpl -->\n<html>\n<body>\n    <p>hello, {{.title}}</p>\n    {{range $index, $ele := .stuArr }}\n    <p>{{ $index }}: {{ $ele.Name }} is {{ $ele.Age }} years old</p>\n    {{ end }}\n</body>\n</html>\n```\n\n结果：\n\n```shell\nubuntu@root:~/Pictures$ curl http://localhost:8080/arr\n\n<html>\n<body>\n    <p>hello, World</p>\n    \n    <p>0: Geektutu is 20 years old</p>\n    \n    <p>1: Jack is 22 years old</p>\n    \n</body>\n\n```\n\n\n\n## 文件上传\n\n### 单文件上传\n\n```go\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"upload\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"请求失败\")\n\t\t}\n\n\t\tfilename := file.Filename\n\t\tfmt.Println(\"文件名:\", filename)\n\n\t\t//保存到本地服务器\n\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"保存失败 Error:%s\", err.Error())\n\t\t}\n\t\tc.String(http.StatusOK, \"上传成功\")\n\t})\n```\n\n测试： \n\ncurl -X POST http://localhost:8080/upload -F \"upload=@文件目录地址\" -H \"Content-Type: multipart/form-data\"\n上传成功\n\n### 多文件上传\n\n```go\n\tr.POST(\"/uploads\", func(c *gin.Context) {\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"请求失败\")\n\t\t}\n\t\tfiles := form.File[\"uploads[]\"]\n\n\t\tfor _, file := range files {\n\t\t\tfmt.Println(\"文件名：\", file)\n\t\t\tif err := c.SaveUploadedFile(file, file.Filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"保存失败 Error:%s\", err.Error())\n\t\t\t}\n\t\t}\n\t\tc.String(http.StatusOK, \"上传成功\")\n\n\t})\n```\n\n测试：\n\n```shell\nubuntu@root:~/Pictures$ curl -X POST http://localhost:8080/uploads -F \"upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-07.png\"  -F \"upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-38.png\" -H \"Content-Type: multipart/form-data\"\n上传成功\n```\n\n","slug":"golang/gin框架/上传文件&Template","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:32:02.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgo0043tpdo73lt9orq","content":"<h2 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.LoadHTMLGlob(<span class=\"hljs-string\">&quot;templates/*&quot;</span>)<br>stu1 := &amp;Student&#123;Name: <span class=\"hljs-string\">&quot;Geektutu&quot;</span>, Age: <span class=\"hljs-number\">20</span>&#125;<br>stu2 := &amp;Student&#123;Name: <span class=\"hljs-string\">&quot;Jack&quot;</span>, Age: <span class=\"hljs-number\">22</span>&#125;<br>r.GET(<span class=\"hljs-string\">&quot;/arr&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tc.HTML(http.StatusOK, <span class=\"hljs-string\">&quot;arr.tmpl&quot;</span>, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;title&quot;</span>:  <span class=\"hljs-string\">&quot;World&quot;</span>,<br>\t\t<span class=\"hljs-string\">&quot;stuArr&quot;</span>: [<span class=\"hljs-number\">2</span>]*Student&#123;stu1, stu2&#125;,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- templates/arr.tmpl --&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>hello, </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">.title</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">range</span> $index, $ele <span class=\"hljs-attr\">:</span>= .stuArr &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">$index</span> &#125;&#125;</span><span class=\"language-xml\">: </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">$ele.Name</span> &#125;&#125;</span><span class=\"language-xml\"> is </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">$ele.Age</span> &#125;&#125;</span><span class=\"language-xml\"> years old<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">end</span> &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Pictures$ curl http://localhost:8080/arr<br><br>&lt;html&gt;<br>&lt;body&gt;<br>    &lt;p&gt;hello, World&lt;/p&gt;<br>    <br>    &lt;p&gt;0: Geektutu is 20 years old&lt;/p&gt;<br>    <br>    &lt;p&gt;1: Jack is 22 years old&lt;/p&gt;<br>    <br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"单文件上传\"><a href=\"#单文件上传\" class=\"headerlink\" title=\"单文件上传\"></a>单文件上传</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/upload&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfile, err := c.FormFile(<span class=\"hljs-string\">&quot;upload&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;请求失败&quot;</span>)<br>\t&#125;<br><br>\tfilename := file.Filename<br>\tfmt.Println(<span class=\"hljs-string\">&quot;文件名:&quot;</span>, filename)<br><br>\t<span class=\"hljs-comment\">//保存到本地服务器</span><br>\t<span class=\"hljs-keyword\">if</span> err := c.SaveUploadedFile(file, filename); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>\t&#125;<br>\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;上传成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>测试： </p>\n<p>curl -X POST <a href=\"http://localhost:8080/upload\">http://localhost:8080/upload</a> -F “upload=@文件目录地址” -H “Content-Type: multipart/form-data”<br>上传成功</p>\n<h3 id=\"多文件上传\"><a href=\"#多文件上传\" class=\"headerlink\" title=\"多文件上传\"></a>多文件上传</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/uploads&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tform, err := c.MultipartForm()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;请求失败&quot;</span>)<br>\t&#125;<br>\tfiles := form.File[<span class=\"hljs-string\">&quot;uploads[]&quot;</span>]<br><br>\t<span class=\"hljs-keyword\">for</span> _, file := <span class=\"hljs-keyword\">range</span> files &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;文件名：&quot;</span>, file)<br>\t\t<span class=\"hljs-keyword\">if</span> err := c.SaveUploadedFile(file, file.Filename); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>\t\t&#125;<br>\t&#125;<br>\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;上传成功&quot;</span>)<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Pictures$ curl -X POST http://localhost:8080/uploads -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-07.png&quot;  -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-38.png&quot; -H &quot;Content-Type: multipart/form-data&quot;<br>上传成功<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2222,"excerpt":"","more":"<h2 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.LoadHTMLGlob(<span class=\"hljs-string\">&quot;templates/*&quot;</span>)<br>stu1 := &amp;Student&#123;Name: <span class=\"hljs-string\">&quot;Geektutu&quot;</span>, Age: <span class=\"hljs-number\">20</span>&#125;<br>stu2 := &amp;Student&#123;Name: <span class=\"hljs-string\">&quot;Jack&quot;</span>, Age: <span class=\"hljs-number\">22</span>&#125;<br>r.GET(<span class=\"hljs-string\">&quot;/arr&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tc.HTML(http.StatusOK, <span class=\"hljs-string\">&quot;arr.tmpl&quot;</span>, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;title&quot;</span>:  <span class=\"hljs-string\">&quot;World&quot;</span>,<br>\t\t<span class=\"hljs-string\">&quot;stuArr&quot;</span>: [<span class=\"hljs-number\">2</span>]*Student&#123;stu1, stu2&#125;,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- templates/arr.tmpl --&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>hello, </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">.title</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">range</span> $index, $ele <span class=\"hljs-attr\">:</span>= .stuArr &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">$index</span> &#125;&#125;</span><span class=\"language-xml\">: </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">$ele.Name</span> &#125;&#125;</span><span class=\"language-xml\"> is </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">$ele.Age</span> &#125;&#125;</span><span class=\"language-xml\"> years old<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">end</span> &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Pictures$ curl http://localhost:8080/arr<br><br>&lt;html&gt;<br>&lt;body&gt;<br>    &lt;p&gt;hello, World&lt;/p&gt;<br>    <br>    &lt;p&gt;0: Geektutu is 20 years old&lt;/p&gt;<br>    <br>    &lt;p&gt;1: Jack is 22 years old&lt;/p&gt;<br>    <br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"单文件上传\"><a href=\"#单文件上传\" class=\"headerlink\" title=\"单文件上传\"></a>单文件上传</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/upload&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfile, err := c.FormFile(<span class=\"hljs-string\">&quot;upload&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;请求失败&quot;</span>)<br>\t&#125;<br><br>\tfilename := file.Filename<br>\tfmt.Println(<span class=\"hljs-string\">&quot;文件名:&quot;</span>, filename)<br><br>\t<span class=\"hljs-comment\">//保存到本地服务器</span><br>\t<span class=\"hljs-keyword\">if</span> err := c.SaveUploadedFile(file, filename); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>\t&#125;<br>\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;上传成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>测试： </p>\n<p>curl -X POST <a href=\"http://localhost:8080/upload\">http://localhost:8080/upload</a> -F “upload=@文件目录地址” -H “Content-Type: multipart/form-data”<br>上传成功</p>\n<h3 id=\"多文件上传\"><a href=\"#多文件上传\" class=\"headerlink\" title=\"多文件上传\"></a>多文件上传</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/uploads&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tform, err := c.MultipartForm()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;请求失败&quot;</span>)<br>\t&#125;<br>\tfiles := form.File[<span class=\"hljs-string\">&quot;uploads[]&quot;</span>]<br><br>\t<span class=\"hljs-keyword\">for</span> _, file := <span class=\"hljs-keyword\">range</span> files &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;文件名：&quot;</span>, file)<br>\t\t<span class=\"hljs-keyword\">if</span> err := c.SaveUploadedFile(file, file.Filename); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tc.String(http.StatusBadRequest, <span class=\"hljs-string\">&quot;保存失败 Error:%s&quot;</span>, err.Error())<br>\t\t&#125;<br>\t&#125;<br>\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;上传成功&quot;</span>)<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu@root:~/Pictures$ curl -X POST http://localhost:8080/uploads -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-07.png&quot;  -F &quot;upload[]=@/home/ubuntu/Pictures/Screenshot from 2022-08-25 10-26-38.png&quot; -H &quot;Content-Type: multipart/form-data&quot;<br>上传成功<br></code></pre></td></tr></table></figure>\n\n"},{"title":"middleware——中间件","_content":"\n# middleware\n\n## 概念\n\n中间件处理处理程序是简单的http.Handler,它包装另一个http.Handler\n\n作请求的一些预处理和或后处理，被称为中间件。\n\n每个中间件只处理一件事情，完成后将其传递给另一个中间件或者最终处理程序，可以做到程序的解耦，减少程序的冗余和降低代码复用率。\n\n## 应用\n\n常见的用例：请求如之记录、header操纵、http请求认证和Responseriter劫持等等。\n\n- 记录对服务器发送的请求\n- 处理服务器响应\n- 请求和处理之间做一个权限认证工作\n- 远程调用\n- 安全\n\n## example\n\n### 单中间件\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\n//\"github.com/gin-gonic/gin\"\n\nfunc logging(f http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tlog.Println(r.URL.Path)\n\t\tf(w, r)\n\t}\n}\n\nfunc foo(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"foo\")\n}\n\nfunc bar(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"bar\")\n}\n\nfunc loggingMiddleWare(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlog.Println(r.URL.Path)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\nfunc main() {\n\thttp.Handle(\"/foo\", loggingMiddleWare(http.HandlerFunc(foo)))\n\thttp.Handle(\"/bar\", loggingMiddleWare(http.HandlerFunc(bar)))\n\t//http.HandleFunc(\"/foo\", logging(foo))\n\t//http.HandleFunc(\"/bar\", logging(bar))\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n### 多中间件\n\n中间件将方法作为参数之一，包装并返回一个新的方法服务器，定义一种新的MiddlWare，容易将多个中间件连接起来\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\n//\"github.com/gin-gonic/gin\"\n\ntype MiddleWare func(http.HandlerFunc) http.HandlerFunc\n\ntype MiddleWare1 func(http.Handler) http.Handler\n\n//日志打印\nfunc logging() MiddleWare1 {\n\treturn func(h http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tstart := time.Now()\n\t\t\tdefer func() {\n\t\t\t\tlog.Println(r.URL.Path)\n\t\t\t\ttime.Since(start)\n\t\t\t}()\n\t\t\th.ServeHTTP(w, r)\n\t\t})\n\t}\n}\n\nfunc method(m string) MiddleWare1 {\n\treturn func(h http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method != m {\n\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n\t\t\t}\n\t\t\th.ServeHTTP(w, r)\n\t\t})\n\t}\n}\n\nfunc chain1(f http.Handler, middlewares ...MiddleWare1) http.Handler {\n\tfor _, m := range middlewares {\n\t\tf = m(f)\n\t}\n\treturn f\n}\n\nfunc Logging() MiddleWare {\n\treturn func(hf http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tstart := time.Now()\n\n\t\t\tdefer func() {\n\t\t\t\tlog.Println(r.URL.Path)\n\t\t\t\ttime.Since(start)\n\t\t\t}()\n\t\t\thf(w, r)\n\t\t}\n\n\t}\n}\n\nfunc Method(m string) MiddleWare {\n\treturn func(hf http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method != m {\n\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n\t\t\t}\n\t\t\thf(w, r)\n\t\t}\n\t}\n}\n\nfunc chain(f http.HandlerFunc, middlewares ...MiddleWare) http.HandlerFunc {\n\tfor _, m := range middlewares {\n\t\tf = m(f)\n\t}\n\treturn f\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"hello world\")\n}\n\nfunc main() {\n\thttp.Handle(\"/test\", chain1(http.HandlerFunc(Hello), method(\"GET\"), logging()))\n\thttp.HandleFunc(\"/\", chain(Hello, Method(\"GET\"), Logging()))\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\n### gin中间件\n\n```go\nr:=gin.Default()//创建带有默认的中间件路由（包含logger和recovery）\nr:=gin.new()//创建没有中间件的路由\n```\n\n两种中间件方式，后续展示第二种\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n//\"github.com/gin-gonic/gin\"\n\n/**\n自定义日志中间件第一种方式-----请求之前\n自定义日志中间件第一种方式-----请求之后\n2022/08/31 15:40:57 12345\n2022/08/31 15:40:57 64.542µs\n2022/08/31 15:40:57 200\n**/\nfunc Logger() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tt := time.Now()\n\t\tfmt.Println(\"自定义日志中间件第一种方式-----请求之前\")\n\t\t//在gin上下文定义一个变量\n\t\tctx.Set(\"example\", \"12345\")\n\t\t//请求之前\n\t\tctx.Next()\n\t\tfmt.Println(\"自定义日志中间件第一种方式-----请求之后\")\n\t\t//计算整个请求过程\n\t\tlatency := time.Since(t)\n\t\tlog.Print(latency)\n\n\t\t//请求状态打印\n\t\tstatus := ctx.Writer.Status()\n\t\tlog.Println(status)\n\t}\n}\n\n/**\n自定义日志中间件第二种方式-----请求之前\n自定义日志中间件第二种方式-----请求之后\n2022/08/31 15:40:17 12345\n2022/08/31 15:40:17 60.112µs\n2022/08/31 15:40:17 200\n**/\nfunc Logger1(c *gin.Context) {\n\tt := time.Now()\n\tfmt.Println(\"自定义日志中间件第二种方式-----请求之前\")\n\t//在gin上下文定义一个变量\n\tc.Set(\"example\", \"12345\")\n\t//请求之前\n\tc.Next()\n\tfmt.Println(\"自定义日志中间件第二种方式-----请求之后\")\n\t//计算整个请求过程\n\tlatency := time.Since(t)\n\tlog.Print(latency)\n\n\t//请求状态打印\n\tstatus := c.Writer.Status()\n\tlog.Println(status)\n}\nfunc main() {\n\tr := gin.New()\n\tr.Use(Logger())\n\t//r.Use(Logger1)\n\tr.GET(\"/test\", func(ctx *gin.Context) {\n\t\texam := ctx.MustGet(\"example\").(string)\n\t\tlog.Println(exam)\n\t})\n\tr.Run()\n}\n\n```\n\n**路由器中间件**\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RouterMiddle1(c *gin.Context) {\n\tfmt.Println(\"路由中间1\")\n}\n\nfunc RouterMiddle2(c *gin.Context) {\n\tfmt.Println(\"路由中间2\")\n}\n\nfunc onRouterMiddleHandle() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tfmt.Println(\"业务处理\")\n\t}\n}\nfunc main() {\n\tr := gin.New()\n\t/**\n\t路由中间1\n\t路由中间2\n\t业务处理\n\t*/\n\tr.GET(\"/onRouterMiddle\", RouterMiddle1, RouterMiddle2, onRouterMiddleHandle())\n\tr.Run()\n}\n```\n\n**路由组中间件**\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n//路由组中间件\nfunc GroupRouterGoodsMiddle1(c *gin.Context) {\n\tfmt.Println(\"goods路由组中间件1\")\n}\n\nfunc GroupRouterGoodsMiddle2(c *gin.Context) {\n\tfmt.Println(\"goods路由组中间件2\")\n}\n\nfunc GroupRouterOrdersMiddle1(c *gin.Context) {\n\tfmt.Println(\"Orders路由组中间件1\")\n}\n\nfunc GroupRouterOrdersMiddle2(c *gin.Context) {\n\tfmt.Println(\"Orders路由组中间件2\")\n}\n\nfunc main() {\n\tr := gin.New()\n\tr.Use(gin.Logger())\n\n    //curl 127.0.0.1:8080/goods/add\n    /**\n    goods路由组中间件1\n\tgoods路由组中间件2\n\t/goods/add\n    */\n\tgoodsGroup := r.Group(\"/goods\", GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)\n\t{\n\t\tgoodsGroup.GET(\"/add\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/goods/add\")\n\t\t})\n\t}\n    r.Group(\"/goods\", GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2).GET(\"/add\", func(ctx *gin.Context) {\n\t\tfmt.Println(\"/goods/add\")\n\t})\n    \n    //curl 127.0.0.1:8080/goods/add\n    //控制台结果：/goods/add\n\tr.Group(\"/goods\", GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)\n\tr.GET(\"/goods/add\", func(ctx *gin.Context) {\n\t\tfmt.Println(\"/goods/add\")\n\t})\n    \n    \n\torderGroup := r.Group(\"/order\")\n\torderGroup.Use(GroupRouterOrdersMiddle1, GroupRouterOrdersMiddle2)\n\t{\n\t\torderGroup.GET(\"/add\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/add\")\n\t\t})\n\n\t\torderGroup.GET(\"/del\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/del\")\n\t\t})\n\n\t\t//嵌套\n\t\ttestGroup := orderGroup.Group(\"/test\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/test下的中间件\")\n\t\t})\n\n\t\ttestGroup.GET(\"/test1\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/test/test1下的函数\")\n\t\t})\n\n\t}\n\tr.Run()\n}\n```\n\n\n\n**结论：** 全局中间件 > 路由组中间件 > 路由中间件\n 全局中间件最先执行","source":"_posts/golang/gin框架/中间件.md","raw":"---\ntitle: middleware——中间件\ncategories: \n- [golang, gin框架]\n---\n\n# middleware\n\n## 概念\n\n中间件处理处理程序是简单的http.Handler,它包装另一个http.Handler\n\n作请求的一些预处理和或后处理，被称为中间件。\n\n每个中间件只处理一件事情，完成后将其传递给另一个中间件或者最终处理程序，可以做到程序的解耦，减少程序的冗余和降低代码复用率。\n\n## 应用\n\n常见的用例：请求如之记录、header操纵、http请求认证和Responseriter劫持等等。\n\n- 记录对服务器发送的请求\n- 处理服务器响应\n- 请求和处理之间做一个权限认证工作\n- 远程调用\n- 安全\n\n## example\n\n### 单中间件\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\n//\"github.com/gin-gonic/gin\"\n\nfunc logging(f http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tlog.Println(r.URL.Path)\n\t\tf(w, r)\n\t}\n}\n\nfunc foo(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"foo\")\n}\n\nfunc bar(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"bar\")\n}\n\nfunc loggingMiddleWare(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlog.Println(r.URL.Path)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\nfunc main() {\n\thttp.Handle(\"/foo\", loggingMiddleWare(http.HandlerFunc(foo)))\n\thttp.Handle(\"/bar\", loggingMiddleWare(http.HandlerFunc(bar)))\n\t//http.HandleFunc(\"/foo\", logging(foo))\n\t//http.HandleFunc(\"/bar\", logging(bar))\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n### 多中间件\n\n中间件将方法作为参数之一，包装并返回一个新的方法服务器，定义一种新的MiddlWare，容易将多个中间件连接起来\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\n//\"github.com/gin-gonic/gin\"\n\ntype MiddleWare func(http.HandlerFunc) http.HandlerFunc\n\ntype MiddleWare1 func(http.Handler) http.Handler\n\n//日志打印\nfunc logging() MiddleWare1 {\n\treturn func(h http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tstart := time.Now()\n\t\t\tdefer func() {\n\t\t\t\tlog.Println(r.URL.Path)\n\t\t\t\ttime.Since(start)\n\t\t\t}()\n\t\t\th.ServeHTTP(w, r)\n\t\t})\n\t}\n}\n\nfunc method(m string) MiddleWare1 {\n\treturn func(h http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method != m {\n\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n\t\t\t}\n\t\t\th.ServeHTTP(w, r)\n\t\t})\n\t}\n}\n\nfunc chain1(f http.Handler, middlewares ...MiddleWare1) http.Handler {\n\tfor _, m := range middlewares {\n\t\tf = m(f)\n\t}\n\treturn f\n}\n\nfunc Logging() MiddleWare {\n\treturn func(hf http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tstart := time.Now()\n\n\t\t\tdefer func() {\n\t\t\t\tlog.Println(r.URL.Path)\n\t\t\t\ttime.Since(start)\n\t\t\t}()\n\t\t\thf(w, r)\n\t\t}\n\n\t}\n}\n\nfunc Method(m string) MiddleWare {\n\treturn func(hf http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method != m {\n\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n\t\t\t}\n\t\t\thf(w, r)\n\t\t}\n\t}\n}\n\nfunc chain(f http.HandlerFunc, middlewares ...MiddleWare) http.HandlerFunc {\n\tfor _, m := range middlewares {\n\t\tf = m(f)\n\t}\n\treturn f\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"hello world\")\n}\n\nfunc main() {\n\thttp.Handle(\"/test\", chain1(http.HandlerFunc(Hello), method(\"GET\"), logging()))\n\thttp.HandleFunc(\"/\", chain(Hello, Method(\"GET\"), Logging()))\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\n### gin中间件\n\n```go\nr:=gin.Default()//创建带有默认的中间件路由（包含logger和recovery）\nr:=gin.new()//创建没有中间件的路由\n```\n\n两种中间件方式，后续展示第二种\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n//\"github.com/gin-gonic/gin\"\n\n/**\n自定义日志中间件第一种方式-----请求之前\n自定义日志中间件第一种方式-----请求之后\n2022/08/31 15:40:57 12345\n2022/08/31 15:40:57 64.542µs\n2022/08/31 15:40:57 200\n**/\nfunc Logger() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tt := time.Now()\n\t\tfmt.Println(\"自定义日志中间件第一种方式-----请求之前\")\n\t\t//在gin上下文定义一个变量\n\t\tctx.Set(\"example\", \"12345\")\n\t\t//请求之前\n\t\tctx.Next()\n\t\tfmt.Println(\"自定义日志中间件第一种方式-----请求之后\")\n\t\t//计算整个请求过程\n\t\tlatency := time.Since(t)\n\t\tlog.Print(latency)\n\n\t\t//请求状态打印\n\t\tstatus := ctx.Writer.Status()\n\t\tlog.Println(status)\n\t}\n}\n\n/**\n自定义日志中间件第二种方式-----请求之前\n自定义日志中间件第二种方式-----请求之后\n2022/08/31 15:40:17 12345\n2022/08/31 15:40:17 60.112µs\n2022/08/31 15:40:17 200\n**/\nfunc Logger1(c *gin.Context) {\n\tt := time.Now()\n\tfmt.Println(\"自定义日志中间件第二种方式-----请求之前\")\n\t//在gin上下文定义一个变量\n\tc.Set(\"example\", \"12345\")\n\t//请求之前\n\tc.Next()\n\tfmt.Println(\"自定义日志中间件第二种方式-----请求之后\")\n\t//计算整个请求过程\n\tlatency := time.Since(t)\n\tlog.Print(latency)\n\n\t//请求状态打印\n\tstatus := c.Writer.Status()\n\tlog.Println(status)\n}\nfunc main() {\n\tr := gin.New()\n\tr.Use(Logger())\n\t//r.Use(Logger1)\n\tr.GET(\"/test\", func(ctx *gin.Context) {\n\t\texam := ctx.MustGet(\"example\").(string)\n\t\tlog.Println(exam)\n\t})\n\tr.Run()\n}\n\n```\n\n**路由器中间件**\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RouterMiddle1(c *gin.Context) {\n\tfmt.Println(\"路由中间1\")\n}\n\nfunc RouterMiddle2(c *gin.Context) {\n\tfmt.Println(\"路由中间2\")\n}\n\nfunc onRouterMiddleHandle() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tfmt.Println(\"业务处理\")\n\t}\n}\nfunc main() {\n\tr := gin.New()\n\t/**\n\t路由中间1\n\t路由中间2\n\t业务处理\n\t*/\n\tr.GET(\"/onRouterMiddle\", RouterMiddle1, RouterMiddle2, onRouterMiddleHandle())\n\tr.Run()\n}\n```\n\n**路由组中间件**\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n//路由组中间件\nfunc GroupRouterGoodsMiddle1(c *gin.Context) {\n\tfmt.Println(\"goods路由组中间件1\")\n}\n\nfunc GroupRouterGoodsMiddle2(c *gin.Context) {\n\tfmt.Println(\"goods路由组中间件2\")\n}\n\nfunc GroupRouterOrdersMiddle1(c *gin.Context) {\n\tfmt.Println(\"Orders路由组中间件1\")\n}\n\nfunc GroupRouterOrdersMiddle2(c *gin.Context) {\n\tfmt.Println(\"Orders路由组中间件2\")\n}\n\nfunc main() {\n\tr := gin.New()\n\tr.Use(gin.Logger())\n\n    //curl 127.0.0.1:8080/goods/add\n    /**\n    goods路由组中间件1\n\tgoods路由组中间件2\n\t/goods/add\n    */\n\tgoodsGroup := r.Group(\"/goods\", GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)\n\t{\n\t\tgoodsGroup.GET(\"/add\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/goods/add\")\n\t\t})\n\t}\n    r.Group(\"/goods\", GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2).GET(\"/add\", func(ctx *gin.Context) {\n\t\tfmt.Println(\"/goods/add\")\n\t})\n    \n    //curl 127.0.0.1:8080/goods/add\n    //控制台结果：/goods/add\n\tr.Group(\"/goods\", GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)\n\tr.GET(\"/goods/add\", func(ctx *gin.Context) {\n\t\tfmt.Println(\"/goods/add\")\n\t})\n    \n    \n\torderGroup := r.Group(\"/order\")\n\torderGroup.Use(GroupRouterOrdersMiddle1, GroupRouterOrdersMiddle2)\n\t{\n\t\torderGroup.GET(\"/add\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/add\")\n\t\t})\n\n\t\torderGroup.GET(\"/del\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/del\")\n\t\t})\n\n\t\t//嵌套\n\t\ttestGroup := orderGroup.Group(\"/test\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/test下的中间件\")\n\t\t})\n\n\t\ttestGroup.GET(\"/test1\", func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/order/test/test1下的函数\")\n\t\t})\n\n\t}\n\tr.Run()\n}\n```\n\n\n\n**结论：** 全局中间件 > 路由组中间件 > 路由中间件\n 全局中间件最先执行","slug":"golang/gin框架/中间件","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-08T08:32:12.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgr0047tpdoctsogexs","content":"<h1 id=\"middleware\"><a href=\"#middleware\" class=\"headerlink\" title=\"middleware\"></a>middleware</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>中间件处理处理程序是简单的http.Handler,它包装另一个http.Handler</p>\n<p>作请求的一些预处理和或后处理，被称为中间件。</p>\n<p>每个中间件只处理一件事情，完成后将其传递给另一个中间件或者最终处理程序，可以做到程序的解耦，减少程序的冗余和降低代码复用率。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>常见的用例：请求如之记录、header操纵、http请求认证和Responseriter劫持等等。</p>\n<ul>\n<li>记录对服务器发送的请求</li>\n<li>处理服务器响应</li>\n<li>请求和处理之间做一个权限认证工作</li>\n<li>远程调用</li>\n<li>安全</li>\n</ul>\n<h2 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h2><h3 id=\"单中间件\"><a href=\"#单中间件\" class=\"headerlink\" title=\"单中间件\"></a>单中间件</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-comment\">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">logging</span><span class=\"hljs-params\">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\tlog.Println(r.URL.Path)<br>\t\tf(w, r)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;foo&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;bar&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">loggingMiddleWare</span><span class=\"hljs-params\">(next http.Handler)</span></span> http.Handler &#123;<br>\t<span class=\"hljs-keyword\">return</span> http.HandlerFunc(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\tlog.Println(r.URL.Path)<br>\t\tnext.ServeHTTP(w, r)<br>\t&#125;)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.Handle(<span class=\"hljs-string\">&quot;/foo&quot;</span>, loggingMiddleWare(http.HandlerFunc(foo)))<br>\thttp.Handle(<span class=\"hljs-string\">&quot;/bar&quot;</span>, loggingMiddleWare(http.HandlerFunc(bar)))<br>\t<span class=\"hljs-comment\">//http.HandleFunc(&quot;/foo&quot;, logging(foo))</span><br>\t<span class=\"hljs-comment\">//http.HandleFunc(&quot;/bar&quot;, logging(bar))</span><br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多中间件\"><a href=\"#多中间件\" class=\"headerlink\" title=\"多中间件\"></a>多中间件</h3><p>中间件将方法作为参数之一，包装并返回一个新的方法服务器，定义一种新的MiddlWare，容易将多个中间件连接起来</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-comment\">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-keyword\">type</span> MiddleWare <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(http.HandlerFunc)</span></span> http.HandlerFunc<br><br><span class=\"hljs-keyword\">type</span> MiddleWare1 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(http.Handler)</span></span> http.Handler<br><br><span class=\"hljs-comment\">//日志打印</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">logging</span><span class=\"hljs-params\">()</span></span> MiddleWare1 &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(h http.Handler)</span></span> http.Handler &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> http.HandlerFunc(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\tstart := time.Now()<br>\t\t\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\t\tlog.Println(r.URL.Path)<br>\t\t\t\ttime.Since(start)<br>\t\t\t&#125;()<br>\t\t\th.ServeHTTP(w, r)<br>\t\t&#125;)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(m <span class=\"hljs-type\">string</span>)</span></span> MiddleWare1 &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(h http.Handler)</span></span> http.Handler &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> http.HandlerFunc(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> r.Method != m &#123;<br>\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>\t\t\t&#125;<br>\t\t\th.ServeHTTP(w, r)<br>\t\t&#125;)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">chain1</span><span class=\"hljs-params\">(f http.Handler, middlewares ...MiddleWare1)</span></span> http.Handler &#123;<br>\t<span class=\"hljs-keyword\">for</span> _, m := <span class=\"hljs-keyword\">range</span> middlewares &#123;<br>\t\tf = m(f)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> f<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Logging</span><span class=\"hljs-params\">()</span></span> MiddleWare &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\tstart := time.Now()<br><br>\t\t\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\t\tlog.Println(r.URL.Path)<br>\t\t\t\ttime.Since(start)<br>\t\t\t&#125;()<br>\t\t\thf(w, r)<br>\t\t&#125;<br><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Method</span><span class=\"hljs-params\">(m <span class=\"hljs-type\">string</span>)</span></span> MiddleWare &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> r.Method != m &#123;<br>\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>\t\t\t&#125;<br>\t\t\thf(w, r)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">chain</span><span class=\"hljs-params\">(f http.HandlerFunc, middlewares ...MiddleWare)</span></span> http.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">for</span> _, m := <span class=\"hljs-keyword\">range</span> middlewares &#123;<br>\t\tf = m(f)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> f<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Hello</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;hello world&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.Handle(<span class=\"hljs-string\">&quot;/test&quot;</span>, chain1(http.HandlerFunc(Hello), method(<span class=\"hljs-string\">&quot;GET&quot;</span>), logging()))<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, chain(Hello, Method(<span class=\"hljs-string\">&quot;GET&quot;</span>), Logging()))<br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"gin中间件\"><a href=\"#gin中间件\" class=\"headerlink\" title=\"gin中间件\"></a>gin中间件</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r:=gin.Default()<span class=\"hljs-comment\">//创建带有默认的中间件路由（包含logger和recovery）</span><br>r:=gin.<span class=\"hljs-built_in\">new</span>()<span class=\"hljs-comment\">//创建没有中间件的路由</span><br></code></pre></td></tr></table></figure>\n\n<p>两种中间件方式，后续展示第二种</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">package <span class=\"hljs-selector-tag\">main</span><br><br>import (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-comment\">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">自定义日志中间件第一种方式-----请求之前</span><br><span class=\"hljs-comment\">自定义日志中间件第一种方式-----请求之后</span><br><span class=\"hljs-comment\">2022/08/31 15:40:57 12345</span><br><span class=\"hljs-comment\">2022/08/31 15:40:57 64.542µs</span><br><span class=\"hljs-comment\">2022/08/31 15:40:57 200</span><br><span class=\"hljs-comment\">**/</span><br>func <span class=\"hljs-built_in\">Logger</span>() gin<span class=\"hljs-selector-class\">.HandlerFunc</span> &#123;<br>\treturn <span class=\"hljs-built_in\">func</span>(ctx *gin.Context) &#123;<br>\t\tt := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Now</span>()<br>\t\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第一种方式-----请求之前&quot;</span>)<br>\t\t<span class=\"hljs-comment\">//在gin上下文定义一个变量</span><br>\t\tctx<span class=\"hljs-selector-class\">.Set</span>(<span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-string\">&quot;12345&quot;</span>)<br>\t\t<span class=\"hljs-comment\">//请求之前</span><br>\t\tctx<span class=\"hljs-selector-class\">.Next</span>()<br>\t\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第一种方式-----请求之后&quot;</span>)<br>\t\t<span class=\"hljs-comment\">//计算整个请求过程</span><br>\t\tlatency := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Since</span>(t)<br>\t\tlog<span class=\"hljs-selector-class\">.Print</span>(latency)<br><br>\t\t<span class=\"hljs-comment\">//请求状态打印</span><br>\t\tstatus := ctx<span class=\"hljs-selector-class\">.Writer</span><span class=\"hljs-selector-class\">.Status</span>()<br>\t\tlog<span class=\"hljs-selector-class\">.Println</span>(status)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">自定义日志中间件第二种方式-----请求之前</span><br><span class=\"hljs-comment\">自定义日志中间件第二种方式-----请求之后</span><br><span class=\"hljs-comment\">2022/08/31 15:40:17 12345</span><br><span class=\"hljs-comment\">2022/08/31 15:40:17 60.112µs</span><br><span class=\"hljs-comment\">2022/08/31 15:40:17 200</span><br><span class=\"hljs-comment\">**/</span><br>func <span class=\"hljs-built_in\">Logger1</span>(c *gin.Context) &#123;<br>\tt := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Now</span>()<br>\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第二种方式-----请求之前&quot;</span>)<br>\t<span class=\"hljs-comment\">//在gin上下文定义一个变量</span><br>\tc<span class=\"hljs-selector-class\">.Set</span>(<span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-string\">&quot;12345&quot;</span>)<br>\t<span class=\"hljs-comment\">//请求之前</span><br>\tc<span class=\"hljs-selector-class\">.Next</span>()<br>\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第二种方式-----请求之后&quot;</span>)<br>\t<span class=\"hljs-comment\">//计算整个请求过程</span><br>\tlatency := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Since</span>(t)<br>\tlog<span class=\"hljs-selector-class\">.Print</span>(latency)<br><br>\t<span class=\"hljs-comment\">//请求状态打印</span><br>\tstatus := c<span class=\"hljs-selector-class\">.Writer</span><span class=\"hljs-selector-class\">.Status</span>()<br>\tlog<span class=\"hljs-selector-class\">.Println</span>(status)<br>&#125;<br>func <span class=\"hljs-selector-tag\">main</span>() &#123;<br>\tr := gin<span class=\"hljs-selector-class\">.New</span>()<br>\tr<span class=\"hljs-selector-class\">.Use</span>(<span class=\"hljs-built_in\">Logger</span>())<br>\t<span class=\"hljs-comment\">//r.Use(Logger1)</span><br>\tr<span class=\"hljs-selector-class\">.GET</span>(<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-built_in\">func</span>(ctx *gin.Context) &#123;<br>\t\texam := ctx<span class=\"hljs-selector-class\">.MustGet</span>(<span class=\"hljs-string\">&quot;example&quot;</span>).(string)<br>\t\tlog<span class=\"hljs-selector-class\">.Println</span>(exam)<br>\t&#125;)<br>\tr<span class=\"hljs-selector-class\">.Run</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>路由器中间件</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RouterMiddle1</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;路由中间1&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RouterMiddle2</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;路由中间2&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">onRouterMiddleHandle</span><span class=\"hljs-params\">()</span></span> gin.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;业务处理&quot;</span>)<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.New()<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t路由中间1</span><br><span class=\"hljs-comment\">\t路由中间2</span><br><span class=\"hljs-comment\">\t业务处理</span><br><span class=\"hljs-comment\">\t*/</span><br>\tr.GET(<span class=\"hljs-string\">&quot;/onRouterMiddle&quot;</span>, RouterMiddle1, RouterMiddle2, onRouterMiddleHandle())<br>\tr.Run()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>路由组中间件</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-comment\">//路由组中间件</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterGoodsMiddle1</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;goods路由组中间件1&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterGoodsMiddle2</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;goods路由组中间件2&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterOrdersMiddle1</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Orders路由组中间件1&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterOrdersMiddle2</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Orders路由组中间件2&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.New()<br>\tr.Use(gin.Logger())<br><br>    <span class=\"hljs-comment\">//curl 127.0.0.1:8080/goods/add</span><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    goods路由组中间件1</span><br><span class=\"hljs-comment\">\tgoods路由组中间件2</span><br><span class=\"hljs-comment\">\t/goods/add</span><br><span class=\"hljs-comment\">    */</span><br>\tgoodsGroup := r.Group(<span class=\"hljs-string\">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>\t&#123;<br>\t\tgoodsGroup.GET(<span class=\"hljs-string\">&quot;/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>)<br>\t\t&#125;)<br>\t&#125;<br>    r.Group(<span class=\"hljs-string\">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2).GET(<span class=\"hljs-string\">&quot;/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>)<br>\t&#125;)<br>    <br>    <span class=\"hljs-comment\">//curl 127.0.0.1:8080/goods/add</span><br>    <span class=\"hljs-comment\">//控制台结果：/goods/add</span><br>\tr.Group(<span class=\"hljs-string\">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>\tr.GET(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>)<br>\t&#125;)<br>    <br>    <br>\torderGroup := r.Group(<span class=\"hljs-string\">&quot;/order&quot;</span>)<br>\torderGroup.Use(GroupRouterOrdersMiddle1, GroupRouterOrdersMiddle2)<br>\t&#123;<br>\t\torderGroup.GET(<span class=\"hljs-string\">&quot;/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/add&quot;</span>)<br>\t\t&#125;)<br><br>\t\torderGroup.GET(<span class=\"hljs-string\">&quot;/del&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/del&quot;</span>)<br>\t\t&#125;)<br><br>\t\t<span class=\"hljs-comment\">//嵌套</span><br>\t\ttestGroup := orderGroup.Group(<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/test下的中间件&quot;</span>)<br>\t\t&#125;)<br><br>\t\ttestGroup.GET(<span class=\"hljs-string\">&quot;/test1&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/test/test1下的函数&quot;</span>)<br>\t\t&#125;)<br><br>\t&#125;<br>\tr.Run()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>结论：</strong> 全局中间件 &gt; 路由组中间件 &gt; 路由中间件<br> 全局中间件最先执行</p>\n","site":{"data":{}},"wordcount":7246,"excerpt":"","more":"<h1 id=\"middleware\"><a href=\"#middleware\" class=\"headerlink\" title=\"middleware\"></a>middleware</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>中间件处理处理程序是简单的http.Handler,它包装另一个http.Handler</p>\n<p>作请求的一些预处理和或后处理，被称为中间件。</p>\n<p>每个中间件只处理一件事情，完成后将其传递给另一个中间件或者最终处理程序，可以做到程序的解耦，减少程序的冗余和降低代码复用率。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>常见的用例：请求如之记录、header操纵、http请求认证和Responseriter劫持等等。</p>\n<ul>\n<li>记录对服务器发送的请求</li>\n<li>处理服务器响应</li>\n<li>请求和处理之间做一个权限认证工作</li>\n<li>远程调用</li>\n<li>安全</li>\n</ul>\n<h2 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h2><h3 id=\"单中间件\"><a href=\"#单中间件\" class=\"headerlink\" title=\"单中间件\"></a>单中间件</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-comment\">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">logging</span><span class=\"hljs-params\">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\tlog.Println(r.URL.Path)<br>\t\tf(w, r)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;foo&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;bar&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">loggingMiddleWare</span><span class=\"hljs-params\">(next http.Handler)</span></span> http.Handler &#123;<br>\t<span class=\"hljs-keyword\">return</span> http.HandlerFunc(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\tlog.Println(r.URL.Path)<br>\t\tnext.ServeHTTP(w, r)<br>\t&#125;)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.Handle(<span class=\"hljs-string\">&quot;/foo&quot;</span>, loggingMiddleWare(http.HandlerFunc(foo)))<br>\thttp.Handle(<span class=\"hljs-string\">&quot;/bar&quot;</span>, loggingMiddleWare(http.HandlerFunc(bar)))<br>\t<span class=\"hljs-comment\">//http.HandleFunc(&quot;/foo&quot;, logging(foo))</span><br>\t<span class=\"hljs-comment\">//http.HandleFunc(&quot;/bar&quot;, logging(bar))</span><br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多中间件\"><a href=\"#多中间件\" class=\"headerlink\" title=\"多中间件\"></a>多中间件</h3><p>中间件将方法作为参数之一，包装并返回一个新的方法服务器，定义一种新的MiddlWare，容易将多个中间件连接起来</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-comment\">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-keyword\">type</span> MiddleWare <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(http.HandlerFunc)</span></span> http.HandlerFunc<br><br><span class=\"hljs-keyword\">type</span> MiddleWare1 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(http.Handler)</span></span> http.Handler<br><br><span class=\"hljs-comment\">//日志打印</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">logging</span><span class=\"hljs-params\">()</span></span> MiddleWare1 &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(h http.Handler)</span></span> http.Handler &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> http.HandlerFunc(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\tstart := time.Now()<br>\t\t\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\t\tlog.Println(r.URL.Path)<br>\t\t\t\ttime.Since(start)<br>\t\t\t&#125;()<br>\t\t\th.ServeHTTP(w, r)<br>\t\t&#125;)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(m <span class=\"hljs-type\">string</span>)</span></span> MiddleWare1 &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(h http.Handler)</span></span> http.Handler &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> http.HandlerFunc(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> r.Method != m &#123;<br>\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>\t\t\t&#125;<br>\t\t\th.ServeHTTP(w, r)<br>\t\t&#125;)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">chain1</span><span class=\"hljs-params\">(f http.Handler, middlewares ...MiddleWare1)</span></span> http.Handler &#123;<br>\t<span class=\"hljs-keyword\">for</span> _, m := <span class=\"hljs-keyword\">range</span> middlewares &#123;<br>\t\tf = m(f)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> f<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Logging</span><span class=\"hljs-params\">()</span></span> MiddleWare &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\tstart := time.Now()<br><br>\t\t\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t\t\tlog.Println(r.URL.Path)<br>\t\t\t\ttime.Since(start)<br>\t\t\t&#125;()<br>\t\t\thf(w, r)<br>\t\t&#125;<br><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Method</span><span class=\"hljs-params\">(m <span class=\"hljs-type\">string</span>)</span></span> MiddleWare &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(hf http.HandlerFunc)</span></span> http.HandlerFunc &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> r.Method != m &#123;<br>\t\t\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)<br>\t\t\t&#125;<br>\t\t\thf(w, r)<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">chain</span><span class=\"hljs-params\">(f http.HandlerFunc, middlewares ...MiddleWare)</span></span> http.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">for</span> _, m := <span class=\"hljs-keyword\">range</span> middlewares &#123;<br>\t\tf = m(f)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> f<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Hello</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;hello world&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.Handle(<span class=\"hljs-string\">&quot;/test&quot;</span>, chain1(http.HandlerFunc(Hello), method(<span class=\"hljs-string\">&quot;GET&quot;</span>), logging()))<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, chain(Hello, Method(<span class=\"hljs-string\">&quot;GET&quot;</span>), Logging()))<br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"gin中间件\"><a href=\"#gin中间件\" class=\"headerlink\" title=\"gin中间件\"></a>gin中间件</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r:=gin.Default()<span class=\"hljs-comment\">//创建带有默认的中间件路由（包含logger和recovery）</span><br>r:=gin.<span class=\"hljs-built_in\">new</span>()<span class=\"hljs-comment\">//创建没有中间件的路由</span><br></code></pre></td></tr></table></figure>\n\n<p>两种中间件方式，后续展示第二种</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">package <span class=\"hljs-selector-tag\">main</span><br><br>import (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-comment\">//&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">自定义日志中间件第一种方式-----请求之前</span><br><span class=\"hljs-comment\">自定义日志中间件第一种方式-----请求之后</span><br><span class=\"hljs-comment\">2022/08/31 15:40:57 12345</span><br><span class=\"hljs-comment\">2022/08/31 15:40:57 64.542µs</span><br><span class=\"hljs-comment\">2022/08/31 15:40:57 200</span><br><span class=\"hljs-comment\">**/</span><br>func <span class=\"hljs-built_in\">Logger</span>() gin<span class=\"hljs-selector-class\">.HandlerFunc</span> &#123;<br>\treturn <span class=\"hljs-built_in\">func</span>(ctx *gin.Context) &#123;<br>\t\tt := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Now</span>()<br>\t\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第一种方式-----请求之前&quot;</span>)<br>\t\t<span class=\"hljs-comment\">//在gin上下文定义一个变量</span><br>\t\tctx<span class=\"hljs-selector-class\">.Set</span>(<span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-string\">&quot;12345&quot;</span>)<br>\t\t<span class=\"hljs-comment\">//请求之前</span><br>\t\tctx<span class=\"hljs-selector-class\">.Next</span>()<br>\t\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第一种方式-----请求之后&quot;</span>)<br>\t\t<span class=\"hljs-comment\">//计算整个请求过程</span><br>\t\tlatency := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Since</span>(t)<br>\t\tlog<span class=\"hljs-selector-class\">.Print</span>(latency)<br><br>\t\t<span class=\"hljs-comment\">//请求状态打印</span><br>\t\tstatus := ctx<span class=\"hljs-selector-class\">.Writer</span><span class=\"hljs-selector-class\">.Status</span>()<br>\t\tlog<span class=\"hljs-selector-class\">.Println</span>(status)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">自定义日志中间件第二种方式-----请求之前</span><br><span class=\"hljs-comment\">自定义日志中间件第二种方式-----请求之后</span><br><span class=\"hljs-comment\">2022/08/31 15:40:17 12345</span><br><span class=\"hljs-comment\">2022/08/31 15:40:17 60.112µs</span><br><span class=\"hljs-comment\">2022/08/31 15:40:17 200</span><br><span class=\"hljs-comment\">**/</span><br>func <span class=\"hljs-built_in\">Logger1</span>(c *gin.Context) &#123;<br>\tt := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Now</span>()<br>\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第二种方式-----请求之前&quot;</span>)<br>\t<span class=\"hljs-comment\">//在gin上下文定义一个变量</span><br>\tc<span class=\"hljs-selector-class\">.Set</span>(<span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-string\">&quot;12345&quot;</span>)<br>\t<span class=\"hljs-comment\">//请求之前</span><br>\tc<span class=\"hljs-selector-class\">.Next</span>()<br>\tfmt<span class=\"hljs-selector-class\">.Println</span>(<span class=\"hljs-string\">&quot;自定义日志中间件第二种方式-----请求之后&quot;</span>)<br>\t<span class=\"hljs-comment\">//计算整个请求过程</span><br>\tlatency := <span class=\"hljs-selector-tag\">time</span><span class=\"hljs-selector-class\">.Since</span>(t)<br>\tlog<span class=\"hljs-selector-class\">.Print</span>(latency)<br><br>\t<span class=\"hljs-comment\">//请求状态打印</span><br>\tstatus := c<span class=\"hljs-selector-class\">.Writer</span><span class=\"hljs-selector-class\">.Status</span>()<br>\tlog<span class=\"hljs-selector-class\">.Println</span>(status)<br>&#125;<br>func <span class=\"hljs-selector-tag\">main</span>() &#123;<br>\tr := gin<span class=\"hljs-selector-class\">.New</span>()<br>\tr<span class=\"hljs-selector-class\">.Use</span>(<span class=\"hljs-built_in\">Logger</span>())<br>\t<span class=\"hljs-comment\">//r.Use(Logger1)</span><br>\tr<span class=\"hljs-selector-class\">.GET</span>(<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-built_in\">func</span>(ctx *gin.Context) &#123;<br>\t\texam := ctx<span class=\"hljs-selector-class\">.MustGet</span>(<span class=\"hljs-string\">&quot;example&quot;</span>).(string)<br>\t\tlog<span class=\"hljs-selector-class\">.Println</span>(exam)<br>\t&#125;)<br>\tr<span class=\"hljs-selector-class\">.Run</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>路由器中间件</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RouterMiddle1</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;路由中间1&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RouterMiddle2</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;路由中间2&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">onRouterMiddleHandle</span><span class=\"hljs-params\">()</span></span> gin.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;业务处理&quot;</span>)<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.New()<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t路由中间1</span><br><span class=\"hljs-comment\">\t路由中间2</span><br><span class=\"hljs-comment\">\t业务处理</span><br><span class=\"hljs-comment\">\t*/</span><br>\tr.GET(<span class=\"hljs-string\">&quot;/onRouterMiddle&quot;</span>, RouterMiddle1, RouterMiddle2, onRouterMiddleHandle())<br>\tr.Run()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>路由组中间件</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-comment\">//路由组中间件</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterGoodsMiddle1</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;goods路由组中间件1&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterGoodsMiddle2</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;goods路由组中间件2&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterOrdersMiddle1</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Orders路由组中间件1&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GroupRouterOrdersMiddle2</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Orders路由组中间件2&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.New()<br>\tr.Use(gin.Logger())<br><br>    <span class=\"hljs-comment\">//curl 127.0.0.1:8080/goods/add</span><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    goods路由组中间件1</span><br><span class=\"hljs-comment\">\tgoods路由组中间件2</span><br><span class=\"hljs-comment\">\t/goods/add</span><br><span class=\"hljs-comment\">    */</span><br>\tgoodsGroup := r.Group(<span class=\"hljs-string\">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>\t&#123;<br>\t\tgoodsGroup.GET(<span class=\"hljs-string\">&quot;/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>)<br>\t\t&#125;)<br>\t&#125;<br>    r.Group(<span class=\"hljs-string\">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2).GET(<span class=\"hljs-string\">&quot;/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>)<br>\t&#125;)<br>    <br>    <span class=\"hljs-comment\">//curl 127.0.0.1:8080/goods/add</span><br>    <span class=\"hljs-comment\">//控制台结果：/goods/add</span><br>\tr.Group(<span class=\"hljs-string\">&quot;/goods&quot;</span>, GroupRouterGoodsMiddle1, GroupRouterGoodsMiddle2)<br>\tr.GET(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;/goods/add&quot;</span>)<br>\t&#125;)<br>    <br>    <br>\torderGroup := r.Group(<span class=\"hljs-string\">&quot;/order&quot;</span>)<br>\torderGroup.Use(GroupRouterOrdersMiddle1, GroupRouterOrdersMiddle2)<br>\t&#123;<br>\t\torderGroup.GET(<span class=\"hljs-string\">&quot;/add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/add&quot;</span>)<br>\t\t&#125;)<br><br>\t\torderGroup.GET(<span class=\"hljs-string\">&quot;/del&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/del&quot;</span>)<br>\t\t&#125;)<br><br>\t\t<span class=\"hljs-comment\">//嵌套</span><br>\t\ttestGroup := orderGroup.Group(<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/test下的中间件&quot;</span>)<br>\t\t&#125;)<br><br>\t\ttestGroup.GET(<span class=\"hljs-string\">&quot;/test1&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx *gin.Context)</span></span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;/order/test/test1下的函数&quot;</span>)<br>\t\t&#125;)<br><br>\t&#125;<br>\tr.Run()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>结论：</strong> 全局中间件 &gt; 路由组中间件 &gt; 路由中间件<br> 全局中间件最先执行</p>\n"},{"title":"第一个gin程序","_content":"\n## 路由\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello\")\n\t})\n\tr.GET(\"/name\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"world\")\n\t})\n\t\n\tr.Run() // listen and serve on 0.0.0.0:8080\n}\n\n```\n\n1. 首先，我们使用了`gin.Default()`生成了一个实例，这个实例即 WSGI 应用程序。\n2. 接下来，我们使用`r.Get(\"/\", ...)`声明了一个路由，告诉 Gin 什么样的URL 能触发传入的函数，这个函数返回我们想要显示在用户浏览器中的信息。\n3. 最后用 `r.Run()`函数来让应用运行在本地服务器上，默认监听端口是 _8080_，可以传入参数设置端口，例如`r.Run(\":9999\")`即运行在 _9999_端口。\n\n### 解析路经参数\n\n```go\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tc.String(http.StatusOK, \"Hello %s\", name)\n\t})\n```\n\n### 解析qurey参数\n\n```go\n\tr.POST(\"/form\", func(c *gin.Context) {\n\t\tusername := c.PostForm(\"username\")\n\t\t//可设置默认的初始值\n\t\tpassword := c.DefaultPostForm(\"password\", \"000000\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"username\": username,\n\t\t\t\"password\": password,\n\t\t})\n\t})\n```\n\n### 解析qurey&路经参数\n\n```go\n\tr.POST(\"/posts\", func(c *gin.Context) {\n\t\tid := c.Query(\"id\")\n\t\tpage := c.DefaultQuery(\"page\", \"0\")\n\t\tusername := c.PostForm(\"username\")\n\t\t//可设置默认的初始值\n\t\tpassword := c.DefaultPostForm(\"password\", \"000000\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"id\":       id,\n\t\t\t\"page\":     page,\n\t\t\t\"username\": username,\n\t\t\t\"password\": password,\n\t\t})\n\t})\n```\n\ncurl \"http://localhost:8080/posts?id=1&page=13\"  -X POST -d 'username=geektutu&password=1234'\n{\"id\":\"1\",\"page\":\"13\",\"password\":\"1234\",\"username\":\"geektutu\"}\n\n### map参数\n\n```go\n\tr.POST(\"/post\", func(c *gin.Context) {\n\t\tids := c.QueryMap(\"ids\")\n\t\tnames := c.PostFormMap(\"names\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"ids\":   ids,\n\t\t\t\"names\": names,\n\t\t})\n\t})\n```\n\ncurl -g \"http://localhost:9999/post?ids[Jack]=001&ids[Tom]=002\" -X POST -d 'names[a]=Sam&names[b]=David'\n{\"ids\":{\"Jack\":\"001\",\"Tom\":\"002\"},\"names\":{\"a\":\"Sam\",\"b\":\"David\"}}\n\n### 重定向\n\n```go\n\tr.GET(\"/redirect\", func(c *gin.Context) {\n\t\tc.Redirect(http.StatusMovedPermanently, \"/index\")\n\t})\n\tr.GET(\"/index\", func(c *gin.Context) {\n\t\tc.Request.URL.Path = \"/\"\n\t\tr.HandleContext(c)\n\t})\n\t/**\n\tubuntu@root:~/go$ curl http://localhost:8080/index\n\tHelloubuntu@root:~/go$ -i http://localhost:8080/redirect\n\tHTTP/1.1 301 Moved Permanently\n\tContent-Type: text/html; charset=utf-8\n\tLocation: /index\n\tDate: Mon, 29 Aug 2022 09:08:43 GMT\nMenu\nNew\nOpen\nSaved\nSave As\nExport\nPrint\nThemes\nPreferences\nAbout\nClose\n\n\tContent-Length: 41\n\n\t<a href=\"/index\">Moved Permanently</a>.\n\n\t*/\n```\n\n### 多组路由\n\n利用分组路由可以更好地实现权限控制（将需要登陆鉴权的路由防盗同一组中去，简化权限控制）\n\n划分一个模块一个路由，便于管理和查找相关的代码\n\n```go\ndefaultHandler := func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"path\": c.FullPath(),\n\t\t})\n\t}\n\t//https://geektutu.com/post/quick-go-gin.html\n\t//group v1\n\tv1 := r.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/posts\", defaultHandler)\n\t\tv1.GET(\"/series\", defaultHandler)\n\t}\n\n\t//group v2\n\tv2 := r.Group(\"/v2\")\n\t{\n\t\tv2.GET(\"/posts\", defaultHandler)\n\t\tv2.GET(\"/series\", defaultHandler)\n\t}\n\t\n//ubuntu@root:~$ curl http://localhost:8080/v1/posts\n//{\"path\":\"/v1/posts\"}\n```\n\n\n\n","source":"_posts/golang/gin框架/第一个gin程序.md","raw":"---\ntitle: 第一个gin程序\ncategories: \n- [golang, gin框架]\n---\n\n## 路由\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello\")\n\t})\n\tr.GET(\"/name\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"world\")\n\t})\n\t\n\tr.Run() // listen and serve on 0.0.0.0:8080\n}\n\n```\n\n1. 首先，我们使用了`gin.Default()`生成了一个实例，这个实例即 WSGI 应用程序。\n2. 接下来，我们使用`r.Get(\"/\", ...)`声明了一个路由，告诉 Gin 什么样的URL 能触发传入的函数，这个函数返回我们想要显示在用户浏览器中的信息。\n3. 最后用 `r.Run()`函数来让应用运行在本地服务器上，默认监听端口是 _8080_，可以传入参数设置端口，例如`r.Run(\":9999\")`即运行在 _9999_端口。\n\n### 解析路经参数\n\n```go\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tc.String(http.StatusOK, \"Hello %s\", name)\n\t})\n```\n\n### 解析qurey参数\n\n```go\n\tr.POST(\"/form\", func(c *gin.Context) {\n\t\tusername := c.PostForm(\"username\")\n\t\t//可设置默认的初始值\n\t\tpassword := c.DefaultPostForm(\"password\", \"000000\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"username\": username,\n\t\t\t\"password\": password,\n\t\t})\n\t})\n```\n\n### 解析qurey&路经参数\n\n```go\n\tr.POST(\"/posts\", func(c *gin.Context) {\n\t\tid := c.Query(\"id\")\n\t\tpage := c.DefaultQuery(\"page\", \"0\")\n\t\tusername := c.PostForm(\"username\")\n\t\t//可设置默认的初始值\n\t\tpassword := c.DefaultPostForm(\"password\", \"000000\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"id\":       id,\n\t\t\t\"page\":     page,\n\t\t\t\"username\": username,\n\t\t\t\"password\": password,\n\t\t})\n\t})\n```\n\ncurl \"http://localhost:8080/posts?id=1&page=13\"  -X POST -d 'username=geektutu&password=1234'\n{\"id\":\"1\",\"page\":\"13\",\"password\":\"1234\",\"username\":\"geektutu\"}\n\n### map参数\n\n```go\n\tr.POST(\"/post\", func(c *gin.Context) {\n\t\tids := c.QueryMap(\"ids\")\n\t\tnames := c.PostFormMap(\"names\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"ids\":   ids,\n\t\t\t\"names\": names,\n\t\t})\n\t})\n```\n\ncurl -g \"http://localhost:9999/post?ids[Jack]=001&ids[Tom]=002\" -X POST -d 'names[a]=Sam&names[b]=David'\n{\"ids\":{\"Jack\":\"001\",\"Tom\":\"002\"},\"names\":{\"a\":\"Sam\",\"b\":\"David\"}}\n\n### 重定向\n\n```go\n\tr.GET(\"/redirect\", func(c *gin.Context) {\n\t\tc.Redirect(http.StatusMovedPermanently, \"/index\")\n\t})\n\tr.GET(\"/index\", func(c *gin.Context) {\n\t\tc.Request.URL.Path = \"/\"\n\t\tr.HandleContext(c)\n\t})\n\t/**\n\tubuntu@root:~/go$ curl http://localhost:8080/index\n\tHelloubuntu@root:~/go$ -i http://localhost:8080/redirect\n\tHTTP/1.1 301 Moved Permanently\n\tContent-Type: text/html; charset=utf-8\n\tLocation: /index\n\tDate: Mon, 29 Aug 2022 09:08:43 GMT\nMenu\nNew\nOpen\nSaved\nSave As\nExport\nPrint\nThemes\nPreferences\nAbout\nClose\n\n\tContent-Length: 41\n\n\t<a href=\"/index\">Moved Permanently</a>.\n\n\t*/\n```\n\n### 多组路由\n\n利用分组路由可以更好地实现权限控制（将需要登陆鉴权的路由防盗同一组中去，简化权限控制）\n\n划分一个模块一个路由，便于管理和查找相关的代码\n\n```go\ndefaultHandler := func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"path\": c.FullPath(),\n\t\t})\n\t}\n\t//https://geektutu.com/post/quick-go-gin.html\n\t//group v1\n\tv1 := r.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/posts\", defaultHandler)\n\t\tv1.GET(\"/series\", defaultHandler)\n\t}\n\n\t//group v2\n\tv2 := r.Group(\"/v2\")\n\t{\n\t\tv2.GET(\"/posts\", defaultHandler)\n\t\tv2.GET(\"/series\", defaultHandler)\n\t}\n\t\n//ubuntu@root:~$ curl http://localhost:8080/v1/posts\n//{\"path\":\"/v1/posts\"}\n```\n\n\n\n","slug":"golang/gin框架/第一个gin程序","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-10-25T02:34:30.151Z","_id":"cl9gotsgs0049tpdog13w4aps","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.Default()<br>\tr.GET(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.String(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>)<br>\t&#125;)<br>\tr.GET(<span class=\"hljs-string\">&quot;/name&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;world&quot;</span>)<br>\t&#125;)<br>\t<br>\tr.Run() <span class=\"hljs-comment\">// listen and serve on 0.0.0.0:8080</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>首先，我们使用了<code>gin.Default()</code>生成了一个实例，这个实例即 WSGI 应用程序。</li>\n<li>接下来，我们使用<code>r.Get(&quot;/&quot;, ...)</code>声明了一个路由，告诉 Gin 什么样的URL 能触发传入的函数，这个函数返回我们想要显示在用户浏览器中的信息。</li>\n<li>最后用 <code>r.Run()</code>函数来让应用运行在本地服务器上，默认监听端口是 _8080_，可以传入参数设置端口，例如<code>r.Run(&quot;:9999&quot;)</code>即运行在 _9999_端口。</li>\n</ol>\n<h3 id=\"解析路经参数\"><a href=\"#解析路经参数\" class=\"headerlink\" title=\"解析路经参数\"></a>解析路经参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.GET(<span class=\"hljs-string\">&quot;/user/:name&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tname := c.Param(<span class=\"hljs-string\">&quot;name&quot;</span>)<br>\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;Hello %s&quot;</span>, name)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解析qurey参数\"><a href=\"#解析qurey参数\" class=\"headerlink\" title=\"解析qurey参数\"></a>解析qurey参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/form&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tusername := c.PostForm(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>\t<span class=\"hljs-comment\">//可设置默认的初始值</span><br>\tpassword := c.DefaultPostForm(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;000000&quot;</span>)<br><br>\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;username&quot;</span>: username,<br>\t\t<span class=\"hljs-string\">&quot;password&quot;</span>: password,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解析qurey-amp-路经参数\"><a href=\"#解析qurey-amp-路经参数\" class=\"headerlink\" title=\"解析qurey&amp;路经参数\"></a>解析qurey&amp;路经参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/posts&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tid := c.Query(<span class=\"hljs-string\">&quot;id&quot;</span>)<br>\tpage := c.DefaultQuery(<span class=\"hljs-string\">&quot;page&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>)<br>\tusername := c.PostForm(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>\t<span class=\"hljs-comment\">//可设置默认的初始值</span><br>\tpassword := c.DefaultPostForm(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;000000&quot;</span>)<br><br>\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;id&quot;</span>:       id,<br>\t\t<span class=\"hljs-string\">&quot;page&quot;</span>:     page,<br>\t\t<span class=\"hljs-string\">&quot;username&quot;</span>: username,<br>\t\t<span class=\"hljs-string\">&quot;password&quot;</span>: password,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>curl “<a href=\"http://localhost:8080/posts?id=1&amp;page=13&quot;\">http://localhost:8080/posts?id=1&amp;page=13&quot;</a>  -X POST -d ‘username=geektutu&amp;password=1234’<br>{“id”:”1”,”page”:”13”,”password”:”1234”,”username”:”geektutu”}</p>\n<h3 id=\"map参数\"><a href=\"#map参数\" class=\"headerlink\" title=\"map参数\"></a>map参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/post&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tids := c.QueryMap(<span class=\"hljs-string\">&quot;ids&quot;</span>)<br>\tnames := c.PostFormMap(<span class=\"hljs-string\">&quot;names&quot;</span>)<br><br>\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;ids&quot;</span>:   ids,<br>\t\t<span class=\"hljs-string\">&quot;names&quot;</span>: names,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>curl -g “<a href=\"http://localhost:9999/post?ids%5BJack%5D=001&amp;ids%5BTom%5D=002&quot;\">http://localhost:9999/post?ids[Jack]=001&amp;ids[Tom]=002&quot;</a> -X POST -d ‘names[a]=Sam&amp;names[b]=David’<br>{“ids”:{“Jack”:”001”,”Tom”:”002”},”names”:{“a”:”Sam”,”b”:”David”}}</p>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">\tr.GET(<span class=\"hljs-string\">&quot;/redirect&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.Redirect(http.StatusMovedPermanently, <span class=\"hljs-string\">&quot;/index&quot;</span>)<br>\t&#125;)<br>\tr.GET(<span class=\"hljs-string\">&quot;/index&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.Request.URL.Path = <span class=\"hljs-string\">&quot;/&quot;</span><br>\t\tr.HandleContext(c)<br>\t&#125;)<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\tubuntu@root:~/go$ curl http://localhost:8080/index</span><br><span class=\"hljs-comment\">\tHelloubuntu@root:~/go$ -i http://localhost:8080/redirect</span><br><span class=\"hljs-comment\">\tHTTP/1.1 301 Moved Permanently</span><br><span class=\"hljs-comment\">\tContent-Type: text/html; charset=utf-8</span><br><span class=\"hljs-comment\">\tLocation: /index</span><br><span class=\"hljs-comment\">\tDate: Mon, 29 Aug 2022 09:08:43 GMT</span><br><span class=\"hljs-comment\">Menu</span><br><span class=\"hljs-comment\">New</span><br><span class=\"hljs-comment\">Open</span><br><span class=\"hljs-comment\">Saved</span><br><span class=\"hljs-comment\">Save As</span><br><span class=\"hljs-comment\">Export</span><br><span class=\"hljs-comment\">Print</span><br><span class=\"hljs-comment\">Themes</span><br><span class=\"hljs-comment\">Preferences</span><br><span class=\"hljs-comment\">About</span><br><span class=\"hljs-comment\">Close</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\tContent-Length: 41</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t&lt;a href=&quot;/index&quot;&gt;Moved Permanently&lt;/a&gt;.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多组路由\"><a href=\"#多组路由\" class=\"headerlink\" title=\"多组路由\"></a>多组路由</h3><p>利用分组路由可以更好地实现权限控制（将需要登陆鉴权的路由防盗同一组中去，简化权限控制）</p>\n<p>划分一个模块一个路由，便于管理和查找相关的代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">defaultHandler := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;path&quot;</span>: c.FullPath(),<br>\t\t&#125;)<br>\t&#125;<br>\t<span class=\"hljs-comment\">//https://geektutu.com/post/quick-go-gin.html</span><br>\t<span class=\"hljs-comment\">//group v1</span><br>\tv1 := r.Group(<span class=\"hljs-string\">&quot;/v1&quot;</span>)<br>\t&#123;<br>\t\tv1.GET(<span class=\"hljs-string\">&quot;/posts&quot;</span>, defaultHandler)<br>\t\tv1.GET(<span class=\"hljs-string\">&quot;/series&quot;</span>, defaultHandler)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">//group v2</span><br>\tv2 := r.Group(<span class=\"hljs-string\">&quot;/v2&quot;</span>)<br>\t&#123;<br>\t\tv2.GET(<span class=\"hljs-string\">&quot;/posts&quot;</span>, defaultHandler)<br>\t\tv2.GET(<span class=\"hljs-string\">&quot;/series&quot;</span>, defaultHandler)<br>\t&#125;<br>\t<br><span class=\"hljs-comment\">//ubuntu@root:~$ curl http://localhost:8080/v1/posts</span><br><span class=\"hljs-comment\">//&#123;&quot;path&quot;:&quot;/v1/posts&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"wordcount":3287,"excerpt":"","more":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gin.Default()<br>\tr.GET(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.String(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>)<br>\t&#125;)<br>\tr.GET(<span class=\"hljs-string\">&quot;/name&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;world&quot;</span>)<br>\t&#125;)<br>\t<br>\tr.Run() <span class=\"hljs-comment\">// listen and serve on 0.0.0.0:8080</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>首先，我们使用了<code>gin.Default()</code>生成了一个实例，这个实例即 WSGI 应用程序。</li>\n<li>接下来，我们使用<code>r.Get(&quot;/&quot;, ...)</code>声明了一个路由，告诉 Gin 什么样的URL 能触发传入的函数，这个函数返回我们想要显示在用户浏览器中的信息。</li>\n<li>最后用 <code>r.Run()</code>函数来让应用运行在本地服务器上，默认监听端口是 _8080_，可以传入参数设置端口，例如<code>r.Run(&quot;:9999&quot;)</code>即运行在 _9999_端口。</li>\n</ol>\n<h3 id=\"解析路经参数\"><a href=\"#解析路经参数\" class=\"headerlink\" title=\"解析路经参数\"></a>解析路经参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.GET(<span class=\"hljs-string\">&quot;/user/:name&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tname := c.Param(<span class=\"hljs-string\">&quot;name&quot;</span>)<br>\tc.String(http.StatusOK, <span class=\"hljs-string\">&quot;Hello %s&quot;</span>, name)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解析qurey参数\"><a href=\"#解析qurey参数\" class=\"headerlink\" title=\"解析qurey参数\"></a>解析qurey参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/form&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tusername := c.PostForm(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>\t<span class=\"hljs-comment\">//可设置默认的初始值</span><br>\tpassword := c.DefaultPostForm(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;000000&quot;</span>)<br><br>\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;username&quot;</span>: username,<br>\t\t<span class=\"hljs-string\">&quot;password&quot;</span>: password,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解析qurey-amp-路经参数\"><a href=\"#解析qurey-amp-路经参数\" class=\"headerlink\" title=\"解析qurey&amp;路经参数\"></a>解析qurey&amp;路经参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/posts&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tid := c.Query(<span class=\"hljs-string\">&quot;id&quot;</span>)<br>\tpage := c.DefaultQuery(<span class=\"hljs-string\">&quot;page&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>)<br>\tusername := c.PostForm(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>\t<span class=\"hljs-comment\">//可设置默认的初始值</span><br>\tpassword := c.DefaultPostForm(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;000000&quot;</span>)<br><br>\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;id&quot;</span>:       id,<br>\t\t<span class=\"hljs-string\">&quot;page&quot;</span>:     page,<br>\t\t<span class=\"hljs-string\">&quot;username&quot;</span>: username,<br>\t\t<span class=\"hljs-string\">&quot;password&quot;</span>: password,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>curl “<a href=\"http://localhost:8080/posts?id=1&amp;page=13&quot;\">http://localhost:8080/posts?id=1&amp;page=13&quot;</a>  -X POST -d ‘username=geektutu&amp;password=1234’<br>{“id”:”1”,”page”:”13”,”password”:”1234”,”username”:”geektutu”}</p>\n<h3 id=\"map参数\"><a href=\"#map参数\" class=\"headerlink\" title=\"map参数\"></a>map参数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r.POST(<span class=\"hljs-string\">&quot;/post&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\tids := c.QueryMap(<span class=\"hljs-string\">&quot;ids&quot;</span>)<br>\tnames := c.PostFormMap(<span class=\"hljs-string\">&quot;names&quot;</span>)<br><br>\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t<span class=\"hljs-string\">&quot;ids&quot;</span>:   ids,<br>\t\t<span class=\"hljs-string\">&quot;names&quot;</span>: names,<br>\t&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>curl -g “<a href=\"http://localhost:9999/post?ids%5BJack%5D=001&amp;ids%5BTom%5D=002&quot;\">http://localhost:9999/post?ids[Jack]=001&amp;ids[Tom]=002&quot;</a> -X POST -d ‘names[a]=Sam&amp;names[b]=David’<br>{“ids”:{“Jack”:”001”,”Tom”:”002”},”names”:{“a”:”Sam”,”b”:”David”}}</p>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">\tr.GET(<span class=\"hljs-string\">&quot;/redirect&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.Redirect(http.StatusMovedPermanently, <span class=\"hljs-string\">&quot;/index&quot;</span>)<br>\t&#125;)<br>\tr.GET(<span class=\"hljs-string\">&quot;/index&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.Request.URL.Path = <span class=\"hljs-string\">&quot;/&quot;</span><br>\t\tr.HandleContext(c)<br>\t&#125;)<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\tubuntu@root:~/go$ curl http://localhost:8080/index</span><br><span class=\"hljs-comment\">\tHelloubuntu@root:~/go$ -i http://localhost:8080/redirect</span><br><span class=\"hljs-comment\">\tHTTP/1.1 301 Moved Permanently</span><br><span class=\"hljs-comment\">\tContent-Type: text/html; charset=utf-8</span><br><span class=\"hljs-comment\">\tLocation: /index</span><br><span class=\"hljs-comment\">\tDate: Mon, 29 Aug 2022 09:08:43 GMT</span><br><span class=\"hljs-comment\">Menu</span><br><span class=\"hljs-comment\">New</span><br><span class=\"hljs-comment\">Open</span><br><span class=\"hljs-comment\">Saved</span><br><span class=\"hljs-comment\">Save As</span><br><span class=\"hljs-comment\">Export</span><br><span class=\"hljs-comment\">Print</span><br><span class=\"hljs-comment\">Themes</span><br><span class=\"hljs-comment\">Preferences</span><br><span class=\"hljs-comment\">About</span><br><span class=\"hljs-comment\">Close</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\tContent-Length: 41</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t&lt;a href=&quot;/index&quot;&gt;Moved Permanently&lt;/a&gt;.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多组路由\"><a href=\"#多组路由\" class=\"headerlink\" title=\"多组路由\"></a>多组路由</h3><p>利用分组路由可以更好地实现权限控制（将需要登陆鉴权的路由防盗同一组中去，简化权限控制）</p>\n<p>划分一个模块一个路由，便于管理和查找相关的代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">defaultHandler := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tc.JSON(http.StatusOK, gin.H&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;path&quot;</span>: c.FullPath(),<br>\t\t&#125;)<br>\t&#125;<br>\t<span class=\"hljs-comment\">//https://geektutu.com/post/quick-go-gin.html</span><br>\t<span class=\"hljs-comment\">//group v1</span><br>\tv1 := r.Group(<span class=\"hljs-string\">&quot;/v1&quot;</span>)<br>\t&#123;<br>\t\tv1.GET(<span class=\"hljs-string\">&quot;/posts&quot;</span>, defaultHandler)<br>\t\tv1.GET(<span class=\"hljs-string\">&quot;/series&quot;</span>, defaultHandler)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">//group v2</span><br>\tv2 := r.Group(<span class=\"hljs-string\">&quot;/v2&quot;</span>)<br>\t&#123;<br>\t\tv2.GET(<span class=\"hljs-string\">&quot;/posts&quot;</span>, defaultHandler)<br>\t\tv2.GET(<span class=\"hljs-string\">&quot;/series&quot;</span>, defaultHandler)<br>\t&#125;<br>\t<br><span class=\"hljs-comment\">//ubuntu@root:~$ curl http://localhost:8080/v1/posts</span><br><span class=\"hljs-comment\">//&#123;&quot;path&quot;:&quot;/v1/posts&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"go 语言基础——基础&函数","_content":"\n\n\n# case、fallthrough\n\n可以使用 `fallthrough` 强制执行后面的 case 代码\n\n# 接口——interface\n\n一组method签名的组合，通过interface来定义对象的一组行为。\n\n如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。\n\n## interface值\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype human struct {\n\tname string\n\tage  int\n}\n\ntype Employee struct {\n\thuman\n\taddr string\n}\n\ntype Student struct {\n\thuman\n\tshcool string\n}\n\nfunc (h *human) SayHi() {\n\tfmt.Printf(\"Hi!I'm a Student.My name is %s\\n\", h.name)\n}\n\nfunc (h *human) sing(singname string) {\n\tfmt.Printf(\"The sing name is %s\\n\", singname)\n}\n\nfunc (e *Employee) SayHi() {\n\tfmt.Printf(\"Hi!I'm a employee.My name is %s\\n\", e.name)\n}\n\ntype Men interface {\n\tSayHi()\n\tsing(name string)\n}\n\nfunc main() {\n\twang := Student{human{\"王强\", 18}, \"高中\"}\n\t//li := Student{human{\"李红\", 12}, \"小学\"}\n\t//tian := Student{human{\"天天\", 23}, \"大公司\"}\n\t//wu := Student{human{\"呜呜\", 23}, \"小公司\"}\n\n\tvar m Men\n\n\tm = &wang\n\tfmt.Println(\"This is 王,\")\n\tm.sing(\"lalalla\")\n\tm.SayHi()\n}\n\nThis is 王,\nThe sing name is lalalla\nHi!I'm a Student.My name is 王强\n```\n\n通过定义interface参数，让函数接收各种类型的参数\n\n以下代码实现了实现了Stringer这个接口参数，可以使任意格式的字符串打印。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\ntype human struct {\n\tname string\n\tage  int\n}\n\nfunc (h human) String() string {\n\treturn \"<\" + h.name + \"-\" + strconv.Itoa(h.age) + \">\"\n}\n\nfunc main() {\n\tBob := human{\"jamsBob\", 12}\n\tfmt.Println(\"This human is : \", Bob)\n}\n```\n\n## 嵌入interface\n\n将接口1作为接口2的嵌入阻断，则说明接口2隐式包含了接口1的方法\n\n# 基础类型\n\n## make和new\n\n两者均是分配内存的。\n\n**new：**\n\n- 只分配内存，不初始化内存\n\n- 创建之后返回该类型内存地址的指针，同时将内存置为0。\n\n  ```go\n  func new(Type) *Type\n  ```\n\n**make：**\n\n- 即分配内存又初始化\n\n- 用于slice、map、channel的初始化，返回值是创建类型的本身。\n\n  ```go\n  func make(t Type, size ...IntegerType) Type\n  ```\n\n## 数组和slice\n\nslice基于数组创建。其中数组在创建之后，大小固定，而slice创建后具有动态扩容的机制，会相比与数据更加灵活。\n\n数组在使用过程中是值传递，将一个数组赋值给另一个新变量之后，原数组的内容不变；而slice都是源数组在内存中的地址的一个引用。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc print(arr []int) {\n\tarr[2] = 12\n\tfmt.Println(\"function arrS\")\n\tfor _, v := range arr {\n\t\tfmt.Printf(\"%d \", v)\n\t}\n\tfmt.Println()\n}\n\nfunc printArr(arr [3]int) {\n\tarr[2] = 10\n\tfmt.Println(\"function arr\")\n\tfmt.Println(arr)\n}\n\nfunc main() {\n\tarr := [3]int{1, 2, 3}\n\tprintArr(arr)\n\tfmt.Println(\"arr after\")\n\tfmt.Println(arr)\n\tarrS := []int{1, 2, 3, 4, 5}\n\tprint(arrS)\n\tfmt.Println(\"arrS after\")\n\tfmt.Println(arrS)\n}\n\nfunction arr\n[1 2 10]\narr after\n[1 2 3]\nfunction arrS\n1 2 12 4 5 \narrS after\n[1 2 12 4 5]\n```\n\n\n\n# 函数\n\n## 值传参和指针传参\n\n**值传递：**实际上是copy的，当修改传入的该值时，并不会影响到实际的变量值。\n\n**指针传递：**变量的内存存放于地址上，当以指针的形式传递时，传递的是地址的内容，如果修改指针内容会影响到实际的值。\n\n```go\npackage main\n\nimport \"fmt\"\n\n//传参和传指针\n\nfunc add(a int) int {\n\ta += 1\n\treturn a\n}\n\nfunc addP(a *int) int {\n\t*a += *a\n\treturn *a\n}\nfunc main() {\n\n\ta := 2\n\tfmt.Println(\"---------值传参----------\")\n\tfmt.Printf(\"function's value is %d\\n\", add(a))\n\tfmt.Printf(\"Actual value is %d\\n\", a)\n\n\tfmt.Println(\"---------指针传参----------\")\n\tfmt.Printf(\"function's value is %d\\n\", addP(&a))\n\tfmt.Printf(\"Actual value is %d\\n\", a)\n}\n\n---------值传参----------\nfunction's value is 3\nActual value is 2\n---------指针传参----------\nfunction's value is 4\nActual value is 4\n```\n\n## 函数作为值、类型\n\n将相同类型的函数（参数传入相同、返回类型相同）作为函数的传递，增大灵活性\n\n```go\npackage main\n\nimport \"fmt\"\n\n//函数作为传递\n\ntype testInt func(int) int\n\nfunc addOdd(num int) int {\n\treturn num + 2\n}\n\nfunc addEven(num int) int {\n\treturn num + 1\n}\n\n//提高函数使用的灵活性\nfunc resultNum(num int, f testInt) (int, string) {\n\tif num%2 == 0 {\n\t\treturn addOdd(num), \"Excute Odd func\"\n\t} else {\n\t\treturn addEven(num), \"Excute Even func\"\n\t}\n}\nfunc main() {\n\tnum := 1\n\tnum1 := 2\n    //调用该函数定义\n\tfmt.Println(resultNum(num, addOdd))\n\tfmt.Println(resultNum(num1, addEven))\n\n}\n\n2 Excute Even func\n4 Excute Odd func\n```\n\n## panic和recover\n\n### panic\n\n内建函数，可以终端原有的控制流程，当程序发生错误的时候，制造一次宕机——程序运行终止。一般是碰到不可能发生的状况，panic是最好的处理方式。\n\n### recover\n\n恢复——panic之后的其他处理。当panic的时候会将参数传递给recover，如果recover没有收到，依旧为nil，那么表明并没有发生panic。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n//panic和recover\n\nfunc main() {\n\tdefer func() {\n\t\tif msg := recover(); msg != nil {\n\t\t\tfmt.Println(msg)\n\t\t} else {\n\t\t\tfmt.Println(\"run success\")\n\t\t}\n\t}()\n\n\tfmt.Println(\"process A\")\n\tfmt.Println(\"process B\")\n\tpanic(\"panic\")\n\n}\n```\n\n","source":"_posts/golang/go基础/go基础知识.md","raw":"---\ntitle: go 语言基础——基础&函数\ncategories: \n- [golang, go语言基础]\ntags:\n- golang\n---\n\n\n\n# case、fallthrough\n\n可以使用 `fallthrough` 强制执行后面的 case 代码\n\n# 接口——interface\n\n一组method签名的组合，通过interface来定义对象的一组行为。\n\n如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。\n\n## interface值\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype human struct {\n\tname string\n\tage  int\n}\n\ntype Employee struct {\n\thuman\n\taddr string\n}\n\ntype Student struct {\n\thuman\n\tshcool string\n}\n\nfunc (h *human) SayHi() {\n\tfmt.Printf(\"Hi!I'm a Student.My name is %s\\n\", h.name)\n}\n\nfunc (h *human) sing(singname string) {\n\tfmt.Printf(\"The sing name is %s\\n\", singname)\n}\n\nfunc (e *Employee) SayHi() {\n\tfmt.Printf(\"Hi!I'm a employee.My name is %s\\n\", e.name)\n}\n\ntype Men interface {\n\tSayHi()\n\tsing(name string)\n}\n\nfunc main() {\n\twang := Student{human{\"王强\", 18}, \"高中\"}\n\t//li := Student{human{\"李红\", 12}, \"小学\"}\n\t//tian := Student{human{\"天天\", 23}, \"大公司\"}\n\t//wu := Student{human{\"呜呜\", 23}, \"小公司\"}\n\n\tvar m Men\n\n\tm = &wang\n\tfmt.Println(\"This is 王,\")\n\tm.sing(\"lalalla\")\n\tm.SayHi()\n}\n\nThis is 王,\nThe sing name is lalalla\nHi!I'm a Student.My name is 王强\n```\n\n通过定义interface参数，让函数接收各种类型的参数\n\n以下代码实现了实现了Stringer这个接口参数，可以使任意格式的字符串打印。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\ntype human struct {\n\tname string\n\tage  int\n}\n\nfunc (h human) String() string {\n\treturn \"<\" + h.name + \"-\" + strconv.Itoa(h.age) + \">\"\n}\n\nfunc main() {\n\tBob := human{\"jamsBob\", 12}\n\tfmt.Println(\"This human is : \", Bob)\n}\n```\n\n## 嵌入interface\n\n将接口1作为接口2的嵌入阻断，则说明接口2隐式包含了接口1的方法\n\n# 基础类型\n\n## make和new\n\n两者均是分配内存的。\n\n**new：**\n\n- 只分配内存，不初始化内存\n\n- 创建之后返回该类型内存地址的指针，同时将内存置为0。\n\n  ```go\n  func new(Type) *Type\n  ```\n\n**make：**\n\n- 即分配内存又初始化\n\n- 用于slice、map、channel的初始化，返回值是创建类型的本身。\n\n  ```go\n  func make(t Type, size ...IntegerType) Type\n  ```\n\n## 数组和slice\n\nslice基于数组创建。其中数组在创建之后，大小固定，而slice创建后具有动态扩容的机制，会相比与数据更加灵活。\n\n数组在使用过程中是值传递，将一个数组赋值给另一个新变量之后，原数组的内容不变；而slice都是源数组在内存中的地址的一个引用。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc print(arr []int) {\n\tarr[2] = 12\n\tfmt.Println(\"function arrS\")\n\tfor _, v := range arr {\n\t\tfmt.Printf(\"%d \", v)\n\t}\n\tfmt.Println()\n}\n\nfunc printArr(arr [3]int) {\n\tarr[2] = 10\n\tfmt.Println(\"function arr\")\n\tfmt.Println(arr)\n}\n\nfunc main() {\n\tarr := [3]int{1, 2, 3}\n\tprintArr(arr)\n\tfmt.Println(\"arr after\")\n\tfmt.Println(arr)\n\tarrS := []int{1, 2, 3, 4, 5}\n\tprint(arrS)\n\tfmt.Println(\"arrS after\")\n\tfmt.Println(arrS)\n}\n\nfunction arr\n[1 2 10]\narr after\n[1 2 3]\nfunction arrS\n1 2 12 4 5 \narrS after\n[1 2 12 4 5]\n```\n\n\n\n# 函数\n\n## 值传参和指针传参\n\n**值传递：**实际上是copy的，当修改传入的该值时，并不会影响到实际的变量值。\n\n**指针传递：**变量的内存存放于地址上，当以指针的形式传递时，传递的是地址的内容，如果修改指针内容会影响到实际的值。\n\n```go\npackage main\n\nimport \"fmt\"\n\n//传参和传指针\n\nfunc add(a int) int {\n\ta += 1\n\treturn a\n}\n\nfunc addP(a *int) int {\n\t*a += *a\n\treturn *a\n}\nfunc main() {\n\n\ta := 2\n\tfmt.Println(\"---------值传参----------\")\n\tfmt.Printf(\"function's value is %d\\n\", add(a))\n\tfmt.Printf(\"Actual value is %d\\n\", a)\n\n\tfmt.Println(\"---------指针传参----------\")\n\tfmt.Printf(\"function's value is %d\\n\", addP(&a))\n\tfmt.Printf(\"Actual value is %d\\n\", a)\n}\n\n---------值传参----------\nfunction's value is 3\nActual value is 2\n---------指针传参----------\nfunction's value is 4\nActual value is 4\n```\n\n## 函数作为值、类型\n\n将相同类型的函数（参数传入相同、返回类型相同）作为函数的传递，增大灵活性\n\n```go\npackage main\n\nimport \"fmt\"\n\n//函数作为传递\n\ntype testInt func(int) int\n\nfunc addOdd(num int) int {\n\treturn num + 2\n}\n\nfunc addEven(num int) int {\n\treturn num + 1\n}\n\n//提高函数使用的灵活性\nfunc resultNum(num int, f testInt) (int, string) {\n\tif num%2 == 0 {\n\t\treturn addOdd(num), \"Excute Odd func\"\n\t} else {\n\t\treturn addEven(num), \"Excute Even func\"\n\t}\n}\nfunc main() {\n\tnum := 1\n\tnum1 := 2\n    //调用该函数定义\n\tfmt.Println(resultNum(num, addOdd))\n\tfmt.Println(resultNum(num1, addEven))\n\n}\n\n2 Excute Even func\n4 Excute Odd func\n```\n\n## panic和recover\n\n### panic\n\n内建函数，可以终端原有的控制流程，当程序发生错误的时候，制造一次宕机——程序运行终止。一般是碰到不可能发生的状况，panic是最好的处理方式。\n\n### recover\n\n恢复——panic之后的其他处理。当panic的时候会将参数传递给recover，如果recover没有收到，依旧为nil，那么表明并没有发生panic。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n//panic和recover\n\nfunc main() {\n\tdefer func() {\n\t\tif msg := recover(); msg != nil {\n\t\t\tfmt.Println(msg)\n\t\t} else {\n\t\t\tfmt.Println(\"run success\")\n\t\t}\n\t}()\n\n\tfmt.Println(\"process A\")\n\tfmt.Println(\"process B\")\n\tpanic(\"panic\")\n\n}\n```\n\n","slug":"golang/go基础/go基础知识","published":1,"date":"2022-10-12T02:38:09.596Z","updated":"2022-10-13T03:29:02.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgt004etpdobck07whi","content":"<h1 id=\"case、fallthrough\"><a href=\"#case、fallthrough\" class=\"headerlink\" title=\"case、fallthrough\"></a>case、fallthrough</h1><p>可以使用 <code>fallthrough</code> 强制执行后面的 case 代码</p>\n<h1 id=\"接口——interface\"><a href=\"#接口——interface\" class=\"headerlink\" title=\"接口——interface\"></a>接口——interface</h1><p>一组method签名的组合，通过interface来定义对象的一组行为。</p>\n<p>如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。</p>\n<h2 id=\"interface值\"><a href=\"#interface值\" class=\"headerlink\" title=\"interface值\"></a>interface值</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Employee <span class=\"hljs-keyword\">struct</span> &#123;<br>\thuman<br>\taddr <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\thuman<br>\tshcool <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *human)</span></span> SayHi() &#123;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Hi!I&#x27;m a Student.My name is %s\\n&quot;</span>, h.name)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *human)</span></span> sing(singname <span class=\"hljs-type\">string</span>) &#123;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;The sing name is %s\\n&quot;</span>, singname)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Employee)</span></span> SayHi() &#123;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Hi!I&#x27;m a employee.My name is %s\\n&quot;</span>, e.name)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Men <span class=\"hljs-keyword\">interface</span> &#123;<br>\tSayHi()<br>\tsing(name <span class=\"hljs-type\">string</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\twang := Student&#123;human&#123;<span class=\"hljs-string\">&quot;王强&quot;</span>, <span class=\"hljs-number\">18</span>&#125;, <span class=\"hljs-string\">&quot;高中&quot;</span>&#125;<br>\t<span class=\"hljs-comment\">//li := Student&#123;human&#123;&quot;李红&quot;, 12&#125;, &quot;小学&quot;&#125;</span><br>\t<span class=\"hljs-comment\">//tian := Student&#123;human&#123;&quot;天天&quot;, 23&#125;, &quot;大公司&quot;&#125;</span><br>\t<span class=\"hljs-comment\">//wu := Student&#123;human&#123;&quot;呜呜&quot;, 23&#125;, &quot;小公司&quot;&#125;</span><br><br>\t<span class=\"hljs-keyword\">var</span> m Men<br><br>\tm = &amp;wang<br>\tfmt.Println(<span class=\"hljs-string\">&quot;This is 王,&quot;</span>)<br>\tm.sing(<span class=\"hljs-string\">&quot;lalalla&quot;</span>)<br>\tm.SayHi()<br>&#125;<br><br>This is 王,<br>The sing name is lalalla<br>Hi!I<span class=\"hljs-string\">&#x27;m a Student.My name is 王强</span><br></code></pre></td></tr></table></figure>\n\n<p>通过定义interface参数，让函数接收各种类型的参数</p>\n<p>以下代码实现了实现了Stringer这个接口参数，可以使任意格式的字符串打印。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h human)</span></span> String() <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;&quot;</span> + h.name + <span class=\"hljs-string\">&quot;-&quot;</span> + strconv.Itoa(h.age) + <span class=\"hljs-string\">&quot;&gt;&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tBob := human&#123;<span class=\"hljs-string\">&quot;jamsBob&quot;</span>, <span class=\"hljs-number\">12</span>&#125;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;This human is : &quot;</span>, Bob)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"嵌入interface\"><a href=\"#嵌入interface\" class=\"headerlink\" title=\"嵌入interface\"></a>嵌入interface</h2><p>将接口1作为接口2的嵌入阻断，则说明接口2隐式包含了接口1的方法</p>\n<h1 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h1><h2 id=\"make和new\"><a href=\"#make和new\" class=\"headerlink\" title=\"make和new\"></a>make和new</h2><p>两者均是分配内存的。</p>\n<p><strong>new：</strong></p>\n<ul>\n<li><p>只分配内存，不初始化内存</p>\n</li>\n<li><p>创建之后返回该类型内存地址的指针，同时将内存置为0。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">new</span><span class=\"hljs-params\">(Type)</span></span> *Type<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>make：</strong></p>\n<ul>\n<li><p>即分配内存又初始化</p>\n</li>\n<li><p>用于slice、map、channel的初始化，返回值是创建类型的本身。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">make</span><span class=\"hljs-params\">(t Type, size ...IntegerType)</span></span> Type<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数组和slice\"><a href=\"#数组和slice\" class=\"headerlink\" title=\"数组和slice\"></a>数组和slice</h2><p>slice基于数组创建。其中数组在创建之后，大小固定，而slice创建后具有动态扩容的机制，会相比与数据更加灵活。</p>\n<p>数组在使用过程中是值传递，将一个数组赋值给另一个新变量之后，原数组的内容不变；而slice都是源数组在内存中的地址的一个引用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\tarr[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">12</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;function arrS&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> arr &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%d &quot;</span>, v)<br>\t&#125;<br>\tfmt.Println()<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printArr</span><span class=\"hljs-params\">(arr [3]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\tarr[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">10</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;function arr&quot;</span>)<br>\tfmt.Println(arr)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tarr := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;<br>\tprintArr(arr)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;arr after&quot;</span>)<br>\tfmt.Println(arr)<br>\tarrS := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;<br>\t<span class=\"hljs-built_in\">print</span>(arrS)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;arrS after&quot;</span>)<br>\tfmt.Println(arrS)<br>&#125;<br><br>function arr<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>]<br>arr after<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>]<br>function arrS<br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <br>arrS after<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"值传参和指针传参\"><a href=\"#值传参和指针传参\" class=\"headerlink\" title=\"值传参和指针传参\"></a>值传参和指针传参</h2><p><strong>值传递：</strong>实际上是copy的，当修改传入的该值时，并不会影响到实际的变量值。</p>\n<p><strong>指针传递：</strong>变量的内存存放于地址上，当以指针的形式传递时，传递的是地址的内容，如果修改指针内容会影响到实际的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">//传参和传指针</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\ta += <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">return</span> a<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addP</span><span class=\"hljs-params\">(a *<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t*a += *a<br>\t<span class=\"hljs-keyword\">return</span> *a<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br><br>\ta := <span class=\"hljs-number\">2</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;---------值传参----------&quot;</span>)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;function&#x27;s value is %d\\n&quot;</span>, add(a))<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Actual value is %d\\n&quot;</span>, a)<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;---------指针传参----------&quot;</span>)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;function&#x27;s value is %d\\n&quot;</span>, addP(&amp;a))<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Actual value is %d\\n&quot;</span>, a)<br>&#125;<br><br>---------值传参----------<br>function<span class=\"hljs-string\">&#x27;s value is 3</span><br><span class=\"hljs-string\">Actual value is 2</span><br><span class=\"hljs-string\">---------指针传参----------</span><br><span class=\"hljs-string\">function&#x27;</span>s value is <span class=\"hljs-number\">4</span><br>Actual value is <span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数作为值、类型\"><a href=\"#函数作为值、类型\" class=\"headerlink\" title=\"函数作为值、类型\"></a>函数作为值、类型</h2><p>将相同类型的函数（参数传入相同、返回类型相同）作为函数的传递，增大灵活性</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">//函数作为传递</span><br><br><span class=\"hljs-keyword\">type</span> testInt <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addOdd</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> num + <span class=\"hljs-number\">2</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addEven</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> num + <span class=\"hljs-number\">1</span><br>&#125;<br><br><span class=\"hljs-comment\">//提高函数使用的灵活性</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">resultNum</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>, f testInt)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">string</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> num%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> addOdd(num), <span class=\"hljs-string\">&quot;Excute Odd func&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> addEven(num), <span class=\"hljs-string\">&quot;Excute Even func&quot;</span><br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnum := <span class=\"hljs-number\">1</span><br>\tnum1 := <span class=\"hljs-number\">2</span><br>    <span class=\"hljs-comment\">//调用该函数定义</span><br>\tfmt.Println(resultNum(num, addOdd))<br>\tfmt.Println(resultNum(num1, addEven))<br><br>&#125;<br><br><span class=\"hljs-number\">2</span> Excute Even <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span></span><br><span class=\"hljs-number\">4</span> Excute Odd <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"panic和recover\"><a href=\"#panic和recover\" class=\"headerlink\" title=\"panic和recover\"></a>panic和recover</h2><h3 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h3><p>内建函数，可以终端原有的控制流程，当程序发生错误的时候，制造一次宕机——程序运行终止。一般是碰到不可能发生的状况，panic是最好的处理方式。</p>\n<h3 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h3><p>恢复——panic之后的其他处理。当panic的时候会将参数传递给recover，如果recover没有收到，依旧为nil，那么表明并没有发生panic。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-comment\">//panic和recover</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> msg := <span class=\"hljs-built_in\">recover</span>(); msg != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tfmt.Println(msg)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;run success&quot;</span>)<br>\t\t&#125;<br>\t&#125;()<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;process A&quot;</span>)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;process B&quot;</span>)<br>\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;panic&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":4408,"excerpt":"","more":"<h1 id=\"case、fallthrough\"><a href=\"#case、fallthrough\" class=\"headerlink\" title=\"case、fallthrough\"></a>case、fallthrough</h1><p>可以使用 <code>fallthrough</code> 强制执行后面的 case 代码</p>\n<h1 id=\"接口——interface\"><a href=\"#接口——interface\" class=\"headerlink\" title=\"接口——interface\"></a>接口——interface</h1><p>一组method签名的组合，通过interface来定义对象的一组行为。</p>\n<p>如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。</p>\n<h2 id=\"interface值\"><a href=\"#interface值\" class=\"headerlink\" title=\"interface值\"></a>interface值</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Employee <span class=\"hljs-keyword\">struct</span> &#123;<br>\thuman<br>\taddr <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\thuman<br>\tshcool <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *human)</span></span> SayHi() &#123;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Hi!I&#x27;m a Student.My name is %s\\n&quot;</span>, h.name)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *human)</span></span> sing(singname <span class=\"hljs-type\">string</span>) &#123;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;The sing name is %s\\n&quot;</span>, singname)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Employee)</span></span> SayHi() &#123;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Hi!I&#x27;m a employee.My name is %s\\n&quot;</span>, e.name)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Men <span class=\"hljs-keyword\">interface</span> &#123;<br>\tSayHi()<br>\tsing(name <span class=\"hljs-type\">string</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\twang := Student&#123;human&#123;<span class=\"hljs-string\">&quot;王强&quot;</span>, <span class=\"hljs-number\">18</span>&#125;, <span class=\"hljs-string\">&quot;高中&quot;</span>&#125;<br>\t<span class=\"hljs-comment\">//li := Student&#123;human&#123;&quot;李红&quot;, 12&#125;, &quot;小学&quot;&#125;</span><br>\t<span class=\"hljs-comment\">//tian := Student&#123;human&#123;&quot;天天&quot;, 23&#125;, &quot;大公司&quot;&#125;</span><br>\t<span class=\"hljs-comment\">//wu := Student&#123;human&#123;&quot;呜呜&quot;, 23&#125;, &quot;小公司&quot;&#125;</span><br><br>\t<span class=\"hljs-keyword\">var</span> m Men<br><br>\tm = &amp;wang<br>\tfmt.Println(<span class=\"hljs-string\">&quot;This is 王,&quot;</span>)<br>\tm.sing(<span class=\"hljs-string\">&quot;lalalla&quot;</span>)<br>\tm.SayHi()<br>&#125;<br><br>This is 王,<br>The sing name is lalalla<br>Hi!I<span class=\"hljs-string\">&#x27;m a Student.My name is 王强</span><br></code></pre></td></tr></table></figure>\n\n<p>通过定义interface参数，让函数接收各种类型的参数</p>\n<p>以下代码实现了实现了Stringer这个接口参数，可以使任意格式的字符串打印。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h human)</span></span> String() <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;&quot;</span> + h.name + <span class=\"hljs-string\">&quot;-&quot;</span> + strconv.Itoa(h.age) + <span class=\"hljs-string\">&quot;&gt;&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tBob := human&#123;<span class=\"hljs-string\">&quot;jamsBob&quot;</span>, <span class=\"hljs-number\">12</span>&#125;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;This human is : &quot;</span>, Bob)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"嵌入interface\"><a href=\"#嵌入interface\" class=\"headerlink\" title=\"嵌入interface\"></a>嵌入interface</h2><p>将接口1作为接口2的嵌入阻断，则说明接口2隐式包含了接口1的方法</p>\n<h1 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h1><h2 id=\"make和new\"><a href=\"#make和new\" class=\"headerlink\" title=\"make和new\"></a>make和new</h2><p>两者均是分配内存的。</p>\n<p><strong>new：</strong></p>\n<ul>\n<li><p>只分配内存，不初始化内存</p>\n</li>\n<li><p>创建之后返回该类型内存地址的指针，同时将内存置为0。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">new</span><span class=\"hljs-params\">(Type)</span></span> *Type<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>make：</strong></p>\n<ul>\n<li><p>即分配内存又初始化</p>\n</li>\n<li><p>用于slice、map、channel的初始化，返回值是创建类型的本身。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">make</span><span class=\"hljs-params\">(t Type, size ...IntegerType)</span></span> Type<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数组和slice\"><a href=\"#数组和slice\" class=\"headerlink\" title=\"数组和slice\"></a>数组和slice</h2><p>slice基于数组创建。其中数组在创建之后，大小固定，而slice创建后具有动态扩容的机制，会相比与数据更加灵活。</p>\n<p>数组在使用过程中是值传递，将一个数组赋值给另一个新变量之后，原数组的内容不变；而slice都是源数组在内存中的地址的一个引用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\tarr[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">12</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;function arrS&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> arr &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%d &quot;</span>, v)<br>\t&#125;<br>\tfmt.Println()<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printArr</span><span class=\"hljs-params\">(arr [3]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\tarr[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">10</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;function arr&quot;</span>)<br>\tfmt.Println(arr)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tarr := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;<br>\tprintArr(arr)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;arr after&quot;</span>)<br>\tfmt.Println(arr)<br>\tarrS := []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;<br>\t<span class=\"hljs-built_in\">print</span>(arrS)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;arrS after&quot;</span>)<br>\tfmt.Println(arrS)<br>&#125;<br><br>function arr<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>]<br>arr after<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>]<br>function arrS<br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <br>arrS after<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"值传参和指针传参\"><a href=\"#值传参和指针传参\" class=\"headerlink\" title=\"值传参和指针传参\"></a>值传参和指针传参</h2><p><strong>值传递：</strong>实际上是copy的，当修改传入的该值时，并不会影响到实际的变量值。</p>\n<p><strong>指针传递：</strong>变量的内存存放于地址上，当以指针的形式传递时，传递的是地址的内容，如果修改指针内容会影响到实际的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">//传参和传指针</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\ta += <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">return</span> a<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addP</span><span class=\"hljs-params\">(a *<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t*a += *a<br>\t<span class=\"hljs-keyword\">return</span> *a<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br><br>\ta := <span class=\"hljs-number\">2</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;---------值传参----------&quot;</span>)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;function&#x27;s value is %d\\n&quot;</span>, add(a))<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Actual value is %d\\n&quot;</span>, a)<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;---------指针传参----------&quot;</span>)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;function&#x27;s value is %d\\n&quot;</span>, addP(&amp;a))<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;Actual value is %d\\n&quot;</span>, a)<br>&#125;<br><br>---------值传参----------<br>function<span class=\"hljs-string\">&#x27;s value is 3</span><br><span class=\"hljs-string\">Actual value is 2</span><br><span class=\"hljs-string\">---------指针传参----------</span><br><span class=\"hljs-string\">function&#x27;</span>s value is <span class=\"hljs-number\">4</span><br>Actual value is <span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数作为值、类型\"><a href=\"#函数作为值、类型\" class=\"headerlink\" title=\"函数作为值、类型\"></a>函数作为值、类型</h2><p>将相同类型的函数（参数传入相同、返回类型相同）作为函数的传递，增大灵活性</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">//函数作为传递</span><br><br><span class=\"hljs-keyword\">type</span> testInt <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addOdd</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> num + <span class=\"hljs-number\">2</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addEven</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> num + <span class=\"hljs-number\">1</span><br>&#125;<br><br><span class=\"hljs-comment\">//提高函数使用的灵活性</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">resultNum</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>, f testInt)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">string</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> num%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> addOdd(num), <span class=\"hljs-string\">&quot;Excute Odd func&quot;</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> addEven(num), <span class=\"hljs-string\">&quot;Excute Even func&quot;</span><br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnum := <span class=\"hljs-number\">1</span><br>\tnum1 := <span class=\"hljs-number\">2</span><br>    <span class=\"hljs-comment\">//调用该函数定义</span><br>\tfmt.Println(resultNum(num, addOdd))<br>\tfmt.Println(resultNum(num1, addEven))<br><br>&#125;<br><br><span class=\"hljs-number\">2</span> Excute Even <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span></span><br><span class=\"hljs-number\">4</span> Excute Odd <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"panic和recover\"><a href=\"#panic和recover\" class=\"headerlink\" title=\"panic和recover\"></a>panic和recover</h2><h3 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h3><p>内建函数，可以终端原有的控制流程，当程序发生错误的时候，制造一次宕机——程序运行终止。一般是碰到不可能发生的状况，panic是最好的处理方式。</p>\n<h3 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h3><p>恢复——panic之后的其他处理。当panic的时候会将参数传递给recover，如果recover没有收到，依旧为nil，那么表明并没有发生panic。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-comment\">//panic和recover</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> msg := <span class=\"hljs-built_in\">recover</span>(); msg != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tfmt.Println(msg)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;run success&quot;</span>)<br>\t\t&#125;<br>\t&#125;()<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;process A&quot;</span>)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;process B&quot;</span>)<br>\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;panic&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"go 语言基础——web基础","_content":"\n# web工作\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc SayHello(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()       //解析参数\n\tfmt.Println(r.Form) //输出到服务器端的\n\tfmt.Println(\"path\", r.URL.Path)\n\tfmt.Println(\"scheme\", r.URL.Scheme)\n\tfmt.Println(r.Form[\"url_long\"])\n\n\tfor k, v := range r.Form {\n\t\tfmt.Println(\"key:\", k)\n\t\tfmt.Println(\"val:\", strings.Join(v, \" \"))\n\t}\n\n\tfmt.Fprintln(w, \"hello World\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", SayHello)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n## 概念\n\n- request:用户请求信息，用来解析用户的请求信息。\n- response:服务器需要反馈给客户端的信息。\n- conn:请求链接\n- handler:处理请求和生成返回信息的处理逻辑\n\n## 执行流程\n\n1. 建立监听，等待客户端的请求。\n\n   `http.ListenAndServe(\":8080\", nil)`\n\n   监听过程中会创建Server对象，之后调用`server.ListenAndServe()`方法，底层用tcp搭建了一个服务，最后调用`srv.Serve(ln)`监听端口\n\n   ```go\n   func (srv *Server) ListenAndServe() error {\n   \tif srv.shuttingDown() {\n   \t\treturn ErrServerClosed\n   \t}\n   \taddr := srv.Addr\n   \tif addr == \"\" {\n   \t\taddr = \":http\"\n   \t}\n   \tln, err := net.Listen(\"tcp\", addr)\n   \tif err != nil {\n   \t\treturn err\n   \t}\n   \treturn srv.Serve(ln)\n   \n   ```\n\n2. Listen Socket 接受客户端的请求，进行通信。\n\n   首先通过Listener接收请求：`l.Accept()`，其次创建一个Conn：`c := srv.newConn(rw)`，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：`go c.serve(connCtx)`。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。\n\n3. 处理客户端请求，handler处理。\n\n   conn首先会解析request:`w, err := c.readRequest(ctx)`, 然后获取相应的handler去处理请求:`serverHandler{c.server}.ServeHTTP(w, w.req)`，`ServeHTTP`的具体实现如下：\n\n   ```go\n   func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {\n   \thandler := sh.srv.Handler\n   \tif handler == nil {\n   \t\thandler = DefaultServeMux\n   \t}\n   \tif req.RequestURI == \"*\" && req.Method == \"OPTIONS\" {\n   \t\thandler = globalOptionsHandler{}\n   \t}\n   \thandler.ServeHTTP(rw, req)\n   }\n   ```\n\n   `sh.srv.Handler`就是我们刚才在调用函数`ListenAndServe`时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取`handler = DefaultServeMux`,这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，我们调用的代码里面第一句不是调用了`http.HandleFunc(\"/\", sayhelloName)`。这个作用就是注册了请求/的路由规则，当请求uri为\"/\"，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。\n\n# http包\n\ngo为了实现高并发和高性能，使用goroutines来处理读写事件，也就是说，每一次的请求都会重新开启一个协程，使得请求保持独立，相互不会阻塞。","source":"_posts/golang/go基础/web.md","raw":"---\ntitle: go 语言基础——web基础\ncategories: \n- [golang, go语言基础]\ntags:\n- golang\n---\n\n# web工作\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc SayHello(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()       //解析参数\n\tfmt.Println(r.Form) //输出到服务器端的\n\tfmt.Println(\"path\", r.URL.Path)\n\tfmt.Println(\"scheme\", r.URL.Scheme)\n\tfmt.Println(r.Form[\"url_long\"])\n\n\tfor k, v := range r.Form {\n\t\tfmt.Println(\"key:\", k)\n\t\tfmt.Println(\"val:\", strings.Join(v, \" \"))\n\t}\n\n\tfmt.Fprintln(w, \"hello World\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", SayHello)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n## 概念\n\n- request:用户请求信息，用来解析用户的请求信息。\n- response:服务器需要反馈给客户端的信息。\n- conn:请求链接\n- handler:处理请求和生成返回信息的处理逻辑\n\n## 执行流程\n\n1. 建立监听，等待客户端的请求。\n\n   `http.ListenAndServe(\":8080\", nil)`\n\n   监听过程中会创建Server对象，之后调用`server.ListenAndServe()`方法，底层用tcp搭建了一个服务，最后调用`srv.Serve(ln)`监听端口\n\n   ```go\n   func (srv *Server) ListenAndServe() error {\n   \tif srv.shuttingDown() {\n   \t\treturn ErrServerClosed\n   \t}\n   \taddr := srv.Addr\n   \tif addr == \"\" {\n   \t\taddr = \":http\"\n   \t}\n   \tln, err := net.Listen(\"tcp\", addr)\n   \tif err != nil {\n   \t\treturn err\n   \t}\n   \treturn srv.Serve(ln)\n   \n   ```\n\n2. Listen Socket 接受客户端的请求，进行通信。\n\n   首先通过Listener接收请求：`l.Accept()`，其次创建一个Conn：`c := srv.newConn(rw)`，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：`go c.serve(connCtx)`。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。\n\n3. 处理客户端请求，handler处理。\n\n   conn首先会解析request:`w, err := c.readRequest(ctx)`, 然后获取相应的handler去处理请求:`serverHandler{c.server}.ServeHTTP(w, w.req)`，`ServeHTTP`的具体实现如下：\n\n   ```go\n   func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {\n   \thandler := sh.srv.Handler\n   \tif handler == nil {\n   \t\thandler = DefaultServeMux\n   \t}\n   \tif req.RequestURI == \"*\" && req.Method == \"OPTIONS\" {\n   \t\thandler = globalOptionsHandler{}\n   \t}\n   \thandler.ServeHTTP(rw, req)\n   }\n   ```\n\n   `sh.srv.Handler`就是我们刚才在调用函数`ListenAndServe`时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取`handler = DefaultServeMux`,这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，我们调用的代码里面第一句不是调用了`http.HandleFunc(\"/\", sayhelloName)`。这个作用就是注册了请求/的路由规则，当请求uri为\"/\"，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。\n\n# http包\n\ngo为了实现高并发和高性能，使用goroutines来处理读写事件，也就是说，每一次的请求都会重新开启一个协程，使得请求保持独立，相互不会阻塞。","slug":"golang/go基础/web","published":1,"date":"2022-10-13T03:30:40.890Z","updated":"2022-10-13T06:33:08.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgt004gtpdoe8n8h7ju","content":"<h1 id=\"web工作\"><a href=\"#web工作\" class=\"headerlink\" title=\"web工作\"></a>web工作</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tr.ParseForm()       <span class=\"hljs-comment\">//解析参数</span><br>\tfmt.Println(r.Form) <span class=\"hljs-comment\">//输出到服务器端的</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;path&quot;</span>, r.URL.Path)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;scheme&quot;</span>, r.URL.Scheme)<br>\tfmt.Println(r.Form[<span class=\"hljs-string\">&quot;url_long&quot;</span>])<br><br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> r.Form &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;key:&quot;</span>, k)<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;val:&quot;</span>, strings.Join(v, <span class=\"hljs-string\">&quot; &quot;</span>))<br>\t&#125;<br><br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;hello World&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, SayHello)<br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>request:用户请求信息，用来解析用户的请求信息。</li>\n<li>response:服务器需要反馈给客户端的信息。</li>\n<li>conn:请求链接</li>\n<li>handler:处理请求和生成返回信息的处理逻辑</li>\n</ul>\n<h2 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h2><ol>\n<li><p>建立监听，等待客户端的请求。</p>\n<p><code>http.ListenAndServe(&quot;:8080&quot;, nil)</code></p>\n<p>监听过程中会创建Server对象，之后调用<code>server.ListenAndServe()</code>方法，底层用tcp搭建了一个服务，最后调用<code>srv.Serve(ln)</code>监听端口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(srv *Server)</span></span> ListenAndServe() <span class=\"hljs-type\">error</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> srv.shuttingDown() &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> ErrServerClosed<br>\t&#125;<br>\taddr := srv.Addr<br>\t<span class=\"hljs-keyword\">if</span> addr == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\taddr = <span class=\"hljs-string\">&quot;:http&quot;</span><br>\t&#125;<br>\tln, err := net.Listen(<span class=\"hljs-string\">&quot;tcp&quot;</span>, addr)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> srv.Serve(ln)<br><br></code></pre></td></tr></table></figure></li>\n<li><p>Listen Socket 接受客户端的请求，进行通信。</p>\n<p>首先通过Listener接收请求：<code>l.Accept()</code>，其次创建一个Conn：<code>c := srv.newConn(rw)</code>，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：<code>go c.serve(connCtx)</code>。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。</p>\n</li>\n<li><p>处理客户端请求，handler处理。</p>\n<p>conn首先会解析request:<code>w, err := c.readRequest(ctx)</code>, 然后获取相应的handler去处理请求:<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code>，<code>ServeHTTP</code>的具体实现如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sh serverHandler)</span></span> ServeHTTP(rw ResponseWriter, req *Request) &#123;<br>\thandler := sh.srv.Handler<br>\t<span class=\"hljs-keyword\">if</span> handler == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\thandler = DefaultServeMux<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> req.RequestURI == <span class=\"hljs-string\">&quot;*&quot;</span> &amp;&amp; req.Method == <span class=\"hljs-string\">&quot;OPTIONS&quot;</span> &#123;<br>\t\thandler = globalOptionsHandler&#123;&#125;<br>\t&#125;<br>\thandler.ServeHTTP(rw, req)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>sh.srv.Handler</code>就是我们刚才在调用函数<code>ListenAndServe</code>时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取<code>handler = DefaultServeMux</code>,这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，我们调用的代码里面第一句不是调用了<code>http.HandleFunc(&quot;/&quot;, sayhelloName)</code>。这个作用就是注册了请求/的路由规则，当请求uri为”/“，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。</p>\n</li>\n</ol>\n<h1 id=\"http包\"><a href=\"#http包\" class=\"headerlink\" title=\"http包\"></a>http包</h1><p>go为了实现高并发和高性能，使用goroutines来处理读写事件，也就是说，每一次的请求都会重新开启一个协程，使得请求保持独立，相互不会阻塞。</p>\n","site":{"data":{}},"wordcount":2167,"excerpt":"","more":"<h1 id=\"web工作\"><a href=\"#web工作\" class=\"headerlink\" title=\"web工作\"></a>web工作</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tr.ParseForm()       <span class=\"hljs-comment\">//解析参数</span><br>\tfmt.Println(r.Form) <span class=\"hljs-comment\">//输出到服务器端的</span><br>\tfmt.Println(<span class=\"hljs-string\">&quot;path&quot;</span>, r.URL.Path)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;scheme&quot;</span>, r.URL.Scheme)<br>\tfmt.Println(r.Form[<span class=\"hljs-string\">&quot;url_long&quot;</span>])<br><br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> r.Form &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;key:&quot;</span>, k)<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;val:&quot;</span>, strings.Join(v, <span class=\"hljs-string\">&quot; &quot;</span>))<br>\t&#125;<br><br>\tfmt.Fprintln(w, <span class=\"hljs-string\">&quot;hello World&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, SayHello)<br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>request:用户请求信息，用来解析用户的请求信息。</li>\n<li>response:服务器需要反馈给客户端的信息。</li>\n<li>conn:请求链接</li>\n<li>handler:处理请求和生成返回信息的处理逻辑</li>\n</ul>\n<h2 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h2><ol>\n<li><p>建立监听，等待客户端的请求。</p>\n<p><code>http.ListenAndServe(&quot;:8080&quot;, nil)</code></p>\n<p>监听过程中会创建Server对象，之后调用<code>server.ListenAndServe()</code>方法，底层用tcp搭建了一个服务，最后调用<code>srv.Serve(ln)</code>监听端口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(srv *Server)</span></span> ListenAndServe() <span class=\"hljs-type\">error</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> srv.shuttingDown() &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> ErrServerClosed<br>\t&#125;<br>\taddr := srv.Addr<br>\t<span class=\"hljs-keyword\">if</span> addr == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\taddr = <span class=\"hljs-string\">&quot;:http&quot;</span><br>\t&#125;<br>\tln, err := net.Listen(<span class=\"hljs-string\">&quot;tcp&quot;</span>, addr)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> srv.Serve(ln)<br><br></code></pre></td></tr></table></figure></li>\n<li><p>Listen Socket 接受客户端的请求，进行通信。</p>\n<p>首先通过Listener接收请求：<code>l.Accept()</code>，其次创建一个Conn：<code>c := srv.newConn(rw)</code>，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：<code>go c.serve(connCtx)</code>。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。</p>\n</li>\n<li><p>处理客户端请求，handler处理。</p>\n<p>conn首先会解析request:<code>w, err := c.readRequest(ctx)</code>, 然后获取相应的handler去处理请求:<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code>，<code>ServeHTTP</code>的具体实现如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sh serverHandler)</span></span> ServeHTTP(rw ResponseWriter, req *Request) &#123;<br>\thandler := sh.srv.Handler<br>\t<span class=\"hljs-keyword\">if</span> handler == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\thandler = DefaultServeMux<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> req.RequestURI == <span class=\"hljs-string\">&quot;*&quot;</span> &amp;&amp; req.Method == <span class=\"hljs-string\">&quot;OPTIONS&quot;</span> &#123;<br>\t\thandler = globalOptionsHandler&#123;&#125;<br>\t&#125;<br>\thandler.ServeHTTP(rw, req)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>sh.srv.Handler</code>就是我们刚才在调用函数<code>ListenAndServe</code>时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取<code>handler = DefaultServeMux</code>,这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，我们调用的代码里面第一句不是调用了<code>http.HandleFunc(&quot;/&quot;, sayhelloName)</code>。这个作用就是注册了请求/的路由规则，当请求uri为”/“，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。</p>\n</li>\n</ol>\n<h1 id=\"http包\"><a href=\"#http包\" class=\"headerlink\" title=\"http包\"></a>http包</h1><p>go为了实现高并发和高性能，使用goroutines来处理读写事件，也就是说，每一次的请求都会重新开启一个协程，使得请求保持独立，相互不会阻塞。</p>\n"},{"title":"go 语言基础——数据库操作","_content":"\n","source":"_posts/golang/go基础/数据库操作.md","raw":"---\ntitle: go 语言基础——数据库操作\ncategories: \n- [golang, go语言基础]\ntags:\n- golang\n---\n\n","slug":"golang/go基础/数据库操作","published":1,"date":"2022-10-14T02:47:00.966Z","updated":"2022-10-14T02:47:36.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgu004ktpdoasj054vq","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"go 语言基础——表单和文件","_content":"\n# 1\n\n# 表单的实例\n\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc sayhelloName(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello\")\n}\n\nfunc login(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"method\", r.Method)\n\tif r.Method == \"GET\" {\n\t\tt, _ := template.ParseFiles(\"login.gtpl\")\n\t\tlog.Println(t.Execute(w, nil))\n\t} else {\n\t\terr := r.ParseForm()\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"ParseForm:\", err)\n\t\t}\n\t\tfmt.Println(\"username:\", r.Form[\"username\"])\n\t\tfmt.Println(\"password:\", r.Form[\"password\"])\n\t}\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", sayhelloName)\n\n\thttp.HandleFunc(\"/login\", login)\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n\n\n        <form action=\"/login\" method=\"post\">\n\n            用户名:<input type=\"text\" name=\"username\">\n            密码:<input type=\"password\" name=\"password\">\n            \n            <input type=\"submit\" value=\"登陆\">\n        </form>\n        #文件上传\n        <form enctype=\"multipart/form-data\" action=\"/upload\" method=\"post\">\n  <input type=\"file\" name=\"uploadfile\" />\n  <input type=\"hidden\" name=\"token\" value=\"{{.}}\"/>\n  <input type=\"submit\" value=\"upload\" />\n</form>\n\n    </body>\n</html>\n```\n\n","source":"_posts/golang/go基础/表单和文件.md","raw":"---\ntitle: go 语言基础——表单和文件\ncategories: \n- [golang, go语言基础]\ntags:\n- golang\n---\n\n# 1\n\n# 表单的实例\n\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc sayhelloName(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello\")\n}\n\nfunc login(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"method\", r.Method)\n\tif r.Method == \"GET\" {\n\t\tt, _ := template.ParseFiles(\"login.gtpl\")\n\t\tlog.Println(t.Execute(w, nil))\n\t} else {\n\t\terr := r.ParseForm()\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"ParseForm:\", err)\n\t\t}\n\t\tfmt.Println(\"username:\", r.Form[\"username\"])\n\t\tfmt.Println(\"password:\", r.Form[\"password\"])\n\t}\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", sayhelloName)\n\n\thttp.HandleFunc(\"/login\", login)\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n\n\n        <form action=\"/login\" method=\"post\">\n\n            用户名:<input type=\"text\" name=\"username\">\n            密码:<input type=\"password\" name=\"password\">\n            \n            <input type=\"submit\" value=\"登陆\">\n        </form>\n        #文件上传\n        <form enctype=\"multipart/form-data\" action=\"/upload\" method=\"post\">\n  <input type=\"file\" name=\"uploadfile\" />\n  <input type=\"hidden\" name=\"token\" value=\"{{.}}\"/>\n  <input type=\"submit\" value=\"upload\" />\n</form>\n\n    </body>\n</html>\n```\n\n","slug":"golang/go基础/表单和文件","published":1,"date":"2022-10-14T02:43:24.862Z","updated":"2022-10-14T02:46:39.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgv004mtpdoh1fgddw4","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><h1 id=\"表单的实例\"><a href=\"#表单的实例\" class=\"headerlink\" title=\"表单的实例\"></a>表单的实例</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;html/template&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sayhelloName</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;Hello&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">login</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;method&quot;</span>, r.Method)<br>\t<span class=\"hljs-keyword\">if</span> r.Method == <span class=\"hljs-string\">&quot;GET&quot;</span> &#123;<br>\t\tt, _ := template.ParseFiles(<span class=\"hljs-string\">&quot;login.gtpl&quot;</span>)<br>\t\tlog.Println(t.Execute(w, <span class=\"hljs-literal\">nil</span>))<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\terr := r.ParseForm()<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tlog.Fatal(<span class=\"hljs-string\">&quot;ParseForm:&quot;</span>, err)<br>\t\t&#125;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;username:&quot;</span>, r.Form[<span class=\"hljs-string\">&quot;username&quot;</span>])<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;password:&quot;</span>, r.Form[<span class=\"hljs-string\">&quot;password&quot;</span>])<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, sayhelloName)<br><br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/login&quot;</span>, login)<br><br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/login&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br><br>            用户名:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>            密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>            <br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;登陆&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br>        #文件上传<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/upload&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;uploadfile&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;token&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;&#123;.&#125;&#125;&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;upload&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1601,"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><h1 id=\"表单的实例\"><a href=\"#表单的实例\" class=\"headerlink\" title=\"表单的实例\"></a>表单的实例</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;html/template&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sayhelloName</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;Hello&quot;</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">login</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;method&quot;</span>, r.Method)<br>\t<span class=\"hljs-keyword\">if</span> r.Method == <span class=\"hljs-string\">&quot;GET&quot;</span> &#123;<br>\t\tt, _ := template.ParseFiles(<span class=\"hljs-string\">&quot;login.gtpl&quot;</span>)<br>\t\tlog.Println(t.Execute(w, <span class=\"hljs-literal\">nil</span>))<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\terr := r.ParseForm()<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tlog.Fatal(<span class=\"hljs-string\">&quot;ParseForm:&quot;</span>, err)<br>\t\t&#125;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;username:&quot;</span>, r.Form[<span class=\"hljs-string\">&quot;username&quot;</span>])<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;password:&quot;</span>, r.Form[<span class=\"hljs-string\">&quot;password&quot;</span>])<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, sayhelloName)<br><br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/login&quot;</span>, login)<br><br>\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:8080&quot;</span>, <span class=\"hljs-literal\">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/login&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br><br>            用户名:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>            密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>            <br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;登陆&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br>        #文件上传<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/upload&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;uploadfile&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;token&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;&#123;.&#125;&#125;&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;upload&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"go 语言基础——面向对象","_content":"\n## 面向对象\n\n**文字描述：**\n\n通过const定义了一些常量，然后定义了一些自定义类型\n\n- Color作为byte的别名\n- 定义了一个struct:Box，含有三个长宽高字段和一个颜色属性\n- 定义了一个slice:BoxList，含有Box\n\n然后以上面的自定义类型为接收者定义了一些method\n\n- Volume()定义了接收者为Box，返回Box的容量\n- SetColor(c Color)，把Box的颜色改为c\n- BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色\n- PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色\n- String()定义在Color上面，返回Color的具体颜色(字符串格式)\n\n定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。\n\n## 继承\n\n如果匿名字段实现了一个method，那么包含这个匿名字段的struct也可以调用method.\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n\tname string\n\tage  int\n}\n\ntype Student struct {\n\tHuman\n\tschool string\n}\n\ntype Company struct {\n\tHuman\n\tconpany string\n}\n\nfunc (h Human) SayHi() {\n\tfmt.Println(\"Hi\", h.name)\n}\n\nfunc main() {\n\ttony := Student{Human{name: \"tony\", age: 12}, \"MTA\"}\n\tMark := Company{Human{name: \"Mark\", age: 22}, \"TA\"}\n\n\ttony.SayHi()\n\tMark.SayHi()\n}\n```\n\n\n\n## 重写\n\n重新定义一个相同的mrthod，重新写匿名字段的方法。\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n\tname string\n\tage  int\n}\n\ntype Student struct {\n\tHuman\n\tschool string\n}\n\ntype Company struct {\n\tHuman\n\tconpany string\n}\n\nfunc (h Human) SayHi() {\n\tfmt.Println(\"Hi\", h.name)\n}\n\nfunc (e *Company) SayHi() {\n\te.conpany = \"TB\"\n}\n\nfunc main() {\n\ttony := Student{Human{name: \"tony\", age: 12}, \"MTA\"}\n\tMark := Company{Human{name: \"Mark\", age: 22}, \"TA\"}\n\n\ttony.SayHi()\n\tMark.SayHi()\n\tfmt.Println(Mark.conpany)\n}\n```\n\n","source":"_posts/golang/go基础/面向对象.md","raw":"---\ntitle: go 语言基础——面向对象\ncategories: \n- [golang, go语言基础]\ntags:\n- golang\n---\n\n## 面向对象\n\n**文字描述：**\n\n通过const定义了一些常量，然后定义了一些自定义类型\n\n- Color作为byte的别名\n- 定义了一个struct:Box，含有三个长宽高字段和一个颜色属性\n- 定义了一个slice:BoxList，含有Box\n\n然后以上面的自定义类型为接收者定义了一些method\n\n- Volume()定义了接收者为Box，返回Box的容量\n- SetColor(c Color)，把Box的颜色改为c\n- BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色\n- PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色\n- String()定义在Color上面，返回Color的具体颜色(字符串格式)\n\n定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。\n\n## 继承\n\n如果匿名字段实现了一个method，那么包含这个匿名字段的struct也可以调用method.\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n\tname string\n\tage  int\n}\n\ntype Student struct {\n\tHuman\n\tschool string\n}\n\ntype Company struct {\n\tHuman\n\tconpany string\n}\n\nfunc (h Human) SayHi() {\n\tfmt.Println(\"Hi\", h.name)\n}\n\nfunc main() {\n\ttony := Student{Human{name: \"tony\", age: 12}, \"MTA\"}\n\tMark := Company{Human{name: \"Mark\", age: 22}, \"TA\"}\n\n\ttony.SayHi()\n\tMark.SayHi()\n}\n```\n\n\n\n## 重写\n\n重新定义一个相同的mrthod，重新写匿名字段的方法。\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n\tname string\n\tage  int\n}\n\ntype Student struct {\n\tHuman\n\tschool string\n}\n\ntype Company struct {\n\tHuman\n\tconpany string\n}\n\nfunc (h Human) SayHi() {\n\tfmt.Println(\"Hi\", h.name)\n}\n\nfunc (e *Company) SayHi() {\n\te.conpany = \"TB\"\n}\n\nfunc main() {\n\ttony := Student{Human{name: \"tony\", age: 12}, \"MTA\"}\n\tMark := Company{Human{name: \"Mark\", age: 22}, \"TA\"}\n\n\ttony.SayHi()\n\tMark.SayHi()\n\tfmt.Println(Mark.conpany)\n}\n```\n\n","slug":"golang/go基础/面向对象","published":1,"date":"2022-09-15T01:21:15.656Z","updated":"2022-10-12T03:28:27.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgw004qtpdo0acb1vl8","content":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p><strong>文字描述：</strong></p>\n<p>通过const定义了一些常量，然后定义了一些自定义类型</p>\n<ul>\n<li>Color作为byte的别名</li>\n<li>定义了一个struct:Box，含有三个长宽高字段和一个颜色属性</li>\n<li>定义了一个slice:BoxList，含有Box</li>\n</ul>\n<p>然后以上面的自定义类型为接收者定义了一些method</p>\n<ul>\n<li>Volume()定义了接收者为Box，返回Box的容量</li>\n<li>SetColor(c Color)，把Box的颜色改为c</li>\n<li>BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色</li>\n<li>PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色</li>\n<li>String()定义在Color上面，返回Color的具体颜色(字符串格式)</li>\n</ul>\n<p>定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也可以调用method.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tschool <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Company <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tconpany <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span></span> SayHi() &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttony := Student&#123;Human&#123;name: <span class=\"hljs-string\">&quot;tony&quot;</span>, age: <span class=\"hljs-number\">12</span>&#125;, <span class=\"hljs-string\">&quot;MTA&quot;</span>&#125;<br>\tMark := Company&#123;Human&#123;name: <span class=\"hljs-string\">&quot;Mark&quot;</span>, age: <span class=\"hljs-number\">22</span>&#125;, <span class=\"hljs-string\">&quot;TA&quot;</span>&#125;<br><br>\ttony.SayHi()<br>\tMark.SayHi()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><p>重新定义一个相同的mrthod，重新写匿名字段的方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tschool <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Company <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tconpany <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span></span> SayHi() &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Company)</span></span> SayHi() &#123;<br>\te.conpany = <span class=\"hljs-string\">&quot;TB&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttony := Student&#123;Human&#123;name: <span class=\"hljs-string\">&quot;tony&quot;</span>, age: <span class=\"hljs-number\">12</span>&#125;, <span class=\"hljs-string\">&quot;MTA&quot;</span>&#125;<br>\tMark := Company&#123;Human&#123;name: <span class=\"hljs-string\">&quot;Mark&quot;</span>, age: <span class=\"hljs-number\">22</span>&#125;, <span class=\"hljs-string\">&quot;TA&quot;</span>&#125;<br><br>\ttony.SayHi()<br>\tMark.SayHi()<br>\tfmt.Println(Mark.conpany)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1599,"excerpt":"","more":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p><strong>文字描述：</strong></p>\n<p>通过const定义了一些常量，然后定义了一些自定义类型</p>\n<ul>\n<li>Color作为byte的别名</li>\n<li>定义了一个struct:Box，含有三个长宽高字段和一个颜色属性</li>\n<li>定义了一个slice:BoxList，含有Box</li>\n</ul>\n<p>然后以上面的自定义类型为接收者定义了一些method</p>\n<ul>\n<li>Volume()定义了接收者为Box，返回Box的容量</li>\n<li>SetColor(c Color)，把Box的颜色改为c</li>\n<li>BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色</li>\n<li>PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色</li>\n<li>String()定义在Color上面，返回Color的具体颜色(字符串格式)</li>\n</ul>\n<p>定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也可以调用method.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tschool <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Company <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tconpany <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span></span> SayHi() &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttony := Student&#123;Human&#123;name: <span class=\"hljs-string\">&quot;tony&quot;</span>, age: <span class=\"hljs-number\">12</span>&#125;, <span class=\"hljs-string\">&quot;MTA&quot;</span>&#125;<br>\tMark := Company&#123;Human&#123;name: <span class=\"hljs-string\">&quot;Mark&quot;</span>, age: <span class=\"hljs-number\">22</span>&#125;, <span class=\"hljs-string\">&quot;TA&quot;</span>&#125;<br><br>\ttony.SayHi()<br>\tMark.SayHi()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><p>重新定义一个相同的mrthod，重新写匿名字段的方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;<br>\tname <span class=\"hljs-type\">string</span><br>\tage  <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tschool <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Company <span class=\"hljs-keyword\">struct</span> &#123;<br>\tHuman<br>\tconpany <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span></span> SayHi() &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Hi&quot;</span>, h.name)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Company)</span></span> SayHi() &#123;<br>\te.conpany = <span class=\"hljs-string\">&quot;TB&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttony := Student&#123;Human&#123;name: <span class=\"hljs-string\">&quot;tony&quot;</span>, age: <span class=\"hljs-number\">12</span>&#125;, <span class=\"hljs-string\">&quot;MTA&quot;</span>&#125;<br>\tMark := Company&#123;Human&#123;name: <span class=\"hljs-string\">&quot;Mark&quot;</span>, age: <span class=\"hljs-number\">22</span>&#125;, <span class=\"hljs-string\">&quot;TA&quot;</span>&#125;<br><br>\ttony.SayHi()<br>\tMark.SayHi()<br>\tfmt.Println(Mark.conpany)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"单例模式","_content":"\n# 原理\n\n只能开启一个线程，只有一个实例，并且能够实现自我实例化;\n\n确保一个类只有一个实例，变成单例之后，确保程序运行之后查找的对象均是一个对象。\n\n## 懒汉式\n\n非线程安全，也就是多线程下可能创建多次对象。\n\n\n\n线程安全，利用加锁保证线程安全，但由于每次调用都有加锁的操作，性能相较于不高效。\n\n### 不加锁\n\n```go\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\tif instance == nil {\n\t\tinstance = &singleton{}\n\t}\n\treturn instance\n}\n```\n\n线程不安全。如果执行多个goroutine（高并发），进行第一次检查都会创建singleton类型的实例，导致创建多个对象，并且会相互覆盖，\n\n### 整体加锁\n\n```go\nvar mu sync.Mutex\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\tmu.Lock()\n\tdefer mu.Unlock()\n\tif instance == nil {\n\t\tinstance = &singleton{}\n\t}\n\treturn instance\n}\n```\n\n整体进行加锁之后，会使得在执行多个goroutine的时候，所有的都需要加锁和开锁，性能降低。\n\n### 在创建方法的时候加锁\n\n```go\nvar mu sync.Mutex\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\n\tif instance == nil {\n\t\tmu.Lock()\n\t\tinstance = &singleton{}\n\t\tmu.Unlock()\n\t}\n\treturn instance\n}\n```\n\n线程不安全。多个线程依旧会创建多个实例。\n\n### 双重检锁\n\n```go\nvar mu sync.Mutex\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\n\tif instance == nil {\n\t\tmu.Lock()\n\t\tif instance == nil {\n\t\t\tinstance = &singleton{}\n\t\t}\n\n\t\tmu.Unlock()\n\t}\n\treturn instance\n}\n```\n\n只有当对象未初始化的时候，才会有加减的操作\n\n### sync.Once实现\n\n```go\nvar once sync.Once\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\n\tonce.Do(func() {\n\t\tinstance = &singleton{}\n\t})\n\treturn instance\n}\n```\n\n[`Do`方法源码](https://jane-lucky.github.io/2022/09/09/golang/Golang包/sync.Once/)\n\n## 饿汉式\n\n单例使用较少，并且创建的资源比较多。\n\n直接创建好对象，不需要判断为空，线程安全。\n\n```\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc init() {\n\tinstance = &singleton{}\n}\nfunc GetInstance() *singleton {\n\treturn instance\n}\n```\n\n","source":"_posts/golang/go设计模式/单例模式.md","raw":"---\ntitle: 单例模式\ncategories: \n- [golang, go设计模式]\n---\n\n# 原理\n\n只能开启一个线程，只有一个实例，并且能够实现自我实例化;\n\n确保一个类只有一个实例，变成单例之后，确保程序运行之后查找的对象均是一个对象。\n\n## 懒汉式\n\n非线程安全，也就是多线程下可能创建多次对象。\n\n\n\n线程安全，利用加锁保证线程安全，但由于每次调用都有加锁的操作，性能相较于不高效。\n\n### 不加锁\n\n```go\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\tif instance == nil {\n\t\tinstance = &singleton{}\n\t}\n\treturn instance\n}\n```\n\n线程不安全。如果执行多个goroutine（高并发），进行第一次检查都会创建singleton类型的实例，导致创建多个对象，并且会相互覆盖，\n\n### 整体加锁\n\n```go\nvar mu sync.Mutex\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\tmu.Lock()\n\tdefer mu.Unlock()\n\tif instance == nil {\n\t\tinstance = &singleton{}\n\t}\n\treturn instance\n}\n```\n\n整体进行加锁之后，会使得在执行多个goroutine的时候，所有的都需要加锁和开锁，性能降低。\n\n### 在创建方法的时候加锁\n\n```go\nvar mu sync.Mutex\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\n\tif instance == nil {\n\t\tmu.Lock()\n\t\tinstance = &singleton{}\n\t\tmu.Unlock()\n\t}\n\treturn instance\n}\n```\n\n线程不安全。多个线程依旧会创建多个实例。\n\n### 双重检锁\n\n```go\nvar mu sync.Mutex\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\n\tif instance == nil {\n\t\tmu.Lock()\n\t\tif instance == nil {\n\t\t\tinstance = &singleton{}\n\t\t}\n\n\t\tmu.Unlock()\n\t}\n\treturn instance\n}\n```\n\n只有当对象未初始化的时候，才会有加减的操作\n\n### sync.Once实现\n\n```go\nvar once sync.Once\n\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc GetInstance() *singleton {\n\n\tonce.Do(func() {\n\t\tinstance = &singleton{}\n\t})\n\treturn instance\n}\n```\n\n[`Do`方法源码](https://jane-lucky.github.io/2022/09/09/golang/Golang包/sync.Once/)\n\n## 饿汉式\n\n单例使用较少，并且创建的资源比较多。\n\n直接创建好对象，不需要判断为空，线程安全。\n\n```\ntype singleton struct {\n}\n\nvar instance *singleton\n\nfunc init() {\n\tinstance = &singleton{}\n}\nfunc GetInstance() *singleton {\n\treturn instance\n}\n```\n\n","slug":"golang/go设计模式/单例模式","published":1,"date":"2022-09-15T01:21:15.652Z","updated":"2022-09-13T03:25:25.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9gotsgx004stpdo69th76cn","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>只能开启一个线程，只有一个实例，并且能够实现自我实例化;</p>\n<p>确保一个类只有一个实例，变成单例之后，确保程序运行之后查找的对象均是一个对象。</p>\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><p>非线程安全，也就是多线程下可能创建多次对象。</p>\n<p>线程安全，利用加锁保证线程安全，但由于每次调用都有加锁的操作，性能相较于不高效。</p>\n<h3 id=\"不加锁\"><a href=\"#不加锁\" class=\"headerlink\" title=\"不加锁\"></a>不加锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>线程不安全。如果执行多个goroutine（高并发），进行第一次检查都会创建singleton类型的实例，导致创建多个对象，并且会相互覆盖，</p>\n<h3 id=\"整体加锁\"><a href=\"#整体加锁\" class=\"headerlink\" title=\"整体加锁\"></a>整体加锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br>\tmu.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> mu.Unlock()<br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整体进行加锁之后，会使得在执行多个goroutine的时候，所有的都需要加锁和开锁，性能降低。</p>\n<h3 id=\"在创建方法的时候加锁\"><a href=\"#在创建方法的时候加锁\" class=\"headerlink\" title=\"在创建方法的时候加锁\"></a>在创建方法的时候加锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br><br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tmu.Lock()<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t\tmu.Unlock()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>线程不安全。多个线程依旧会创建多个实例。</p>\n<h3 id=\"双重检锁\"><a href=\"#双重检锁\" class=\"headerlink\" title=\"双重检锁\"></a>双重检锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br><br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tmu.Lock()<br>\t\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tinstance = &amp;singleton&#123;&#125;<br>\t\t&#125;<br><br>\t\tmu.Unlock()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>只有当对象未初始化的时候，才会有加减的操作</p>\n<h3 id=\"sync-Once实现\"><a href=\"#sync-Once实现\" class=\"headerlink\" title=\"sync.Once实现\"></a>sync.Once实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> once sync.Once<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br><br>\tonce.Do(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t&#125;)<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://jane-lucky.github.io/2022/09/09/golang/Golang%E5%8C%85/sync.Once/\"><code>Do</code>方法源码</a></p>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><p>单例使用较少，并且创建的资源比较多。</p>\n<p>直接创建好对象，不需要判断为空，线程安全。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">type singleton struct &#123;<br>&#125;<br><br>var<span class=\"hljs-built_in\"> instance </span>*singleton<br><br>func init() &#123;<br><span class=\"hljs-built_in\">\tinstance </span>= &amp;singleton&#123;&#125;<br>&#125;<br>func GetInstance() *singleton &#123;<br><span class=\"hljs-built_in\">\treturn </span>instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1640,"excerpt":"","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>只能开启一个线程，只有一个实例，并且能够实现自我实例化;</p>\n<p>确保一个类只有一个实例，变成单例之后，确保程序运行之后查找的对象均是一个对象。</p>\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><p>非线程安全，也就是多线程下可能创建多次对象。</p>\n<p>线程安全，利用加锁保证线程安全，但由于每次调用都有加锁的操作，性能相较于不高效。</p>\n<h3 id=\"不加锁\"><a href=\"#不加锁\" class=\"headerlink\" title=\"不加锁\"></a>不加锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>线程不安全。如果执行多个goroutine（高并发），进行第一次检查都会创建singleton类型的实例，导致创建多个对象，并且会相互覆盖，</p>\n<h3 id=\"整体加锁\"><a href=\"#整体加锁\" class=\"headerlink\" title=\"整体加锁\"></a>整体加锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br>\tmu.Lock()<br>\t<span class=\"hljs-keyword\">defer</span> mu.Unlock()<br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整体进行加锁之后，会使得在执行多个goroutine的时候，所有的都需要加锁和开锁，性能降低。</p>\n<h3 id=\"在创建方法的时候加锁\"><a href=\"#在创建方法的时候加锁\" class=\"headerlink\" title=\"在创建方法的时候加锁\"></a>在创建方法的时候加锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br><br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tmu.Lock()<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t\tmu.Unlock()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>线程不安全。多个线程依旧会创建多个实例。</p>\n<h3 id=\"双重检锁\"><a href=\"#双重检锁\" class=\"headerlink\" title=\"双重检锁\"></a>双重检锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> mu sync.Mutex<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br><br>\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tmu.Lock()<br>\t\t<span class=\"hljs-keyword\">if</span> instance == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tinstance = &amp;singleton&#123;&#125;<br>\t\t&#125;<br><br>\t\tmu.Unlock()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>只有当对象未初始化的时候，才会有加减的操作</p>\n<h3 id=\"sync-Once实现\"><a href=\"#sync-Once实现\" class=\"headerlink\" title=\"sync.Once实现\"></a>sync.Once实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> once sync.Once<br><br><span class=\"hljs-keyword\">type</span> singleton <span class=\"hljs-keyword\">struct</span> &#123;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> instance *singleton<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetInstance</span><span class=\"hljs-params\">()</span></span> *singleton &#123;<br><br>\tonce.Do(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tinstance = &amp;singleton&#123;&#125;<br>\t&#125;)<br>\t<span class=\"hljs-keyword\">return</span> instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://jane-lucky.github.io/2022/09/09/golang/Golang%E5%8C%85/sync.Once/\"><code>Do</code>方法源码</a></p>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><p>单例使用较少，并且创建的资源比较多。</p>\n<p>直接创建好对象，不需要判断为空，线程安全。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">type singleton struct &#123;<br>&#125;<br><br>var<span class=\"hljs-built_in\"> instance </span>*singleton<br><br>func init() &#123;<br><span class=\"hljs-built_in\">\tinstance </span>= &amp;singleton&#123;&#125;<br>&#125;<br>func GetInstance() *singleton &#123;<br><span class=\"hljs-built_in\">\treturn </span>instance<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"cookie和session","_content":"\n\n\n# cookie和Session\n\n均是用来跟踪浏览器用户身份的会话方式\n\n## cookie\n\n客户端保存用户信息的一种机制：在本地机器上存储的小文本，每次请求回发送到服务器——通过请求和响应报文中写入的cookie来控制客户端的状态。\n\n![cookie请求状态](cookie和session/image-20221021113657015.png)\n\n## session\n\n服务端执行session的时候，会将`session id`保存到cookie中。\n\n## 区别\n\n1. cookie保存在客户端，session保存在服务端，但session的实现和cookie有一定的关系。\n2. cookie并不安全，可以通过修改cookie信息来进行cookie欺骗。\n3. session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE\n4. 单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。\n5. 所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中","source":"_posts/go基本知识整理/cookie和session.md","raw":"---\ntitle: cookie和session\n---\n\n\n\n# cookie和Session\n\n均是用来跟踪浏览器用户身份的会话方式\n\n## cookie\n\n客户端保存用户信息的一种机制：在本地机器上存储的小文本，每次请求回发送到服务器——通过请求和响应报文中写入的cookie来控制客户端的状态。\n\n![cookie请求状态](cookie和session/image-20221021113657015.png)\n\n## session\n\n服务端执行session的时候，会将`session id`保存到cookie中。\n\n## 区别\n\n1. cookie保存在客户端，session保存在服务端，但session的实现和cookie有一定的关系。\n2. cookie并不安全，可以通过修改cookie信息来进行cookie欺骗。\n3. session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE\n4. 单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。\n5. 所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中","slug":"go基本知识整理/cookie和session","published":1,"date":"2022-10-21T06:10:53.339Z","updated":"2022-10-21T06:15:51.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9pd31yn0000tedo28bpcbek","content":"<h1 id=\"cookie和Session\"><a href=\"#cookie和Session\" class=\"headerlink\" title=\"cookie和Session\"></a>cookie和Session</h1><p>均是用来跟踪浏览器用户身份的会话方式</p>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>客户端保存用户信息的一种机制：在本地机器上存储的小文本，每次请求回发送到服务器——通过请求和响应报文中写入的cookie来控制客户端的状态。</p>\n<p><img src=\"/2022/10/21/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/cookie%E5%92%8Csession/image-20221021113657015.png\" alt=\"cookie请求状态\"></p>\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><p>服务端执行session的时候，会将<code>session id</code>保存到cookie中。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ol>\n<li>cookie保存在客户端，session保存在服务端，但session的实现和cookie有一定的关系。</li>\n<li>cookie并不安全，可以通过修改cookie信息来进行cookie欺骗。</li>\n<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE</li>\n<li>单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。</li>\n<li>所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中</li>\n</ol>\n","site":{"data":{}},"wordcount":402,"excerpt":"","more":"<h1 id=\"cookie和Session\"><a href=\"#cookie和Session\" class=\"headerlink\" title=\"cookie和Session\"></a>cookie和Session</h1><p>均是用来跟踪浏览器用户身份的会话方式</p>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>客户端保存用户信息的一种机制：在本地机器上存储的小文本，每次请求回发送到服务器——通过请求和响应报文中写入的cookie来控制客户端的状态。</p>\n<p><img src=\"/2022/10/21/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/cookie%E5%92%8Csession/image-20221021113657015.png\" alt=\"cookie请求状态\"></p>\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><p>服务端执行session的时候，会将<code>session id</code>保存到cookie中。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ol>\n<li>cookie保存在客户端，session保存在服务端，但session的实现和cookie有一定的关系。</li>\n<li>cookie并不安全，可以通过修改cookie信息来进行cookie欺骗。</li>\n<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE</li>\n<li>单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。</li>\n<li>所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/k8s/ingress-nginx简介/image-20221020111254258.png","slug":"image-20221020111254258.png","post":"cl9gotsfd0015tpdoeh3x43gi","modified":0,"renderable":0},{"_id":"source/_posts/k8s/ingress-nginx简介/image-20221020112742780.png","slug":"image-20221020112742780.png","post":"cl9gotsfd0015tpdoeh3x43gi","modified":0,"renderable":0},{"_id":"source/_posts/k8s/ingress-nginx简介/image-20221020113006395.png","slug":"image-20221020113006395.png","post":"cl9gotsfd0015tpdoeh3x43gi","modified":0,"renderable":0},{"_id":"source/_posts/k8s/k8s在kind上的简单使用/image-20220909161301440-1663039219073-7.png","slug":"image-20220909161301440-1663039219073-7.png","post":"cl9gotsfe0018tpdohciyf1wt","modified":0,"renderable":0},{"_id":"source/_posts/linux/物理逻辑卷相关知识/image-20220825165132736.png","slug":"image-20220825165132736.png","post":"cl9gotsg2002htpdogies3dxq","modified":0,"renderable":0},{"_id":"source/_posts/linux/物理逻辑卷相关知识/image-20220826145753160.png","slug":"image-20220826145753160.png","post":"cl9gotsg2002htpdogies3dxq","modified":0,"renderable":0},{"_id":"source/_posts/linux/物理逻辑卷相关知识/image-20220826152857911.png","slug":"image-20220826152857911.png","post":"cl9gotsg2002htpdogies3dxq","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/Hello-world/python-one.png","slug":"python-one.png","post":"cl9gotsgf003etpdo74lqge5b","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish/bindings.png","slug":"bindings.png","post":"cl9gotsgj003ptpdoevk5e3ka","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish/exchanges.png","slug":"exchanges.png","post":"cl9gotsgj003ptpdoevk5e3ka","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/publish/runResult.png","slug":"runResult.png","post":"cl9gotsgj003ptpdoevk5e3ka","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/主题topic/python-five.png","slug":"python-five.png","post":"cl9gotsgl003wtpdoh2dlhv5j","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/工作队列/1663727458340.png","slug":"1663727458340.png","post":"cl9gotsgm003ytpdo63pkd018","modified":0,"renderable":0},{"_id":"source/_posts/golang/RabbitMQ-go教程/路由/runtime.png","slug":"runtime.png","post":"cl9gotsgn0042tpdogczo8e4r","modified":0,"renderable":0},{"_id":"source/_posts/go基本知识整理/cookie和session/image-20221021113657015.png","post":"cl9pd31yn0000tedo28bpcbek","slug":"image-20221021113657015.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl9gotsez0007tpdo64uyel8f","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsf4000etpdohj5pcuu5"},{"post_id":"cl9gotset0001tpdobuoj0jq5","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsf5000itpdoa1b48llf"},{"post_id":"cl9gotsf00008tpdo2r3qeeu6","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsf6000ltpdo7pvzhb4v"},{"post_id":"cl9gotsf2000ctpdo8lw7gpwk","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsf8000ptpdo49rme6cv"},{"post_id":"cl9gotsev0003tpdo8h3g5ue8","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsf9000stpdo5ke2enlt"},{"post_id":"cl9gotsf3000dtpdoaxxwbukr","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsfa000vtpdo4cj5fh1n"},{"post_id":"cl9gotsez0006tpdo7241bmbb","category_id":"cl9gotsex0004tpdo46og3826","_id":"cl9gotsfa000ztpdo3xypgh5j"},{"post_id":"cl9gotsf8000rtpdo6y3q1aas","category_id":"cl9gotsfa000xtpdo54lt223s","_id":"cl9gotsfe001atpdo8dlnfzyq"},{"post_id":"cl9gotsf9000utpdo23sx6iwo","category_id":"cl9gotsfa000xtpdo54lt223s","_id":"cl9gotsfg001etpdo71y81km2"},{"post_id":"cl9gotsfa000ytpdodma14erb","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsfi001jtpdo6d326jp6"},{"post_id":"cl9gotsfg001gtpdo0ro62h22","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsfj001qtpdo6rmm3954"},{"post_id":"cl9gotsfb0011tpdo1r2693cz","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsfu001ttpdo6cgbasq5"},{"post_id":"cl9gotsfc0013tpdoe4c71wxc","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsfw001xtpdofwa4bp72"},{"post_id":"cl9gotsfd0015tpdoeh3x43gi","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsfz0022tpdo52k549md"},{"post_id":"cl9gotsfe0018tpdohciyf1wt","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsg00028tpdo295b4hdh"},{"post_id":"cl9gotsfe001btpdobh6d1542","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsg2002ftpdod6tbehhj"},{"post_id":"cl9gotsff001dtpdob46kbr55","category_id":"cl9gotsfg001ftpdoahbo2k2g","_id":"cl9gotsg3002jtpdo66573gxx"},{"post_id":"cl9gotsfh001itpdob68uccpl","category_id":"cl9gotsg2002etpdo6f0h1r0q","_id":"cl9gotsg5002qtpdo5r8lduou"},{"post_id":"cl9gotsfi001mtpdoevhn9oee","category_id":"cl9gotsg2002etpdo6f0h1r0q","_id":"cl9gotsg9002wtpdo90i088dh"},{"post_id":"cl9gotsfj001ptpdo8ozr63u8","category_id":"cl9gotsg2002etpdo6f0h1r0q","_id":"cl9gotsgb0032tpdo0rzo3sao"},{"post_id":"cl9gotsfk001stpdo7zr08yqg","category_id":"cl9gotsg2002etpdo6f0h1r0q","_id":"cl9gotsgd0038tpdo54vs81dl"},{"post_id":"cl9gotsfv001utpdoebasa49z","category_id":"cl9gotsg2002etpdo6f0h1r0q","_id":"cl9gotsgf003dtpdoap8tfcur"},{"post_id":"cl9gotsfw001ytpdo1x9b3qfa","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgi003mtpdo1sog4va7"},{"post_id":"cl9gotsfx001ztpdo74wp6gjn","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgk003ttpdofufj3feu"},{"post_id":"cl9gotsfz0023tpdohy7vh59s","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgm0040tpdofkipfvnn"},{"post_id":"cl9gotsg00025tpdogh59a9sn","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgo0045tpdobeq8et05"},{"post_id":"cl9gotsg1002atpdo5ku8faer","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgs004btpdo7gn0gpzg"},{"post_id":"cl9gotsg1002ctpdob9rqcexp","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgu004itpdocelacd0o"},{"post_id":"cl9gotsg2002htpdogies3dxq","category_id":"cl9gotsgd0037tpdo7zzg6zw8","_id":"cl9gotsgv004ntpdo85bxbsdp"},{"post_id":"cl9gotsg6002utpdo7b3cdoeu","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh10056tpdoe47p133n"},{"post_id":"cl9gotsg6002utpdo7b3cdoeu","category_id":"cl9gotsgz004ztpdo2amo780r","_id":"cl9gotsh10058tpdo69e95lrp"},{"post_id":"cl9gotsg9002xtpdo2ommhj79","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh1005btpdoeyf7ckid"},{"post_id":"cl9gotsg9002xtpdo2ommhj79","category_id":"cl9gotsgz004ztpdo2amo780r","_id":"cl9gotsh2005dtpdoewlh96ds"},{"post_id":"cl9gotsga002ztpdoh3l15w5k","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh2005gtpdo9a0h7gll"},{"post_id":"cl9gotsga002ztpdoh3l15w5k","category_id":"cl9gotsgz004ztpdo2amo780r","_id":"cl9gotsh2005itpdo2nladc1n"},{"post_id":"cl9gotsgb0033tpdo2aalbe2r","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh4005ltpdo2ol30f40"},{"post_id":"cl9gotsgb0033tpdo2aalbe2r","category_id":"cl9gotsgz004ztpdo2amo780r","_id":"cl9gotsh4005ntpdoe9rran1g"},{"post_id":"cl9gotsgc0036tpdo9bgp8d86","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh5005qtpdo3shadit9"},{"post_id":"cl9gotsgc0036tpdo9bgp8d86","category_id":"cl9gotsgz004ztpdo2amo780r","_id":"cl9gotsh5005stpdogrzxgfxw"},{"post_id":"cl9gotsgd0039tpdodbe1fhru","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh5005vtpdo36u1fxzm"},{"post_id":"cl9gotsgd0039tpdodbe1fhru","category_id":"cl9gotsh2005jtpdo6etv33e9","_id":"cl9gotsh6005xtpdocnr4ea4p"},{"post_id":"cl9gotsge003btpdodbqvh1e6","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh60060tpdoavwb7mfo"},{"post_id":"cl9gotsge003btpdodbqvh1e6","category_id":"cl9gotsh4005ptpdo7g89508y","_id":"cl9gotsh60062tpdo741mffz9"},{"post_id":"cl9gotsgf003etpdo74lqge5b","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh70064tpdo8q21bg1j"},{"post_id":"cl9gotsgf003etpdo74lqge5b","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotsh70066tpdoh5ejahip"},{"post_id":"cl9gotsgg003itpdo3x5mfphc","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh80069tpdohjj45iq6"},{"post_id":"cl9gotsgg003itpdo3x5mfphc","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotsh8006ctpdo0anqcf4e"},{"post_id":"cl9gotsgi003ktpdodkc0ftzd","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh8006ftpdoaymzd8j0"},{"post_id":"cl9gotsgi003ktpdodkc0ftzd","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotsh9006htpdo7lc72kii"},{"post_id":"cl9gotsgj003ptpdoevk5e3ka","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsh9006ktpdoek1z0r0g"},{"post_id":"cl9gotsgj003ptpdoevk5e3ka","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotsha006ntpdo4ypq6np4"},{"post_id":"cl9gotsgk003rtpdobat845gs","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotsha006qtpdoath33fx8"},{"post_id":"cl9gotsgk003rtpdobat845gs","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotshb006stpdohig9an2d"},{"post_id":"cl9gotsgl003wtpdoh2dlhv5j","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshb006vtpdo5cvj921d"},{"post_id":"cl9gotsgl003wtpdoh2dlhv5j","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotshb006ytpdo3tnqgtwm"},{"post_id":"cl9gotsgm003ytpdo63pkd018","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshc0071tpdo36u9fddc"},{"post_id":"cl9gotsgm003ytpdo63pkd018","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotshc0074tpdoh9fh9oki"},{"post_id":"cl9gotsgn0042tpdogczo8e4r","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshc0077tpdo84133yhu"},{"post_id":"cl9gotsgn0042tpdogczo8e4r","category_id":"cl9gotsh5005utpdoduup2xdw","_id":"cl9gotshd007atpdoaurz457b"},{"post_id":"cl9gotsgo0043tpdo73lt9orq","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshd007dtpdo9ccfdmhk"},{"post_id":"cl9gotsgo0043tpdo73lt9orq","category_id":"cl9gotshb0070tpdo7thfhpmx","_id":"cl9gotshd007ftpdo0ye2ebra"},{"post_id":"cl9gotsgr0047tpdoctsogexs","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshe007itpdoc8dx7sfy"},{"post_id":"cl9gotsgr0047tpdoctsogexs","category_id":"cl9gotshb0070tpdo7thfhpmx","_id":"cl9gotshe007ktpdo50is5deh"},{"post_id":"cl9gotsgs0049tpdog13w4aps","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshe007ntpdo8vnh7qnw"},{"post_id":"cl9gotsgs0049tpdog13w4aps","category_id":"cl9gotshb0070tpdo7thfhpmx","_id":"cl9gotshg007ptpdoen83cvhj"},{"post_id":"cl9gotsgt004etpdobck07whi","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshg007stpdo65evhfbu"},{"post_id":"cl9gotsgt004etpdobck07whi","category_id":"cl9gotshd007gtpdoe7lxf7w3","_id":"cl9gotshh007utpdo77znhhnb"},{"post_id":"cl9gotsgt004gtpdoe8n8h7ju","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshh007xtpdo09mggu5s"},{"post_id":"cl9gotsgt004gtpdoe8n8h7ju","category_id":"cl9gotshd007gtpdoe7lxf7w3","_id":"cl9gotshi007ztpdo512l7q99"},{"post_id":"cl9gotsgu004ktpdoasj054vq","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshi0082tpdo7gt77f01"},{"post_id":"cl9gotsgu004ktpdoasj054vq","category_id":"cl9gotshd007gtpdoe7lxf7w3","_id":"cl9gotshi0084tpdob2gp316h"},{"post_id":"cl9gotsg3002itpdoc28mex1l","category_id":"cl9gotsgu004htpdo1lip1clu","_id":"cl9gotshj0087tpdo8c51dwbv"},{"post_id":"cl9gotsg3002itpdoc28mex1l","category_id":"cl9gotshh007vtpdo1b7f6c2f","_id":"cl9gotshj0089tpdo85j09z9c"},{"post_id":"cl9gotsgv004mtpdoh1fgddw4","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshj008ctpdo579x00a2"},{"post_id":"cl9gotsgv004mtpdoh1fgddw4","category_id":"cl9gotshd007gtpdoe7lxf7w3","_id":"cl9gotshk008etpdo84gh4zkd"},{"post_id":"cl9gotsgw004qtpdo0acb1vl8","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshk008htpdo9lld0jil"},{"post_id":"cl9gotsgw004qtpdo0acb1vl8","category_id":"cl9gotshd007gtpdoe7lxf7w3","_id":"cl9gotshk008jtpdo8u8j6il1"},{"post_id":"cl9gotsg4002ltpdoeqlpelis","category_id":"cl9gotsgu004htpdo1lip1clu","_id":"cl9gotshl008mtpdo5edpg56e"},{"post_id":"cl9gotsg4002ltpdoeqlpelis","category_id":"cl9gotshh007vtpdo1b7f6c2f","_id":"cl9gotshl008otpdo7byd34tg"},{"post_id":"cl9gotsgx004stpdo69th76cn","category_id":"cl9gotsfe0019tpdobtmk9s0v","_id":"cl9gotshm008rtpdo6b7ohd0x"},{"post_id":"cl9gotsgx004stpdo69th76cn","category_id":"cl9gotshk008gtpdo0nj4908b","_id":"cl9gotshm008ttpdogyj5edlj"},{"post_id":"cl9gotsg5002otpdoht756jog","category_id":"cl9gotsgu004htpdo1lip1clu","_id":"cl9gotshm008vtpdo4ng259ps"},{"post_id":"cl9gotsg5002otpdoht756jog","category_id":"cl9gotshh007vtpdo1b7f6c2f","_id":"cl9gotshm008xtpdoblnt8x6r"},{"post_id":"cl9gotsg5002stpdo7wxn0hs0","category_id":"cl9gotsgu004htpdo1lip1clu","_id":"cl9gotshm008ztpdo3ldj1hul"},{"post_id":"cl9gotsg5002stpdo7wxn0hs0","category_id":"cl9gotshh007vtpdo1b7f6c2f","_id":"cl9gotshn0091tpdofbi32d6x"}],"PostTag":[{"post_id":"cl9gotset0001tpdobuoj0jq5","tag_id":"cl9gotsey0005tpdo77d371cy","_id":"cl9gotsf2000btpdoh76f9zfq"},{"post_id":"cl9gotsev0003tpdo8h3g5ue8","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotsf5000jtpdof6kcg7hq"},{"post_id":"cl9gotsf3000dtpdoaxxwbukr","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotsf6000mtpdo9h01biip"},{"post_id":"cl9gotsez0006tpdo7241bmbb","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotsf8000qtpdohsla93ox"},{"post_id":"cl9gotsez0007tpdo64uyel8f","tag_id":"cl9gotsf6000ntpdo30sscbdm","_id":"cl9gotsfa000wtpdo6acn7700"},{"post_id":"cl9gotsf00008tpdo2r3qeeu6","tag_id":"cl9gotsf9000ttpdoed5h6hqi","_id":"cl9gotsfc0012tpdo4w234aef"},{"post_id":"cl9gotsf2000ctpdo8lw7gpwk","tag_id":"cl9gotsfb0010tpdo2svgdpkz","_id":"cl9gotsfd0017tpdo10yu7rql"},{"post_id":"cl9gotsf6000ktpdo28dm6owy","tag_id":"cl9gotsfd0016tpdo7vh2hknv","_id":"cl9gotsfi001ktpdoedg1gqt1"},{"post_id":"cl9gotsf6000ktpdo28dm6owy","tag_id":"cl9gotsff001ctpdo6bjqbzot","_id":"cl9gotsfj001ntpdo28ir0bfm"},{"post_id":"cl9gotsf9000utpdo23sx6iwo","tag_id":"cl9gotsfh001htpdob1dea2vf","_id":"cl9gotsfz0024tpdoccxreiw1"},{"post_id":"cl9gotsf9000utpdo23sx6iwo","tag_id":"cl9gotsfj001otpdo7ah47la7","_id":"cl9gotsg00026tpdo84ph0vmz"},{"post_id":"cl9gotsf9000utpdo23sx6iwo","tag_id":"cl9gotsfw001vtpdohl65e415","_id":"cl9gotsg1002btpdoflmt8rwo"},{"post_id":"cl9gotsfa000ytpdodma14erb","tag_id":"cl9gotsfy0020tpdodjpd938b","_id":"cl9gotsg2002dtpdo9e0j65cl"},{"post_id":"cl9gotsfb0011tpdo1r2693cz","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsg5002ntpdo2rxs5r1c"},{"post_id":"cl9gotsfb0011tpdo1r2693cz","tag_id":"cl9gotsg2002gtpdogzxqa9vr","_id":"cl9gotsg5002rtpdodeddaicj"},{"post_id":"cl9gotsfc0013tpdoe4c71wxc","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsgb0030tpdohgma787n"},{"post_id":"cl9gotsfc0013tpdoe4c71wxc","tag_id":"cl9gotsg6002ttpdo8l7m1meq","_id":"cl9gotsgc0034tpdob2sx4zo1"},{"post_id":"cl9gotsfd0015tpdoeh3x43gi","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsge003ctpdo9r2bbce9"},{"post_id":"cl9gotsfd0015tpdoeh3x43gi","tag_id":"cl9gotsg6002ttpdo8l7m1meq","_id":"cl9gotsgf003gtpdo3i1t796p"},{"post_id":"cl9gotsgd0039tpdodbe1fhru","tag_id":"cl9gotsf9000ttpdoed5h6hqi","_id":"cl9gotsgg003jtpdo3ae077yc"},{"post_id":"cl9gotsge003btpdodbqvh1e6","tag_id":"cl9gotsf9000ttpdoed5h6hqi","_id":"cl9gotsgj003ntpdogpww3w9u"},{"post_id":"cl9gotsfe0018tpdohciyf1wt","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsgk003qtpdo18ec7rjx"},{"post_id":"cl9gotsfe0018tpdohciyf1wt","tag_id":"cl9gotsg2002gtpdogzxqa9vr","_id":"cl9gotsgl003utpdo4jji3u6k"},{"post_id":"cl9gotsfe001btpdobh6d1542","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsgm003xtpdoh0yv0c33"},{"post_id":"cl9gotsff001dtpdob46kbr55","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsgs0048tpdo0q7i1oko"},{"post_id":"cl9gotsff001dtpdob46kbr55","tag_id":"cl9gotsg2002gtpdogzxqa9vr","_id":"cl9gotsgs004ctpdo1lvp958x"},{"post_id":"cl9gotsfg001gtpdo0ro62h22","tag_id":"cl9gotsg00029tpdoe5ww13as","_id":"cl9gotsgt004ftpdoahtbd3oo"},{"post_id":"cl9gotsfh001itpdob68uccpl","tag_id":"cl9gotsgt004dtpdo69947ru9","_id":"cl9gotsgv004ltpdo2rjt0kro"},{"post_id":"cl9gotsfi001mtpdoevhn9oee","tag_id":"cl9gotsgu004jtpdo3td12yt2","_id":"cl9gotsgx004rtpdo0dxm8s9y"},{"post_id":"cl9gotsfj001ptpdo8ozr63u8","tag_id":"cl9gotsgw004ptpdodeabhgem","_id":"cl9gotsgy004vtpdoeksu4qtv"},{"post_id":"cl9gotsfk001stpdo7zr08yqg","tag_id":"cl9gotsgy004utpdo383odrwo","_id":"cl9gotsgz004ytpdogzs28opq"},{"post_id":"cl9gotsfv001utpdoebasa49z","tag_id":"cl9gotsgz004xtpdo5y4w0c05","_id":"cl9gotsh00051tpdo3nx29c5j"},{"post_id":"cl9gotsfw001ytpdo1x9b3qfa","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh00055tpdobw1z8vs3"},{"post_id":"cl9gotsfx001ztpdo74wp6gjn","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh1005atpdo2q0ba0or"},{"post_id":"cl9gotsfz0023tpdohy7vh59s","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh2005ftpdo9mala8ke"},{"post_id":"cl9gotsg00025tpdogh59a9sn","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh4005ktpdo7y4r8wc7"},{"post_id":"cl9gotsg1002atpdo5ku8faer","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh4005otpdof80xa42c"},{"post_id":"cl9gotsg1002ctpdob9rqcexp","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh5005ttpdohpdff3lx"},{"post_id":"cl9gotsg2002htpdogies3dxq","tag_id":"cl9gotsgz0050tpdo5ckx2ufw","_id":"cl9gotsh6005ytpdo0yor86wi"},{"post_id":"cl9gotsg3002itpdoc28mex1l","tag_id":"cl9gotsh5005wtpdo8lel4ucw","_id":"cl9gotsh70067tpdobj4ugirm"},{"post_id":"cl9gotsg3002itpdoc28mex1l","tag_id":"cl9gotsh60061tpdod03qhnh9","_id":"cl9gotsh8006atpdo9woe41r9"},{"post_id":"cl9gotsg3002itpdoc28mex1l","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotsh8006dtpdo59cs7q1w"},{"post_id":"cl9gotsg4002ltpdoeqlpelis","tag_id":"cl9gotsh5005wtpdo8lel4ucw","_id":"cl9gotsh9006itpdoexbo0fsz"},{"post_id":"cl9gotsg4002ltpdoeqlpelis","tag_id":"cl9gotsh60061tpdod03qhnh9","_id":"cl9gotsh9006ltpdo01cc6ixa"},{"post_id":"cl9gotsg4002ltpdoeqlpelis","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotsha006otpdo8n2v83ee"},{"post_id":"cl9gotsg5002otpdoht756jog","tag_id":"cl9gotsh5005wtpdo8lel4ucw","_id":"cl9gotshb006ttpdo9xm8fby2"},{"post_id":"cl9gotsg5002otpdoht756jog","tag_id":"cl9gotsh60061tpdod03qhnh9","_id":"cl9gotshb006wtpdo7lei48go"},{"post_id":"cl9gotsg5002otpdoht756jog","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotshb006ztpdoe2zg38rj"},{"post_id":"cl9gotsg5002stpdo7wxn0hs0","tag_id":"cl9gotsh60061tpdod03qhnh9","_id":"cl9gotshc0072tpdo4xhx5xwf"},{"post_id":"cl9gotsg5002stpdo7wxn0hs0","tag_id":"cl9gotsf1000atpdohcye8ziw","_id":"cl9gotshc0075tpdo52g94zez"},{"post_id":"cl9gotsg9002xtpdo2ommhj79","tag_id":"cl9gotshb006xtpdodkzlbvw3","_id":"cl9gotshc0078tpdo2uw317je"},{"post_id":"cl9gotsgb0033tpdo2aalbe2r","tag_id":"cl9gotshc0073tpdoavrz35ay","_id":"cl9gotshd007ctpdoc5p04igt"},{"post_id":"cl9gotsgc0036tpdo9bgp8d86","tag_id":"cl9gotshc0073tpdoavrz35ay","_id":"cl9gotshe007htpdocwdp4964"},{"post_id":"cl9gotsgf003etpdo74lqge5b","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshe007mtpdogp6cdmfw"},{"post_id":"cl9gotsgg003itpdo3x5mfphc","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshg007rtpdofgtqexvt"},{"post_id":"cl9gotsgi003ktpdodkc0ftzd","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshh007wtpdo2v54hf97"},{"post_id":"cl9gotsgj003ptpdoevk5e3ka","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshi0080tpdo6o1bcj9c"},{"post_id":"cl9gotsgk003rtpdobat845gs","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshi0085tpdo7k128gej"},{"post_id":"cl9gotsgl003wtpdoh2dlhv5j","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshj008atpdo4yd61uwt"},{"post_id":"cl9gotsgm003ytpdo63pkd018","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshk008ftpdoeo401f0o"},{"post_id":"cl9gotsgn0042tpdogczo8e4r","tag_id":"cl9gotshd007etpdodq6vaok5","_id":"cl9gotshk008ktpdo5z8x6i3o"},{"post_id":"cl9gotsgt004etpdobck07whi","tag_id":"cl9gotshk008itpdoddxu1w7p","_id":"cl9gotshl008ptpdo7duhc8pw"},{"post_id":"cl9gotsgt004gtpdoe8n8h7ju","tag_id":"cl9gotshk008itpdoddxu1w7p","_id":"cl9gotshm008utpdog1mi8v2o"},{"post_id":"cl9gotsgu004ktpdoasj054vq","tag_id":"cl9gotshk008itpdoddxu1w7p","_id":"cl9gotshm008ytpdo4sfo2jnq"},{"post_id":"cl9gotsgv004mtpdoh1fgddw4","tag_id":"cl9gotshk008itpdoddxu1w7p","_id":"cl9gotshn0092tpdo6awu47mw"},{"post_id":"cl9gotsgw004qtpdo0acb1vl8","tag_id":"cl9gotshk008itpdoddxu1w7p","_id":"cl9gotshn0093tpdo37no05fx"}],"Tag":[{"name":"RocketMQ","_id":"cl9gotsey0005tpdo77d371cy"},{"name":"docker","_id":"cl9gotsf1000atpdohcye8ziw"},{"name":"gitlab","_id":"cl9gotsf6000ntpdo30sscbdm"},{"name":"redis","_id":"cl9gotsf9000ttpdoed5h6hqi"},{"name":"httpd","_id":"cl9gotsfb0010tpdo2svgdpkz"},{"name":"goroutine","_id":"cl9gotsfd0016tpdo7vh2hknv"},{"name":"go","_id":"cl9gotsff001ctpdo6bjqbzot"},{"name":"hexo","_id":"cl9gotsfh001htpdob1dea2vf"},{"name":"fluid","_id":"cl9gotsfj001otpdo7ah47la7"},{"name":"安装","_id":"cl9gotsfw001vtpdohl65e415"},{"name":"CSA","_id":"cl9gotsfy0020tpdodjpd938b"},{"name":"k8s","_id":"cl9gotsg00029tpdoe5ww13as"},{"name":"kind","_id":"cl9gotsg2002gtpdogzxqa9vr"},{"name":"ingress-nginx","_id":"cl9gotsg6002ttpdo8l7m1meq"},{"name":"ccache","_id":"cl9gotsgt004dtpdo69947ru9"},{"name":"kkFileView","_id":"cl9gotsgu004jtpdo3td12yt2"},{"name":"minio","_id":"cl9gotsgw004ptpdodeabhgem"},{"name":"nodejs","_id":"cl9gotsgy004utpdo383odrwo"},{"name":"vscode","_id":"cl9gotsgz004xtpdo5y4w0c05"},{"name":"linux","_id":"cl9gotsgz0050tpdo5ckx2ufw"},{"name":"harbor","_id":"cl9gotsh5005wtpdo8lel4ucw"},{"name":"drone","_id":"cl9gotsh60061tpdod03qhnh9"},{"name":"atomic","_id":"cl9gotshb006xtpdodkzlbvw3"},{"name":"sync","_id":"cl9gotshc0073tpdoavrz35ay"},{"name":"RabbitMQ","_id":"cl9gotshd007etpdodq6vaok5"},{"name":"golang","_id":"cl9gotshk008itpdoddxu1w7p"}]}}